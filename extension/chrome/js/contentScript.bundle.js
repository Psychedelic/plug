/* tslint:disable */

/* -------------------------------------------------- */

/*      Start of Webpack Hot Extension Middleware     */

/* ================================================== */

/*  This will be converted into a lodash templ., any  */

/*  external argument must be provided using it       */

/* -------------------------------------------------- */
(function (window) {
  var injectionContext = {
    browser: null
  };
  (function () {
    ""||(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define("webextension-polyfill", ["module"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod);
    global.browser = mod.exports;
  }
})(this, function (module) {
  /* webextension-polyfill - v0.5.0 - Thu Sep 26 2019 22:22:26 */
  /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */
  /* vim: set sts=2 sw=2 et tw=80: */
  /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
  "use strict";

  if (typeof browser === "undefined" || Object.getPrototypeOf(browser) !== Object.prototype) {
    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received.";
    const SEND_RESPONSE_DEPRECATION_WARNING = "Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)";

    // Wrapping the bulk of this polyfill in a one-time-use function is a minor
    // optimization for Firefox. Since Spidermonkey does not fully parse the
    // contents of a function until the first time it's called, and since it will
    // never actually need to be called, this allows the polyfill to be included
    // in Firefox nearly for free.
    const wrapAPIs = extensionAPIs => {
      // NOTE: apiMetadata is associated to the content of the api-metadata.json file
      // at build time by replacing the following "include" with the content of the
      // JSON file.
      const apiMetadata = {
        "alarms": {
          "clear": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "clearAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "get": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "bookmarks": {
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getChildren": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getRecent": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getSubTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTree": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "browserAction": {
          "disable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "enable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "getBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getBadgeText": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "openPopup": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setBadgeText": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "browsingData": {
          "remove": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "removeCache": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCookies": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeDownloads": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFormData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeHistory": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeLocalStorage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePasswords": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePluginData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "settings": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "commands": {
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "contextMenus": {
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "cookies": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAllCookieStores": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "set": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "devtools": {
          "inspectedWindow": {
            "eval": {
              "minArgs": 1,
              "maxArgs": 2,
              "singleCallbackArg": false
            }
          },
          "panels": {
            "create": {
              "minArgs": 3,
              "maxArgs": 3,
              "singleCallbackArg": true
            }
          }
        },
        "downloads": {
          "cancel": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "download": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "erase": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFileIcon": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "open": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "pause": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFile": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "resume": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "extension": {
          "isAllowedFileSchemeAccess": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "isAllowedIncognitoAccess": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "history": {
          "addUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "deleteRange": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getVisits": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "i18n": {
          "detectLanguage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAcceptLanguages": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "identity": {
          "launchWebAuthFlow": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "idle": {
          "queryState": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "management": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getSelf": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setEnabled": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "uninstallSelf": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "notifications": {
          "clear": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPermissionLevel": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "pageAction": {
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "hide": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "permissions": {
          "contains": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "request": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "runtime": {
          "getBackgroundPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPlatformInfo": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "openOptionsPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "requestUpdateCheck": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "sendMessage": {
            "minArgs": 1,
            "maxArgs": 3
          },
          "sendNativeMessage": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "setUninstallURL": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "sessions": {
          "getDevices": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getRecentlyClosed": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "restore": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "storage": {
          "local": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          },
          "managed": {
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            }
          },
          "sync": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          }
        },
        "tabs": {
          "captureVisibleTab": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "detectLanguage": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "discard": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "duplicate": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "executeScript": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getZoom": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getZoomSettings": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "highlight": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "insertCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "query": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "reload": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "sendMessage": {
            "minArgs": 2,
            "maxArgs": 3
          },
          "setZoom": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "setZoomSettings": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "update": {
            "minArgs": 1,
            "maxArgs": 2
          }
        },
        "topSites": {
          "get": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "webNavigation": {
          "getAllFrames": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFrame": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "webRequest": {
          "handlerBehaviorChanged": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "windows": {
          "create": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getLastFocused": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        }
      };

      if (Object.keys(apiMetadata).length === 0) {
        throw new Error("api-metadata.json has not been included in browser-polyfill");
      }

      /**
       * A WeakMap subclass which creates and stores a value for any key which does
       * not exist when accessed, but behaves exactly as an ordinary WeakMap
       * otherwise.
       *
       * @param {function} createItem
       *        A function which will be called in order to create the value for any
       *        key which does not exist, the first time it is accessed. The
       *        function receives, as its only argument, the key being created.
       */
      class DefaultWeakMap extends WeakMap {
        constructor(createItem, items = undefined) {
          super(items);
          this.createItem = createItem;
        }

        get(key) {
          if (!this.has(key)) {
            this.set(key, this.createItem(key));
          }

          return super.get(key);
        }
      }

      /**
       * Returns true if the given object is an object with a `then` method, and can
       * therefore be assumed to behave as a Promise.
       *
       * @param {*} value The value to test.
       * @returns {boolean} True if the value is thenable.
       */
      const isThenable = value => {
        return value && typeof value === "object" && typeof value.then === "function";
      };

      /**
       * Creates and returns a function which, when called, will resolve or reject
       * the given promise based on how it is called:
       *
       * - If, when called, `chrome.runtime.lastError` contains a non-null object,
       *   the promise is rejected with that value.
       * - If the function is called with exactly one argument, the promise is
       *   resolved to that value.
       * - Otherwise, the promise is resolved to an array containing all of the
       *   function's arguments.
       *
       * @param {object} promise
       *        An object containing the resolution and rejection functions of a
       *        promise.
       * @param {function} promise.resolve
       *        The promise's resolution function.
       * @param {function} promise.rejection
       *        The promise's rejection function.
       * @param {object} metadata
       *        Metadata about the wrapped method which has created the callback.
       * @param {integer} metadata.maxResolvedArgs
       *        The maximum number of arguments which may be passed to the
       *        callback created by the wrapped async function.
       *
       * @returns {function}
       *        The generated callback function.
       */
      const makeCallback = (promise, metadata) => {
        return (...callbackArgs) => {
          if (extensionAPIs.runtime.lastError) {
            promise.reject(extensionAPIs.runtime.lastError);
          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
            promise.resolve(callbackArgs[0]);
          } else {
            promise.resolve(callbackArgs);
          }
        };
      };

      const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";

      /**
       * Creates a wrapper function for a method with the given name and metadata.
       *
       * @param {string} name
       *        The name of the method which is being wrapped.
       * @param {object} metadata
       *        Metadata about the method being wrapped.
       * @param {integer} metadata.minArgs
       *        The minimum number of arguments which must be passed to the
       *        function. If called with fewer than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxArgs
       *        The maximum number of arguments which may be passed to the
       *        function. If called with more than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxResolvedArgs
       *        The maximum number of arguments which may be passed to the
       *        callback created by the wrapped async function.
       *
       * @returns {function(object, ...*)}
       *       The generated wrapper function.
       */
      const wrapAsyncFunction = (name, metadata) => {
        return function asyncFunctionWrapper(target, ...args) {
          if (args.length < metadata.minArgs) {
            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
          }

          if (args.length > metadata.maxArgs) {
            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
          }

          return new Promise((resolve, reject) => {
            if (metadata.fallbackToNoCallback) {
              // This API method has currently no callback on Chrome, but it return a promise on Firefox,
              // and so the polyfill will try to call it with a callback first, and it will fallback
              // to not passing the callback if the first call fails.
              try {
                target[name](...args, makeCallback({ resolve, reject }, metadata));
              } catch (cbError) {
                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);

                target[name](...args);

                // Update the API method metadata, so that the next API calls will not try to
                // use the unsupported callback anymore.
                metadata.fallbackToNoCallback = false;
                metadata.noCallback = true;

                resolve();
              }
            } else if (metadata.noCallback) {
              target[name](...args);
              resolve();
            } else {
              target[name](...args, makeCallback({ resolve, reject }, metadata));
            }
          });
        };
      };

      /**
       * Wraps an existing method of the target object, so that calls to it are
       * intercepted by the given wrapper function. The wrapper function receives,
       * as its first argument, the original `target` object, followed by each of
       * the arguments passed to the original method.
       *
       * @param {object} target
       *        The original target object that the wrapped method belongs to.
       * @param {function} method
       *        The method being wrapped. This is used as the target of the Proxy
       *        object which is created to wrap the method.
       * @param {function} wrapper
       *        The wrapper function which is called in place of a direct invocation
       *        of the wrapped method.
       *
       * @returns {Proxy<function>}
       *        A Proxy object for the given method, which invokes the given wrapper
       *        method in its place.
       */
      const wrapMethod = (target, method, wrapper) => {
        return new Proxy(method, {
          apply(targetMethod, thisObj, args) {
            return wrapper.call(thisObj, target, ...args);
          }
        });
      };

      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);

      /**
       * Wraps an object in a Proxy which intercepts and wraps certain methods
       * based on the given `wrappers` and `metadata` objects.
       *
       * @param {object} target
       *        The target object to wrap.
       *
       * @param {object} [wrappers = {}]
       *        An object tree containing wrapper functions for special cases. Any
       *        function present in this object tree is called in place of the
       *        method in the same location in the `target` object tree. These
       *        wrapper methods are invoked as described in {@see wrapMethod}.
       *
       * @param {object} [metadata = {}]
       *        An object tree containing metadata used to automatically generate
       *        Promise-based wrapper functions for asynchronous. Any function in
       *        the `target` object tree which has a corresponding metadata object
       *        in the same location in the `metadata` tree is replaced with an
       *        automatically-generated wrapper function, as described in
       *        {@see wrapAsyncFunction}
       *
       * @returns {Proxy<object>}
       */
      const wrapObject = (target, wrappers = {}, metadata = {}) => {
        let cache = Object.create(null);
        let handlers = {
          has(proxyTarget, prop) {
            return prop in target || prop in cache;
          },

          get(proxyTarget, prop, receiver) {
            if (prop in cache) {
              return cache[prop];
            }

            if (!(prop in target)) {
              return undefined;
            }

            let value = target[prop];

            if (typeof value === "function") {
              // This is a method on the underlying object. Check if we need to do
              // any wrapping.

              if (typeof wrappers[prop] === "function") {
                // We have a special-case wrapper for this method.
                value = wrapMethod(target, target[prop], wrappers[prop]);
              } else if (hasOwnProperty(metadata, prop)) {
                // This is an async method that we have metadata for. Create a
                // Promise wrapper for it.
                let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                value = wrapMethod(target, target[prop], wrapper);
              } else {
                // This is a method that we don't know or care about. Return the
                // original method, bound to the underlying object.
                value = value.bind(target);
              }
            } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
              // This is an object that we need to do some wrapping for the children
              // of. Create a sub-object wrapper for it with the appropriate child
              // metadata.
              value = wrapObject(value, wrappers[prop], metadata[prop]);
            } else {
              // We don't need to do any wrapping for this property,
              // so just forward all access to the underlying object.
              Object.defineProperty(cache, prop, {
                configurable: true,
                enumerable: true,
                get() {
                  return target[prop];
                },
                set(value) {
                  target[prop] = value;
                }
              });

              return value;
            }

            cache[prop] = value;
            return value;
          },

          set(proxyTarget, prop, value, receiver) {
            if (prop in cache) {
              cache[prop] = value;
            } else {
              target[prop] = value;
            }
            return true;
          },

          defineProperty(proxyTarget, prop, desc) {
            return Reflect.defineProperty(cache, prop, desc);
          },

          deleteProperty(proxyTarget, prop) {
            return Reflect.deleteProperty(cache, prop);
          }
        };

        // Per contract of the Proxy API, the "get" proxy handler must return the
        // original value of the target if that value is declared read-only and
        // non-configurable. For this reason, we create an object with the
        // prototype set to `target` instead of using `target` directly.
        // Otherwise we cannot return a custom object for APIs that
        // are declared read-only and non-configurable, such as `chrome.devtools`.
        //
        // The proxy handlers themselves will still use the original `target`
        // instead of the `proxyTarget`, so that the methods and properties are
        // dereferenced via the original targets.
        let proxyTarget = Object.create(target);
        return new Proxy(proxyTarget, handlers);
      };

      /**
       * Creates a set of wrapper functions for an event object, which handles
       * wrapping of listener functions that those messages are passed.
       *
       * A single wrapper is created for each listener function, and stored in a
       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
       * retrieve the original wrapper, so that  attempts to remove a
       * previously-added listener work as expected.
       *
       * @param {DefaultWeakMap<function, function>} wrapperMap
       *        A DefaultWeakMap object which will create the appropriate wrapper
       *        for a given listener function when one does not exist, and retrieve
       *        an existing one when it does.
       *
       * @returns {object}
       */
      const wrapEvent = wrapperMap => ({
        addListener(target, listener, ...args) {
          target.addListener(wrapperMap.get(listener), ...args);
        },

        hasListener(target, listener) {
          return target.hasListener(wrapperMap.get(listener));
        },

        removeListener(target, listener) {
          target.removeListener(wrapperMap.get(listener));
        }
      });

      // Keep track if the deprecation warning has been logged at least once.
      let loggedSendResponseDeprecationWarning = false;

      const onMessageWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }

        /**
         * Wraps a message listener function so that it may send responses based on
         * its return value, rather than by returning a sentinel value and calling a
         * callback. If the listener function returns a Promise, the response is
         * sent when the promise either resolves or rejects.
         *
         * @param {*} message
         *        The message sent by the other end of the channel.
         * @param {object} sender
         *        Details about the sender of the message.
         * @param {function(*)} sendResponse
         *        A callback which, when called with an arbitrary argument, sends
         *        that value as a response.
         * @returns {boolean}
         *        True if the wrapped listener returned a Promise, which will later
         *        yield a response. False otherwise.
         */
        return function onMessage(message, sender, sendResponse) {
          let didCallSendResponse = false;

          let wrappedSendResponse;
          let sendResponsePromise = new Promise(resolve => {
            wrappedSendResponse = function (response) {
              if (!loggedSendResponseDeprecationWarning) {
                console.warn(SEND_RESPONSE_DEPRECATION_WARNING, new Error().stack);
                loggedSendResponseDeprecationWarning = true;
              }
              didCallSendResponse = true;
              resolve(response);
            };
          });

          let result;
          try {
            result = listener(message, sender, wrappedSendResponse);
          } catch (err) {
            result = Promise.reject(err);
          }

          const isResultThenable = result !== true && isThenable(result);

          // If the listener didn't returned true or a Promise, or called
          // wrappedSendResponse synchronously, we can exit earlier
          // because there will be no response sent from this listener.
          if (result !== true && !isResultThenable && !didCallSendResponse) {
            return false;
          }

          // A small helper to send the message if the promise resolves
          // and an error if the promise rejects (a wrapped sendMessage has
          // to translate the message into a resolved promise or a rejected
          // promise).
          const sendPromisedResult = promise => {
            promise.then(msg => {
              // send the message value.
              sendResponse(msg);
            }, error => {
              // Send a JSON representation of the error if the rejected value
              // is an instance of error, or the object itself otherwise.
              let message;
              if (error && (error instanceof Error || typeof error.message === "string")) {
                message = error.message;
              } else {
                message = "An unexpected error occurred";
              }

              sendResponse({
                __mozWebExtensionPolyfillReject__: true,
                message
              });
            }).catch(err => {
              // Print an error on the console if unable to send the response.
              console.error("Failed to send onMessage rejected reply", err);
            });
          };

          // If the listener returned a Promise, send the resolved value as a
          // result, otherwise wait the promise related to the wrappedSendResponse
          // callback to resolve and send it as a response.
          if (isResultThenable) {
            sendPromisedResult(result);
          } else {
            sendPromisedResult(sendResponsePromise);
          }

          // Let Chrome know that the listener is replying.
          return true;
        };
      });

      const wrappedSendMessageCallback = ({ reject, resolve }, reply) => {
        if (extensionAPIs.runtime.lastError) {
          // Detect when none of the listeners replied to the sendMessage call and resolve
          // the promise to undefined as in Firefox.
          // See https://github.com/mozilla/webextension-polyfill/issues/130
          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
            resolve();
          } else {
            reject(extensionAPIs.runtime.lastError);
          }
        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
          // Convert back the JSON representation of the error into
          // an Error instance.
          reject(new Error(reply.message));
        } else {
          resolve(reply);
        }
      };

      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
        if (args.length < metadata.minArgs) {
          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
        }

        if (args.length > metadata.maxArgs) {
          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
        }

        return new Promise((resolve, reject) => {
          const wrappedCb = wrappedSendMessageCallback.bind(null, { resolve, reject });
          args.push(wrappedCb);
          apiNamespaceObj.sendMessage(...args);
        });
      };

      const staticWrappers = {
        runtime: {
          onMessage: wrapEvent(onMessageWrappers),
          onMessageExternal: wrapEvent(onMessageWrappers),
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", { minArgs: 1, maxArgs: 3 })
        },
        tabs: {
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", { minArgs: 2, maxArgs: 3 })
        }
      };
      const settingMetadata = {
        clear: { minArgs: 1, maxArgs: 1 },
        get: { minArgs: 1, maxArgs: 1 },
        set: { minArgs: 1, maxArgs: 1 }
      };
      apiMetadata.privacy = {
        network: {
          networkPredictionEnabled: settingMetadata,
          webRTCIPHandlingPolicy: settingMetadata
        },
        services: {
          passwordSavingEnabled: settingMetadata
        },
        websites: {
          hyperlinkAuditingEnabled: settingMetadata,
          referrersEnabled: settingMetadata
        }
      };

      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
    };

    if (typeof chrome != "object" || !chrome || !chrome.runtime || !chrome.runtime.id) {
      throw new Error("This script should only be loaded in a browser extension.");
    }

    // The build process adds a UMD wrapper around this file, which makes the
    // `module` variable available.
    module.exports = wrapAPIs(chrome);
  } else {
    module.exports = browser;
  }
});
//# sourceMappingURL=browser-polyfill.js.map
"";
  }).bind(injectionContext)();
  var browser = injectionContext.browser;
  var signals = JSON.parse('{"SIGN_CHANGE":"SIGN_CHANGE","SIGN_RELOAD":"SIGN_RELOAD","SIGN_RELOADED":"SIGN_RELOADED","SIGN_LOG":"SIGN_LOG","SIGN_CONNECT":"SIGN_CONNECT"}');
  var config = JSON.parse('{"RECONNECT_INTERVAL":2000,"SOCKET_ERR_CODE_REF":"https://tools.ietf.org/html/rfc6455#section-7.4.1"}');
  var reloadPage = "true" === "true";
  var wsHost = "ws://localhost:9090";
  var SIGN_CHANGE = signals.SIGN_CHANGE,
      SIGN_RELOAD = signals.SIGN_RELOAD,
      SIGN_RELOADED = signals.SIGN_RELOADED,
      SIGN_LOG = signals.SIGN_LOG,
      SIGN_CONNECT = signals.SIGN_CONNECT;
  var RECONNECT_INTERVAL = config.RECONNECT_INTERVAL,
      SOCKET_ERR_CODE_REF = config.SOCKET_ERR_CODE_REF;
  var extension = browser.extension,
      runtime = browser.runtime,
      tabs = browser.tabs;
  var manifest = runtime.getManifest(); // =============================== Helper functions ======================================= //

  var formatter = function formatter(msg) {
    return "[ WER: ".concat(msg, " ]");
  };

  var logger = function logger(msg) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "info";
    return console[level](formatter(msg));
  };

  var timeFormatter = function timeFormatter(date) {
    return date.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
  }; // ========================== Called only on content scripts ============================== //


  function contentScriptWorker() {
    runtime.sendMessage({
      type: SIGN_CONNECT
    }).then(function (msg) {
      return console.info(msg);
    });
    runtime.onMessage.addListener(function (_ref) {
      var type = _ref.type,
          payload = _ref.payload;

      switch (type) {
        case SIGN_RELOAD:
          logger("Detected Changes. Reloading ...");
          reloadPage && window.location.reload();
          break;

        case SIGN_LOG:
          console.info(payload);
          break;
      }
    });
  } // ======================== Called only on background scripts ============================= //


  function backgroundWorker(socket) {
    runtime.onMessage.addListener(function (action, sender) {
      if (action.type === SIGN_CONNECT) {
        return Promise.resolve(formatter("Connected to Extension Hot Reloader"));
      }

      return true;
    });
    socket.addEventListener("message", function (_ref2) {
      var data = _ref2.data;

      var _JSON$parse = JSON.parse(data),
          type = _JSON$parse.type,
          payload = _JSON$parse.payload;

      if (type === SIGN_CHANGE && (!payload || !payload.onlyPageChanged)) {
        tabs.query({
          status: "complete"
        }).then(function (loadedTabs) {
          loadedTabs.forEach(function (tab) {
            return tab.id && tabs.sendMessage(tab.id, {
              type: SIGN_RELOAD
            });
          });
          socket.send(JSON.stringify({
            type: SIGN_RELOADED,
            payload: formatter("".concat(timeFormatter(new Date()), " - ").concat(manifest.name, " successfully reloaded"))
          }));
          runtime.reload();
        });
      } else {
        runtime.sendMessage({
          type: type,
          payload: payload
        });
      }
    });
    socket.addEventListener("close", function (_ref3) {
      var code = _ref3.code;
      logger("Socket connection closed. Code ".concat(code, ". See more in ").concat(SOCKET_ERR_CODE_REF), "warn");
      var intId = setInterval(function () {
        logger("Attempting to reconnect (tip: Check if Webpack is running)");
        var ws = new WebSocket(wsHost);

        ws.onerror = function () {
          return logger("Error trying to re-connect. Reattempting in ".concat(RECONNECT_INTERVAL / 1000, "s"), "warn");
        };

        ws.addEventListener("open", function () {
          clearInterval(intId);
          logger("Reconnected. Reloading plugin");
          runtime.reload();
        });
      }, RECONNECT_INTERVAL);
    });
  } // ======================== Called only on extension pages that are not the background ============================= //


  function extensionPageWorker() {
    runtime.sendMessage({
      type: SIGN_CONNECT
    }).then(function (msg) {
      return console.info(msg);
    });
    runtime.onMessage.addListener(function (_ref4) {
      var type = _ref4.type,
          payload = _ref4.payload;

      switch (type) {
        case SIGN_CHANGE:
          logger("Detected Changes. Reloading ...");
          reloadPage && window.location.reload();
          break;

        case SIGN_LOG:
          console.info(payload);
          break;
      }
    });
  } // ======================= Bootstraps the middleware =========================== //


  runtime.reload ? extension.getBackgroundPage() === window ? backgroundWorker(new WebSocket(wsHost)) : extensionPageWorker() : contentScriptWorker();
})(window);
/* ----------------------------------------------- */

/* End of Webpack Hot Extension Middleware  */

/* ----------------------------------------------- *//******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./source/scripts/ContentScript/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/BackgroundController.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/BackgroundController.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js");
var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};





var BackgroundController = function () {
  function BackgroundController(config) {
    this.trustedSources = [];
    this.ports = new Map();
    this.controllers = new Map();
    var controllers = config.controllers,
        trustedSources = config.trustedSources;
    this.name = config.name;

    if (typeof trustedSources === 'string') {
      this.trustedSources = [trustedSources];
    } else if (Array.isArray(trustedSources)) {
      this.trustedSources = trustedSources;
    }

    if (controllers) {
      for (var _i = 0, _a = Object.entries(controllers); _i < _a.length; _i++) {
        var _b = _a[_i],
            name_1 = _b[0],
            controller = _b[1];
        this.controllers.set(name_1, controller);
      }
    }

    this.onTabRemoved = this.onTabRemoved.bind(this);
    this.onPortMessage = this.onPortMessage.bind(this);
    this.onConnectListener = this.onConnectListener.bind(this);
  }

  BackgroundController.prototype.exposeController = function (name, controller) {
    this.controllers.set(name, controller);
  };

  BackgroundController.prototype.removeController = function (name) {
    return this.controllers.delete(name);
  };

  BackgroundController.prototype.callController = function (message, port) {
    var _a, _b, _c;

    var method = message.data.data.method;
    var controller = this.controllers.get(method);

    if (!controller) {
      console.error("controller \"" + method + "\" does not exist");
      var errMessage = {
        target: port.name,
        data: {
          name: this.name,
          data: {
            id: message.data.data.id,
            jsonrpc: '2.0',
            error: {
              code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].METHOD_NOT_FOUND,
              message: "Method " + message.data.data.method + " does not exist"
            }
          }
        }
      };
      port.postMessage(errMessage);
      return;
    }

    var tabId = ((_b = (_a = port.sender) === null || _a === void 0 ? void 0 : _a.tab) === null || _b === void 0 ? void 0 : _b.id) || 0;
    var frameId = ((_c = port.sender) === null || _c === void 0 ? void 0 : _c.frameId) || 0;
    var portId = tabId + ":" + frameId;
    controller.apply(void 0, __spreadArray([{
      message: message,
      callback: this.sendPortResponse.bind(this, port, message.data.data.id),
      ports: this.ports,
      sender: {
        port: port,
        tabId: tabId,
        frameId: frameId,
        id: portId,
        name: port.name
      }
    }], message.data.data.params));
  };

  BackgroundController.prototype.sendPortResponse = function (port, callId, err, res, targetPorts) {
    var _this = this;

    if (!targetPorts) {
      var resMessage = this.buildResMessage(port.name, this.name, callId, err, res);
      port.postMessage(resMessage);
      return;
    }

    targetPorts.forEach(function (targetPort) {
      var _port = _this.ports.get(targetPort.portId);

      if (_port) {
        var resMessage = _this.buildResMessage(_port.name, _this.name, targetPort.callId, err, res);

        _port.postMessage(resMessage);
      }
    });
  };

  BackgroundController.prototype.buildResMessage = function (target, name, id, err, res) {
    var resMessage = {
      target: target,
      data: {
        name: name,
        data: __assign({
          id: id,
          jsonrpc: '2.0'
        }, err ? {
          error: err
        } : {
          result: res
        })
      }
    };
    return resMessage;
  };

  BackgroundController.prototype.sendResponse = function (message) {
    var _this = this;

    var targetPorts = message.targetPorts,
        rpcResponse = __rest(message, ["targetPorts"]);

    var portsIds = [];

    if (typeof targetPorts === 'string') {
      portsIds = [targetPorts];
    } else if (Array.isArray(targetPorts)) {
      portsIds = targetPorts;
    }

    portsIds.forEach(function (portId) {
      var port = _this.ports.get(portId);

      if (port) {
        port.postMessage(rpcResponse);
      }
    });
  };

  BackgroundController.prototype.onPortMessage = function (message, port) {
    var _a = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["validateMessageSchema"])(message),
        type = _a.type,
        isValid = _a.isValid;

    if (!isValid) {
      console.error('port message not valid', message);
      return;
    }

    switch (type) {
      case 'req':
        this.callController(message, port);
        break;

      case 'res':
        this.sendResponse(message);
        break;
    }
  };

  BackgroundController.prototype.onConnectListener = function (port) {
    var _a, _b, _c;

    if (!this.trustedSources.includes(port.name)) {
      console.error("Port " + port.name + " not allowed");
      return;
    }

    ;
    this.updatePorts();
    var tabId = (_b = (_a = port.sender) === null || _a === void 0 ? void 0 : _a.tab) === null || _b === void 0 ? void 0 : _b.id;
    var frameId = ((_c = port.sender) === null || _c === void 0 ? void 0 : _c.frameId) || 0;

    if (tabId === undefined || tabId === null) {
      console.error('Port does not contain a valid tabId');
      return;
    }

    ;
    var portId = tabId + ":" + frameId;
    this.ports.set(portId, port);
    port.onMessage.addListener(this.onPortMessage);
  };

  BackgroundController.prototype.onTabRemoved = function (tabId) {
    var _this = this;

    var regexp = new RegExp("^" + tabId + ":", 'i');
    this.ports.forEach(function (port, key) {
      if (regexp.test(key)) {
        port.disconnect();

        _this.ports.delete(key);
      }
    });
  };

  BackgroundController.prototype.updatePorts = function () {
    var _this = this;

    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.tabs.query({}, function (tabs) {
      var tabsIds = tabs.map(function (tab) {
        return tab.id;
      });

      _this.ports.forEach(function (port, key) {
        var tabId = parseInt(key.split(':')[0], 10);

        if (!tabsIds.includes(tabId)) {
          port.disconnect();

          _this.ports.delete(key);
        }
      });
    });
  };

  BackgroundController.prototype.start = function () {
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.onConnect.addListener(this.onConnectListener);
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.tabs.onRemoved.addListener(this.onTabRemoved);
  };

  BackgroundController.prototype.stop = function () {
    this.ports.forEach(function (port) {
      port.disconnect();
    });
    this.ports.clear();
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.onConnect.removeListener(this.onConnectListener);
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.tabs.onRemoved.removeListener(this.onTabRemoved);
  };

  return BackgroundController;
}();

/* harmony default export */ __webpack_exports__["default"] = (BackgroundController);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/BrowserRPC.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/BrowserRPC.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();



var BrowserRPC = function (_super) {
  __extends(BrowserRPC, _super);

  function BrowserRPC(win, config) {
    var _this = _super.call(this, config) || this;

    _this.win = win;
    _this.receiveMessage = _this.receiveMessage.bind(_this);
    return _this;
  }

  BrowserRPC.prototype.sendMessage = function (message) {
    this.win.postMessage(message, '*');
  };

  BrowserRPC.prototype.receiveMessage = function (event) {
    _super.prototype.onMessage.call(this, event.data);
  };

  BrowserRPC.prototype.start = function () {
    this.win.addEventListener('message', this.receiveMessage);
  };

  BrowserRPC.prototype.stop = function () {
    _super.prototype.stop.call(this);

    this.win.removeEventListener('message', this.receiveMessage);
  };

  return BrowserRPC;
}(_RPC__WEBPACK_IMPORTED_MODULE_0__["default"]);

;
/* harmony default export */ __webpack_exports__["default"] = (BrowserRPC);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/PortRPC.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/PortRPC.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();




var PortRPC = function (_super) {
  __extends(PortRPC, _super);

  function PortRPC(config) {
    var _this = _super.call(this, config) || this;

    _this.port = undefined;
    _this.receiveMessage = _this.receiveMessage.bind(_this);
    return _this;
  }

  PortRPC.prototype.sendMessage = function (message) {
    if (this.port) {
      this.port.postMessage(message);
    }
  };

  PortRPC.prototype.receiveMessage = function (message) {
    _super.prototype.onMessage.call(this, message);
  };

  PortRPC.prototype.start = function () {
    this.port = extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.connect({
      name: this.name
    });

    if (this.port) {
      this.port.onMessage.addListener(this.receiveMessage);
    }
  };

  PortRPC.prototype.stop = function () {
    _super.prototype.stop.call(this);

    if (this.port) {
      this.port.onMessage.removeListener(this.receiveMessage);
    }
  };

  return PortRPC;
}(_RPC__WEBPACK_IMPORTED_MODULE_1__["default"]);

;
/* harmony default export */ __webpack_exports__["default"] = (PortRPC);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/ProxyRPC.js":
/*!********************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/ProxyRPC.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};





var ProxyRPC = function (_super) {
  __extends(ProxyRPC, _super);

  function ProxyRPC(win, config) {
    var _this = _super.call(this, config) || this;

    _this.port = undefined;
    _this.win = win;
    _this.proxyResponse = _this.proxyResponse.bind(_this);
    _this.receiveMessage = _this.receiveMessage.bind(_this);
    return _this;
  }

  ProxyRPC.prototype.proxyResponse = function (resMessage) {
    resMessage.target = this.target;
    resMessage.data.name = this.name;
    this.sendMessage(resMessage);
  };

  ProxyRPC.prototype.sendPortMessage = function (message) {
    if (this.port) {
      this.port.postMessage(message);
    }
  };

  ProxyRPC.prototype.sendMessage = function (message) {
    this.win.postMessage(message, '*');
  };

  ProxyRPC.prototype.receiveMessage = function (event) {
    _super.prototype.onMessage.call(this, event.data);
  };

  ProxyRPC.prototype.onRequestMessage = function (message) {
    var _this = this;

    var resMessage = {
      target: this.target,
      data: {
        name: this.name,
        data: {
          id: message.data.data.id,
          jsonrpc: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_VERSION"]
        }
      }
    };

    try {
      var handler = this.handlers.get(message.data.data.method);

      if (!handler) {
        this.sendPortMessage(message);
        return;
      }

      var callback = function (err, res) {
        if (err) {
          resMessage.data.data.error = err;

          _this.sendMessage(resMessage);

          return;
        }

        resMessage.data.data.result = res;

        _this.sendMessage(resMessage);
      };

      handler.apply(void 0, __spreadArray([{
        callback: callback,
        message: message
      }], message.data.data.params));
    } catch (error) {
      if (resMessage.data.data.hasOwnProperty('error')) return;
      if (resMessage.data.data.hasOwnProperty('result')) return;
      resMessage.data.data.error = {
        code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].SERVER_ERROR,
        message: error.toString()
      };
      this.sendMessage(resMessage);
    }

    ;
  };

  ProxyRPC.prototype.start = function () {
    this.win.addEventListener('message', this.receiveMessage);
    this.port = extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.connect({
      name: this.name
    });

    if (this.port) {
      this.port.onMessage.addListener(this.proxyResponse);
    }
  };

  ProxyRPC.prototype.stop = function () {
    _super.prototype.stop.call(this);

    this.win.removeEventListener('message', this.receiveMessage);

    if (this.port) {
      this.port.onMessage.removeListener(this.proxyResponse);
    }
  };

  return ProxyRPC;
}(_RPC__WEBPACK_IMPORTED_MODULE_1__["default"]);

;
/* harmony default export */ __webpack_exports__["default"] = (ProxyRPC);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js":
/*!***************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = undefined && undefined.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};





var RPC = function () {
  function RPC(config) {
    this.timeout = 5000;
    this.handlers = new Map();
    this.calls = new Map();
    this.name = config.name;
    this.target = config.target;

    if (config.timeout) {
      this.timeout = config.timeout;
    }

    if (config.handlers) {
      for (var _i = 0, _a = Object.entries(config.handlers); _i < _a.length; _i++) {
        var _b = _a[_i],
            name_1 = _b[0],
            handler = _b[1];
        this.handlers.set(name_1, handler);
      }
    }
  }

  ;

  RPC.prototype.exposeHandler = function (name, handler) {
    this.handlers.set(name, handler);
  };

  RPC.prototype.removeHandler = function (name) {
    return this.handlers.delete(name);
  };

  RPC.prototype._call = function (handler, target, timeout, args) {
    return __awaiter(this, void 0, void 0, function () {
      var id, message;

      var _this = this;

      return __generator(this, function (_a) {
        id = Object(uuid__WEBPACK_IMPORTED_MODULE_0__["v4"])();
        message = {
          target: target,
          data: {
            name: this.name,
            data: {
              id: id,
              jsonrpc: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_VERSION"],
              method: handler,
              params: args
            }
          }
        };
        return [2, new Promise(function (resolve, reject) {
          var resolver = function (err, res) {
            if (err) {
              reject(new Error(err.message));
              return;
            }

            resolve(res);
          };

          var timer;

          if (timeout > 0) {
            timer = setTimeout(function () {
              if (_this.calls.has(id)) {
                _this.calls.delete(id);

                resolver({
                  code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].TIMEOUT_ERROR,
                  message: 'Request Timeout'
                });
              }
            }, timeout);
          }

          ;

          _this.calls.set(id, {
            resolver: resolver,
            timer: timer
          });

          _this.sendMessage(message);
        })];
      });
    });
  };

  RPC.prototype.call = function (handler, args, config) {
    return __awaiter(this, void 0, void 0, function () {
      var timeout;
      return __generator(this, function (_a) {
        timeout = this.timeout;

        if (config && typeof config.timeout === 'number') {
          timeout = config.timeout;
        }

        return [2, this._call(handler, (config === null || config === void 0 ? void 0 : config.target) || this.target, timeout, args || [])];
      });
    });
  };

  RPC.prototype.onMessage = function (eventMessage) {
    var _a = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["validateMessageSchema"])(eventMessage),
        type = _a.type,
        isValid = _a.isValid;

    if (!isValid) return;
    var message = eventMessage;

    if (message.target === this.name && this.target === message.data.name) {
      switch (type) {
        case 'req':
          this.onRequestMessage(message);
          break;

        case 'res':
          this.onResponseMessage(message);
          break;
      }
    }
  };

  RPC.prototype.onRequestMessage = function (message) {
    var _this = this;

    var resMessage = {
      target: this.target,
      data: {
        name: this.name,
        data: {
          id: message.data.data.id,
          jsonrpc: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_VERSION"]
        }
      }
    };

    try {
      var handler = this.handlers.get(message.data.data.method);

      if (!handler) {
        resMessage.data.data.error = {
          code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].METHOD_NOT_FOUND,
          message: "Method " + message.data.data.method + " does not exist"
        };
        this.sendMessage(resMessage);
        return;
      }

      var callback = function (err, res) {
        if (err) {
          resMessage.data.data.error = err;

          _this.sendMessage(resMessage);

          return;
        }

        resMessage.data.data.result = res;

        _this.sendMessage(resMessage);
      };

      handler.apply(void 0, __spreadArray([{
        callback: callback,
        message: message
      }], message.data.data.params));
    } catch (error) {
      if (resMessage.data.data.hasOwnProperty('error')) return;
      if (resMessage.data.data.hasOwnProperty('result')) return;
      resMessage.data.data.error = {
        code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].SERVER_ERROR,
        message: error.toString()
      };
      this.sendMessage(resMessage);
    }

    ;
  };

  RPC.prototype.onResponseMessage = function (message) {
    var _a = message.data.data,
        id = _a.id,
        error = _a.error,
        result = _a.result;
    var call = this.calls.get(id);
    if (!call) return;

    if (call.timer) {
      clearTimeout(call.timer);
    }

    call.resolver(error, result);
    this.calls.delete(id);
  };

  RPC.prototype.stop = function () {
    this.calls.forEach(function (call) {
      if (call.timer) {
        clearTimeout(call.timer);
      }

      call.resolver({
        message: 'RPC stopped',
        code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].INTERNAL_ERROR
      });
    });
    this.calls.clear();
  };

  return RPC;
}();

/* harmony default export */ __webpack_exports__["default"] = (RPC);
;

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js ***!
  \*********************************************************************/
/*! exports provided: JSON_RPC_ERROR_CODES, JSON_RPC_VERSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSON_RPC_ERROR_CODES", function() { return JSON_RPC_ERROR_CODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSON_RPC_VERSION", function() { return JSON_RPC_VERSION; });
var JSON_RPC_ERROR_CODES = {
  PARSE_ERROR: -32700,
  INVALID_REQUEST: -32600,
  METHOD_NOT_FOUND: -32601,
  INVALID_PARAMS: -32602,
  INTERNAL_ERROR: -32603,
  TIMEOUT_ERROR: -32604,
  SERVER_ERROR: -32000
};
var JSON_RPC_VERSION = '2.0';

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js ***!
  \*******************************************************************/
/*! exports provided: validateMessageSchema */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateMessageSchema", function() { return validateMessageSchema; });
/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema */ "./node_modules/@psychedelic/browser-rpc/dist/esm/schema.js");

var validateMessageSchema = function (message) {
  var result = _schema__WEBPACK_IMPORTED_MODULE_0__["default"].validate(message);
  if (result.error) return {
    isValid: false,
    type: null
  };
  var type = null;

  if (message.data.data.hasOwnProperty('method') && message.data.data.hasOwnProperty('params')) {
    type = 'req';
  } else if (message.data.data.hasOwnProperty('result') || message.data.data.hasOwnProperty('error')) {
    type = 'res';
  }

  return {
    type: type,
    isValid: type === 'req' || type === 'res'
  };
};

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/index.js ***!
  \*****************************************************************/
/*! exports provided: BackgroundController, BrowserRPC, ProxyRPC, PortRPC, RPC, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _BackgroundController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BackgroundController */ "./node_modules/@psychedelic/browser-rpc/dist/esm/BackgroundController.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BackgroundController", function() { return _BackgroundController__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _BrowserRPC__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserRPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/BrowserRPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserRPC", function() { return _BrowserRPC__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _ProxyRPC__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ProxyRPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/ProxyRPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyRPC", function() { return _ProxyRPC__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _PortRPC__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PortRPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/PortRPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PortRPC", function() { return _PortRPC__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RPC", function() { return _RPC__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _BrowserRPC__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ "./node_modules/@psychedelic/browser-rpc/dist/esm/types.js");
/* empty/unused harmony star reexport */







/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/schema.js":
/*!******************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/schema.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! joi */ "./node_modules/joi/dist/joi-browser.min.js");
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);

var schema = joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
  target: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().required(),
  data: joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
    name: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().required(),
    data: joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
      id: joi__WEBPACK_IMPORTED_MODULE_0___default.a.alternatives().try(joi__WEBPACK_IMPORTED_MODULE_0___default.a.number(), joi__WEBPACK_IMPORTED_MODULE_0___default.a.string()).required(),
      jsonrpc: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().valid('2.0').required(),
      result: joi__WEBPACK_IMPORTED_MODULE_0___default.a.any(),
      method: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string(),
      params: joi__WEBPACK_IMPORTED_MODULE_0___default.a.array().items(joi__WEBPACK_IMPORTED_MODULE_0___default.a.any()),
      error: joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
        code: joi__WEBPACK_IMPORTED_MODULE_0___default.a.number().required(),
        message: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().required(),
        data: joi__WEBPACK_IMPORTED_MODULE_0___default.a.any()
      })
    }).required()
  }).required()
});
/* harmony default export */ __webpack_exports__["default"] = (schema);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/types.js ***!
  \*****************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
;
;
;
;


/***/ }),

/***/ "./node_modules/extensionizer/extension-instance.js":
/*!**********************************************************!*\
  !*** ./node_modules/extensionizer/extension-instance.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

const apis = ['alarms', 'bookmarks', 'browserAction', 'commands', 'contextMenus', 'cookies', 'downloads', 'events', 'extension', 'extensionTypes', 'history', 'i18n', 'idle', 'notifications', 'pageAction', 'runtime', 'storage', 'tabs', 'webNavigation', 'webRequest', 'windows'];
const hasChrome = typeof chrome !== 'undefined';
const hasWindow = typeof window !== 'undefined';
const hasBrowser = typeof browser !== 'undefined';

function Extension() {
  const _this = this;

  apis.forEach(function (api) {
    _this[api] = null;

    if (hasChrome) {
      try {
        if (chrome[api]) {
          _this[api] = chrome[api];
        }
      } catch (e) {}
    }

    if (hasWindow) {
      try {
        if (window[api]) {
          _this[api] = window[api];
        }
      } catch (e) {}
    }

    if (hasBrowser) {
      try {
        if (browser[api]) {
          _this[api] = browser[api];
        }
      } catch (e) {}

      try {
        _this.api = browser.extension[api];
      } catch (e) {}
    }
  });

  if (hasBrowser) {
    try {
      if (browser && browser.runtime) {
        this.runtime = browser.runtime;
      }
    } catch (e) {}

    try {
      if (browser && browser.browserAction) {
        this.browserAction = browser.browserAction;
      }
    } catch (e) {}
  }
}

module.exports = Extension;

/***/ }),

/***/ "./node_modules/extensionizer/index.js":
/*!*********************************************!*\
  !*** ./node_modules/extensionizer/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Extension.js
 *
 * A module for unifying browser differences in the WebExtension API.
 *
 * Initially implemented because Chrome hides all of their WebExtension API
 * behind a global `chrome` variable, but we'd like to start grooming
 * the code-base for cross-browser extension support.
 *
 * You can read more about the WebExtension API here:
 * https://developer.mozilla.org/en-US/Add-ons/WebExtensions
 */
const Extension = __webpack_require__(/*! ./extension-instance */ "./node_modules/extensionizer/extension-instance.js");

module.exports = new Extension();

/***/ }),

/***/ "./node_modules/joi/dist/joi-browser.min.js":
/*!**************************************************!*\
  !*** ./node_modules/joi/dist/joi-browser.min.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function (e, t) {
   true ? module.exports = t() : undefined;
}(self, function () {
  return e = {
    1238: e => {
      "use strict";

      e.exports = {
        version: "17.6.0"
      };
    },
    7629: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(9474),
            o = r(1687),
            i = r(8652),
            l = r(8160),
            c = r(3292),
            u = r(6354),
            f = r(8901),
            m = r(9708),
            h = r(6914),
            d = r(2294),
            p = r(6133),
            g = r(1152),
            y = r(8863),
            b = r(2036),
            v = {
        Base: class {
          constructor(e) {
            this.type = e, this.$_root = null, this._definition = {}, this._reset();
          }

          _reset() {
            this._ids = new d.Ids(), this._preferences = null, this._refs = new p.Manager(), this._cache = null, this._valids = null, this._invalids = null, this._flags = {}, this._rules = [], this._singleRules = new Map(), this.$_terms = {}, this.$_temp = {
              ruleset: null,
              whens: {}
            };
          }

          describe() {
            return s("function" == typeof m.describe, "Manifest functionality disabled"), m.describe(this);
          }

          allow(...e) {
            return l.verifyFlat(e, "allow"), this._values(e, "_valids");
          }

          alter(e) {
            s(e && "object" == typeof e && !Array.isArray(e), "Invalid targets argument"), s(!this._inRuleset(), "Cannot set alterations inside a ruleset");
            const t = this.clone();
            t.$_terms.alterations = t.$_terms.alterations || [];

            for (const r in e) {
              const n = e[r];
              s("function" == typeof n, "Alteration adjuster for", r, "must be a function"), t.$_terms.alterations.push({
                target: r,
                adjuster: n
              });
            }

            return t.$_temp.ruleset = !1, t;
          }

          artifact(e) {
            return s(void 0 !== e, "Artifact cannot be undefined"), s(!this._cache, "Cannot set an artifact with a rule cache"), this.$_setFlag("artifact", e);
          }

          cast(e) {
            return s(!1 === e || "string" == typeof e, "Invalid to value"), s(!1 === e || this._definition.cast[e], "Type", this.type, "does not support casting to", e), this.$_setFlag("cast", !1 === e ? void 0 : e);
          }

          default(e, t) {
            return this._default("default", e, t);
          }

          description(e) {
            return s(e && "string" == typeof e, "Description must be a non-empty string"), this.$_setFlag("description", e);
          }

          empty(e) {
            const t = this.clone();
            return void 0 !== e && (e = t.$_compile(e, {
              override: !1
            })), t.$_setFlag("empty", e, {
              clone: !1
            });
          }

          error(e) {
            return s(e, "Missing error"), s(e instanceof Error || "function" == typeof e, "Must provide a valid Error object or a function"), this.$_setFlag("error", e);
          }

          example(e, t = {}) {
            return s(void 0 !== e, "Missing example"), l.assertOptions(t, ["override"]), this._inner("examples", e, {
              single: !0,
              override: t.override
            });
          }

          external(e, t) {
            return "object" == typeof e && (s(!t, "Cannot combine options with description"), t = e.description, e = e.method), s("function" == typeof e, "Method must be a function"), s(void 0 === t || t && "string" == typeof t, "Description must be a non-empty string"), this._inner("externals", {
              method: e,
              description: t
            }, {
              single: !0
            });
          }

          failover(e, t) {
            return this._default("failover", e, t);
          }

          forbidden() {
            return this.presence("forbidden");
          }

          id(e) {
            return e ? (s("string" == typeof e, "id must be a non-empty string"), s(/^[^\.]+$/.test(e), "id cannot contain period character"), this.$_setFlag("id", e)) : this.$_setFlag("id", void 0);
          }

          invalid(...e) {
            return this._values(e, "_invalids");
          }

          label(e) {
            return s(e && "string" == typeof e, "Label name must be a non-empty string"), this.$_setFlag("label", e);
          }

          meta(e) {
            return s(void 0 !== e, "Meta cannot be undefined"), this._inner("metas", e, {
              single: !0
            });
          }

          note(...e) {
            s(e.length, "Missing notes");

            for (const t of e) s(t && "string" == typeof t, "Notes must be non-empty strings");

            return this._inner("notes", e);
          }

          only(e = !0) {
            return s("boolean" == typeof e, "Invalid mode:", e), this.$_setFlag("only", e);
          }

          optional() {
            return this.presence("optional");
          }

          prefs(e) {
            s(e, "Missing preferences"), s(void 0 === e.context, "Cannot override context"), s(void 0 === e.externals, "Cannot override externals"), s(void 0 === e.warnings, "Cannot override warnings"), s(void 0 === e.debug, "Cannot override debug"), l.checkPreferences(e);
            const t = this.clone();
            return t._preferences = l.preferences(t._preferences, e), t;
          }

          presence(e) {
            return s(["optional", "required", "forbidden"].includes(e), "Unknown presence mode", e), this.$_setFlag("presence", e);
          }

          raw(e = !0) {
            return this.$_setFlag("result", e ? "raw" : void 0);
          }

          result(e) {
            return s(["raw", "strip"].includes(e), "Unknown result mode", e), this.$_setFlag("result", e);
          }

          required() {
            return this.presence("required");
          }

          strict(e) {
            const t = this.clone(),
                  r = void 0 !== e && !e;
            return t._preferences = l.preferences(t._preferences, {
              convert: r
            }), t;
          }

          strip(e = !0) {
            return this.$_setFlag("result", e ? "strip" : void 0);
          }

          tag(...e) {
            s(e.length, "Missing tags");

            for (const t of e) s(t && "string" == typeof t, "Tags must be non-empty strings");

            return this._inner("tags", e);
          }

          unit(e) {
            return s(e && "string" == typeof e, "Unit name must be a non-empty string"), this.$_setFlag("unit", e);
          }

          valid(...e) {
            l.verifyFlat(e, "valid");
            const t = this.allow(...e);
            return t.$_setFlag("only", !!t._valids, {
              clone: !1
            }), t;
          }

          when(e, t) {
            const r = this.clone();
            r.$_terms.whens || (r.$_terms.whens = []);
            const n = c.when(r, e, t);

            if (!["any", "link"].includes(r.type)) {
              const e = n.is ? [n] : n.switch;

              for (const t of e) s(!t.then || "any" === t.then.type || t.then.type === r.type, "Cannot combine", r.type, "with", t.then && t.then.type), s(!t.otherwise || "any" === t.otherwise.type || t.otherwise.type === r.type, "Cannot combine", r.type, "with", t.otherwise && t.otherwise.type);
            }

            return r.$_terms.whens.push(n), r.$_mutateRebuild();
          }

          cache(e) {
            s(!this._inRuleset(), "Cannot set caching inside a ruleset"), s(!this._cache, "Cannot override schema cache"), s(void 0 === this._flags.artifact, "Cannot cache a rule with an artifact");
            const t = this.clone();
            return t._cache = e || i.provider.provision(), t.$_temp.ruleset = !1, t;
          }

          clone() {
            const e = Object.create(Object.getPrototypeOf(this));
            return this._assign(e);
          }

          concat(e) {
            s(l.isSchema(e), "Invalid schema object"), s("any" === this.type || "any" === e.type || e.type === this.type, "Cannot merge type", this.type, "with another type:", e.type), s(!this._inRuleset(), "Cannot concatenate onto a schema with open ruleset"), s(!e._inRuleset(), "Cannot concatenate a schema with open ruleset");
            let t = this.clone();

            if ("any" === this.type && "any" !== e.type) {
              const r = e.clone();

              for (const e of Object.keys(t)) "type" !== e && (r[e] = t[e]);

              t = r;
            }

            t._ids.concat(e._ids), t._refs.register(e, p.toSibling), t._preferences = t._preferences ? l.preferences(t._preferences, e._preferences) : e._preferences, t._valids = b.merge(t._valids, e._valids, e._invalids), t._invalids = b.merge(t._invalids, e._invalids, e._valids);

            for (const r of e._singleRules.keys()) t._singleRules.has(r) && (t._rules = t._rules.filter(e => e.keep || e.name !== r), t._singleRules.delete(r));

            for (const r of e._rules) e._definition.rules[r.method].multi || t._singleRules.set(r.name, r), t._rules.push(r);

            if (t._flags.empty && e._flags.empty) {
              t._flags.empty = t._flags.empty.concat(e._flags.empty);
              const r = Object.assign({}, e._flags);
              delete r.empty, o(t._flags, r);
            } else if (e._flags.empty) {
              t._flags.empty = e._flags.empty;
              const r = Object.assign({}, e._flags);
              delete r.empty, o(t._flags, r);
            } else o(t._flags, e._flags);

            for (const r in e.$_terms) {
              const s = e.$_terms[r];
              s ? t.$_terms[r] ? t.$_terms[r] = t.$_terms[r].concat(s) : t.$_terms[r] = s.slice() : t.$_terms[r] || (t.$_terms[r] = s);
            }

            return this.$_root._tracer && this.$_root._tracer._combine(t, [this, e]), t.$_mutateRebuild();
          }

          extend(e) {
            return s(!e.base, "Cannot extend type with another base"), f.type(this, e);
          }

          extract(e) {
            return e = Array.isArray(e) ? e : e.split("."), this._ids.reach(e);
          }

          fork(e, t) {
            s(!this._inRuleset(), "Cannot fork inside a ruleset");
            let r = this;

            for (let s of [].concat(e)) s = Array.isArray(s) ? s : s.split("."), r = r._ids.fork(s, t, r);

            return r.$_temp.ruleset = !1, r;
          }

          rule(e) {
            const t = this._definition;
            l.assertOptions(e, Object.keys(t.modifiers)), s(!1 !== this.$_temp.ruleset, "Cannot apply rules to empty ruleset or the last rule added does not support rule properties");
            const r = null === this.$_temp.ruleset ? this._rules.length - 1 : this.$_temp.ruleset;
            s(r >= 0 && r < this._rules.length, "Cannot apply rules to empty ruleset");
            const a = this.clone();

            for (let o = r; o < a._rules.length; ++o) {
              const r = a._rules[o],
                    i = n(r);

              for (const n in e) t.modifiers[n](i, e[n]), s(i.name === r.name, "Cannot change rule name");

              a._rules[o] = i, a._singleRules.get(i.name) === r && a._singleRules.set(i.name, i);
            }

            return a.$_temp.ruleset = !1, a.$_mutateRebuild();
          }

          get ruleset() {
            s(!this._inRuleset(), "Cannot start a new ruleset without closing the previous one");
            const e = this.clone();
            return e.$_temp.ruleset = e._rules.length, e;
          }

          get $() {
            return this.ruleset;
          }

          tailor(e) {
            e = [].concat(e), s(!this._inRuleset(), "Cannot tailor inside a ruleset");
            let t = this;
            if (this.$_terms.alterations) for (const {
              target: r,
              adjuster: n
            } of this.$_terms.alterations) e.includes(r) && (t = n(t), s(l.isSchema(t), "Alteration adjuster for", r, "failed to return a schema object"));
            return t = t.$_modify({
              each: t => t.tailor(e),
              ref: !1
            }), t.$_temp.ruleset = !1, t.$_mutateRebuild();
          }

          tracer() {
            return g.location ? g.location(this) : this;
          }

          validate(e, t) {
            return y.entry(e, this, t);
          }

          validateAsync(e, t) {
            return y.entryAsync(e, this, t);
          }

          $_addRule(e) {
            "string" == typeof e && (e = {
              name: e
            }), s(e && "object" == typeof e, "Invalid options"), s(e.name && "string" == typeof e.name, "Invalid rule name");

            for (const t in e) s("_" !== t[0], "Cannot set private rule properties");

            const t = Object.assign({}, e);
            t._resolve = [], t.method = t.method || t.name;
            const r = this._definition.rules[t.method],
                  n = t.args;
            s(r, "Unknown rule", t.method);
            const a = this.clone();

            if (n) {
              s(1 === Object.keys(n).length || Object.keys(n).length === this._definition.rules[t.name].args.length, "Invalid rule definition for", this.type, t.name);

              for (const e in n) {
                let o = n[e];

                if (void 0 !== o) {
                  if (r.argsByName) {
                    const i = r.argsByName.get(e);
                    if (i.ref && l.isResolvable(o)) t._resolve.push(e), a.$_mutateRegister(o);else if (i.normalize && (o = i.normalize(o), n[e] = o), i.assert) {
                      const t = l.validateArg(o, e, i);
                      s(!t, t, "or reference");
                    }
                  }

                  n[e] = o;
                } else delete n[e];
              }
            }

            return r.multi || (a._ruleRemove(t.name, {
              clone: !1
            }), a._singleRules.set(t.name, t)), !1 === a.$_temp.ruleset && (a.$_temp.ruleset = null), r.priority ? a._rules.unshift(t) : a._rules.push(t), a;
          }

          $_compile(e, t) {
            return c.schema(this.$_root, e, t);
          }

          $_createError(e, t, r, s, n, a = {}) {
            const o = !1 !== a.flags ? this._flags : {},
                  i = a.messages ? h.merge(this._definition.messages, a.messages) : this._definition.messages;
            return new u.Report(e, t, r, o, i, s, n);
          }

          $_getFlag(e) {
            return this._flags[e];
          }

          $_getRule(e) {
            return this._singleRules.get(e);
          }

          $_mapLabels(e) {
            return e = Array.isArray(e) ? e : e.split("."), this._ids.labels(e);
          }

          $_match(e, t, r, s) {
            (r = Object.assign({}, r)).abortEarly = !0, r._externals = !1, t.snapshot();
            const n = !y.validate(e, this, t, r, s).errors;
            return t.restore(), n;
          }

          $_modify(e) {
            return l.assertOptions(e, ["each", "once", "ref", "schema"]), d.schema(this, e) || this;
          }

          $_mutateRebuild() {
            return s(!this._inRuleset(), "Cannot add this rule inside a ruleset"), this._refs.reset(), this._ids.reset(), this.$_modify({
              each: (e, {
                source: t,
                name: r,
                path: s,
                key: n
              }) => {
                const a = this._definition[t][r] && this._definition[t][r].register;
                !1 !== a && this.$_mutateRegister(e, {
                  family: a,
                  key: n
                });
              }
            }), this._definition.rebuild && this._definition.rebuild(this), this.$_temp.ruleset = !1, this;
          }

          $_mutateRegister(e, {
            family: t,
            key: r
          } = {}) {
            this._refs.register(e, t), this._ids.register(e, {
              key: r
            });
          }

          $_property(e) {
            return this._definition.properties[e];
          }

          $_reach(e) {
            return this._ids.reach(e);
          }

          $_rootReferences() {
            return this._refs.roots();
          }

          $_setFlag(e, t, r = {}) {
            s("_" === e[0] || !this._inRuleset(), "Cannot set flag inside a ruleset");
            const n = this._definition.flags[e] || {};
            if (a(t, n.default) && (t = void 0), a(t, this._flags[e])) return this;
            const o = !1 !== r.clone ? this.clone() : this;
            return void 0 !== t ? (o._flags[e] = t, o.$_mutateRegister(t)) : delete o._flags[e], "_" !== e[0] && (o.$_temp.ruleset = !1), o;
          }

          $_parent(e, ...t) {
            return this[e][l.symbols.parent].call(this, ...t);
          }

          $_validate(e, t, r) {
            return y.validate(e, this, t, r);
          }

          _assign(e) {
            e.type = this.type, e.$_root = this.$_root, e.$_temp = Object.assign({}, this.$_temp), e.$_temp.whens = {}, e._ids = this._ids.clone(), e._preferences = this._preferences, e._valids = this._valids && this._valids.clone(), e._invalids = this._invalids && this._invalids.clone(), e._rules = this._rules.slice(), e._singleRules = n(this._singleRules, {
              shallow: !0
            }), e._refs = this._refs.clone(), e._flags = Object.assign({}, this._flags), e._cache = null, e.$_terms = {};

            for (const t in this.$_terms) e.$_terms[t] = this.$_terms[t] ? this.$_terms[t].slice() : null;

            e.$_super = {};

            for (const t in this.$_super) e.$_super[t] = this._super[t].bind(e);

            return e;
          }

          _bare() {
            const e = this.clone();

            e._reset();

            const t = e._definition.terms;

            for (const r in t) {
              const s = t[r];
              e.$_terms[r] = s.init;
            }

            return e.$_mutateRebuild();
          }

          _default(e, t, r = {}) {
            return l.assertOptions(r, "literal"), s(void 0 !== t, "Missing", e, "value"), s("function" == typeof t || !r.literal, "Only function value supports literal option"), "function" == typeof t && r.literal && (t = {
              [l.symbols.literal]: !0,
              literal: t
            }), this.$_setFlag(e, t);
          }

          _generate(e, t, r) {
            if (!this.$_terms.whens) return {
              schema: this
            };
            const s = [],
                  n = [];

            for (let a = 0; a < this.$_terms.whens.length; ++a) {
              const o = this.$_terms.whens[a];

              if (o.concat) {
                s.push(o.concat), n.push("".concat(a, ".concat"));
                continue;
              }

              const i = o.ref ? o.ref.resolve(e, t, r) : e,
                    l = o.is ? [o] : o.switch,
                    c = n.length;

              for (let c = 0; c < l.length; ++c) {
                const {
                  is: u,
                  then: f,
                  otherwise: m
                } = l[c],
                      h = "".concat(a).concat(o.switch ? "." + c : "");

                if (u.$_match(i, t.nest(u, "".concat(h, ".is")), r)) {
                  if (f) {
                    const a = t.localize([...t.path, "".concat(h, ".then")], t.ancestors, t.schemas),
                          {
                      schema: o,
                      id: i
                    } = f._generate(e, a, r);

                    s.push(o), n.push("".concat(h, ".then").concat(i ? "(".concat(i, ")") : ""));
                    break;
                  }
                } else if (m) {
                  const a = t.localize([...t.path, "".concat(h, ".otherwise")], t.ancestors, t.schemas),
                        {
                    schema: o,
                    id: i
                  } = m._generate(e, a, r);

                  s.push(o), n.push("".concat(h, ".otherwise").concat(i ? "(".concat(i, ")") : ""));
                  break;
                }
              }

              if (o.break && n.length > c) break;
            }

            const a = n.join(", ");
            if (t.mainstay.tracer.debug(t, "rule", "when", a), !a) return {
              schema: this
            };
            if (!t.mainstay.tracer.active && this.$_temp.whens[a]) return {
              schema: this.$_temp.whens[a],
              id: a
            };
            let o = this;
            this._definition.generate && (o = this._definition.generate(this, e, t, r));

            for (const e of s) o = o.concat(e);

            return this.$_root._tracer && this.$_root._tracer._combine(o, [this, ...s]), this.$_temp.whens[a] = o, {
              schema: o,
              id: a
            };
          }

          _inner(e, t, r = {}) {
            s(!this._inRuleset(), "Cannot set ".concat(e, " inside a ruleset"));
            const n = this.clone();
            return n.$_terms[e] && !r.override || (n.$_terms[e] = []), r.single ? n.$_terms[e].push(t) : n.$_terms[e].push(...t), n.$_temp.ruleset = !1, n;
          }

          _inRuleset() {
            return null !== this.$_temp.ruleset && !1 !== this.$_temp.ruleset;
          }

          _ruleRemove(e, t = {}) {
            if (!this._singleRules.has(e)) return this;
            const r = !1 !== t.clone ? this.clone() : this;

            r._singleRules.delete(e);

            const s = [];

            for (let t = 0; t < r._rules.length; ++t) {
              const n = r._rules[t];
              n.name !== e || n.keep ? s.push(n) : r._inRuleset() && t < r.$_temp.ruleset && --r.$_temp.ruleset;
            }

            return r._rules = s, r;
          }

          _values(e, t) {
            l.verifyFlat(e, t.slice(1, -1));
            const r = this.clone(),
                  n = e[0] === l.symbols.override;
            if (n && (e = e.slice(1)), !r[t] && e.length ? r[t] = new b() : n && (r[t] = e.length ? new b() : null, r.$_mutateRebuild()), !r[t]) return r;
            n && r[t].override();

            for (const n of e) {
              s(void 0 !== n, "Cannot call allow/valid/invalid with undefined"), s(n !== l.symbols.override, "Override must be the first value");
              const e = "_invalids" === t ? "_valids" : "_invalids";
              r[e] && (r[e].remove(n), r[e].length || (s("_valids" === t || !r._flags.only, "Setting invalid value", n, "leaves schema rejecting all values due to previous valid rule"), r[e] = null)), r[t].add(n, r._refs);
            }

            return r;
          }

        }
      };
      v.Base.prototype[l.symbols.any] = {
        version: l.version,
        compile: c.compile,
        root: "$_root"
      }, v.Base.prototype.isImmutable = !0, v.Base.prototype.deny = v.Base.prototype.invalid, v.Base.prototype.disallow = v.Base.prototype.invalid, v.Base.prototype.equal = v.Base.prototype.valid, v.Base.prototype.exist = v.Base.prototype.required, v.Base.prototype.not = v.Base.prototype.invalid, v.Base.prototype.options = v.Base.prototype.prefs, v.Base.prototype.preferences = v.Base.prototype.prefs, e.exports = new v.Base();
    },
    8652: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(8160),
            o = {
        max: 1e3,
        supported: new Set(["undefined", "boolean", "number", "string"])
      };
      t.provider = {
        provision: e => new o.Cache(e)
      }, o.Cache = class {
        constructor(e = {}) {
          a.assertOptions(e, ["max"]), s(void 0 === e.max || e.max && e.max > 0 && isFinite(e.max), "Invalid max cache size"), this._max = e.max || o.max, this._map = new Map(), this._list = new o.List();
        }

        get length() {
          return this._map.size;
        }

        set(e, t) {
          if (null !== e && !o.supported.has(typeof e)) return;

          let r = this._map.get(e);

          if (r) return r.value = t, void this._list.first(r);
          r = this._list.unshift({
            key: e,
            value: t
          }), this._map.set(e, r), this._compact();
        }

        get(e) {
          const t = this._map.get(e);

          if (t) return this._list.first(t), n(t.value);
        }

        _compact() {
          if (this._map.size > this._max) {
            const e = this._list.pop();

            this._map.delete(e.key);
          }
        }

      }, o.List = class {
        constructor() {
          this.tail = null, this.head = null;
        }

        unshift(e) {
          return e.next = null, e.prev = this.head, this.head && (this.head.next = e), this.head = e, this.tail || (this.tail = e), e;
        }

        first(e) {
          e !== this.head && (this._remove(e), this.unshift(e));
        }

        pop() {
          return this._remove(this.tail);
        }

        _remove(e) {
          const {
            next: t,
            prev: r
          } = e;
          return t.prev = r, r && (r.next = t), e === this.tail && (this.tail = t), e.prev = null, e.next = null, e;
        }

      };
    },
    8160: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(7916),
            a = r(1238);
      let o, i;
      const l = {
        isoDate: /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/
      };
      t.version = a.version, t.defaults = {
        abortEarly: !0,
        allowUnknown: !1,
        artifacts: !1,
        cache: !0,
        context: null,
        convert: !0,
        dateFormat: "iso",
        errors: {
          escapeHtml: !1,
          label: "path",
          language: null,
          render: !0,
          stack: !1,
          wrap: {
            label: '"',
            array: "[]"
          }
        },
        externals: !0,
        messages: {},
        nonEnumerables: !1,
        noDefaults: !1,
        presence: "optional",
        skipFunctions: !1,
        stripUnknown: !1,
        warnings: !1
      }, t.symbols = {
        any: Symbol.for("@hapi/joi/schema"),
        arraySingle: Symbol("arraySingle"),
        deepDefault: Symbol("deepDefault"),
        errors: Symbol("errors"),
        literal: Symbol("literal"),
        override: Symbol("override"),
        parent: Symbol("parent"),
        prefs: Symbol("prefs"),
        ref: Symbol("ref"),
        template: Symbol("template"),
        values: Symbol("values")
      }, t.assertOptions = function (e, t, r = "Options") {
        s(e && "object" == typeof e && !Array.isArray(e), "Options must be of type object");
        const n = Object.keys(e).filter(e => !t.includes(e));
        s(0 === n.length, "".concat(r, " contain unknown keys: ").concat(n));
      }, t.checkPreferences = function (e) {
        i = i || r(3378);
        const t = i.preferences.validate(e);
        if (t.error) throw new n([t.error.details[0].message]);
      }, t.compare = function (e, t, r) {
        switch (r) {
          case "=":
            return e === t;

          case ">":
            return e > t;

          case "<":
            return e < t;

          case ">=":
            return e >= t;

          case "<=":
            return e <= t;
        }
      }, t.default = function (e, t) {
        return void 0 === e ? t : e;
      }, t.isIsoDate = function (e) {
        return l.isoDate.test(e);
      }, t.isNumber = function (e) {
        return "number" == typeof e && !isNaN(e);
      }, t.isResolvable = function (e) {
        return !!e && (e[t.symbols.ref] || e[t.symbols.template]);
      }, t.isSchema = function (e, r = {}) {
        const n = e && e[t.symbols.any];
        return !!n && (s(r.legacy || n.version === t.version, "Cannot mix different versions of joi schemas"), !0);
      }, t.isValues = function (e) {
        return e[t.symbols.values];
      }, t.limit = function (e) {
        return Number.isSafeInteger(e) && e >= 0;
      }, t.preferences = function (e, s) {
        o = o || r(6914), e = e || {}, s = s || {};
        const n = Object.assign({}, e, s);
        return s.errors && e.errors && (n.errors = Object.assign({}, e.errors, s.errors), n.errors.wrap = Object.assign({}, e.errors.wrap, s.errors.wrap)), s.messages && (n.messages = o.compile(s.messages, e.messages)), delete n[t.symbols.prefs], n;
      }, t.tryWithPath = function (e, t, r = {}) {
        try {
          return e();
        } catch (e) {
          throw void 0 !== e.path ? e.path = t + "." + e.path : e.path = t, r.append && (e.message = "".concat(e.message, " (").concat(e.path, ")")), e;
        }
      }, t.validateArg = function (e, r, {
        assert: s,
        message: n
      }) {
        if (t.isSchema(s)) {
          const t = s.validate(e);
          if (!t.error) return;
          return t.error.message;
        }

        if (!s(e)) return r ? "".concat(r, " ").concat(n) : n;
      }, t.verifyFlat = function (e, t) {
        for (const r of e) s(!Array.isArray(r), "Method no longer accepts array arguments:", t);
      };
    },
    3292: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8160),
            a = r(6133),
            o = {};
      t.schema = function (e, t, r = {}) {
        n.assertOptions(r, ["appendPath", "override"]);

        try {
          return o.schema(e, t, r);
        } catch (e) {
          throw r.appendPath && void 0 !== e.path && (e.message = "".concat(e.message, " (").concat(e.path, ")")), e;
        }
      }, o.schema = function (e, t, r) {
        s(void 0 !== t, "Invalid undefined schema"), Array.isArray(t) && (s(t.length, "Invalid empty array schema"), 1 === t.length && (t = t[0]));

        const a = (t, ...s) => !1 !== r.override ? t.valid(e.override, ...s) : t.valid(...s);

        if (o.simple(t)) return a(e, t);
        if ("function" == typeof t) return e.custom(t);
        if (s("object" == typeof t, "Invalid schema content:", typeof t), n.isResolvable(t)) return a(e, t);
        if (n.isSchema(t)) return t;

        if (Array.isArray(t)) {
          for (const r of t) if (!o.simple(r)) return e.alternatives().try(...t);

          return a(e, ...t);
        }

        return t instanceof RegExp ? e.string().regex(t) : t instanceof Date ? a(e.date(), t) : (s(Object.getPrototypeOf(t) === Object.getPrototypeOf({}), "Schema can only contain plain objects"), e.object().keys(t));
      }, t.ref = function (e, t) {
        return a.isRef(e) ? e : a.create(e, t);
      }, t.compile = function (e, r, a = {}) {
        n.assertOptions(a, ["legacy"]);
        const i = r && r[n.symbols.any];
        if (i) return s(a.legacy || i.version === n.version, "Cannot mix different versions of joi schemas:", i.version, n.version), r;
        if ("object" != typeof r || !a.legacy) return t.schema(e, r, {
          appendPath: !0
        });
        const l = o.walk(r);
        return l ? l.compile(l.root, r) : t.schema(e, r, {
          appendPath: !0
        });
      }, o.walk = function (e) {
        if ("object" != typeof e) return null;

        if (Array.isArray(e)) {
          for (const t of e) {
            const e = o.walk(t);
            if (e) return e;
          }

          return null;
        }

        const t = e[n.symbols.any];
        if (t) return {
          root: e[t.root],
          compile: t.compile
        };
        s(Object.getPrototypeOf(e) === Object.getPrototypeOf({}), "Schema can only contain plain objects");

        for (const t in e) {
          const r = o.walk(e[t]);
          if (r) return r;
        }

        return null;
      }, o.simple = function (e) {
        return null === e || ["boolean", "string", "number"].includes(typeof e);
      }, t.when = function (e, r, i) {
        if (void 0 === i && (s(r && "object" == typeof r, "Missing options"), i = r, r = a.create(".")), Array.isArray(i) && (i = {
          switch: i
        }), n.assertOptions(i, ["is", "not", "then", "otherwise", "switch", "break"]), n.isSchema(r)) return s(void 0 === i.is, '"is" can not be used with a schema condition'), s(void 0 === i.not, '"not" can not be used with a schema condition'), s(void 0 === i.switch, '"switch" can not be used with a schema condition'), o.condition(e, {
          is: r,
          then: i.then,
          otherwise: i.otherwise,
          break: i.break
        });

        if (s(a.isRef(r) || "string" == typeof r, "Invalid condition:", r), s(void 0 === i.not || void 0 === i.is, 'Cannot combine "is" with "not"'), void 0 === i.switch) {
          let l = i;
          void 0 !== i.not && (l = {
            is: i.not,
            then: i.otherwise,
            otherwise: i.then,
            break: i.break
          });
          let c = void 0 !== l.is ? e.$_compile(l.is) : e.$_root.invalid(null, !1, 0, "").required();
          return s(void 0 !== l.then || void 0 !== l.otherwise, 'options must have at least one of "then", "otherwise", or "switch"'), s(void 0 === l.break || void 0 === l.then || void 0 === l.otherwise, "Cannot specify then, otherwise, and break all together"), void 0 === i.is || a.isRef(i.is) || n.isSchema(i.is) || (c = c.required()), o.condition(e, {
            ref: t.ref(r),
            is: c,
            then: l.then,
            otherwise: l.otherwise,
            break: l.break
          });
        }

        s(Array.isArray(i.switch), '"switch" must be an array'), s(void 0 === i.is, 'Cannot combine "switch" with "is"'), s(void 0 === i.not, 'Cannot combine "switch" with "not"'), s(void 0 === i.then, 'Cannot combine "switch" with "then"');
        const l = {
          ref: t.ref(r),
          switch: [],
          break: i.break
        };

        for (let t = 0; t < i.switch.length; ++t) {
          const r = i.switch[t],
                o = t === i.switch.length - 1;
          n.assertOptions(r, o ? ["is", "then", "otherwise"] : ["is", "then"]), s(void 0 !== r.is, 'Switch statement missing "is"'), s(void 0 !== r.then, 'Switch statement missing "then"');
          const c = {
            is: e.$_compile(r.is),
            then: e.$_compile(r.then)
          };

          if (a.isRef(r.is) || n.isSchema(r.is) || (c.is = c.is.required()), o) {
            s(void 0 === i.otherwise || void 0 === r.otherwise, 'Cannot specify "otherwise" inside and outside a "switch"');
            const t = void 0 !== i.otherwise ? i.otherwise : r.otherwise;
            void 0 !== t && (s(void 0 === l.break, "Cannot specify both otherwise and break"), c.otherwise = e.$_compile(t));
          }

          l.switch.push(c);
        }

        return l;
      }, o.condition = function (e, t) {
        for (const r of ["then", "otherwise"]) void 0 === t[r] ? delete t[r] : t[r] = e.$_compile(t[r]);

        return t;
      };
    },
    6354: (e, t, r) => {
      "use strict";

      const s = r(5688),
            n = r(8160),
            a = r(3328);
      t.Report = class {
        constructor(e, r, s, n, a, o, i) {
          if (this.code = e, this.flags = n, this.messages = a, this.path = o.path, this.prefs = i, this.state = o, this.value = r, this.message = null, this.template = null, this.local = s || {}, this.local.label = t.label(this.flags, this.state, this.prefs, this.messages), void 0 === this.value || this.local.hasOwnProperty("value") || (this.local.value = this.value), this.path.length) {
            const e = this.path[this.path.length - 1];
            "object" != typeof e && (this.local.key = e);
          }
        }

        _setTemplate(e) {
          if (this.template = e, !this.flags.label && 0 === this.path.length) {
            const e = this._template(this.template, "root");

            e && (this.local.label = e);
          }
        }

        toString() {
          if (this.message) return this.message;
          const e = this.code;
          if (!this.prefs.errors.render) return this.code;

          const t = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);

          return void 0 === t ? 'Error code "'.concat(e, '" is not defined, your custom type is missing the correct messages definition') : (this.message = t.render(this.value, this.state, this.prefs, this.local, {
            errors: this.prefs.errors,
            messages: [this.prefs.messages, this.messages]
          }), this.prefs.errors.label || (this.message = this.message.replace(/^"" /, "").trim()), this.message);
        }

        _template(e, r) {
          return t.template(this.value, e, r || this.code, this.state, this.prefs);
        }

      }, t.path = function (e) {
        let t = "";

        for (const r of e) "object" != typeof r && ("string" == typeof r ? (t && (t += "."), t += r) : t += "[".concat(r, "]"));

        return t;
      }, t.template = function (e, t, r, s, o) {
        if (!t) return;
        if (a.isTemplate(t)) return "root" !== r ? t : null;
        let i = o.errors.language;

        if (n.isResolvable(i) && (i = i.resolve(e, s, o)), i && t[i]) {
          if (void 0 !== t[i][r]) return t[i][r];
          if (void 0 !== t[i]["*"]) return t[i]["*"];
        }

        return t[r] ? t[r] : t["*"];
      }, t.label = function (e, r, s, n) {
        if (e.label) return e.label;
        if (!s.errors.label) return "";
        let a = r.path;
        "key" === s.errors.label && r.path.length > 1 && (a = r.path.slice(-1));
        return t.path(a) || t.template(null, s.messages, "root", r, s) || n && t.template(null, n, "root", r, s) || "value";
      }, t.process = function (e, r, s) {
        if (!e) return null;
        const {
          override: n,
          message: a,
          details: o
        } = t.details(e);
        if (n) return n;
        if (s.errors.stack) return new t.ValidationError(a, o, r);
        const i = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        const l = new t.ValidationError(a, o, r);
        return Error.stackTraceLimit = i, l;
      }, t.details = function (e, t = {}) {
        let r = [];
        const s = [];

        for (const n of e) {
          if (n instanceof Error) {
            if (!1 !== t.override) return {
              override: n
            };
            const e = n.toString();
            r.push(e), s.push({
              message: e,
              type: "override",
              context: {
                error: n
              }
            });
            continue;
          }

          const e = n.toString();
          r.push(e), s.push({
            message: e,
            path: n.path.filter(e => "object" != typeof e),
            type: n.code,
            context: n.local
          });
        }

        return r.length > 1 && (r = [...new Set(r)]), {
          message: r.join(". "),
          details: s
        };
      }, t.ValidationError = class extends Error {
        constructor(e, t, r) {
          super(e), this._original = r, this.details = t;
        }

        static isError(e) {
          return e instanceof t.ValidationError;
        }

      }, t.ValidationError.prototype.isJoi = !0, t.ValidationError.prototype.name = "ValidationError", t.ValidationError.prototype.annotate = s.error;
    },
    8901: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(8160),
            o = r(6914),
            i = {};
      t.type = function (e, t) {
        const r = Object.getPrototypeOf(e),
              l = n(r),
              c = e._assign(Object.create(l)),
              u = Object.assign({}, t);

        delete u.base, l._definition = u;
        const f = r._definition || {};
        u.messages = o.merge(f.messages, u.messages), u.properties = Object.assign({}, f.properties, u.properties), c.type = u.type, u.flags = Object.assign({}, f.flags, u.flags);
        const m = Object.assign({}, f.terms);
        if (u.terms) for (const e in u.terms) {
          const t = u.terms[e];
          s(void 0 === c.$_terms[e], "Invalid term override for", u.type, e), c.$_terms[e] = t.init, m[e] = t;
        }
        u.terms = m, u.args || (u.args = f.args), u.prepare = i.prepare(u.prepare, f.prepare), u.coerce && ("function" == typeof u.coerce && (u.coerce = {
          method: u.coerce
        }), u.coerce.from && !Array.isArray(u.coerce.from) && (u.coerce = {
          method: u.coerce.method,
          from: [].concat(u.coerce.from)
        })), u.coerce = i.coerce(u.coerce, f.coerce), u.validate = i.validate(u.validate, f.validate);
        const h = Object.assign({}, f.rules);
        if (u.rules) for (const e in u.rules) {
          const t = u.rules[e];
          s("object" == typeof t, "Invalid rule definition for", u.type, e);
          let r = t.method;

          if (void 0 === r && (r = function () {
            return this.$_addRule(e);
          }), r && (s(!l[e], "Rule conflict in", u.type, e), l[e] = r), s(!h[e], "Rule conflict in", u.type, e), h[e] = t, t.alias) {
            const e = [].concat(t.alias);

            for (const r of e) l[r] = t.method;
          }

          t.args && (t.argsByName = new Map(), t.args = t.args.map(e => ("string" == typeof e && (e = {
            name: e
          }), s(!t.argsByName.has(e.name), "Duplicated argument name", e.name), a.isSchema(e.assert) && (e.assert = e.assert.strict().label(e.name)), t.argsByName.set(e.name, e), e)));
        }
        u.rules = h;
        const d = Object.assign({}, f.modifiers);
        if (u.modifiers) for (const e in u.modifiers) {
          s(!l[e], "Rule conflict in", u.type, e);
          const t = u.modifiers[e];
          s("function" == typeof t, "Invalid modifier definition for", u.type, e);

          const r = function (t) {
            return this.rule({
              [e]: t
            });
          };

          l[e] = r, d[e] = t;
        }

        if (u.modifiers = d, u.overrides) {
          l._super = r, c.$_super = {};

          for (const e in u.overrides) s(r[e], "Cannot override missing", e), u.overrides[e][a.symbols.parent] = r[e], c.$_super[e] = r[e].bind(c);

          Object.assign(l, u.overrides);
        }

        u.cast = Object.assign({}, f.cast, u.cast);
        const p = Object.assign({}, f.manifest, u.manifest);
        return p.build = i.build(u.manifest && u.manifest.build, f.manifest && f.manifest.build), u.manifest = p, u.rebuild = i.rebuild(u.rebuild, f.rebuild), c;
      }, i.build = function (e, t) {
        return e && t ? function (r, s) {
          return t(e(r, s), s);
        } : e || t;
      }, i.coerce = function (e, t) {
        return e && t ? {
          from: e.from && t.from ? [...new Set([...e.from, ...t.from])] : null,

          method(r, s) {
            let n;

            if ((!t.from || t.from.includes(typeof r)) && (n = t.method(r, s), n)) {
              if (n.errors || void 0 === n.value) return n;
              r = n.value;
            }

            if (!e.from || e.from.includes(typeof r)) {
              const t = e.method(r, s);
              if (t) return t;
            }

            return n;
          }

        } : e || t;
      }, i.prepare = function (e, t) {
        return e && t ? function (r, s) {
          const n = e(r, s);

          if (n) {
            if (n.errors || void 0 === n.value) return n;
            r = n.value;
          }

          return t(r, s) || n;
        } : e || t;
      }, i.rebuild = function (e, t) {
        return e && t ? function (r) {
          t(r), e(r);
        } : e || t;
      }, i.validate = function (e, t) {
        return e && t ? function (r, s) {
          const n = t(r, s);

          if (n) {
            if (n.errors && (!Array.isArray(n.errors) || n.errors.length)) return n;
            r = n.value;
          }

          return e(r, s) || n;
        } : e || t;
      };
    },
    5107: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(8652),
            o = r(8160),
            i = r(3292),
            l = r(6354),
            c = r(8901),
            u = r(9708),
            f = r(6133),
            m = r(3328),
            h = r(1152);
      let d;
      const p = {
        types: {
          alternatives: r(4946),
          any: r(8068),
          array: r(546),
          boolean: r(4937),
          date: r(7500),
          function: r(390),
          link: r(8785),
          number: r(3832),
          object: r(8966),
          string: r(7417),
          symbol: r(8826)
        },
        aliases: {
          alt: "alternatives",
          bool: "boolean",
          func: "function"
        },
        root: function () {
          const e = {
            _types: new Set(Object.keys(p.types))
          };

          for (const t of e._types) e[t] = function (...e) {
            return s(!e.length || ["alternatives", "link", "object"].includes(t), "The", t, "type does not allow arguments"), p.generate(this, p.types[t], e);
          };

          for (const t of ["allow", "custom", "disallow", "equal", "exist", "forbidden", "invalid", "not", "only", "optional", "options", "prefs", "preferences", "required", "strip", "valid", "when"]) e[t] = function (...e) {
            return this.any()[t](...e);
          };

          Object.assign(e, p.methods);

          for (const t in p.aliases) {
            const r = p.aliases[t];
            e[t] = e[r];
          }

          return e.x = e.expression, h.setup && h.setup(e), e;
        }
      };
      p.methods = {
        ValidationError: l.ValidationError,
        version: o.version,
        cache: a.provider,

        assert(e, t, ...r) {
          p.assert(e, t, !0, r);
        },

        attempt: (e, t, ...r) => p.assert(e, t, !1, r),

        build(e) {
          return s("function" == typeof u.build, "Manifest functionality disabled"), u.build(this, e);
        },

        checkPreferences(e) {
          o.checkPreferences(e);
        },

        compile(e, t) {
          return i.compile(this, e, t);
        },

        defaults(e) {
          s("function" == typeof e, "modifier must be a function");
          const t = Object.assign({}, this);

          for (const r of t._types) {
            const n = e(t[r]());
            s(o.isSchema(n), "modifier must return a valid schema object"), t[r] = function (...e) {
              return p.generate(this, n, e);
            };
          }

          return t;
        },

        expression: (...e) => new m(...e),

        extend(...e) {
          o.verifyFlat(e, "extend"), d = d || r(3378), s(e.length, "You need to provide at least one extension"), this.assert(e, d.extensions);
          const t = Object.assign({}, this);
          t._types = new Set(t._types);

          for (let r of e) {
            "function" == typeof r && (r = r(t)), this.assert(r, d.extension);
            const e = p.expandExtension(r, t);

            for (const r of e) {
              s(void 0 === t[r.type] || t._types.has(r.type), "Cannot override name", r.type);
              const e = r.base || this.any(),
                    n = c.type(e, r);
              t._types.add(r.type), t[r.type] = function (...e) {
                return p.generate(this, n, e);
              };
            }
          }

          return t;
        },

        isError: l.ValidationError.isError,
        isExpression: m.isTemplate,
        isRef: f.isRef,
        isSchema: o.isSchema,
        in: (...e) => f.in(...e),
        override: o.symbols.override,
        ref: (...e) => f.create(...e),

        types() {
          const e = {};

          for (const t of this._types) e[t] = this[t]();

          for (const t in p.aliases) e[t] = this[t]();

          return e;
        }

      }, p.assert = function (e, t, r, s) {
        const a = s[0] instanceof Error || "string" == typeof s[0] ? s[0] : null,
              i = a ? s[1] : s[0],
              c = t.validate(e, o.preferences({
          errors: {
            stack: !0
          }
        }, i || {}));
        let u = c.error;
        if (!u) return c.value;
        if (a instanceof Error) throw a;
        const f = r && "function" == typeof u.annotate ? u.annotate() : u.message;
        throw u instanceof l.ValidationError == 0 && (u = n(u)), u.message = a ? "".concat(a, " ").concat(f) : f, u;
      }, p.generate = function (e, t, r) {
        return s(e, "Must be invoked on a Joi instance."), t.$_root = e, t._definition.args && r.length ? t._definition.args(t, ...r) : t;
      }, p.expandExtension = function (e, t) {
        if ("string" == typeof e.type) return [e];
        const r = [];

        for (const s of t._types) if (e.type.test(s)) {
          const n = Object.assign({}, e);
          n.type = s, n.base = t[s](), r.push(n);
        }

        return r;
      }, e.exports = p.root();
    },
    6914: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(3328);
      t.compile = function (e, t) {
        if ("string" == typeof e) return s(!t, "Cannot set single message string"), new a(e);
        if (a.isTemplate(e)) return s(!t, "Cannot set single message template"), e;
        s("object" == typeof e && !Array.isArray(e), "Invalid message options"), t = t ? n(t) : {};

        for (let r in e) {
          const n = e[r];

          if ("root" === r || a.isTemplate(n)) {
            t[r] = n;
            continue;
          }

          if ("string" == typeof n) {
            t[r] = new a(n);
            continue;
          }

          s("object" == typeof n && !Array.isArray(n), "Invalid message for", r);
          const o = r;

          for (r in t[o] = t[o] || {}, n) {
            const e = n[r];
            "root" === r || a.isTemplate(e) ? t[o][r] = e : (s("string" == typeof e, "Invalid message for", r, "in", o), t[o][r] = new a(e));
          }
        }

        return t;
      }, t.decompile = function (e) {
        const t = {};

        for (let r in e) {
          const s = e[r];

          if ("root" === r) {
            t.root = s;
            continue;
          }

          if (a.isTemplate(s)) {
            t[r] = s.describe({
              compact: !0
            });
            continue;
          }

          const n = r;

          for (r in t[n] = {}, s) {
            const e = s[r];
            "root" !== r ? t[n][r] = e.describe({
              compact: !0
            }) : t[n].root = e;
          }
        }

        return t;
      }, t.merge = function (e, r) {
        if (!e) return t.compile(r);
        if (!r) return e;
        if ("string" == typeof r) return new a(r);
        if (a.isTemplate(r)) return r;
        const o = n(e);

        for (let e in r) {
          const t = r[e];

          if ("root" === e || a.isTemplate(t)) {
            o[e] = t;
            continue;
          }

          if ("string" == typeof t) {
            o[e] = new a(t);
            continue;
          }

          s("object" == typeof t && !Array.isArray(t), "Invalid message for", e);
          const n = e;

          for (e in o[n] = o[n] || {}, t) {
            const r = t[e];
            "root" === e || a.isTemplate(r) ? o[n][e] = r : (s("string" == typeof r, "Invalid message for", e, "in", n), o[n][e] = new a(r));
          }
        }

        return o;
      };
    },
    2294: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(8160),
            l = r(6133),
            c = {};
      t.Ids = c.Ids = class {
        constructor() {
          this._byId = new Map(), this._byKey = new Map(), this._schemaChain = !1;
        }

        clone() {
          const e = new c.Ids();
          return e._byId = new Map(this._byId), e._byKey = new Map(this._byKey), e._schemaChain = this._schemaChain, e;
        }

        concat(e) {
          e._schemaChain && (this._schemaChain = !0);

          for (const [t, r] of e._byId.entries()) o(!this._byKey.has(t), "Schema id conflicts with existing key:", t), this._byId.set(t, r);

          for (const [t, r] of e._byKey.entries()) o(!this._byId.has(t), "Schema key conflicts with existing id:", t), this._byKey.set(t, r);
        }

        fork(e, t, r) {
          const s = this._collect(e);

          s.push({
            schema: r
          });
          const n = s.shift();
          let a = {
            id: n.id,
            schema: t(n.schema)
          };
          o(i.isSchema(a.schema), "adjuster function failed to return a joi schema type");

          for (const e of s) a = {
            id: e.id,
            schema: c.fork(e.schema, a.id, a.schema)
          };

          return a.schema;
        }

        labels(e, t = []) {
          const r = e[0],
                s = this._get(r);

          if (!s) return [...t, ...e].join(".");
          const n = e.slice(1);
          return t = [...t, s.schema._flags.label || r], n.length ? s.schema._ids.labels(n, t) : t.join(".");
        }

        reach(e, t = []) {
          const r = e[0],
                s = this._get(r);

          o(s, "Schema does not contain path", [...t, ...e].join("."));
          const n = e.slice(1);
          return n.length ? s.schema._ids.reach(n, [...t, r]) : s.schema;
        }

        register(e, {
          key: t
        } = {}) {
          if (!e || !i.isSchema(e)) return;
          (e.$_property("schemaChain") || e._ids._schemaChain) && (this._schemaChain = !0);
          const r = e._flags.id;

          if (r) {
            const t = this._byId.get(r);

            o(!t || t.schema === e, "Cannot add different schemas with the same id:", r), o(!this._byKey.has(r), "Schema id conflicts with existing key:", r), this._byId.set(r, {
              schema: e,
              id: r
            });
          }

          t && (o(!this._byKey.has(t), "Schema already contains key:", t), o(!this._byId.has(t), "Schema key conflicts with existing id:", t), this._byKey.set(t, {
            schema: e,
            id: t
          }));
        }

        reset() {
          this._byId = new Map(), this._byKey = new Map(), this._schemaChain = !1;
        }

        _collect(e, t = [], r = []) {
          const s = e[0],
                n = this._get(s);

          o(n, "Schema does not contain path", [...t, ...e].join(".")), r = [n, ...r];
          const a = e.slice(1);
          return a.length ? n.schema._ids._collect(a, [...t, s], r) : r;
        }

        _get(e) {
          return this._byId.get(e) || this._byKey.get(e);
        }

      }, c.fork = function (e, r, s) {
        const n = t.schema(e, {
          each: (e, {
            key: t
          }) => {
            if (r === (e._flags.id || t)) return s;
          },
          ref: !1
        });
        return n ? n.$_mutateRebuild() : e;
      }, t.schema = function (e, t) {
        let r;

        for (const s in e._flags) {
          if ("_" === s[0]) continue;
          const n = c.scan(e._flags[s], {
            source: "flags",
            name: s
          }, t);
          void 0 !== n && (r = r || e.clone(), r._flags[s] = n);
        }

        for (let s = 0; s < e._rules.length; ++s) {
          const n = e._rules[s],
                a = c.scan(n.args, {
            source: "rules",
            name: n.name
          }, t);

          if (void 0 !== a) {
            r = r || e.clone();
            const t = Object.assign({}, n);
            t.args = a, r._rules[s] = t, r._singleRules.get(n.name) === n && r._singleRules.set(n.name, t);
          }
        }

        for (const s in e.$_terms) {
          if ("_" === s[0]) continue;
          const n = c.scan(e.$_terms[s], {
            source: "terms",
            name: s
          }, t);
          void 0 !== n && (r = r || e.clone(), r.$_terms[s] = n);
        }

        return r;
      }, c.scan = function (e, t, r, s, a) {
        const o = s || [];
        if (null === e || "object" != typeof e) return;
        let u;

        if (Array.isArray(e)) {
          for (let s = 0; s < e.length; ++s) {
            const n = "terms" === t.source && "keys" === t.name && e[s].key,
                  a = c.scan(e[s], t, r, [s, ...o], n);
            void 0 !== a && (u = u || e.slice(), u[s] = a);
          }

          return u;
        }

        if (!1 !== r.schema && i.isSchema(e) || !1 !== r.ref && l.isRef(e)) {
          const s = r.each(e, n(n({}, t), {}, {
            path: o,
            key: a
          }));
          if (s === e) return;
          return s;
        }

        for (const s in e) {
          if ("_" === s[0]) continue;
          const n = c.scan(e[s], t, r, [s, ...o], a);
          void 0 !== n && (u = u || Object.assign({}, e), u[s] = n);
        }

        return u;
      };
    },
    6133: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(8571),
            l = r(9621),
            c = r(8160);
      let u;
      const f = {
        symbol: Symbol("ref"),
        defaults: {
          adjust: null,
          in: !1,
          iterables: null,
          map: null,
          separator: ".",
          type: "value"
        }
      };
      t.create = function (e, t = {}) {
        o("string" == typeof e, "Invalid reference key:", e), c.assertOptions(t, ["adjust", "ancestor", "in", "iterables", "map", "prefix", "render", "separator"]), o(!t.prefix || "object" == typeof t.prefix, "options.prefix must be of type object");
        const r = Object.assign({}, f.defaults, t);
        delete r.prefix;
        const s = r.separator,
              n = f.context(e, s, t.prefix);
        if (r.type = n.type, e = n.key, "value" === r.type) if (n.root && (o(!s || e[0] !== s, "Cannot specify relative path with root prefix"), r.ancestor = "root", e || (e = null)), s && s === e) e = null, r.ancestor = 0;else if (void 0 !== r.ancestor) o(!s || !e || e[0] !== s, "Cannot combine prefix with ancestor option");else {
          const [t, n] = f.ancestor(e, s);
          n && "" === (e = e.slice(n)) && (e = null), r.ancestor = t;
        }
        return r.path = s ? null === e ? [] : e.split(s) : [e], new f.Ref(r);
      }, t.in = function (e, r = {}) {
        return t.create(e, n(n({}, r), {}, {
          in: !0
        }));
      }, t.isRef = function (e) {
        return !!e && !!e[c.symbols.ref];
      }, f.Ref = class {
        constructor(e) {
          o("object" == typeof e, "Invalid reference construction"), c.assertOptions(e, ["adjust", "ancestor", "in", "iterables", "map", "path", "render", "separator", "type", "depth", "key", "root", "display"]), o([!1, void 0].includes(e.separator) || "string" == typeof e.separator && 1 === e.separator.length, "Invalid separator"), o(!e.adjust || "function" == typeof e.adjust, "options.adjust must be a function"), o(!e.map || Array.isArray(e.map), "options.map must be an array"), o(!e.map || !e.adjust, "Cannot set both map and adjust options"), Object.assign(this, f.defaults, e), o("value" === this.type || void 0 === this.ancestor, "Non-value references cannot reference ancestors"), Array.isArray(this.map) && (this.map = new Map(this.map)), this.depth = this.path.length, this.key = this.path.length ? this.path.join(this.separator) : null, this.root = this.path[0], this.updateDisplay();
        }

        resolve(e, t, r, s, n = {}) {
          return o(!this.in || n.in, "Invalid in() reference usage"), "global" === this.type ? this._resolve(r.context, t, n) : "local" === this.type ? this._resolve(s, t, n) : this.ancestor ? "root" === this.ancestor ? this._resolve(t.ancestors[t.ancestors.length - 1], t, n) : (o(this.ancestor <= t.ancestors.length, "Invalid reference exceeds the schema root:", this.display), this._resolve(t.ancestors[this.ancestor - 1], t, n)) : this._resolve(e, t, n);
        }

        _resolve(e, t, r) {
          let s;

          if ("value" === this.type && t.mainstay.shadow && !1 !== r.shadow && (s = t.mainstay.shadow.get(this.absolute(t))), void 0 === s && (s = l(e, this.path, {
            iterables: this.iterables,
            functions: !0
          })), this.adjust && (s = this.adjust(s)), this.map) {
            const e = this.map.get(s);
            void 0 !== e && (s = e);
          }

          return t.mainstay && t.mainstay.tracer.resolve(t, this, s), s;
        }

        toString() {
          return this.display;
        }

        absolute(e) {
          return [...e.path.slice(0, -this.ancestor), ...this.path];
        }

        clone() {
          return new f.Ref(this);
        }

        describe() {
          const e = {
            path: this.path
          };
          "value" !== this.type && (e.type = this.type), "." !== this.separator && (e.separator = this.separator), "value" === this.type && 1 !== this.ancestor && (e.ancestor = this.ancestor), this.map && (e.map = [...this.map]);

          for (const t of ["adjust", "iterables", "render"]) null !== this[t] && void 0 !== this[t] && (e[t] = this[t]);

          return !1 !== this.in && (e.in = !0), {
            ref: e
          };
        }

        updateDisplay() {
          const e = null !== this.key ? this.key : "";
          if ("value" !== this.type) return void (this.display = "ref:".concat(this.type, ":").concat(e));
          if (!this.separator) return void (this.display = "ref:".concat(e));
          if (!this.ancestor) return void (this.display = "ref:".concat(this.separator).concat(e));
          if ("root" === this.ancestor) return void (this.display = "ref:root:".concat(e));
          if (1 === this.ancestor) return void (this.display = "ref:".concat(e || ".."));
          const t = new Array(this.ancestor + 1).fill(this.separator).join("");
          this.display = "ref:".concat(t).concat(e || "");
        }

      }, f.Ref.prototype[c.symbols.ref] = !0, t.build = function (e) {
        return "value" === (e = Object.assign({}, f.defaults, e)).type && void 0 === e.ancestor && (e.ancestor = 1), new f.Ref(e);
      }, f.context = function (e, t, r = {}) {
        if (e = e.trim(), r) {
          const s = void 0 === r.global ? "$" : r.global;
          if (s !== t && e.startsWith(s)) return {
            key: e.slice(s.length),
            type: "global"
          };
          const n = void 0 === r.local ? "#" : r.local;
          if (n !== t && e.startsWith(n)) return {
            key: e.slice(n.length),
            type: "local"
          };
          const a = void 0 === r.root ? "/" : r.root;
          if (a !== t && e.startsWith(a)) return {
            key: e.slice(a.length),
            type: "value",
            root: !0
          };
        }

        return {
          key: e,
          type: "value"
        };
      }, f.ancestor = function (e, t) {
        if (!t) return [1, 0];
        if (e[0] !== t) return [1, 0];
        if (e[1] !== t) return [0, 1];
        let r = 2;

        for (; e[r] === t;) ++r;

        return [r - 1, r];
      }, t.toSibling = 0, t.toParent = 1, t.Manager = class {
        constructor() {
          this.refs = [];
        }

        register(e, s) {
          if (e) if (s = void 0 === s ? t.toParent : s, Array.isArray(e)) for (const t of e) this.register(t, s);else if (c.isSchema(e)) for (const t of e._refs.refs) t.ancestor - s >= 0 && this.refs.push({
            ancestor: t.ancestor - s,
            root: t.root
          });else t.isRef(e) && "value" === e.type && e.ancestor - s >= 0 && this.refs.push({
            ancestor: e.ancestor - s,
            root: e.root
          }), u = u || r(3328), u.isTemplate(e) && this.register(e.refs(), s);
        }

        get length() {
          return this.refs.length;
        }

        clone() {
          const e = new t.Manager();
          return e.refs = i(this.refs), e;
        }

        reset() {
          this.refs = [];
        }

        roots() {
          return this.refs.filter(e => !e.ancestor).map(e => e.root);
        }

      };
    },
    3378: (e, t, r) => {
      "use strict";

      const s = r(5107),
            n = {};
      n.wrap = s.string().min(1).max(2).allow(!1), t.preferences = s.object({
        allowUnknown: s.boolean(),
        abortEarly: s.boolean(),
        artifacts: s.boolean(),
        cache: s.boolean(),
        context: s.object(),
        convert: s.boolean(),
        dateFormat: s.valid("date", "iso", "string", "time", "utc"),
        debug: s.boolean(),
        errors: {
          escapeHtml: s.boolean(),
          label: s.valid("path", "key", !1),
          language: [s.string(), s.object().ref()],
          render: s.boolean(),
          stack: s.boolean(),
          wrap: {
            label: n.wrap,
            array: n.wrap,
            string: n.wrap
          }
        },
        externals: s.boolean(),
        messages: s.object(),
        noDefaults: s.boolean(),
        nonEnumerables: s.boolean(),
        presence: s.valid("required", "optional", "forbidden"),
        skipFunctions: s.boolean(),
        stripUnknown: s.object({
          arrays: s.boolean(),
          objects: s.boolean()
        }).or("arrays", "objects").allow(!0, !1),
        warnings: s.boolean()
      }).strict(), n.nameRx = /^[a-zA-Z0-9]\w*$/, n.rule = s.object({
        alias: s.array().items(s.string().pattern(n.nameRx)).single(),
        args: s.array().items(s.string(), s.object({
          name: s.string().pattern(n.nameRx).required(),
          ref: s.boolean(),
          assert: s.alternatives([s.function(), s.object().schema()]).conditional("ref", {
            is: !0,
            then: s.required()
          }),
          normalize: s.function(),
          message: s.string().when("assert", {
            is: s.function(),
            then: s.required()
          })
        })),
        convert: s.boolean(),
        manifest: s.boolean(),
        method: s.function().allow(!1),
        multi: s.boolean(),
        validate: s.function()
      }), t.extension = s.object({
        type: s.alternatives([s.string(), s.object().regex()]).required(),
        args: s.function(),
        cast: s.object().pattern(n.nameRx, s.object({
          from: s.function().maxArity(1).required(),
          to: s.function().minArity(1).maxArity(2).required()
        })),
        base: s.object().schema().when("type", {
          is: s.object().regex(),
          then: s.forbidden()
        }),
        coerce: [s.function().maxArity(3), s.object({
          method: s.function().maxArity(3).required(),
          from: s.array().items(s.string()).single()
        })],
        flags: s.object().pattern(n.nameRx, s.object({
          setter: s.string(),
          default: s.any()
        })),
        manifest: {
          build: s.function().arity(2)
        },
        messages: [s.object(), s.string()],
        modifiers: s.object().pattern(n.nameRx, s.function().minArity(1).maxArity(2)),
        overrides: s.object().pattern(n.nameRx, s.function()),
        prepare: s.function().maxArity(3),
        rebuild: s.function().arity(1),
        rules: s.object().pattern(n.nameRx, n.rule),
        terms: s.object().pattern(n.nameRx, s.object({
          init: s.array().allow(null).required(),
          manifest: s.object().pattern(/.+/, [s.valid("schema", "single"), s.object({
            mapped: s.object({
              from: s.string().required(),
              to: s.string().required()
            }).required()
          })])
        })),
        validate: s.function().maxArity(3)
      }).strict(), t.extensions = s.array().items(s.object(), s.function().arity(1)).strict(), n.desc = {
        buffer: s.object({
          buffer: s.string()
        }),
        func: s.object({
          function: s.function().required(),
          options: {
            literal: !0
          }
        }),
        override: s.object({
          override: !0
        }),
        ref: s.object({
          ref: s.object({
            type: s.valid("value", "global", "local"),
            path: s.array().required(),
            separator: s.string().length(1).allow(!1),
            ancestor: s.number().min(0).integer().allow("root"),
            map: s.array().items(s.array().length(2)).min(1),
            adjust: s.function(),
            iterables: s.boolean(),
            in: s.boolean(),
            render: s.boolean()
          }).required()
        }),
        regex: s.object({
          regex: s.string().min(3)
        }),
        special: s.object({
          special: s.valid("deep").required()
        }),
        template: s.object({
          template: s.string().required(),
          options: s.object()
        }),
        value: s.object({
          value: s.alternatives([s.object(), s.array()]).required()
        })
      }, n.desc.entity = s.alternatives([s.array().items(s.link("...")), s.boolean(), s.function(), s.number(), s.string(), n.desc.buffer, n.desc.func, n.desc.ref, n.desc.regex, n.desc.special, n.desc.template, n.desc.value, s.link("/")]), n.desc.values = s.array().items(null, s.boolean(), s.function(), s.number().allow(1 / 0, -1 / 0), s.string().allow(""), s.symbol(), n.desc.buffer, n.desc.func, n.desc.override, n.desc.ref, n.desc.regex, n.desc.template, n.desc.value), n.desc.messages = s.object().pattern(/.+/, [s.string(), n.desc.template, s.object().pattern(/.+/, [s.string(), n.desc.template])]), t.description = s.object({
        type: s.string().required(),
        flags: s.object({
          cast: s.string(),
          default: s.any(),
          description: s.string(),
          empty: s.link("/"),
          failover: n.desc.entity,
          id: s.string(),
          label: s.string(),
          only: !0,
          presence: ["optional", "required", "forbidden"],
          result: ["raw", "strip"],
          strip: s.boolean(),
          unit: s.string()
        }).unknown(),
        preferences: {
          allowUnknown: s.boolean(),
          abortEarly: s.boolean(),
          artifacts: s.boolean(),
          cache: s.boolean(),
          convert: s.boolean(),
          dateFormat: ["date", "iso", "string", "time", "utc"],
          errors: {
            escapeHtml: s.boolean(),
            label: ["path", "key"],
            language: [s.string(), n.desc.ref],
            wrap: {
              label: n.wrap,
              array: n.wrap
            }
          },
          externals: s.boolean(),
          messages: n.desc.messages,
          noDefaults: s.boolean(),
          nonEnumerables: s.boolean(),
          presence: ["required", "optional", "forbidden"],
          skipFunctions: s.boolean(),
          stripUnknown: s.object({
            arrays: s.boolean(),
            objects: s.boolean()
          }).or("arrays", "objects").allow(!0, !1),
          warnings: s.boolean()
        },
        allow: n.desc.values,
        invalid: n.desc.values,
        rules: s.array().min(1).items({
          name: s.string().required(),
          args: s.object().min(1),
          keep: s.boolean(),
          message: [s.string(), n.desc.messages],
          warn: s.boolean()
        }),
        keys: s.object().pattern(/.*/, s.link("/")),
        link: n.desc.ref
      }).pattern(/^[a-z]\w*$/, s.any());
    },
    493: (e, t, r) => {
      "use strict";

      const s = r(8571),
            n = r(9621),
            a = r(8160),
            o = {
        value: Symbol("value")
      };
      e.exports = o.State = class {
        constructor(e, t, r) {
          this.path = e, this.ancestors = t, this.mainstay = r.mainstay, this.schemas = r.schemas, this.debug = null;
        }

        localize(e, t = null, r = null) {
          const s = new o.State(e, t, this);
          return r && s.schemas && (s.schemas = [o.schemas(r), ...s.schemas]), s;
        }

        nest(e, t) {
          const r = new o.State(this.path, this.ancestors, this);
          return r.schemas = r.schemas && [o.schemas(e), ...r.schemas], r.debug = t, r;
        }

        shadow(e, t) {
          this.mainstay.shadow = this.mainstay.shadow || new o.Shadow(), this.mainstay.shadow.set(this.path, e, t);
        }

        snapshot() {
          this.mainstay.shadow && (this._snapshot = s(this.mainstay.shadow.node(this.path)));
        }

        restore() {
          this.mainstay.shadow && (this.mainstay.shadow.override(this.path, this._snapshot), this._snapshot = void 0);
        }

      }, o.schemas = function (e) {
        return a.isSchema(e) ? {
          schema: e
        } : e;
      }, o.Shadow = class {
        constructor() {
          this._values = null;
        }

        set(e, t, r) {
          if (!e.length) return;
          if ("strip" === r && "number" == typeof e[e.length - 1]) return;
          this._values = this._values || new Map();
          let s = this._values;

          for (let t = 0; t < e.length; ++t) {
            const r = e[t];
            let n = s.get(r);
            n || (n = new Map(), s.set(r, n)), s = n;
          }

          s[o.value] = t;
        }

        get(e) {
          const t = this.node(e);
          if (t) return t[o.value];
        }

        node(e) {
          if (this._values) return n(this._values, e, {
            iterables: !0
          });
        }

        override(e, t) {
          if (!this._values) return;
          const r = e.slice(0, -1),
                s = e[e.length - 1],
                a = n(this._values, r, {
            iterables: !0
          });
          t ? a.set(s, t) : a && a.delete(s);
        }

      };
    },
    3328: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(8571),
            l = r(5277),
            c = r(1447),
            u = r(8160),
            f = r(6354),
            m = r(6133),
            h = {
        symbol: Symbol("template"),
        opens: new Array(1e3).join("\0"),
        closes: new Array(1e3).join(""),
        dateFormat: {
          date: Date.prototype.toDateString,
          iso: Date.prototype.toISOString,
          string: Date.prototype.toString,
          time: Date.prototype.toTimeString,
          utc: Date.prototype.toUTCString
        }
      };
      e.exports = h.Template = class {
        constructor(e, t) {
          o("string" == typeof e, "Template source must be a string"), o(!e.includes("\0") && !e.includes(""), "Template source cannot contain reserved control characters"), this.source = e, this.rendered = e, this._template = null, this._settings = i(t), this._parse();
        }

        _parse() {
          if (!this.source.includes("{")) return;
          const e = h.encode(this.source),
                t = h.split(e);
          let r = !1;
          const s = [],
                n = t.shift();
          n && s.push(n);

          for (const e of t) {
            const t = "{" !== e[0],
                  n = t ? "}" : "}}",
                  a = e.indexOf(n);

            if (-1 === a || "{" === e[1]) {
              s.push("{".concat(h.decode(e)));
              continue;
            }

            let o = e.slice(t ? 0 : 1, a);
            const i = ":" === o[0];
            i && (o = o.slice(1));

            const l = this._ref(h.decode(o), {
              raw: t,
              wrapped: i
            });

            s.push(l), "string" != typeof l && (r = !0);
            const c = e.slice(a + n.length);
            c && s.push(h.decode(c));
          }

          r ? this._template = s : this.rendered = s.join("");
        }

        static date(e, t) {
          return h.dateFormat[t.dateFormat].call(e);
        }

        describe(e = {}) {
          if (!this._settings && e.compact) return this.source;
          const t = {
            template: this.source
          };
          return this._settings && (t.options = this._settings), t;
        }

        static build(e) {
          return new h.Template(e.template, e.options);
        }

        isDynamic() {
          return !!this._template;
        }

        static isTemplate(e) {
          return !!e && !!e[u.symbols.template];
        }

        refs() {
          if (!this._template) return;
          const e = [];

          for (const t of this._template) "string" != typeof t && e.push(...t.refs);

          return e;
        }

        resolve(e, t, r, s) {
          return this._template && 1 === this._template.length ? this._part(this._template[0], e, t, r, s, {}) : this.render(e, t, r, s);
        }

        _part(e, ...t) {
          return e.ref ? e.ref.resolve(...t) : e.formula.evaluate(t);
        }

        render(e, t, r, s, n = {}) {
          if (!this.isDynamic()) return this.rendered;
          const a = [];

          for (const o of this._template) if ("string" == typeof o) a.push(o);else {
            const i = this._part(o, e, t, r, s, n),
                  c = h.stringify(i, e, t, r, s, n);

            if (void 0 !== c) {
              const e = o.raw || !1 === (n.errors && n.errors.escapeHtml) ? c : l(c);
              a.push(h.wrap(e, o.wrapped && r.errors.wrap.label));
            }
          }

          return a.join("");
        }

        _ref(e, {
          raw: t,
          wrapped: r
        }) {
          const s = [],
                n = e => {
            const t = m.create(e, this._settings);
            return s.push(t), e => t.resolve(...e);
          };

          try {
            var a = new c.Parser(e, {
              reference: n,
              functions: h.functions,
              constants: h.constants
            });
          } catch (t) {
            throw t.message = 'Invalid template variable "'.concat(e, '" fails due to: ').concat(t.message), t;
          }

          if (a.single) {
            if ("reference" === a.single.type) {
              const e = s[0];
              return {
                ref: e,
                raw: t,
                refs: s,
                wrapped: r || "local" === e.type && "label" === e.key
              };
            }

            return h.stringify(a.single.value);
          }

          return {
            formula: a,
            raw: t,
            refs: s
          };
        }

        toString() {
          return this.source;
        }

      }, h.Template.prototype[u.symbols.template] = !0, h.Template.prototype.isImmutable = !0, h.encode = function (e) {
        return e.replace(/\\(\{+)/g, (e, t) => h.opens.slice(0, t.length)).replace(/\\(\}+)/g, (e, t) => h.closes.slice(0, t.length));
      }, h.decode = function (e) {
        return e.replace(/\u0000/g, "{").replace(/\u0001/g, "}");
      }, h.split = function (e) {
        const t = [];
        let r = "";

        for (let s = 0; s < e.length; ++s) {
          const n = e[s];

          if ("{" === n) {
            let n = "";

            for (; s + 1 < e.length && "{" === e[s + 1];) n += "{", ++s;

            t.push(r), r = n;
          } else r += n;
        }

        return t.push(r), t;
      }, h.wrap = function (e, t) {
        return t ? 1 === t.length ? "".concat(t).concat(e).concat(t) : "".concat(t[0]).concat(e).concat(t[1]) : e;
      }, h.stringify = function (e, t, r, s, a, o = {}) {
        const i = typeof e,
              l = s && s.errors && s.errors.wrap || {};
        let c = !1;
        if (m.isRef(e) && e.render && (c = e.in, e = e.resolve(t, r, s, a, n({
          in: e.in
        }, o))), null === e) return "null";
        if ("string" === i) return h.wrap(e, o.arrayItems && l.string);
        if ("number" === i || "function" === i || "symbol" === i) return e.toString();
        if ("object" !== i) return JSON.stringify(e);
        if (e instanceof Date) return h.Template.date(e, s);

        if (e instanceof Map) {
          const t = [];

          for (const [r, s] of e.entries()) t.push("".concat(r.toString(), " -> ").concat(s.toString()));

          e = t;
        }

        if (!Array.isArray(e)) return e.toString();
        const u = [];

        for (const i of e) u.push(h.stringify(i, t, r, s, a, n({
          arrayItems: !0
        }, o)));

        return h.wrap(u.join(", "), !c && l.array);
      }, h.constants = {
        true: !0,
        false: !1,
        null: null,
        second: 1e3,
        minute: 6e4,
        hour: 36e5,
        day: 864e5
      }, h.functions = {
        if: (e, t, r) => e ? t : r,
        length: e => "string" == typeof e ? e.length : e && "object" == typeof e ? Array.isArray(e) ? e.length : Object.keys(e).length : null,

        msg(e) {
          const [t, r, s, n, a] = this,
                o = a.messages;
          if (!o) return "";
          const i = f.template(t, o[0], e, r, s) || f.template(t, o[1], e, r, s);
          return i ? i.render(t, r, s, n, a) : "";
        },

        number: e => "number" == typeof e ? e : "string" == typeof e ? parseFloat(e) : "boolean" == typeof e ? e ? 1 : 0 : e instanceof Date ? e.getTime() : null
      };
    },
    4946: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(1687),
            a = r(8068),
            o = r(8160),
            i = r(3292),
            l = r(6354),
            c = r(6133),
            u = {};
      e.exports = a.extend({
        type: "alternatives",
        flags: {
          match: {
            default: "any"
          }
        },
        terms: {
          matches: {
            init: [],
            register: c.toSibling
          }
        },
        args: (e, ...t) => 1 === t.length && Array.isArray(t[0]) ? e.try(...t[0]) : e.try(...t),

        validate(e, t) {
          const {
            schema: r,
            error: s,
            state: a,
            prefs: o
          } = t;

          if (r._flags.match) {
            const t = [],
                  i = [];

            for (let s = 0; s < r.$_terms.matches.length; ++s) {
              const n = r.$_terms.matches[s],
                    l = a.nest(n.schema, "match.".concat(s));
              l.snapshot();
              const c = n.schema.$_validate(e, l, o);
              c.errors ? (i.push(c.errors), l.restore()) : t.push(c.value);
            }

            if (0 === t.length) return {
              errors: s("alternatives.any", {
                details: i.map(e => l.details(e, {
                  override: !1
                }))
              })
            };
            if ("one" === r._flags.match) return 1 === t.length ? {
              value: t[0]
            } : {
              errors: s("alternatives.one")
            };
            if (t.length !== r.$_terms.matches.length) return {
              errors: s("alternatives.all", {
                details: i.map(e => l.details(e, {
                  override: !1
                }))
              })
            };

            const c = e => e.$_terms.matches.some(e => "object" === e.schema.type || "alternatives" === e.schema.type && c(e.schema));

            return c(r) ? {
              value: t.reduce((e, t) => n(e, t, {
                mergeArrays: !1
              }))
            } : {
              value: t[t.length - 1]
            };
          }

          const i = [];

          for (let t = 0; t < r.$_terms.matches.length; ++t) {
            const s = r.$_terms.matches[t];

            if (s.schema) {
              const r = a.nest(s.schema, "match.".concat(t));
              r.snapshot();
              const n = s.schema.$_validate(e, r, o);
              if (!n.errors) return n;
              r.restore(), i.push({
                schema: s.schema,
                reports: n.errors
              });
              continue;
            }

            const n = s.ref ? s.ref.resolve(e, a, o) : e,
                  l = s.is ? [s] : s.switch;

            for (let r = 0; r < l.length; ++r) {
              const i = l[r],
                    {
                is: c,
                then: u,
                otherwise: f
              } = i,
                    m = "match.".concat(t).concat(s.switch ? "." + r : "");

              if (c.$_match(n, a.nest(c, "".concat(m, ".is")), o)) {
                if (u) return u.$_validate(e, a.nest(u, "".concat(m, ".then")), o);
              } else if (f) return f.$_validate(e, a.nest(f, "".concat(m, ".otherwise")), o);
            }
          }

          return u.errors(i, t);
        },

        rules: {
          conditional: {
            method(e, t) {
              s(!this._flags._endedSwitch, "Unreachable condition"), s(!this._flags.match, "Cannot combine match mode", this._flags.match, "with conditional rule"), s(void 0 === t.break, "Cannot use break option with alternatives conditional");
              const r = this.clone(),
                    n = i.when(r, e, t),
                    a = n.is ? [n] : n.switch;

              for (const e of a) if (e.then && e.otherwise) {
                r.$_setFlag("_endedSwitch", !0, {
                  clone: !1
                });
                break;
              }

              return r.$_terms.matches.push(n), r.$_mutateRebuild();
            }

          },
          match: {
            method(e) {
              if (s(["any", "one", "all"].includes(e), "Invalid alternatives match mode", e), "any" !== e) for (const t of this.$_terms.matches) s(t.schema, "Cannot combine match mode", e, "with conditional rules");
              return this.$_setFlag("match", e);
            }

          },
          try: {
            method(...e) {
              s(e.length, "Missing alternative schemas"), o.verifyFlat(e, "try"), s(!this._flags._endedSwitch, "Unreachable condition");
              const t = this.clone();

              for (const r of e) t.$_terms.matches.push({
                schema: t.$_compile(r)
              });

              return t.$_mutateRebuild();
            }

          }
        },
        overrides: {
          label(e) {
            return this.$_parent("label", e).$_modify({
              each: (t, r) => "is" !== r.path[0] ? t.label(e) : void 0,
              ref: !1
            });
          }

        },

        rebuild(e) {
          e.$_modify({
            each: t => {
              o.isSchema(t) && "array" === t.type && e.$_setFlag("_arrayItems", !0, {
                clone: !1
              });
            }
          });
        },

        manifest: {
          build(e, t) {
            if (t.matches) for (const r of t.matches) {
              const {
                schema: t,
                ref: s,
                is: n,
                not: a,
                then: o,
                otherwise: i
              } = r;
              e = t ? e.try(t) : s ? e.conditional(s, {
                is: n,
                then: o,
                not: a,
                otherwise: i,
                switch: r.switch
              }) : e.conditional(n, {
                then: o,
                otherwise: i
              });
            }
            return e;
          }

        },
        messages: {
          "alternatives.all": "{{#label}} does not match all of the required types",
          "alternatives.any": "{{#label}} does not match any of the allowed types",
          "alternatives.match": "{{#label}} does not match any of the allowed types",
          "alternatives.one": "{{#label}} matches more than one allowed type",
          "alternatives.types": "{{#label}} must be one of {{#types}}"
        }
      }), u.errors = function (e, {
        error: t,
        state: r
      }) {
        if (!e.length) return {
          errors: t("alternatives.any")
        };
        if (1 === e.length) return {
          errors: e[0].reports
        };
        const s = new Set(),
              n = [];

        for (const {
          reports: a,
          schema: o
        } of e) {
          if (a.length > 1) return u.unmatched(e, t);
          const i = a[0];
          if (i instanceof l.Report == 0) return u.unmatched(e, t);

          if (i.state.path.length !== r.path.length) {
            n.push({
              type: o.type,
              report: i
            });
            continue;
          }

          if ("any.only" === i.code) {
            for (const e of i.local.valids) s.add(e);

            continue;
          }

          const [c, f] = i.code.split(".");
          "base" === f ? s.add(c) : n.push({
            type: o.type,
            report: i
          });
        }

        return n.length ? 1 === n.length ? {
          errors: n[0].report
        } : u.unmatched(e, t) : {
          errors: t("alternatives.types", {
            types: [...s]
          })
        };
      }, u.unmatched = function (e, t) {
        const r = [];

        for (const t of e) r.push(...t.reports);

        return {
          errors: t("alternatives.match", l.details(r, {
            override: !1
          }))
        };
      };
    },
    8068: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(7629),
            a = r(8160),
            o = r(6914);
      e.exports = n.extend({
        type: "any",
        flags: {
          only: {
            default: !1
          }
        },
        terms: {
          alterations: {
            init: null
          },
          examples: {
            init: null
          },
          externals: {
            init: null
          },
          metas: {
            init: []
          },
          notes: {
            init: []
          },
          shared: {
            init: null
          },
          tags: {
            init: []
          },
          whens: {
            init: null
          }
        },
        rules: {
          custom: {
            method(e, t) {
              return s("function" == typeof e, "Method must be a function"), s(void 0 === t || t && "string" == typeof t, "Description must be a non-empty string"), this.$_addRule({
                name: "custom",
                args: {
                  method: e,
                  description: t
                }
              });
            },

            validate(e, t, {
              method: r
            }) {
              try {
                return r(e, t);
              } catch (e) {
                return t.error("any.custom", {
                  error: e
                });
              }
            },

            args: ["method", "description"],
            multi: !0
          },
          messages: {
            method(e) {
              return this.prefs({
                messages: e
              });
            }

          },
          shared: {
            method(e) {
              s(a.isSchema(e) && e._flags.id, "Schema must be a schema with an id");
              const t = this.clone();
              return t.$_terms.shared = t.$_terms.shared || [], t.$_terms.shared.push(e), t.$_mutateRegister(e), t;
            }

          },
          warning: {
            method(e, t) {
              return s(e && "string" == typeof e, "Invalid warning code"), this.$_addRule({
                name: "warning",
                args: {
                  code: e,
                  local: t
                },
                warn: !0
              });
            },

            validate: (e, t, {
              code: r,
              local: s
            }) => t.error(r, s),
            args: ["code", "local"],
            multi: !0
          }
        },
        modifiers: {
          keep(e, t = !0) {
            e.keep = t;
          },

          message(e, t) {
            e.message = o.compile(t);
          },

          warn(e, t = !0) {
            e.warn = t;
          }

        },
        manifest: {
          build(e, t) {
            for (const r in t) {
              const s = t[r];
              if (["examples", "externals", "metas", "notes", "tags"].includes(r)) for (const t of s) e = e[r.slice(0, -1)](t);else if ("alterations" !== r) {
                if ("whens" !== r) {
                  if ("shared" === r) for (const t of s) e = e.shared(t);
                } else for (const t of s) {
                  const {
                    ref: r,
                    is: s,
                    not: n,
                    then: a,
                    otherwise: o,
                    concat: i
                  } = t;
                  e = i ? e.concat(i) : r ? e.when(r, {
                    is: s,
                    not: n,
                    then: a,
                    otherwise: o,
                    switch: t.switch,
                    break: t.break
                  }) : e.when(s, {
                    then: a,
                    otherwise: o,
                    break: t.break
                  });
                }
              } else {
                const t = {};

                for (const {
                  target: e,
                  adjuster: r
                } of s) t[e] = r;

                e = e.alter(t);
              }
            }

            return e;
          }

        },
        messages: {
          "any.custom": "{{#label}} failed custom validation because {{#error.message}}",
          "any.default": "{{#label}} threw an error when running default method",
          "any.failover": "{{#label}} threw an error when running failover method",
          "any.invalid": "{{#label}} contains an invalid value",
          "any.only": '{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',
          "any.ref": "{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}",
          "any.required": "{{#label}} is required",
          "any.unknown": "{{#label}} is not allowed"
        }
      });
    },
    546: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(9474),
            a = r(9621),
            o = r(8068),
            i = r(8160),
            l = r(3292),
            c = {};
      e.exports = o.extend({
        type: "array",
        flags: {
          single: {
            default: !1
          },
          sparse: {
            default: !1
          }
        },
        terms: {
          items: {
            init: [],
            manifest: "schema"
          },
          ordered: {
            init: [],
            manifest: "schema"
          },
          _exclusions: {
            init: []
          },
          _inclusions: {
            init: []
          },
          _requireds: {
            init: []
          }
        },
        coerce: {
          from: "object",

          method(e, {
            schema: t,
            state: r,
            prefs: s
          }) {
            if (!Array.isArray(e)) return;
            const n = t.$_getRule("sort");
            return n ? c.sort(t, e, n.args.options, r, s) : void 0;
          }

        },

        validate(e, {
          schema: t,
          error: r
        }) {
          if (!Array.isArray(e)) {
            if (t._flags.single) {
              const t = [e];
              return t[i.symbols.arraySingle] = !0, {
                value: t
              };
            }

            return {
              errors: r("array.base")
            };
          }

          if (t.$_getRule("items") || t.$_terms.externals) return {
            value: e.slice()
          };
        },

        rules: {
          has: {
            method(e) {
              e = this.$_compile(e, {
                appendPath: !0
              });
              const t = this.$_addRule({
                name: "has",
                args: {
                  schema: e
                }
              });
              return t.$_mutateRegister(e), t;
            },

            validate(e, {
              state: t,
              prefs: r,
              error: s
            }, {
              schema: n
            }) {
              const a = [e, ...t.ancestors];

              for (let s = 0; s < e.length; ++s) {
                const o = t.localize([...t.path, s], a, n);
                if (n.$_match(e[s], o, r)) return e;
              }

              const o = n._flags.label;
              return o ? s("array.hasKnown", {
                patternLabel: o
              }) : s("array.hasUnknown", null);
            },

            multi: !0
          },
          items: {
            method(...e) {
              i.verifyFlat(e, "items");
              const t = this.$_addRule("items");

              for (let r = 0; r < e.length; ++r) {
                const s = i.tryWithPath(() => this.$_compile(e[r]), r, {
                  append: !0
                });
                t.$_terms.items.push(s);
              }

              return t.$_mutateRebuild();
            },

            validate(e, {
              schema: t,
              error: r,
              state: s,
              prefs: n,
              errorsArray: a
            }) {
              const o = t.$_terms._requireds.slice(),
                    l = t.$_terms.ordered.slice(),
                    u = [...t.$_terms._inclusions, ...o],
                    f = !e[i.symbols.arraySingle];

              delete e[i.symbols.arraySingle];
              const m = a();
              let h = e.length;

              for (let a = 0; a < h; ++a) {
                const i = e[a];
                let d = !1,
                    p = !1;
                const g = f ? a : new Number(a),
                      y = [...s.path, g];

                if (!t._flags.sparse && void 0 === i) {
                  if (m.push(r("array.sparse", {
                    key: g,
                    path: y,
                    pos: a,
                    value: void 0
                  }, s.localize(y))), n.abortEarly) return m;
                  l.shift();
                  continue;
                }

                const b = [e, ...s.ancestors];

                for (const e of t.$_terms._exclusions) if (e.$_match(i, s.localize(y, b, e), n, {
                  presence: "ignore"
                })) {
                  if (m.push(r("array.excludes", {
                    pos: a,
                    value: i
                  }, s.localize(y))), n.abortEarly) return m;
                  d = !0, l.shift();
                  break;
                }

                if (d) continue;

                if (t.$_terms.ordered.length) {
                  if (l.length) {
                    const o = l.shift(),
                          u = o.$_validate(i, s.localize(y, b, o), n);

                    if (u.errors) {
                      if (m.push(...u.errors), n.abortEarly) return m;
                    } else if ("strip" === o._flags.result) c.fastSplice(e, a), --a, --h;else {
                      if (!t._flags.sparse && void 0 === u.value) {
                        if (m.push(r("array.sparse", {
                          key: g,
                          path: y,
                          pos: a,
                          value: void 0
                        }, s.localize(y))), n.abortEarly) return m;
                        continue;
                      }

                      e[a] = u.value;
                    }

                    continue;
                  }

                  if (!t.$_terms.items.length) {
                    if (m.push(r("array.orderedLength", {
                      pos: a,
                      limit: t.$_terms.ordered.length
                    })), n.abortEarly) return m;
                    break;
                  }
                }

                const v = [];
                let _ = o.length;

                for (let l = 0; l < _; ++l) {
                  const u = s.localize(y, b, o[l]);
                  u.snapshot();
                  const f = o[l].$_validate(i, u, n);

                  if (v[l] = f, !f.errors) {
                    if (e[a] = f.value, p = !0, c.fastSplice(o, l), --l, --_, !t._flags.sparse && void 0 === f.value && (m.push(r("array.sparse", {
                      key: g,
                      path: y,
                      pos: a,
                      value: void 0
                    }, s.localize(y))), n.abortEarly)) return m;
                    break;
                  }

                  u.restore();
                }

                if (p) continue;
                const w = n.stripUnknown && !!n.stripUnknown.arrays || !1;
                _ = u.length;

                for (const l of u) {
                  let u;
                  const f = o.indexOf(l);
                  if (-1 !== f) u = v[f];else {
                    const o = s.localize(y, b, l);

                    if (o.snapshot(), u = l.$_validate(i, o, n), !u.errors) {
                      "strip" === l._flags.result ? (c.fastSplice(e, a), --a, --h) : t._flags.sparse || void 0 !== u.value ? e[a] = u.value : (m.push(r("array.sparse", {
                        key: g,
                        path: y,
                        pos: a,
                        value: void 0
                      }, s.localize(y))), d = !0), p = !0;
                      break;
                    }

                    o.restore();
                  }

                  if (1 === _) {
                    if (w) {
                      c.fastSplice(e, a), --a, --h, p = !0;
                      break;
                    }

                    if (m.push(...u.errors), n.abortEarly) return m;
                    d = !0;
                    break;
                  }
                }

                if (!d && (t.$_terms._inclusions.length || t.$_terms._requireds.length) && !p) {
                  if (w) {
                    c.fastSplice(e, a), --a, --h;
                    continue;
                  }

                  if (m.push(r("array.includes", {
                    pos: a,
                    value: i
                  }, s.localize(y))), n.abortEarly) return m;
                }
              }

              return o.length && c.fillMissedErrors(t, m, o, e, s, n), l.length && (c.fillOrderedErrors(t, m, l, e, s, n), m.length || c.fillDefault(l, e, s, n)), m.length ? m : e;
            },

            priority: !0,
            manifest: !1
          },
          length: {
            method(e) {
              return this.$_addRule({
                name: "length",
                args: {
                  limit: e
                },
                operator: "="
              });
            },

            validate: (e, t, {
              limit: r
            }, {
              name: s,
              operator: n,
              args: a
            }) => i.compare(e.length, r, n) ? e : t.error("array." + s, {
              limit: a.limit,
              value: e
            }),
            args: [{
              name: "limit",
              ref: !0,
              assert: i.limit,
              message: "must be a positive integer"
            }]
          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "length",
                args: {
                  limit: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "length",
                args: {
                  limit: e
                },
                operator: ">="
              });
            }

          },
          ordered: {
            method(...e) {
              i.verifyFlat(e, "ordered");
              const t = this.$_addRule("items");

              for (let r = 0; r < e.length; ++r) {
                const s = i.tryWithPath(() => this.$_compile(e[r]), r, {
                  append: !0
                });
                c.validateSingle(s, t), t.$_mutateRegister(s), t.$_terms.ordered.push(s);
              }

              return t.$_mutateRebuild();
            }

          },
          single: {
            method(e) {
              const t = void 0 === e || !!e;
              return s(!t || !this._flags._arrayItems, "Cannot specify single rule when array has array items"), this.$_setFlag("single", t);
            }

          },
          sort: {
            method(e = {}) {
              i.assertOptions(e, ["by", "order"]);
              const t = {
                order: e.order || "ascending"
              };
              return e.by && (t.by = l.ref(e.by, {
                ancestor: 0
              }), s(!t.by.ancestor, "Cannot sort by ancestor")), this.$_addRule({
                name: "sort",
                args: {
                  options: t
                }
              });
            },

            validate(e, {
              error: t,
              state: r,
              prefs: s,
              schema: n
            }, {
              options: a
            }) {
              const {
                value: o,
                errors: i
              } = c.sort(n, e, a, r, s);
              if (i) return i;

              for (let r = 0; r < e.length; ++r) if (e[r] !== o[r]) return t("array.sort", {
                order: a.order,
                by: a.by ? a.by.key : "value"
              });

              return e;
            },

            convert: !0
          },
          sparse: {
            method(e) {
              const t = void 0 === e || !!e;
              return this._flags.sparse === t ? this : (t ? this.clone() : this.$_addRule("items")).$_setFlag("sparse", t, {
                clone: !1
              });
            }

          },
          unique: {
            method(e, t = {}) {
              s(!e || "function" == typeof e || "string" == typeof e, "comparator must be a function or a string"), i.assertOptions(t, ["ignoreUndefined", "separator"]);
              const r = {
                name: "unique",
                args: {
                  options: t,
                  comparator: e
                }
              };
              if (e) if ("string" == typeof e) {
                const s = i.default(t.separator, ".");
                r.path = s ? e.split(s) : [e];
              } else r.comparator = e;
              return this.$_addRule(r);
            },

            validate(e, {
              state: t,
              error: r,
              schema: o
            }, {
              comparator: i,
              options: l
            }, {
              comparator: c,
              path: u
            }) {
              const f = {
                string: Object.create(null),
                number: Object.create(null),
                undefined: Object.create(null),
                boolean: Object.create(null),
                object: new Map(),
                function: new Map(),
                custom: new Map()
              },
                    m = c || n,
                    h = l.ignoreUndefined;

              for (let n = 0; n < e.length; ++n) {
                const o = u ? a(e[n], u) : e[n],
                      l = c ? f.custom : f[typeof o];

                if (s(l, "Failed to find unique map container for type", typeof o), l instanceof Map) {
                  const s = l.entries();
                  let a;

                  for (; !(a = s.next()).done;) if (m(a.value[0], o)) {
                    const s = t.localize([...t.path, n], [e, ...t.ancestors]),
                          o = {
                      pos: n,
                      value: e[n],
                      dupePos: a.value[1],
                      dupeValue: e[a.value[1]]
                    };
                    return u && (o.path = i), r("array.unique", o, s);
                  }

                  l.set(o, n);
                } else {
                  if ((!h || void 0 !== o) && void 0 !== l[o]) {
                    const s = {
                      pos: n,
                      value: e[n],
                      dupePos: l[o],
                      dupeValue: e[l[o]]
                    };
                    return u && (s.path = i), r("array.unique", s, t.localize([...t.path, n], [e, ...t.ancestors]));
                  }

                  l[o] = n;
                }
              }

              return e;
            },

            args: ["comparator", "options"],
            multi: !0
          }
        },
        cast: {
          set: {
            from: Array.isArray,
            to: (e, t) => new Set(e)
          }
        },

        rebuild(e) {
          e.$_terms._inclusions = [], e.$_terms._exclusions = [], e.$_terms._requireds = [];

          for (const t of e.$_terms.items) c.validateSingle(t, e), "required" === t._flags.presence ? e.$_terms._requireds.push(t) : "forbidden" === t._flags.presence ? e.$_terms._exclusions.push(t) : e.$_terms._inclusions.push(t);

          for (const t of e.$_terms.ordered) c.validateSingle(t, e);
        },

        manifest: {
          build: (e, t) => (t.items && (e = e.items(...t.items)), t.ordered && (e = e.ordered(...t.ordered)), e)
        },
        messages: {
          "array.base": "{{#label}} must be an array",
          "array.excludes": "{{#label}} contains an excluded value",
          "array.hasKnown": "{{#label}} does not contain at least one required match for type {:#patternLabel}",
          "array.hasUnknown": "{{#label}} does not contain at least one required match",
          "array.includes": "{{#label}} does not match any of the allowed types",
          "array.includesRequiredBoth": "{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)",
          "array.includesRequiredKnowns": "{{#label}} does not contain {{#knownMisses}}",
          "array.includesRequiredUnknowns": "{{#label}} does not contain {{#unknownMisses}} required value(s)",
          "array.length": "{{#label}} must contain {{#limit}} items",
          "array.max": "{{#label}} must contain less than or equal to {{#limit}} items",
          "array.min": "{{#label}} must contain at least {{#limit}} items",
          "array.orderedLength": "{{#label}} must contain at most {{#limit}} items",
          "array.sort": "{{#label}} must be sorted in {#order} order by {{#by}}",
          "array.sort.mismatching": "{{#label}} cannot be sorted due to mismatching types",
          "array.sort.unsupported": "{{#label}} cannot be sorted due to unsupported type {#type}",
          "array.sparse": "{{#label}} must not be a sparse array item",
          "array.unique": "{{#label}} contains a duplicate value"
        }
      }), c.fillMissedErrors = function (e, t, r, s, n, a) {
        const o = [];
        let i = 0;

        for (const e of r) {
          const t = e._flags.label;
          t ? o.push(t) : ++i;
        }

        o.length ? i ? t.push(e.$_createError("array.includesRequiredBoth", s, {
          knownMisses: o,
          unknownMisses: i
        }, n, a)) : t.push(e.$_createError("array.includesRequiredKnowns", s, {
          knownMisses: o
        }, n, a)) : t.push(e.$_createError("array.includesRequiredUnknowns", s, {
          unknownMisses: i
        }, n, a));
      }, c.fillOrderedErrors = function (e, t, r, s, n, a) {
        const o = [];

        for (const e of r) "required" === e._flags.presence && o.push(e);

        o.length && c.fillMissedErrors(e, t, o, s, n, a);
      }, c.fillDefault = function (e, t, r, s) {
        const n = [];
        let a = !0;

        for (let o = e.length - 1; o >= 0; --o) {
          const i = e[o],
                l = [t, ...r.ancestors],
                c = i.$_validate(void 0, r.localize(r.path, l, i), s).value;

          if (a) {
            if (void 0 === c) continue;
            a = !1;
          }

          n.unshift(c);
        }

        n.length && t.push(...n);
      }, c.fastSplice = function (e, t) {
        let r = t;

        for (; r < e.length;) e[r++] = e[r];

        --e.length;
      }, c.validateSingle = function (e, t) {
        ("array" === e.type || e._flags._arrayItems) && (s(!t._flags.single, "Cannot specify array item with single rule enabled"), t.$_setFlag("_arrayItems", !0, {
          clone: !1
        }));
      }, c.sort = function (e, t, r, s, n) {
        const a = "ascending" === r.order ? 1 : -1,
              o = -1 * a,
              i = a,
              l = (l, u) => {
          let f = c.compare(l, u, o, i);
          if (null !== f) return f;
          if (r.by && (l = r.by.resolve(l, s, n), u = r.by.resolve(u, s, n)), f = c.compare(l, u, o, i), null !== f) return f;
          const m = typeof l;
          if (m !== typeof u) throw e.$_createError("array.sort.mismatching", t, null, s, n);
          if ("number" !== m && "string" !== m) throw e.$_createError("array.sort.unsupported", t, {
            type: m
          }, s, n);
          return "number" === m ? (l - u) * a : l < u ? o : i;
        };

        try {
          return {
            value: t.slice().sort(l)
          };
        } catch (e) {
          return {
            errors: e
          };
        }
      }, c.compare = function (e, t, r, s) {
        return e === t ? 0 : void 0 === e ? 1 : void 0 === t ? -1 : null === e ? s : null === t ? r : null;
      };
    },
    4937: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = r(2036),
            i = {
        isBool: function (e) {
          return "boolean" == typeof e;
        }
      };
      e.exports = n.extend({
        type: "boolean",
        flags: {
          sensitive: {
            default: !1
          }
        },
        terms: {
          falsy: {
            init: null,
            manifest: "values"
          },
          truthy: {
            init: null,
            manifest: "values"
          }
        },

        coerce(e, {
          schema: t
        }) {
          if ("boolean" != typeof e) {
            if ("string" == typeof e) {
              const r = t._flags.sensitive ? e : e.toLowerCase();
              e = "true" === r || "false" !== r && e;
            }

            return "boolean" != typeof e && (e = t.$_terms.truthy && t.$_terms.truthy.has(e, null, null, !t._flags.sensitive) || (!t.$_terms.falsy || !t.$_terms.falsy.has(e, null, null, !t._flags.sensitive)) && e), {
              value: e
            };
          }
        },

        validate(e, {
          error: t
        }) {
          if ("boolean" != typeof e) return {
            value: e,
            errors: t("boolean.base")
          };
        },

        rules: {
          truthy: {
            method(...e) {
              a.verifyFlat(e, "truthy");
              const t = this.clone();
              t.$_terms.truthy = t.$_terms.truthy || new o();

              for (let r = 0; r < e.length; ++r) {
                const n = e[r];
                s(void 0 !== n, "Cannot call truthy with undefined"), t.$_terms.truthy.add(n);
              }

              return t;
            }

          },
          falsy: {
            method(...e) {
              a.verifyFlat(e, "falsy");
              const t = this.clone();
              t.$_terms.falsy = t.$_terms.falsy || new o();

              for (let r = 0; r < e.length; ++r) {
                const n = e[r];
                s(void 0 !== n, "Cannot call falsy with undefined"), t.$_terms.falsy.add(n);
              }

              return t;
            }

          },
          sensitive: {
            method(e = !0) {
              return this.$_setFlag("sensitive", e);
            }

          }
        },
        cast: {
          number: {
            from: i.isBool,
            to: (e, t) => e ? 1 : 0
          },
          string: {
            from: i.isBool,
            to: (e, t) => e ? "true" : "false"
          }
        },
        manifest: {
          build: (e, t) => (t.truthy && (e = e.truthy(...t.truthy)), t.falsy && (e = e.falsy(...t.falsy)), e)
        },
        messages: {
          "boolean.base": "{{#label}} must be a boolean"
        }
      });
    },
    7500: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = r(3328),
            i = {
        isDate: function (e) {
          return e instanceof Date;
        }
      };
      e.exports = n.extend({
        type: "date",
        coerce: {
          from: ["number", "string"],
          method: (e, {
            schema: t
          }) => ({
            value: i.parse(e, t._flags.format) || e
          })
        },

        validate(e, {
          schema: t,
          error: r,
          prefs: s
        }) {
          if (e instanceof Date && !isNaN(e.getTime())) return;
          const n = t._flags.format;
          return s.convert && n && "string" == typeof e ? {
            value: e,
            errors: r("date.format", {
              format: n
            })
          } : {
            value: e,
            errors: r("date.base")
          };
        },

        rules: {
          compare: {
            method: !1,

            validate(e, t, {
              date: r
            }, {
              name: s,
              operator: n,
              args: o
            }) {
              const i = "now" === r ? Date.now() : r.getTime();
              return a.compare(e.getTime(), i, n) ? e : t.error("date." + s, {
                limit: o.date,
                value: e
              });
            },

            args: [{
              name: "date",
              ref: !0,
              normalize: e => "now" === e ? e : i.parse(e),
              assert: e => null !== e,
              message: "must have a valid date format"
            }]
          },
          format: {
            method(e) {
              return s(["iso", "javascript", "unix"].includes(e), "Unknown date format", e), this.$_setFlag("format", e);
            }

          },
          greater: {
            method(e) {
              return this.$_addRule({
                name: "greater",
                method: "compare",
                args: {
                  date: e
                },
                operator: ">"
              });
            }

          },
          iso: {
            method() {
              return this.format("iso");
            }

          },
          less: {
            method(e) {
              return this.$_addRule({
                name: "less",
                method: "compare",
                args: {
                  date: e
                },
                operator: "<"
              });
            }

          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "compare",
                args: {
                  date: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "compare",
                args: {
                  date: e
                },
                operator: ">="
              });
            }

          },
          timestamp: {
            method(e = "javascript") {
              return s(["javascript", "unix"].includes(e), '"type" must be one of "javascript, unix"'), this.format(e);
            }

          }
        },
        cast: {
          number: {
            from: i.isDate,
            to: (e, t) => e.getTime()
          },
          string: {
            from: i.isDate,
            to: (e, {
              prefs: t
            }) => o.date(e, t)
          }
        },
        messages: {
          "date.base": "{{#label}} must be a valid date",
          "date.format": '{{#label}} must be in {msg("date.format." + #format) || #format} format',
          "date.greater": "{{#label}} must be greater than {{:#limit}}",
          "date.less": "{{#label}} must be less than {{:#limit}}",
          "date.max": "{{#label}} must be less than or equal to {{:#limit}}",
          "date.min": "{{#label}} must be greater than or equal to {{:#limit}}",
          "date.format.iso": "ISO 8601 date",
          "date.format.javascript": "timestamp or number of milliseconds",
          "date.format.unix": "timestamp or number of seconds"
        }
      }), i.parse = function (e, t) {
        if (e instanceof Date) return e;
        if ("string" != typeof e && (isNaN(e) || !isFinite(e))) return null;
        if (/^\s*$/.test(e)) return null;
        if ("iso" === t) return a.isIsoDate(e) ? i.date(e.toString()) : null;
        const r = e;

        if ("string" == typeof e && /^[+-]?\d+(\.\d+)?$/.test(e) && (e = parseFloat(e)), t) {
          if ("javascript" === t) return i.date(1 * e);
          if ("unix" === t) return i.date(1e3 * e);
          if ("string" == typeof r) return null;
        }

        return i.date(e);
      }, i.date = function (e) {
        const t = new Date(e);
        return isNaN(t.getTime()) ? null : t;
      };
    },
    390: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(7824);
      e.exports = n.extend({
        type: "function",
        properties: {
          typeof: "function"
        },
        rules: {
          arity: {
            method(e) {
              return s(Number.isSafeInteger(e) && e >= 0, "n must be a positive integer"), this.$_addRule({
                name: "arity",
                args: {
                  n: e
                }
              });
            },

            validate: (e, t, {
              n: r
            }) => e.length === r ? e : t.error("function.arity", {
              n: r
            })
          },
          class: {
            method() {
              return this.$_addRule("class");
            },

            validate: (e, t) => /^\s*class\s/.test(e.toString()) ? e : t.error("function.class", {
              value: e
            })
          },
          minArity: {
            method(e) {
              return s(Number.isSafeInteger(e) && e > 0, "n must be a strict positive integer"), this.$_addRule({
                name: "minArity",
                args: {
                  n: e
                }
              });
            },

            validate: (e, t, {
              n: r
            }) => e.length >= r ? e : t.error("function.minArity", {
              n: r
            })
          },
          maxArity: {
            method(e) {
              return s(Number.isSafeInteger(e) && e >= 0, "n must be a positive integer"), this.$_addRule({
                name: "maxArity",
                args: {
                  n: e
                }
              });
            },

            validate: (e, t, {
              n: r
            }) => e.length <= r ? e : t.error("function.maxArity", {
              n: r
            })
          }
        },
        messages: {
          "function.arity": "{{#label}} must have an arity of {{#n}}",
          "function.class": "{{#label}} must be a class",
          "function.maxArity": "{{#label}} must have an arity lesser or equal to {{#n}}",
          "function.minArity": "{{#label}} must have an arity greater or equal to {{#n}}"
        }
      });
    },
    7824: (e, t, r) => {
      "use strict";

      const s = r(978),
            n = r(375),
            a = r(8571),
            o = r(3652),
            i = r(8068),
            l = r(8160),
            c = r(3292),
            u = r(6354),
            f = r(6133),
            m = r(3328),
            h = {
        renameDefaults: {
          alias: !1,
          multiple: !1,
          override: !1
        }
      };
      e.exports = i.extend({
        type: "_keys",
        properties: {
          typeof: "object"
        },
        flags: {
          unknown: {
            default: !1
          }
        },
        terms: {
          dependencies: {
            init: null
          },
          keys: {
            init: null,
            manifest: {
              mapped: {
                from: "schema",
                to: "key"
              }
            }
          },
          patterns: {
            init: null
          },
          renames: {
            init: null
          }
        },
        args: (e, t) => e.keys(t),

        validate(e, {
          schema: t,
          error: r,
          state: s,
          prefs: n
        }) {
          if (!e || typeof e !== t.$_property("typeof") || Array.isArray(e)) return {
            value: e,
            errors: r("object.base", {
              type: t.$_property("typeof")
            })
          };
          if (!(t.$_terms.renames || t.$_terms.dependencies || t.$_terms.keys || t.$_terms.patterns || t.$_terms.externals)) return;
          e = h.clone(e, n);
          const a = [];
          if (t.$_terms.renames && !h.rename(t, e, s, n, a)) return {
            value: e,
            errors: a
          };
          if (!t.$_terms.keys && !t.$_terms.patterns && !t.$_terms.dependencies) return {
            value: e,
            errors: a
          };
          const o = new Set(Object.keys(e));

          if (t.$_terms.keys) {
            const r = [e, ...s.ancestors];

            for (const i of t.$_terms.keys) {
              const t = i.key,
                    l = e[t];
              o.delete(t);
              const c = s.localize([...s.path, t], r, i),
                    u = i.schema.$_validate(l, c, n);

              if (u.errors) {
                if (n.abortEarly) return {
                  value: e,
                  errors: u.errors
                };
                void 0 !== u.value && (e[t] = u.value), a.push(...u.errors);
              } else "strip" === i.schema._flags.result || void 0 === u.value && void 0 !== l ? delete e[t] : void 0 !== u.value && (e[t] = u.value);
            }
          }

          if (o.size || t._flags._hasPatternMatch) {
            const r = h.unknown(t, e, o, a, s, n);
            if (r) return r;
          }

          if (t.$_terms.dependencies) for (const r of t.$_terms.dependencies) {
            if (r.key && void 0 === r.key.resolve(e, s, n, null, {
              shadow: !1
            })) continue;
            const o = h.dependencies[r.rel](t, r, e, s, n);

            if (o) {
              const r = t.$_createError(o.code, e, o.context, s, n);
              if (n.abortEarly) return {
                value: e,
                errors: r
              };
              a.push(r);
            }
          }
          return {
            value: e,
            errors: a
          };
        },

        rules: {
          and: {
            method(...e) {
              return l.verifyFlat(e, "and"), h.dependency(this, "and", null, e);
            }

          },
          append: {
            method(e) {
              return null == e || 0 === Object.keys(e).length ? this : this.keys(e);
            }

          },
          assert: {
            method(e, t, r) {
              m.isTemplate(e) || (e = c.ref(e)), n(void 0 === r || "string" == typeof r, "Message must be a string"), t = this.$_compile(t, {
                appendPath: !0
              });
              const s = this.$_addRule({
                name: "assert",
                args: {
                  subject: e,
                  schema: t,
                  message: r
                }
              });
              return s.$_mutateRegister(e), s.$_mutateRegister(t), s;
            },

            validate(e, {
              error: t,
              prefs: r,
              state: s
            }, {
              subject: n,
              schema: a,
              message: o
            }) {
              const i = n.resolve(e, s, r),
                    l = f.isRef(n) ? n.absolute(s) : [];
              return a.$_match(i, s.localize(l, [e, ...s.ancestors], a), r) ? e : t("object.assert", {
                subject: n,
                message: o
              });
            },

            args: ["subject", "schema", "message"],
            multi: !0
          },
          instance: {
            method(e, t) {
              return n("function" == typeof e, "constructor must be a function"), t = t || e.name, this.$_addRule({
                name: "instance",
                args: {
                  constructor: e,
                  name: t
                }
              });
            },

            validate: (e, t, {
              constructor: r,
              name: s
            }) => e instanceof r ? e : t.error("object.instance", {
              type: s,
              value: e
            }),
            args: ["constructor", "name"]
          },
          keys: {
            method(e) {
              n(void 0 === e || "object" == typeof e, "Object schema must be a valid object"), n(!l.isSchema(e), "Object schema cannot be a joi schema");
              const t = this.clone();
              if (e) {
                if (Object.keys(e).length) {
                  t.$_terms.keys = t.$_terms.keys ? t.$_terms.keys.filter(t => !e.hasOwnProperty(t.key)) : new h.Keys();

                  for (const r in e) l.tryWithPath(() => t.$_terms.keys.push({
                    key: r,
                    schema: this.$_compile(e[r])
                  }), r);
                } else t.$_terms.keys = new h.Keys();
              } else t.$_terms.keys = null;
              return t.$_mutateRebuild();
            }

          },
          length: {
            method(e) {
              return this.$_addRule({
                name: "length",
                args: {
                  limit: e
                },
                operator: "="
              });
            },

            validate: (e, t, {
              limit: r
            }, {
              name: s,
              operator: n,
              args: a
            }) => l.compare(Object.keys(e).length, r, n) ? e : t.error("object." + s, {
              limit: a.limit,
              value: e
            }),
            args: [{
              name: "limit",
              ref: !0,
              assert: l.limit,
              message: "must be a positive integer"
            }]
          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "length",
                args: {
                  limit: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "length",
                args: {
                  limit: e
                },
                operator: ">="
              });
            }

          },
          nand: {
            method(...e) {
              return l.verifyFlat(e, "nand"), h.dependency(this, "nand", null, e);
            }

          },
          or: {
            method(...e) {
              return l.verifyFlat(e, "or"), h.dependency(this, "or", null, e);
            }

          },
          oxor: {
            method(...e) {
              return h.dependency(this, "oxor", null, e);
            }

          },
          pattern: {
            method(e, t, r = {}) {
              const s = e instanceof RegExp;
              s || (e = this.$_compile(e, {
                appendPath: !0
              })), n(void 0 !== t, "Invalid rule"), l.assertOptions(r, ["fallthrough", "matches"]), s && n(!e.flags.includes("g") && !e.flags.includes("y"), "pattern should not use global or sticky mode"), t = this.$_compile(t, {
                appendPath: !0
              });
              const a = this.clone();
              a.$_terms.patterns = a.$_terms.patterns || [];
              const o = {
                [s ? "regex" : "schema"]: e,
                rule: t
              };
              return r.matches && (o.matches = this.$_compile(r.matches), "array" !== o.matches.type && (o.matches = o.matches.$_root.array().items(o.matches)), a.$_mutateRegister(o.matches), a.$_setFlag("_hasPatternMatch", !0, {
                clone: !1
              })), r.fallthrough && (o.fallthrough = !0), a.$_terms.patterns.push(o), a.$_mutateRegister(t), a;
            }

          },
          ref: {
            method() {
              return this.$_addRule("ref");
            },

            validate: (e, t) => f.isRef(e) ? e : t.error("object.refType", {
              value: e
            })
          },
          regex: {
            method() {
              return this.$_addRule("regex");
            },

            validate: (e, t) => e instanceof RegExp ? e : t.error("object.regex", {
              value: e
            })
          },
          rename: {
            method(e, t, r = {}) {
              n("string" == typeof e || e instanceof RegExp, "Rename missing the from argument"), n("string" == typeof t || t instanceof m, "Invalid rename to argument"), n(t !== e, "Cannot rename key to same name:", e), l.assertOptions(r, ["alias", "ignoreUndefined", "override", "multiple"]);
              const a = this.clone();
              a.$_terms.renames = a.$_terms.renames || [];

              for (const t of a.$_terms.renames) n(t.from !== e, "Cannot rename the same key multiple times");

              return t instanceof m && a.$_mutateRegister(t), a.$_terms.renames.push({
                from: e,
                to: t,
                options: s(h.renameDefaults, r)
              }), a;
            }

          },
          schema: {
            method(e = "any") {
              return this.$_addRule({
                name: "schema",
                args: {
                  type: e
                }
              });
            },

            validate: (e, t, {
              type: r
            }) => !l.isSchema(e) || "any" !== r && e.type !== r ? t.error("object.schema", {
              type: r
            }) : e
          },
          unknown: {
            method(e) {
              return this.$_setFlag("unknown", !1 !== e);
            }

          },
          with: {
            method(e, t, r = {}) {
              return h.dependency(this, "with", e, t, r);
            }

          },
          without: {
            method(e, t, r = {}) {
              return h.dependency(this, "without", e, t, r);
            }

          },
          xor: {
            method(...e) {
              return l.verifyFlat(e, "xor"), h.dependency(this, "xor", null, e);
            }

          }
        },
        overrides: {
          default(e, t) {
            return void 0 === e && (e = l.symbols.deepDefault), this.$_parent("default", e, t);
          }

        },

        rebuild(e) {
          if (e.$_terms.keys) {
            const t = new o.Sorter();

            for (const r of e.$_terms.keys) l.tryWithPath(() => t.add(r, {
              after: r.schema.$_rootReferences(),
              group: r.key
            }), r.key);

            e.$_terms.keys = new h.Keys(...t.nodes);
          }
        },

        manifest: {
          build(e, t) {
            if (t.keys && (e = e.keys(t.keys)), t.dependencies) for (const {
              rel: r,
              key: s = null,
              peers: n,
              options: a
            } of t.dependencies) e = h.dependency(e, r, s, n, a);
            if (t.patterns) for (const {
              regex: r,
              schema: s,
              rule: n,
              fallthrough: a,
              matches: o
            } of t.patterns) e = e.pattern(r || s, n, {
              fallthrough: a,
              matches: o
            });
            if (t.renames) for (const {
              from: r,
              to: s,
              options: n
            } of t.renames) e = e.rename(r, s, n);
            return e;
          }

        },
        messages: {
          "object.and": "{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}",
          "object.assert": '{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',
          "object.base": "{{#label}} must be of type {{#type}}",
          "object.instance": "{{#label}} must be an instance of {{:#type}}",
          "object.length": '{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}',
          "object.max": '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',
          "object.min": '{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}',
          "object.missing": "{{#label}} must contain at least one of {{#peersWithLabels}}",
          "object.nand": "{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}",
          "object.oxor": "{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}",
          "object.pattern.match": "{{#label}} keys failed to match pattern requirements",
          "object.refType": "{{#label}} must be a Joi reference",
          "object.regex": "{{#label}} must be a RegExp object",
          "object.rename.multiple": "{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}",
          "object.rename.override": "{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists",
          "object.schema": "{{#label}} must be a Joi schema of {{#type}} type",
          "object.unknown": "{{#label}} is not allowed",
          "object.with": "{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}",
          "object.without": "{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}",
          "object.xor": "{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}"
        }
      }), h.clone = function (e, t) {
        if ("object" == typeof e) {
          if (t.nonEnumerables) return a(e, {
            shallow: !0
          });
          const r = Object.create(Object.getPrototypeOf(e));
          return Object.assign(r, e), r;
        }

        const r = function (...t) {
          return e.apply(this, t);
        };

        return r.prototype = a(e.prototype), Object.defineProperty(r, "name", {
          value: e.name,
          writable: !1
        }), Object.defineProperty(r, "length", {
          value: e.length,
          writable: !1
        }), Object.assign(r, e), r;
      }, h.dependency = function (e, t, r, s, a) {
        n(null === r || "string" == typeof r, t, "key must be a strings"), a || (a = s.length > 1 && "object" == typeof s[s.length - 1] ? s.pop() : {}), l.assertOptions(a, ["separator"]), s = [].concat(s);
        const o = l.default(a.separator, "."),
              i = [];

        for (const e of s) n("string" == typeof e, t, "peers must be strings"), i.push(c.ref(e, {
          separator: o,
          ancestor: 0,
          prefix: !1
        }));

        null !== r && (r = c.ref(r, {
          separator: o,
          ancestor: 0,
          prefix: !1
        }));
        const u = e.clone();
        return u.$_terms.dependencies = u.$_terms.dependencies || [], u.$_terms.dependencies.push(new h.Dependency(t, r, i, s)), u;
      }, h.dependencies = {
        and(e, t, r, s, n) {
          const a = [],
                o = [],
                i = t.peers.length;

          for (const e of t.peers) void 0 === e.resolve(r, s, n, null, {
            shadow: !1
          }) ? a.push(e.key) : o.push(e.key);

          if (a.length !== i && o.length !== i) return {
            code: "object.and",
            context: {
              present: o,
              presentWithLabels: h.keysToLabels(e, o),
              missing: a,
              missingWithLabels: h.keysToLabels(e, a)
            }
          };
        },

        nand(e, t, r, s, n) {
          const a = [];

          for (const e of t.peers) void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          }) && a.push(e.key);

          if (a.length !== t.peers.length) return;
          const o = t.paths[0],
                i = t.paths.slice(1);
          return {
            code: "object.nand",
            context: {
              main: o,
              mainWithLabel: h.keysToLabels(e, o),
              peers: i,
              peersWithLabels: h.keysToLabels(e, i)
            }
          };
        },

        or(e, t, r, s, n) {
          for (const e of t.peers) if (void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          })) return;

          return {
            code: "object.missing",
            context: {
              peers: t.paths,
              peersWithLabels: h.keysToLabels(e, t.paths)
            }
          };
        },

        oxor(e, t, r, s, n) {
          const a = [];

          for (const e of t.peers) void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          }) && a.push(e.key);

          if (!a.length || 1 === a.length) return;
          const o = {
            peers: t.paths,
            peersWithLabels: h.keysToLabels(e, t.paths)
          };
          return o.present = a, o.presentWithLabels = h.keysToLabels(e, a), {
            code: "object.oxor",
            context: o
          };
        },

        with(e, t, r, s, n) {
          for (const a of t.peers) if (void 0 === a.resolve(r, s, n, null, {
            shadow: !1
          })) return {
            code: "object.with",
            context: {
              main: t.key.key,
              mainWithLabel: h.keysToLabels(e, t.key.key),
              peer: a.key,
              peerWithLabel: h.keysToLabels(e, a.key)
            }
          };
        },

        without(e, t, r, s, n) {
          for (const a of t.peers) if (void 0 !== a.resolve(r, s, n, null, {
            shadow: !1
          })) return {
            code: "object.without",
            context: {
              main: t.key.key,
              mainWithLabel: h.keysToLabels(e, t.key.key),
              peer: a.key,
              peerWithLabel: h.keysToLabels(e, a.key)
            }
          };
        },

        xor(e, t, r, s, n) {
          const a = [];

          for (const e of t.peers) void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          }) && a.push(e.key);

          if (1 === a.length) return;
          const o = {
            peers: t.paths,
            peersWithLabels: h.keysToLabels(e, t.paths)
          };
          return 0 === a.length ? {
            code: "object.missing",
            context: o
          } : (o.present = a, o.presentWithLabels = h.keysToLabels(e, a), {
            code: "object.xor",
            context: o
          });
        }

      }, h.keysToLabels = function (e, t) {
        return Array.isArray(t) ? t.map(t => e.$_mapLabels(t)) : e.$_mapLabels(t);
      }, h.rename = function (e, t, r, s, n) {
        const a = {};

        for (const o of e.$_terms.renames) {
          const i = [],
                l = "string" != typeof o.from;
          if (l) for (const e in t) {
            if (void 0 === t[e] && o.options.ignoreUndefined) continue;
            if (e === o.to) continue;
            const r = o.from.exec(e);
            r && i.push({
              from: e,
              to: o.to,
              match: r
            });
          } else !Object.prototype.hasOwnProperty.call(t, o.from) || void 0 === t[o.from] && o.options.ignoreUndefined || i.push(o);

          for (const c of i) {
            const i = c.from;
            let u = c.to;

            if (u instanceof m && (u = u.render(t, r, s, c.match)), i !== u) {
              if (!o.options.multiple && a[u] && (n.push(e.$_createError("object.rename.multiple", t, {
                from: i,
                to: u,
                pattern: l
              }, r, s)), s.abortEarly)) return !1;
              if (Object.prototype.hasOwnProperty.call(t, u) && !o.options.override && !a[u] && (n.push(e.$_createError("object.rename.override", t, {
                from: i,
                to: u,
                pattern: l
              }, r, s)), s.abortEarly)) return !1;
              void 0 === t[i] ? delete t[u] : t[u] = t[i], a[u] = !0, o.options.alias || delete t[i];
            }
          }
        }

        return !0;
      }, h.unknown = function (e, t, r, s, n, a) {
        if (e.$_terms.patterns) {
          let o = !1;
          const i = e.$_terms.patterns.map(e => {
            if (e.matches) return o = !0, [];
          }),
                l = [t, ...n.ancestors];

          for (const o of r) {
            const c = t[o],
                  u = [...n.path, o];

            for (let f = 0; f < e.$_terms.patterns.length; ++f) {
              const m = e.$_terms.patterns[f];

              if (m.regex) {
                const e = m.regex.test(o);
                if (n.mainstay.tracer.debug(n, "rule", "pattern.".concat(f), e ? "pass" : "error"), !e) continue;
              } else if (!m.schema.$_match(o, n.nest(m.schema, "pattern.".concat(f)), a)) continue;

              r.delete(o);
              const h = n.localize(u, l, {
                schema: m.rule,
                key: o
              }),
                    d = m.rule.$_validate(c, h, a);

              if (d.errors) {
                if (a.abortEarly) return {
                  value: t,
                  errors: d.errors
                };
                s.push(...d.errors);
              }

              if (m.matches && i[f].push(o), t[o] = d.value, !m.fallthrough) break;
            }
          }

          if (o) for (let r = 0; r < i.length; ++r) {
            const o = i[r];
            if (!o) continue;
            const c = e.$_terms.patterns[r].matches,
                  f = n.localize(n.path, l, c),
                  m = c.$_validate(o, f, a);

            if (m.errors) {
              const r = u.details(m.errors, {
                override: !1
              });
              r.matches = o;
              const i = e.$_createError("object.pattern.match", t, r, n, a);
              if (a.abortEarly) return {
                value: t,
                errors: i
              };
              s.push(i);
            }
          }
        }

        if (r.size && (e.$_terms.keys || e.$_terms.patterns)) {
          if (a.stripUnknown && !e._flags.unknown || a.skipFunctions) {
            const e = !(!a.stripUnknown || !0 !== a.stripUnknown && !a.stripUnknown.objects);

            for (const s of r) e ? (delete t[s], r.delete(s)) : "function" == typeof t[s] && r.delete(s);
          }

          if (!l.default(e._flags.unknown, a.allowUnknown)) for (const o of r) {
            const r = n.localize([...n.path, o], []),
                  i = e.$_createError("object.unknown", t[o], {
              child: o
            }, r, a, {
              flags: !1
            });
            if (a.abortEarly) return {
              value: t,
              errors: i
            };
            s.push(i);
          }
        }
      }, h.Dependency = class {
        constructor(e, t, r, s) {
          this.rel = e, this.key = t, this.peers = r, this.paths = s;
        }

        describe() {
          const e = {
            rel: this.rel,
            peers: this.paths
          };
          return null !== this.key && (e.key = this.key.key), "." !== this.peers[0].separator && (e.options = {
            separator: this.peers[0].separator
          }), e;
        }

      }, h.Keys = class extends Array {
        concat(e) {
          const t = this.slice(),
                r = new Map();

          for (let e = 0; e < t.length; ++e) r.set(t[e].key, e);

          for (const s of e) {
            const e = s.key,
                  n = r.get(e);
            void 0 !== n ? t[n] = {
              key: e,
              schema: t[n].schema.concat(s.schema)
            } : t.push(s);
          }

          return t;
        }

      };
    },
    8785: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = r(3292),
            i = r(6354),
            l = {};
      e.exports = n.extend({
        type: "link",
        properties: {
          schemaChain: !0
        },
        terms: {
          link: {
            init: null,
            manifest: "single",
            register: !1
          }
        },
        args: (e, t) => e.ref(t),

        validate(e, {
          schema: t,
          state: r,
          prefs: n
        }) {
          s(t.$_terms.link, "Uninitialized link schema");
          const a = l.generate(t, e, r, n),
                o = t.$_terms.link[0].ref;
          return a.$_validate(e, r.nest(a, "link:".concat(o.display, ":").concat(a.type)), n);
        },

        generate: (e, t, r, s) => l.generate(e, t, r, s),
        rules: {
          ref: {
            method(e) {
              s(!this.$_terms.link, "Cannot reinitialize schema"), e = o.ref(e), s("value" === e.type || "local" === e.type, "Invalid reference type:", e.type), s("local" === e.type || "root" === e.ancestor || e.ancestor > 0, "Link cannot reference itself");
              const t = this.clone();
              return t.$_terms.link = [{
                ref: e
              }], t;
            }

          },
          relative: {
            method(e = !0) {
              return this.$_setFlag("relative", e);
            }

          }
        },
        overrides: {
          concat(e) {
            s(this.$_terms.link, "Uninitialized link schema"), s(a.isSchema(e), "Invalid schema object"), s("link" !== e.type, "Cannot merge type link with another link");
            const t = this.clone();
            return t.$_terms.whens || (t.$_terms.whens = []), t.$_terms.whens.push({
              concat: e
            }), t.$_mutateRebuild();
          }

        },
        manifest: {
          build: (e, t) => (s(t.link, "Invalid link description missing link"), e.ref(t.link))
        }
      }), l.generate = function (e, t, r, s) {
        let n = r.mainstay.links.get(e);
        if (n) return n._generate(t, r, s).schema;
        const a = e.$_terms.link[0].ref,
              {
          perspective: o,
          path: i
        } = l.perspective(a, r);
        l.assert(o, "which is outside of schema boundaries", a, e, r, s);

        try {
          n = i.length ? o.$_reach(i) : o;
        } catch (t) {
          l.assert(!1, "to non-existing schema", a, e, r, s);
        }

        return l.assert("link" !== n.type, "which is another link", a, e, r, s), e._flags.relative || r.mainstay.links.set(e, n), n._generate(t, r, s).schema;
      }, l.perspective = function (e, t) {
        if ("local" === e.type) {
          for (const {
            schema: r,
            key: s
          } of t.schemas) {
            if ((r._flags.id || s) === e.path[0]) return {
              perspective: r,
              path: e.path.slice(1)
            };
            if (r.$_terms.shared) for (const t of r.$_terms.shared) if (t._flags.id === e.path[0]) return {
              perspective: t,
              path: e.path.slice(1)
            };
          }

          return {
            perspective: null,
            path: null
          };
        }

        return "root" === e.ancestor ? {
          perspective: t.schemas[t.schemas.length - 1].schema,
          path: e.path
        } : {
          perspective: t.schemas[e.ancestor] && t.schemas[e.ancestor].schema,
          path: e.path
        };
      }, l.assert = function (e, t, r, n, a, o) {
        e || s(!1, '"'.concat(i.label(n._flags, a, o), '" contains link reference "').concat(r.display, '" ').concat(t));
      };
    },
    3832: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = {
        numberRx: /^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,
        precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
      };
      e.exports = n.extend({
        type: "number",
        flags: {
          unsafe: {
            default: !1
          }
        },
        coerce: {
          from: "string",

          method(e, {
            schema: t,
            error: r
          }) {
            const s = e.match(o.numberRx);
            if (!s) return;
            e = e.trim();
            const n = {
              value: parseFloat(e)
            };
            if (0 === n.value && (n.value = 0), !t._flags.unsafe) if (e.match(/e/i)) {
              if (o.normalizeExponent("".concat(n.value / Math.pow(10, s[1]), "e").concat(s[1])) !== o.normalizeExponent(e)) return n.errors = r("number.unsafe"), n;
            } else {
              const t = n.value.toString();
              if (t.match(/e/i)) return n;
              if (t !== o.normalizeDecimal(e)) return n.errors = r("number.unsafe"), n;
            }
            return n;
          }

        },

        validate(e, {
          schema: t,
          error: r,
          prefs: s
        }) {
          if (e === 1 / 0 || e === -1 / 0) return {
            value: e,
            errors: r("number.infinity")
          };
          if (!a.isNumber(e)) return {
            value: e,
            errors: r("number.base")
          };
          const n = {
            value: e
          };

          if (s.convert) {
            const e = t.$_getRule("precision");

            if (e) {
              const t = Math.pow(10, e.args.limit);
              n.value = Math.round(n.value * t) / t;
            }
          }

          return 0 === n.value && (n.value = 0), !t._flags.unsafe && (e > Number.MAX_SAFE_INTEGER || e < Number.MIN_SAFE_INTEGER) && (n.errors = r("number.unsafe")), n;
        },

        rules: {
          compare: {
            method: !1,
            validate: (e, t, {
              limit: r
            }, {
              name: s,
              operator: n,
              args: o
            }) => a.compare(e, r, n) ? e : t.error("number." + s, {
              limit: o.limit,
              value: e
            }),
            args: [{
              name: "limit",
              ref: !0,
              assert: a.isNumber,
              message: "must be a number"
            }]
          },
          greater: {
            method(e) {
              return this.$_addRule({
                name: "greater",
                method: "compare",
                args: {
                  limit: e
                },
                operator: ">"
              });
            }

          },
          integer: {
            method() {
              return this.$_addRule("integer");
            },

            validate: (e, t) => Math.trunc(e) - e == 0 ? e : t.error("number.integer")
          },
          less: {
            method(e) {
              return this.$_addRule({
                name: "less",
                method: "compare",
                args: {
                  limit: e
                },
                operator: "<"
              });
            }

          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "compare",
                args: {
                  limit: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "compare",
                args: {
                  limit: e
                },
                operator: ">="
              });
            }

          },
          multiple: {
            method(e) {
              return this.$_addRule({
                name: "multiple",
                args: {
                  base: e
                }
              });
            },

            validate: (e, t, {
              base: r
            }, s) => e * (1 / r) % 1 == 0 ? e : t.error("number.multiple", {
              multiple: s.args.base,
              value: e
            }),
            args: [{
              name: "base",
              ref: !0,
              assert: e => "number" == typeof e && isFinite(e) && e > 0,
              message: "must be a positive number"
            }],
            multi: !0
          },
          negative: {
            method() {
              return this.sign("negative");
            }

          },
          port: {
            method() {
              return this.$_addRule("port");
            },

            validate: (e, t) => Number.isSafeInteger(e) && e >= 0 && e <= 65535 ? e : t.error("number.port")
          },
          positive: {
            method() {
              return this.sign("positive");
            }

          },
          precision: {
            method(e) {
              return s(Number.isSafeInteger(e), "limit must be an integer"), this.$_addRule({
                name: "precision",
                args: {
                  limit: e
                }
              });
            },

            validate(e, t, {
              limit: r
            }) {
              const s = e.toString().match(o.precisionRx);
              return Math.max((s[1] ? s[1].length : 0) - (s[2] ? parseInt(s[2], 10) : 0), 0) <= r ? e : t.error("number.precision", {
                limit: r,
                value: e
              });
            },

            convert: !0
          },
          sign: {
            method(e) {
              return s(["negative", "positive"].includes(e), "Invalid sign", e), this.$_addRule({
                name: "sign",
                args: {
                  sign: e
                }
              });
            },

            validate: (e, t, {
              sign: r
            }) => "negative" === r && e < 0 || "positive" === r && e > 0 ? e : t.error("number.".concat(r))
          },
          unsafe: {
            method(e = !0) {
              return s("boolean" == typeof e, "enabled must be a boolean"), this.$_setFlag("unsafe", e);
            }

          }
        },
        cast: {
          string: {
            from: e => "number" == typeof e,
            to: (e, t) => e.toString()
          }
        },
        messages: {
          "number.base": "{{#label}} must be a number",
          "number.greater": "{{#label}} must be greater than {{#limit}}",
          "number.infinity": "{{#label}} cannot be infinity",
          "number.integer": "{{#label}} must be an integer",
          "number.less": "{{#label}} must be less than {{#limit}}",
          "number.max": "{{#label}} must be less than or equal to {{#limit}}",
          "number.min": "{{#label}} must be greater than or equal to {{#limit}}",
          "number.multiple": "{{#label}} must be a multiple of {{#multiple}}",
          "number.negative": "{{#label}} must be a negative number",
          "number.port": "{{#label}} must be a valid port",
          "number.positive": "{{#label}} must be a positive number",
          "number.precision": "{{#label}} must have no more than {{#limit}} decimal places",
          "number.unsafe": "{{#label}} must be a safe number"
        }
      }), o.normalizeExponent = function (e) {
        return e.replace(/E/, "e").replace(/\.(\d*[1-9])?0+e/, ".$1e").replace(/\.e/, "e").replace(/e\+/, "e").replace(/^\+/, "").replace(/^(-?)0+([1-9])/, "$1$2");
      }, o.normalizeDecimal = function (e) {
        return (e = e.replace(/^\+/, "").replace(/\.0*$/, "").replace(/^(-?)\.([^\.]*)$/, "$10.$2").replace(/^(-?)0+([0-9])/, "$1$2")).includes(".") && e.endsWith("0") && (e = e.replace(/0+$/, "")), "-0" === e ? "0" : e;
      };
    },
    8966: (e, t, r) => {
      "use strict";

      const s = r(7824);
      e.exports = s.extend({
        type: "object",
        cast: {
          map: {
            from: e => e && "object" == typeof e,
            to: (e, t) => new Map(Object.entries(e))
          }
        }
      });
    },
    7417: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(5380),
            l = r(1745),
            c = r(9959),
            u = r(6064),
            f = r(9926),
            m = r(5752),
            h = r(8068),
            d = r(8160),
            p = {
        tlds: f instanceof Set && {
          tlds: {
            allow: f,
            deny: null
          }
        },
        base64Regex: {
          true: {
            true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,
            false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
          },
          false: {
            true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,
            false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/
          }
        },
        dataUriRegex: /^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,
        hexRegex: /^[a-f0-9]+$/i,
        ipRegex: c.regex({
          cidr: "forbidden"
        }).regex,
        isoDurationRegex: /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,
        guidBrackets: {
          "{": "}",
          "[": "]",
          "(": ")",
          "": ""
        },
        guidVersions: {
          uuidv1: "1",
          uuidv2: "2",
          uuidv3: "3",
          uuidv4: "4",
          uuidv5: "5"
        },
        guidSeparators: new Set([void 0, !0, !1, "-", ":"]),
        normalizationForms: ["NFC", "NFD", "NFKC", "NFKD"]
      };
      e.exports = h.extend({
        type: "string",
        flags: {
          insensitive: {
            default: !1
          },
          truncate: {
            default: !1
          }
        },
        terms: {
          replacements: {
            init: null
          }
        },
        coerce: {
          from: "string",

          method(e, {
            schema: t,
            state: r,
            prefs: s
          }) {
            const n = t.$_getRule("normalize");
            n && (e = e.normalize(n.args.form));
            const a = t.$_getRule("case");
            a && (e = "upper" === a.args.direction ? e.toLocaleUpperCase() : e.toLocaleLowerCase());
            const o = t.$_getRule("trim");
            if (o && o.args.enabled && (e = e.trim()), t.$_terms.replacements) for (const r of t.$_terms.replacements) e = e.replace(r.pattern, r.replacement);
            const i = t.$_getRule("hex");

            if (i && i.args.options.byteAligned && e.length % 2 != 0 && (e = "0".concat(e)), t.$_getRule("isoDate")) {
              const t = p.isoDate(e);
              t && (e = t);
            }

            if (t._flags.truncate) {
              const n = t.$_getRule("max");

              if (n) {
                let a = n.args.limit;
                if (d.isResolvable(a) && (a = a.resolve(e, r, s), !d.limit(a))) return {
                  value: e,
                  errors: t.$_createError("any.ref", a, {
                    ref: n.args.limit,
                    arg: "limit",
                    reason: "must be a positive integer"
                  }, r, s)
                };
                e = e.slice(0, a);
              }
            }

            return {
              value: e
            };
          }

        },

        validate(e, {
          schema: t,
          error: r
        }) {
          if ("string" != typeof e) return {
            value: e,
            errors: r("string.base")
          };

          if ("" === e) {
            const s = t.$_getRule("min");
            if (s && 0 === s.args.limit) return;
            return {
              value: e,
              errors: r("string.empty")
            };
          }
        },

        rules: {
          alphanum: {
            method() {
              return this.$_addRule("alphanum");
            },

            validate: (e, t) => /^[a-zA-Z0-9]+$/.test(e) ? e : t.error("string.alphanum")
          },
          base64: {
            method(e = {}) {
              return d.assertOptions(e, ["paddingRequired", "urlSafe"]), e = n({
                urlSafe: !1,
                paddingRequired: !0
              }, e), o("boolean" == typeof e.paddingRequired, "paddingRequired must be boolean"), o("boolean" == typeof e.urlSafe, "urlSafe must be boolean"), this.$_addRule({
                name: "base64",
                args: {
                  options: e
                }
              });
            },

            validate: (e, t, {
              options: r
            }) => p.base64Regex[r.paddingRequired][r.urlSafe].test(e) ? e : t.error("string.base64")
          },
          case: {
            method(e) {
              return o(["lower", "upper"].includes(e), "Invalid case:", e), this.$_addRule({
                name: "case",
                args: {
                  direction: e
                }
              });
            },

            validate: (e, t, {
              direction: r
            }) => "lower" === r && e === e.toLocaleLowerCase() || "upper" === r && e === e.toLocaleUpperCase() ? e : t.error("string.".concat(r, "case")),
            convert: !0
          },
          creditCard: {
            method() {
              return this.$_addRule("creditCard");
            },

            validate(e, t) {
              let r = e.length,
                  s = 0,
                  n = 1;

              for (; r--;) {
                const t = e.charAt(r) * n;
                s += t - 9 * (t > 9), n ^= 3;
              }

              return s > 0 && s % 10 == 0 ? e : t.error("string.creditCard");
            }

          },
          dataUri: {
            method(e = {}) {
              return d.assertOptions(e, ["paddingRequired"]), e = n({
                paddingRequired: !0
              }, e), o("boolean" == typeof e.paddingRequired, "paddingRequired must be boolean"), this.$_addRule({
                name: "dataUri",
                args: {
                  options: e
                }
              });
            },

            validate(e, t, {
              options: r
            }) {
              const s = e.match(p.dataUriRegex);

              if (s) {
                if (!s[2]) return e;
                if ("base64" !== s[2]) return e;
                if (p.base64Regex[r.paddingRequired].false.test(s[3])) return e;
              }

              return t.error("string.dataUri");
            }

          },
          domain: {
            method(e) {
              e && d.assertOptions(e, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
              const t = p.addressOptions(e);
              return this.$_addRule({
                name: "domain",
                args: {
                  options: e
                },
                address: t
              });
            },

            validate: (e, t, r, {
              address: s
            }) => i.isValid(e, s) ? e : t.error("string.domain")
          },
          email: {
            method(e = {}) {
              d.assertOptions(e, ["allowFullyQualified", "allowUnicode", "ignoreLength", "maxDomainSegments", "minDomainSegments", "multiple", "separator", "tlds"]), o(void 0 === e.multiple || "boolean" == typeof e.multiple, "multiple option must be an boolean");
              const t = p.addressOptions(e),
                    r = new RegExp("\\s*[".concat(e.separator ? u(e.separator) : ",", "]\\s*"));
              return this.$_addRule({
                name: "email",
                args: {
                  options: e
                },
                regex: r,
                address: t
              });
            },

            validate(e, t, {
              options: r
            }, {
              regex: s,
              address: n
            }) {
              const a = r.multiple ? e.split(s) : [e],
                    o = [];

              for (const e of a) l.isValid(e, n) || o.push(e);

              return o.length ? t.error("string.email", {
                value: e,
                invalids: o
              }) : e;
            }

          },
          guid: {
            alias: "uuid",

            method(e = {}) {
              d.assertOptions(e, ["version", "separator"]);
              let t = "";

              if (e.version) {
                const r = [].concat(e.version);
                o(r.length >= 1, "version must have at least 1 valid version specified");
                const s = new Set();

                for (let e = 0; e < r.length; ++e) {
                  const n = r[e];
                  o("string" == typeof n, "version at position " + e + " must be a string");
                  const a = p.guidVersions[n.toLowerCase()];
                  o(a, "version at position " + e + " must be one of " + Object.keys(p.guidVersions).join(", ")), o(!s.has(a), "version at position " + e + " must not be a duplicate"), t += a, s.add(a);
                }
              }

              o(p.guidSeparators.has(e.separator), 'separator must be one of true, false, "-", or ":"');
              const r = void 0 === e.separator ? "[:-]?" : !0 === e.separator ? "[:-]" : !1 === e.separator ? "[]?" : "\\".concat(e.separator),
                    s = new RegExp("^([\\[{\\(]?)[0-9A-F]{8}(".concat(r, ")[0-9A-F]{4}\\2?[").concat(t || "0-9A-F", "][0-9A-F]{3}\\2?[").concat(t ? "89AB" : "0-9A-F", "][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"), "i");
              return this.$_addRule({
                name: "guid",
                args: {
                  options: e
                },
                regex: s
              });
            },

            validate(e, t, r, {
              regex: s
            }) {
              const n = s.exec(e);
              return n ? p.guidBrackets[n[1]] !== n[n.length - 1] ? t.error("string.guid") : e : t.error("string.guid");
            }

          },
          hex: {
            method(e = {}) {
              return d.assertOptions(e, ["byteAligned"]), e = n({
                byteAligned: !1
              }, e), o("boolean" == typeof e.byteAligned, "byteAligned must be boolean"), this.$_addRule({
                name: "hex",
                args: {
                  options: e
                }
              });
            },

            validate: (e, t, {
              options: r
            }) => p.hexRegex.test(e) ? r.byteAligned && e.length % 2 != 0 ? t.error("string.hexAlign") : e : t.error("string.hex")
          },
          hostname: {
            method() {
              return this.$_addRule("hostname");
            },

            validate: (e, t) => i.isValid(e, {
              minDomainSegments: 1
            }) || p.ipRegex.test(e) ? e : t.error("string.hostname")
          },
          insensitive: {
            method() {
              return this.$_setFlag("insensitive", !0);
            }

          },
          ip: {
            method(e = {}) {
              d.assertOptions(e, ["cidr", "version"]);
              const {
                cidr: t,
                versions: r,
                regex: s
              } = c.regex(e),
                    n = e.version ? r : void 0;
              return this.$_addRule({
                name: "ip",
                args: {
                  options: {
                    cidr: t,
                    version: n
                  }
                },
                regex: s
              });
            },

            validate: (e, t, {
              options: r
            }, {
              regex: s
            }) => s.test(e) ? e : r.version ? t.error("string.ipVersion", {
              value: e,
              cidr: r.cidr,
              version: r.version
            }) : t.error("string.ip", {
              value: e,
              cidr: r.cidr
            })
          },
          isoDate: {
            method() {
              return this.$_addRule("isoDate");
            },

            validate: (e, {
              error: t
            }) => p.isoDate(e) ? e : t("string.isoDate")
          },
          isoDuration: {
            method() {
              return this.$_addRule("isoDuration");
            },

            validate: (e, t) => p.isoDurationRegex.test(e) ? e : t.error("string.isoDuration")
          },
          length: {
            method(e, t) {
              return p.length(this, "length", e, "=", t);
            },

            validate(e, t, {
              limit: r,
              encoding: s
            }, {
              name: n,
              operator: a,
              args: o
            }) {
              const i = !s && e.length;
              return d.compare(i, r, a) ? e : t.error("string." + n, {
                limit: o.limit,
                value: e,
                encoding: s
              });
            },

            args: [{
              name: "limit",
              ref: !0,
              assert: d.limit,
              message: "must be a positive integer"
            }, "encoding"]
          },
          lowercase: {
            method() {
              return this.case("lower");
            }

          },
          max: {
            method(e, t) {
              return p.length(this, "max", e, "<=", t);
            },

            args: ["limit", "encoding"]
          },
          min: {
            method(e, t) {
              return p.length(this, "min", e, ">=", t);
            },

            args: ["limit", "encoding"]
          },
          normalize: {
            method(e = "NFC") {
              return o(p.normalizationForms.includes(e), "normalization form must be one of " + p.normalizationForms.join(", ")), this.$_addRule({
                name: "normalize",
                args: {
                  form: e
                }
              });
            },

            validate: (e, {
              error: t
            }, {
              form: r
            }) => e === e.normalize(r) ? e : t("string.normalize", {
              value: e,
              form: r
            }),
            convert: !0
          },
          pattern: {
            alias: "regex",

            method(e, t = {}) {
              o(e instanceof RegExp, "regex must be a RegExp"), o(!e.flags.includes("g") && !e.flags.includes("y"), "regex should not use global or sticky mode"), "string" == typeof t && (t = {
                name: t
              }), d.assertOptions(t, ["invert", "name"]);
              const r = ["string.pattern", t.invert ? ".invert" : "", t.name ? ".name" : ".base"].join("");
              return this.$_addRule({
                name: "pattern",
                args: {
                  regex: e,
                  options: t
                },
                errorCode: r
              });
            },

            validate: (e, t, {
              regex: r,
              options: s
            }, {
              errorCode: n
            }) => r.test(e) ^ s.invert ? e : t.error(n, {
              name: s.name,
              regex: r,
              value: e
            }),
            args: ["regex", "options"],
            multi: !0
          },
          replace: {
            method(e, t) {
              "string" == typeof e && (e = new RegExp(u(e), "g")), o(e instanceof RegExp, "pattern must be a RegExp"), o("string" == typeof t, "replacement must be a String");
              const r = this.clone();
              return r.$_terms.replacements || (r.$_terms.replacements = []), r.$_terms.replacements.push({
                pattern: e,
                replacement: t
              }), r;
            }

          },
          token: {
            method() {
              return this.$_addRule("token");
            },

            validate: (e, t) => /^\w+$/.test(e) ? e : t.error("string.token")
          },
          trim: {
            method(e = !0) {
              return o("boolean" == typeof e, "enabled must be a boolean"), this.$_addRule({
                name: "trim",
                args: {
                  enabled: e
                }
              });
            },

            validate: (e, t, {
              enabled: r
            }) => r && e !== e.trim() ? t.error("string.trim") : e,
            convert: !0
          },
          truncate: {
            method(e = !0) {
              return o("boolean" == typeof e, "enabled must be a boolean"), this.$_setFlag("truncate", e);
            }

          },
          uppercase: {
            method() {
              return this.case("upper");
            }

          },
          uri: {
            method(e = {}) {
              d.assertOptions(e, ["allowRelative", "allowQuerySquareBrackets", "domain", "relativeOnly", "scheme"]), e.domain && d.assertOptions(e.domain, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
              const {
                regex: t,
                scheme: r
              } = m.regex(e),
                    s = e.domain ? p.addressOptions(e.domain) : null;
              return this.$_addRule({
                name: "uri",
                args: {
                  options: e
                },
                regex: t,
                domain: s,
                scheme: r
              });
            },

            validate(e, t, {
              options: r
            }, {
              regex: s,
              domain: n,
              scheme: a
            }) {
              if (["http:/", "https:/"].includes(e)) return t.error("string.uri");
              const o = s.exec(e);

              if (o) {
                const s = o[1] || o[2];
                return !n || r.allowRelative && !s || i.isValid(s, n) ? e : t.error("string.domain", {
                  value: s
                });
              }

              return r.relativeOnly ? t.error("string.uriRelativeOnly") : r.scheme ? t.error("string.uriCustomScheme", {
                scheme: a,
                value: e
              }) : t.error("string.uri");
            }

          }
        },
        manifest: {
          build(e, t) {
            if (t.replacements) for (const {
              pattern: r,
              replacement: s
            } of t.replacements) e = e.replace(r, s);
            return e;
          }

        },
        messages: {
          "string.alphanum": "{{#label}} must only contain alpha-numeric characters",
          "string.base": "{{#label}} must be a string",
          "string.base64": "{{#label}} must be a valid base64 string",
          "string.creditCard": "{{#label}} must be a credit card",
          "string.dataUri": "{{#label}} must be a valid dataUri string",
          "string.domain": "{{#label}} must contain a valid domain name",
          "string.email": "{{#label}} must be a valid email",
          "string.empty": "{{#label}} is not allowed to be empty",
          "string.guid": "{{#label}} must be a valid GUID",
          "string.hex": "{{#label}} must only contain hexadecimal characters",
          "string.hexAlign": "{{#label}} hex decoded representation must be byte aligned",
          "string.hostname": "{{#label}} must be a valid hostname",
          "string.ip": "{{#label}} must be a valid ip address with a {{#cidr}} CIDR",
          "string.ipVersion": "{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR",
          "string.isoDate": "{{#label}} must be in iso format",
          "string.isoDuration": "{{#label}} must be a valid ISO 8601 duration",
          "string.length": "{{#label}} length must be {{#limit}} characters long",
          "string.lowercase": "{{#label}} must only contain lowercase characters",
          "string.max": "{{#label}} length must be less than or equal to {{#limit}} characters long",
          "string.min": "{{#label}} length must be at least {{#limit}} characters long",
          "string.normalize": "{{#label}} must be unicode normalized in the {{#form}} form",
          "string.token": "{{#label}} must only contain alpha-numeric and underscore characters",
          "string.pattern.base": "{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}",
          "string.pattern.name": "{{#label}} with value {:[.]} fails to match the {{#name}} pattern",
          "string.pattern.invert.base": "{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}",
          "string.pattern.invert.name": "{{#label}} with value {:[.]} matches the inverted {{#name}} pattern",
          "string.trim": "{{#label}} must not have leading or trailing whitespace",
          "string.uri": "{{#label}} must be a valid uri",
          "string.uriCustomScheme": "{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern",
          "string.uriRelativeOnly": "{{#label}} must be a valid relative uri",
          "string.uppercase": "{{#label}} must only contain uppercase characters"
        }
      }), p.addressOptions = function (e) {
        if (!e) return e;
        if (o(void 0 === e.minDomainSegments || Number.isSafeInteger(e.minDomainSegments) && e.minDomainSegments > 0, "minDomainSegments must be a positive integer"), o(void 0 === e.maxDomainSegments || Number.isSafeInteger(e.maxDomainSegments) && e.maxDomainSegments > 0, "maxDomainSegments must be a positive integer"), !1 === e.tlds) return e;
        if (!0 === e.tlds || void 0 === e.tlds) return o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e, p.tlds);
        o("object" == typeof e.tlds, "tlds must be true, false, or an object");
        const t = e.tlds.deny;
        if (t) return Array.isArray(t) && (e = Object.assign({}, e, {
          tlds: {
            deny: new Set(t)
          }
        })), o(e.tlds.deny instanceof Set, "tlds.deny must be an array, Set, or boolean"), o(!e.tlds.allow, "Cannot specify both tlds.allow and tlds.deny lists"), p.validateTlds(e.tlds.deny, "tlds.deny"), e;
        const r = e.tlds.allow;
        return r ? !0 === r ? (o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e, p.tlds)) : (Array.isArray(r) && (e = Object.assign({}, e, {
          tlds: {
            allow: new Set(r)
          }
        })), o(e.tlds.allow instanceof Set, "tlds.allow must be an array, Set, or boolean"), p.validateTlds(e.tlds.allow, "tlds.allow"), e) : e;
      }, p.validateTlds = function (e, t) {
        for (const r of e) o(i.isValid(r, {
          minDomainSegments: 1,
          maxDomainSegments: 1
        }), "".concat(t, " must contain valid top level domain names"));
      }, p.isoDate = function (e) {
        if (!d.isIsoDate(e)) return null;
        /.*T.*[+-]\d\d$/.test(e) && (e += "00");
        const t = new Date(e);
        return isNaN(t.getTime()) ? null : t.toISOString();
      }, p.length = function (e, t, r, s, n) {
        return o(!n || !1, "Invalid encoding:", n), e.$_addRule({
          name: t,
          method: "length",
          args: {
            limit: r,
            encoding: n
          },
          operator: s
        });
      };
    },
    8826: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = {};
      a.Map = class extends Map {
        slice() {
          return new a.Map(this);
        }

      }, e.exports = n.extend({
        type: "symbol",
        terms: {
          map: {
            init: new a.Map()
          }
        },
        coerce: {
          method(e, {
            schema: t,
            error: r
          }) {
            const s = t.$_terms.map.get(e);
            return s && (e = s), t._flags.only && "symbol" != typeof e ? {
              value: e,
              errors: r("symbol.map", {
                map: t.$_terms.map
              })
            } : {
              value: e
            };
          }

        },

        validate(e, {
          error: t
        }) {
          if ("symbol" != typeof e) return {
            value: e,
            errors: t("symbol.base")
          };
        },

        rules: {
          map: {
            method(e) {
              e && !e[Symbol.iterator] && "object" == typeof e && (e = Object.entries(e)), s(e && e[Symbol.iterator], "Iterable must be an iterable or object");
              const t = this.clone(),
                    r = [];

              for (const n of e) {
                s(n && n[Symbol.iterator], "Entry must be an iterable");
                const [e, a] = n;
                s("object" != typeof e && "function" != typeof e && "symbol" != typeof e, "Key must not be of type object, function, or Symbol"), s("symbol" == typeof a, "Value must be a Symbol"), t.$_terms.map.set(e, a), r.push(a);
              }

              return t.valid(...r);
            }

          }
        },
        manifest: {
          build: (e, t) => (t.map && (e = e.map(t.map)), e)
        },
        messages: {
          "symbol.base": "{{#label}} must be a symbol",
          "symbol.map": "{{#label}} must be one of {{#map}}"
        }
      });
    },
    8863: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(738),
            o = r(9621),
            i = r(8160),
            l = r(6354),
            c = r(493),
            u = {
        result: Symbol("result")
      };
      t.entry = function (e, t, r) {
        let n = i.defaults;
        r && (s(void 0 === r.warnings, "Cannot override warnings preference in synchronous validation"), s(void 0 === r.artifacts, "Cannot override artifacts preference in synchronous validation"), n = i.preferences(i.defaults, r));
        const a = u.entry(e, t, n);
        s(!a.mainstay.externals.length, "Schema with external rules must use validateAsync()");
        const o = {
          value: a.value
        };
        return a.error && (o.error = a.error), a.mainstay.warnings.length && (o.warning = l.details(a.mainstay.warnings)), a.mainstay.debug && (o.debug = a.mainstay.debug), a.mainstay.artifacts && (o.artifacts = a.mainstay.artifacts), o;
      }, t.entryAsync = async function (e, t, r) {
        let s = i.defaults;
        r && (s = i.preferences(i.defaults, r));
        const n = u.entry(e, t, s),
              a = n.mainstay;
        if (n.error) throw a.debug && (n.error.debug = a.debug), n.error;

        if (a.externals.length) {
          let e = n.value;

          for (const {
            method: t,
            path: n,
            label: i
          } of a.externals) {
            let a,
                l,
                c = e;
            n.length && (a = n[n.length - 1], l = o(e, n.slice(0, -1)), c = l[a]);

            try {
              const s = await t(c, {
                prefs: r
              });
              if (void 0 === s || s === c) continue;
              l ? l[a] = s : e = s;
            } catch (e) {
              throw s.errors.label && (e.message += " (".concat(i, ")")), e;
            }
          }

          n.value = e;
        }

        if (!s.warnings && !s.debug && !s.artifacts) return n.value;
        const c = {
          value: n.value
        };
        return a.warnings.length && (c.warning = l.details(a.warnings)), a.debug && (c.debug = a.debug), a.artifacts && (c.artifacts = a.artifacts), c;
      }, u.entry = function (e, r, s) {
        const {
          tracer: n,
          cleanup: a
        } = u.tracer(r, s),
              o = {
          externals: [],
          warnings: [],
          tracer: n,
          debug: s.debug ? [] : null,
          links: r._ids._schemaChain ? new Map() : null
        },
              i = r._ids._schemaChain ? [{
          schema: r
        }] : null,
              f = new c([], [], {
          mainstay: o,
          schemas: i
        }),
              m = t.validate(e, r, f, s);
        a && r.$_root.untrace();
        const h = l.process(m.errors, e, s);
        return {
          value: m.value,
          error: h,
          mainstay: o
        };
      }, u.tracer = function (e, t) {
        return e.$_root._tracer ? {
          tracer: e.$_root._tracer._register(e)
        } : t.debug ? (s(e.$_root.trace, "Debug mode not supported"), {
          tracer: e.$_root.trace()._register(e),
          cleanup: !0
        }) : {
          tracer: u.ignore
        };
      }, t.validate = function (e, t, r, s, n = {}) {
        if (t.$_terms.whens && (t = t._generate(e, r, s).schema), t._preferences && (s = u.prefs(t, s)), t._cache && s.cache) {
          const s = t._cache.get(e);

          if (r.mainstay.tracer.debug(r, "validate", "cached", !!s), s) return s;
        }

        const a = (n, a, o) => t.$_createError(n, e, a, o || r, s),
              o = {
          original: e,
          prefs: s,
          schema: t,
          state: r,
          error: a,
          errorsArray: u.errorsArray,
          warn: (e, t, s) => r.mainstay.warnings.push(a(e, t, s)),
          message: (n, a) => t.$_createError("custom", e, a, r, s, {
            messages: n
          })
        };

        r.mainstay.tracer.entry(t, r);
        const l = t._definition;

        if (l.prepare && void 0 !== e && s.convert) {
          const t = l.prepare(e, o);

          if (t) {
            if (r.mainstay.tracer.value(r, "prepare", e, t.value), t.errors) return u.finalize(t.value, [].concat(t.errors), o);
            e = t.value;
          }
        }

        if (l.coerce && void 0 !== e && s.convert && (!l.coerce.from || l.coerce.from.includes(typeof e))) {
          const t = l.coerce.method(e, o);

          if (t) {
            if (r.mainstay.tracer.value(r, "coerced", e, t.value), t.errors) return u.finalize(t.value, [].concat(t.errors), o);
            e = t.value;
          }
        }

        const c = t._flags.empty;
        c && c.$_match(u.trim(e, t), r.nest(c), i.defaults) && (r.mainstay.tracer.value(r, "empty", e, void 0), e = void 0);
        const f = n.presence || t._flags.presence || (t._flags._endedSwitch ? null : s.presence);

        if (void 0 === e) {
          if ("forbidden" === f) return u.finalize(e, null, o);
          if ("required" === f) return u.finalize(e, [t.$_createError("any.required", e, null, r, s)], o);

          if ("optional" === f) {
            if (t._flags.default !== i.symbols.deepDefault) return u.finalize(e, null, o);
            r.mainstay.tracer.value(r, "default", e, {}), e = {};
          }
        } else if ("forbidden" === f) return u.finalize(e, [t.$_createError("any.unknown", e, null, r, s)], o);

        const m = [];

        if (t._valids) {
          const n = t._valids.get(e, r, s, t._flags.insensitive);

          if (n) return s.convert && (r.mainstay.tracer.value(r, "valids", e, n.value), e = n.value), r.mainstay.tracer.filter(t, r, "valid", n), u.finalize(e, null, o);

          if (t._flags.only) {
            const n = t.$_createError("any.only", e, {
              valids: t._valids.values({
                display: !0
              })
            }, r, s);
            if (s.abortEarly) return u.finalize(e, [n], o);
            m.push(n);
          }
        }

        if (t._invalids) {
          const n = t._invalids.get(e, r, s, t._flags.insensitive);

          if (n) {
            r.mainstay.tracer.filter(t, r, "invalid", n);
            const a = t.$_createError("any.invalid", e, {
              invalids: t._invalids.values({
                display: !0
              })
            }, r, s);
            if (s.abortEarly) return u.finalize(e, [a], o);
            m.push(a);
          }
        }

        if (l.validate) {
          const t = l.validate(e, o);

          if (t && (r.mainstay.tracer.value(r, "base", e, t.value), e = t.value, t.errors)) {
            if (!Array.isArray(t.errors)) return m.push(t.errors), u.finalize(e, m, o);
            if (t.errors.length) return m.push(...t.errors), u.finalize(e, m, o);
          }
        }

        return t._rules.length ? u.rules(e, m, o) : u.finalize(e, m, o);
      }, u.rules = function (e, t, r) {
        const {
          schema: s,
          state: n,
          prefs: a
        } = r;

        for (const o of s._rules) {
          const l = s._definition.rules[o.method];

          if (l.convert && a.convert) {
            n.mainstay.tracer.log(s, n, "rule", o.name, "full");
            continue;
          }

          let c,
              f = o.args;

          if (o._resolve.length) {
            f = Object.assign({}, f);

            for (const t of o._resolve) {
              const r = l.argsByName.get(t),
                    o = f[t].resolve(e, n, a),
                    u = r.normalize ? r.normalize(o) : o,
                    m = i.validateArg(u, null, r);

              if (m) {
                c = s.$_createError("any.ref", o, {
                  arg: t,
                  ref: f[t],
                  reason: m
                }, n, a);
                break;
              }

              f[t] = u;
            }
          }

          c = c || l.validate(e, r, f, o);
          const m = u.rule(c, o);

          if (m.errors) {
            if (n.mainstay.tracer.log(s, n, "rule", o.name, "error"), o.warn) {
              n.mainstay.warnings.push(...m.errors);
              continue;
            }

            if (a.abortEarly) return u.finalize(e, m.errors, r);
            t.push(...m.errors);
          } else n.mainstay.tracer.log(s, n, "rule", o.name, "pass"), n.mainstay.tracer.value(n, "rule", e, m.value, o.name), e = m.value;
        }

        return u.finalize(e, t, r);
      }, u.rule = function (e, t) {
        return e instanceof l.Report ? (u.error(e, t), {
          errors: [e],
          value: null
        }) : Array.isArray(e) && e[i.symbols.errors] ? (e.forEach(e => u.error(e, t)), {
          errors: e,
          value: null
        }) : {
          errors: null,
          value: e
        };
      }, u.error = function (e, t) {
        return t.message && e._setTemplate(t.message), e;
      }, u.finalize = function (e, t, r) {
        t = t || [];
        const {
          schema: n,
          state: a,
          prefs: o
        } = r;

        if (t.length) {
          const s = u.default("failover", void 0, t, r);
          void 0 !== s && (a.mainstay.tracer.value(a, "failover", e, s), e = s, t = []);
        }

        if (t.length && n._flags.error) if ("function" == typeof n._flags.error) {
          t = n._flags.error(t), Array.isArray(t) || (t = [t]);

          for (const e of t) s(e instanceof Error || e instanceof l.Report, "error() must return an Error object");
        } else t = [n._flags.error];

        if (void 0 === e) {
          const s = u.default("default", e, t, r);
          a.mainstay.tracer.value(a, "default", e, s), e = s;
        }

        if (n._flags.cast && void 0 !== e) {
          const t = n._definition.cast[n._flags.cast];

          if (t.from(e)) {
            const s = t.to(e, r);
            a.mainstay.tracer.value(a, "cast", e, s, n._flags.cast), e = s;
          }
        }

        if (n.$_terms.externals && o.externals && !1 !== o._externals) for (const {
          method: e
        } of n.$_terms.externals) a.mainstay.externals.push({
          method: e,
          path: a.path,
          label: l.label(n._flags, a, o)
        });
        const i = {
          value: e,
          errors: t.length ? t : null
        };
        return n._flags.result && (i.value = "strip" === n._flags.result ? void 0 : r.original, a.mainstay.tracer.value(a, n._flags.result, e, i.value), a.shadow(e, n._flags.result)), n._cache && !1 !== o.cache && !n._refs.length && n._cache.set(r.original, i), void 0 === e || i.errors || void 0 === n._flags.artifact || (a.mainstay.artifacts = a.mainstay.artifacts || new Map(), a.mainstay.artifacts.has(n._flags.artifact) || a.mainstay.artifacts.set(n._flags.artifact, []), a.mainstay.artifacts.get(n._flags.artifact).push(a.path)), i;
      }, u.prefs = function (e, t) {
        const r = t === i.defaults;
        return r && e._preferences[i.symbols.prefs] ? e._preferences[i.symbols.prefs] : (t = i.preferences(t, e._preferences), r && (e._preferences[i.symbols.prefs] = t), t);
      }, u.default = function (e, t, r, s) {
        const {
          schema: a,
          state: o,
          prefs: l
        } = s,
              c = a._flags[e];
        if (l.noDefaults || void 0 === c) return t;
        if (o.mainstay.tracer.log(a, o, "rule", e, "full"), !c) return c;

        if ("function" == typeof c) {
          const t = c.length ? [n(o.ancestors[0]), s] : [];

          try {
            return c(...t);
          } catch (t) {
            return void r.push(a.$_createError("any.".concat(e), null, {
              error: t
            }, o, l));
          }
        }

        return "object" != typeof c ? c : c[i.symbols.literal] ? c.literal : i.isResolvable(c) ? c.resolve(t, o, l) : n(c);
      }, u.trim = function (e, t) {
        if ("string" != typeof e) return e;
        const r = t.$_getRule("trim");
        return r && r.args.enabled ? e.trim() : e;
      }, u.ignore = {
        active: !1,
        debug: a,
        entry: a,
        filter: a,
        log: a,
        resolve: a,
        value: a
      }, u.errorsArray = function () {
        const e = [];
        return e[i.symbols.errors] = !0, e;
      };
    },
    2036: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(9474),
            a = r(8160),
            o = {};
      e.exports = o.Values = class {
        constructor(e, t) {
          this._values = new Set(e), this._refs = new Set(t), this._lowercase = o.lowercases(e), this._override = !1;
        }

        get length() {
          return this._values.size + this._refs.size;
        }

        add(e, t) {
          a.isResolvable(e) ? this._refs.has(e) || (this._refs.add(e), t && t.register(e)) : this.has(e, null, null, !1) || (this._values.add(e), "string" == typeof e && this._lowercase.set(e.toLowerCase(), e));
        }

        static merge(e, t, r) {
          if (e = e || new o.Values(), t) {
            if (t._override) return t.clone();

            for (const r of [...t._values, ...t._refs]) e.add(r);
          }

          if (r) for (const t of [...r._values, ...r._refs]) e.remove(t);
          return e.length ? e : null;
        }

        remove(e) {
          a.isResolvable(e) ? this._refs.delete(e) : (this._values.delete(e), "string" == typeof e && this._lowercase.delete(e.toLowerCase()));
        }

        has(e, t, r, s) {
          return !!this.get(e, t, r, s);
        }

        get(e, t, r, s) {
          if (!this.length) return !1;
          if (this._values.has(e)) return {
            value: e
          };

          if ("string" == typeof e && e && s) {
            const t = this._lowercase.get(e.toLowerCase());

            if (t) return {
              value: t
            };
          }

          if (!this._refs.size && "object" != typeof e) return !1;
          if ("object" == typeof e) for (const t of this._values) if (n(t, e)) return {
            value: t
          };
          if (t) for (const a of this._refs) {
            const o = a.resolve(e, t, r, null, {
              in: !0
            });
            if (void 0 === o) continue;
            const i = a.in && "object" == typeof o ? Array.isArray(o) ? o : Object.keys(o) : [o];

            for (const t of i) if (typeof t == typeof e) if (s && e && "string" == typeof e) {
              if (t.toLowerCase() === e.toLowerCase()) return {
                value: t,
                ref: a
              };
            } else if (n(t, e)) return {
              value: t,
              ref: a
            };
          }
          return !1;
        }

        override() {
          this._override = !0;
        }

        values(e) {
          if (e && e.display) {
            const e = [];

            for (const t of [...this._values, ...this._refs]) void 0 !== t && e.push(t);

            return e;
          }

          return Array.from([...this._values, ...this._refs]);
        }

        clone() {
          const e = new o.Values(this._values, this._refs);
          return e._override = this._override, e;
        }

        concat(e) {
          s(!e._override, "Cannot concat override set of values");
          const t = new o.Values([...this._values, ...e._values], [...this._refs, ...e._refs]);
          return t._override = this._override, t;
        }

        describe() {
          const e = [];
          this._override && e.push({
            override: !0
          });

          for (const t of this._values.values()) e.push(t && "object" == typeof t ? {
            value: t
          } : t);

          for (const t of this._refs.values()) e.push(t.describe());

          return e;
        }

      }, o.Values.prototype[a.symbols.values] = !0, o.Values.prototype.slice = o.Values.prototype.clone, o.lowercases = function (e) {
        const t = new Map();
        if (e) for (const r of e) "string" == typeof r && t.set(r.toLowerCase(), r);
        return t;
      };
    },
    978: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(1687),
            o = r(9621),
            i = {};
      e.exports = function (e, t, r = {}) {
        if (s(e && "object" == typeof e, "Invalid defaults value: must be an object"), s(!t || !0 === t || "object" == typeof t, "Invalid source value: must be true, falsy or an object"), s("object" == typeof r, "Invalid options: must be an object"), !t) return null;
        if (r.shallow) return i.applyToDefaultsWithShallow(e, t, r);
        const o = n(e);
        if (!0 === t) return o;
        const l = void 0 !== r.nullOverride && r.nullOverride;
        return a(o, t, {
          nullOverride: l,
          mergeArrays: !1
        });
      }, i.applyToDefaultsWithShallow = function (e, t, r) {
        const l = r.shallow;
        s(Array.isArray(l), "Invalid keys");
        const c = new Map(),
              u = !0 === t ? null : new Set();

        for (let r of l) {
          r = Array.isArray(r) ? r : r.split(".");
          const s = o(e, r);
          s && "object" == typeof s ? c.set(s, u && o(t, r) || s) : u && u.add(r);
        }

        const f = n(e, {}, c);
        if (!u) return f;

        for (const e of u) i.reachCopy(f, t, e);

        const m = void 0 !== r.nullOverride && r.nullOverride;
        return a(f, t, {
          nullOverride: m,
          mergeArrays: !1
        });
      }, i.reachCopy = function (e, t, r) {
        for (const e of r) {
          if (!(e in t)) return;
          const r = t[e];
          if ("object" != typeof r || null === r) return;
          t = r;
        }

        const s = t;
        let n = e;

        for (let e = 0; e < r.length - 1; ++e) {
          const t = r[e];
          "object" != typeof n[t] && (n[t] = {}), n = n[t];
        }

        n[r[r.length - 1]] = s;
      };
    },
    375: (e, t, r) => {
      "use strict";

      const s = r(7916);

      e.exports = function (e, ...t) {
        if (!e) {
          if (1 === t.length && t[0] instanceof Error) throw t[0];
          throw new s(t);
        }
      };
    },
    8571: (e, t, r) => {
      "use strict";

      const s = r(9621),
            n = r(4277),
            a = r(7043),
            o = {
        needsProtoHack: new Set([n.set, n.map, n.weakSet, n.weakMap])
      };
      e.exports = o.clone = function (e, t = {}, r = null) {
        if ("object" != typeof e || null === e) return e;
        let s = o.clone,
            i = r;

        if (t.shallow) {
          if (!0 !== t.shallow) return o.cloneWithShallow(e, t);

          s = e => e;
        } else if (i) {
          const t = i.get(e);
          if (t) return t;
        } else i = new Map();

        const l = n.getInternalProto(e);
        if (l === n.buffer) return !1;
        if (l === n.date) return new Date(e.getTime());
        if (l === n.regex) return new RegExp(e);
        const c = o.base(e, l, t);
        if (c === e) return e;
        if (i && i.set(e, c), l === n.set) for (const r of e) c.add(s(r, t, i));else if (l === n.map) for (const [r, n] of e) c.set(r, s(n, t, i));
        const u = a.keys(e, t);

        for (const r of u) {
          if ("__proto__" === r) continue;

          if (l === n.array && "length" === r) {
            c.length = e.length;
            continue;
          }

          const a = Object.getOwnPropertyDescriptor(e, r);
          a ? a.get || a.set ? Object.defineProperty(c, r, a) : a.enumerable ? c[r] = s(e[r], t, i) : Object.defineProperty(c, r, {
            enumerable: !1,
            writable: !0,
            configurable: !0,
            value: s(e[r], t, i)
          }) : Object.defineProperty(c, r, {
            enumerable: !0,
            writable: !0,
            configurable: !0,
            value: s(e[r], t, i)
          });
        }

        return c;
      }, o.cloneWithShallow = function (e, t) {
        const r = t.shallow;
        (t = Object.assign({}, t)).shallow = !1;
        const n = new Map();

        for (const t of r) {
          const r = s(e, t);
          "object" != typeof r && "function" != typeof r || n.set(r, r);
        }

        return o.clone(e, t, n);
      }, o.base = function (e, t, r) {
        if (!1 === r.prototype) return o.needsProtoHack.has(t) ? new t.constructor() : t === n.array ? [] : {};
        const s = Object.getPrototypeOf(e);
        if (s && s.isImmutable) return e;

        if (t === n.array) {
          const e = [];
          return s !== t && Object.setPrototypeOf(e, s), e;
        }

        if (o.needsProtoHack.has(t)) {
          const e = new s.constructor();
          return s !== t && Object.setPrototypeOf(e, s), e;
        }

        return Object.create(s);
      };
    },
    9474: (e, t, r) => {
      "use strict";

      const s = r(4277),
            n = {
        mismatched: null
      };
      e.exports = function (e, t, r) {
        return r = Object.assign({
          prototype: !0
        }, r), !!n.isDeepEqual(e, t, r, []);
      }, n.isDeepEqual = function (e, t, r, a) {
        if (e === t) return 0 !== e || 1 / e == 1 / t;
        const o = typeof e;
        if (o !== typeof t) return !1;
        if (null === e || null === t) return !1;

        if ("function" === o) {
          if (!r.deepFunction || e.toString() !== t.toString()) return !1;
        } else if ("object" !== o) return e != e && t != t;

        const i = n.getSharedType(e, t, !!r.prototype);

        switch (i) {
          case s.buffer:
            return !1;

          case s.promise:
            return e === t;

          case s.regex:
            return e.toString() === t.toString();

          case n.mismatched:
            return !1;
        }

        for (let r = a.length - 1; r >= 0; --r) if (a[r].isSame(e, t)) return !0;

        a.push(new n.SeenEntry(e, t));

        try {
          return !!n.isDeepEqualObj(i, e, t, r, a);
        } finally {
          a.pop();
        }
      }, n.getSharedType = function (e, t, r) {
        if (r) return Object.getPrototypeOf(e) !== Object.getPrototypeOf(t) ? n.mismatched : s.getInternalProto(e);
        const a = s.getInternalProto(e);
        return a !== s.getInternalProto(t) ? n.mismatched : a;
      }, n.valueOf = function (e) {
        const t = e.valueOf;
        if (void 0 === t) return e;

        try {
          return t.call(e);
        } catch (e) {
          return e;
        }
      }, n.hasOwnEnumerableProperty = function (e, t) {
        return Object.prototype.propertyIsEnumerable.call(e, t);
      }, n.isSetSimpleEqual = function (e, t) {
        for (const r of Set.prototype.values.call(e)) if (!Set.prototype.has.call(t, r)) return !1;

        return !0;
      }, n.isDeepEqualObj = function (e, t, r, a, o) {
        const {
          isDeepEqual: i,
          valueOf: l,
          hasOwnEnumerableProperty: c
        } = n,
              {
          keys: u,
          getOwnPropertySymbols: f
        } = Object;

        if (e === s.array) {
          if (!a.part) {
            if (t.length !== r.length) return !1;

            for (let e = 0; e < t.length; ++e) if (!i(t[e], r[e], a, o)) return !1;

            return !0;
          }

          for (const e of t) for (const t of r) if (i(e, t, a, o)) return !0;
        } else if (e === s.set) {
          if (t.size !== r.size) return !1;

          if (!n.isSetSimpleEqual(t, r)) {
            const e = new Set(Set.prototype.values.call(r));

            for (const r of Set.prototype.values.call(t)) {
              if (e.delete(r)) continue;
              let t = !1;

              for (const s of e) if (i(r, s, a, o)) {
                e.delete(s), t = !0;
                break;
              }

              if (!t) return !1;
            }
          }
        } else if (e === s.map) {
          if (t.size !== r.size) return !1;

          for (const [e, s] of Map.prototype.entries.call(t)) {
            if (void 0 === s && !Map.prototype.has.call(r, e)) return !1;
            if (!i(s, Map.prototype.get.call(r, e), a, o)) return !1;
          }
        } else if (e === s.error && (t.name !== r.name || t.message !== r.message)) return !1;

        const m = l(t),
              h = l(r);
        if ((t !== m || r !== h) && !i(m, h, a, o)) return !1;
        const d = u(t);
        if (!a.part && d.length !== u(r).length && !a.skip) return !1;
        let p = 0;

        for (const e of d) if (a.skip && a.skip.includes(e)) void 0 === r[e] && ++p;else {
          if (!c(r, e)) return !1;
          if (!i(t[e], r[e], a, o)) return !1;
        }

        if (!a.part && d.length - p !== u(r).length) return !1;

        if (!1 !== a.symbols) {
          const e = f(t),
                s = new Set(f(r));

          for (const n of e) {
            if (!a.skip || !a.skip.includes(n)) if (c(t, n)) {
              if (!c(r, n)) return !1;
              if (!i(t[n], r[n], a, o)) return !1;
            } else if (c(r, n)) return !1;
            s.delete(n);
          }

          for (const e of s) if (c(r, e)) return !1;
        }

        return !0;
      }, n.SeenEntry = class {
        constructor(e, t) {
          this.obj = e, this.ref = t;
        }

        isSame(e, t) {
          return this.obj === e && this.ref === t;
        }

      };
    },
    7916: (e, t, r) => {
      "use strict";

      const s = r(8761);
      e.exports = class extends Error {
        constructor(e) {
          super(e.filter(e => "" !== e).map(e => "string" == typeof e ? e : e instanceof Error ? e.message : s(e)).join(" ") || "Unknown error"), "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, t.assert);
        }

      };
    },
    5277: e => {
      "use strict";

      const t = {};
      e.exports = function (e) {
        if (!e) return "";
        let r = "";

        for (let s = 0; s < e.length; ++s) {
          const n = e.charCodeAt(s);
          t.isSafe(n) ? r += e[s] : r += t.escapeHtmlChar(n);
        }

        return r;
      }, t.escapeHtmlChar = function (e) {
        const r = t.namedHtml[e];
        if (void 0 !== r) return r;
        if (e >= 256) return "&#" + e + ";";
        const s = e.toString(16).padStart(2, "0");
        return "&#x".concat(s, ";");
      }, t.isSafe = function (e) {
        return void 0 !== t.safeCharCodes[e];
      }, t.namedHtml = {
        38: "&amp;",
        60: "&lt;",
        62: "&gt;",
        34: "&quot;",
        160: "&nbsp;",
        162: "&cent;",
        163: "&pound;",
        164: "&curren;",
        169: "&copy;",
        174: "&reg;"
      }, t.safeCharCodes = function () {
        const e = {};

        for (let t = 32; t < 123; ++t) (t >= 97 || t >= 65 && t <= 90 || t >= 48 && t <= 57 || 32 === t || 46 === t || 44 === t || 45 === t || 58 === t || 95 === t) && (e[t] = null);

        return e;
      }();
    },
    6064: e => {
      "use strict";

      e.exports = function (e) {
        return e.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
      };
    },
    738: e => {
      "use strict";

      e.exports = function () {};
    },
    1687: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(7043),
            o = {};

      e.exports = o.merge = function (e, t, r) {
        if (s(e && "object" == typeof e, "Invalid target value: must be an object"), s(null == t || "object" == typeof t, "Invalid source value: must be null, undefined, or an object"), !t) return e;

        if (r = Object.assign({
          nullOverride: !0,
          mergeArrays: !0
        }, r), Array.isArray(t)) {
          s(Array.isArray(e), "Cannot merge array onto an object"), r.mergeArrays || (e.length = 0);

          for (let s = 0; s < t.length; ++s) e.push(n(t[s], {
            symbols: r.symbols
          }));

          return e;
        }

        const i = a.keys(t, r);

        for (let s = 0; s < i.length; ++s) {
          const a = i[s];
          if ("__proto__" === a || !Object.prototype.propertyIsEnumerable.call(t, a)) continue;
          const l = t[a];

          if (l && "object" == typeof l) {
            if (e[a] === l) continue;
            !e[a] || "object" != typeof e[a] || Array.isArray(e[a]) !== Array.isArray(l) || l instanceof Date || l instanceof RegExp ? e[a] = n(l, {
              symbols: r.symbols
            }) : o.merge(e[a], l, r);
          } else (null != l || r.nullOverride) && (e[a] = l);
        }

        return e;
      };
    },
    9621: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = {};
      e.exports = function (e, t, r) {
        if (!1 === t || null == t) return e;
        "string" == typeof (r = r || {}) && (r = {
          separator: r
        });
        const a = Array.isArray(t);
        s(!a || !r.separator, "Separator option no valid for array-based chain");
        const o = a ? t : t.split(r.separator || ".");
        let i = e;

        for (let e = 0; e < o.length; ++e) {
          let a = o[e];
          const l = r.iterables && n.iterables(i);

          if (Array.isArray(i) || "set" === l) {
            const e = Number(a);
            Number.isInteger(e) && (a = e < 0 ? i.length + e : e);
          }

          if (!i || "function" == typeof i && !1 === r.functions || !l && void 0 === i[a]) {
            s(!r.strict || e + 1 === o.length, "Missing segment", a, "in reach path ", t), s("object" == typeof i || !0 === r.functions || "function" != typeof i, "Invalid segment", a, "in reach path ", t), i = r.default;
            break;
          }

          i = l ? "set" === l ? [...i][a] : i.get(a) : i[a];
        }

        return i;
      }, n.iterables = function (e) {
        return e instanceof Set ? "set" : e instanceof Map ? "map" : void 0;
      };
    },
    8761: e => {
      "use strict";

      e.exports = function (...e) {
        try {
          return JSON.stringify.apply(null, e);
        } catch (e) {
          return "[Cannot display object: " + e.message + "]";
        }
      };
    },
    4277: (e, t) => {
      "use strict";

      const r = {};
      t = e.exports = {
        array: Array.prototype,
        buffer: !1,
        date: Date.prototype,
        error: Error.prototype,
        generic: Object.prototype,
        map: Map.prototype,
        promise: Promise.prototype,
        regex: RegExp.prototype,
        set: Set.prototype,
        weakMap: WeakMap.prototype,
        weakSet: WeakSet.prototype
      }, r.typeMap = new Map([["[object Error]", t.error], ["[object Map]", t.map], ["[object Promise]", t.promise], ["[object Set]", t.set], ["[object WeakMap]", t.weakMap], ["[object WeakSet]", t.weakSet]]), t.getInternalProto = function (e) {
        if (Array.isArray(e)) return t.array;
        if (e instanceof Date) return t.date;
        if (e instanceof RegExp) return t.regex;
        if (e instanceof Error) return t.error;
        const s = Object.prototype.toString.call(e);
        return r.typeMap.get(s) || t.generic;
      };
    },
    7043: (e, t) => {
      "use strict";

      t.keys = function (e, t = {}) {
        return !1 !== t.symbols ? Reflect.ownKeys(e) : Object.getOwnPropertyNames(e);
      };
    },
    3652: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = {};
      t.Sorter = class {
        constructor() {
          this._items = [], this.nodes = [];
        }

        add(e, t) {
          const r = [].concat((t = t || {}).before || []),
                n = [].concat(t.after || []),
                a = t.group || "?",
                o = t.sort || 0;
          s(!r.includes(a), "Item cannot come before itself: ".concat(a)), s(!r.includes("?"), "Item cannot come before unassociated items"), s(!n.includes(a), "Item cannot come after itself: ".concat(a)), s(!n.includes("?"), "Item cannot come after unassociated items"), Array.isArray(e) || (e = [e]);

          for (const t of e) {
            const e = {
              seq: this._items.length,
              sort: o,
              before: r,
              after: n,
              group: a,
              node: t
            };

            this._items.push(e);
          }

          if (!t.manual) {
            const e = this._sort();

            s(e, "item", "?" !== a ? "added into group ".concat(a) : "", "created a dependencies error");
          }

          return this.nodes;
        }

        merge(e) {
          Array.isArray(e) || (e = [e]);

          for (const t of e) if (t) for (const e of t._items) this._items.push(Object.assign({}, e));

          this._items.sort(n.mergeSort);

          for (let e = 0; e < this._items.length; ++e) this._items[e].seq = e;

          const t = this._sort();

          return s(t, "merge created a dependencies error"), this.nodes;
        }

        sort() {
          const e = this._sort();

          return s(e, "sort created a dependencies error"), this.nodes;
        }

        _sort() {
          const e = {},
                t = Object.create(null),
                r = Object.create(null);

          for (const s of this._items) {
            const n = s.seq,
                  a = s.group;
            r[a] = r[a] || [], r[a].push(n), e[n] = s.before;

            for (const e of s.after) t[e] = t[e] || [], t[e].push(n);
          }

          for (const t in e) {
            const s = [];

            for (const n in e[t]) {
              const a = e[t][n];
              r[a] = r[a] || [], s.push(...r[a]);
            }

            e[t] = s;
          }

          for (const s in t) if (r[s]) for (const n of r[s]) e[n].push(...t[s]);

          const s = {};

          for (const t in e) {
            const r = e[t];

            for (const e of r) s[e] = s[e] || [], s[e].push(t);
          }

          const n = {},
                a = [];

          for (let e = 0; e < this._items.length; ++e) {
            let t = e;

            if (s[e]) {
              t = null;

              for (let e = 0; e < this._items.length; ++e) {
                if (!0 === n[e]) continue;
                s[e] || (s[e] = []);
                const r = s[e].length;
                let a = 0;

                for (let t = 0; t < r; ++t) n[s[e][t]] && ++a;

                if (a === r) {
                  t = e;
                  break;
                }
              }
            }

            null !== t && (n[t] = !0, a.push(t));
          }

          if (a.length !== this._items.length) return !1;
          const o = {};

          for (const e of this._items) o[e.seq] = e;

          this._items = [], this.nodes = [];

          for (const e of a) {
            const t = o[e];
            this.nodes.push(t.node), this._items.push(t);
          }

          return !0;
        }

      }, n.mergeSort = (e, t) => e.sort === t.sort ? 0 : e.sort < t.sort ? -1 : 1;
    },
    5380: (e, t, r) => {
      "use strict";

      const s = r(443),
            n = r(2178),
            a = {
        minDomainSegments: 2,
        nonAsciiRx: /[^\x00-\x7f]/,
        domainControlRx: /[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/,
        tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
        domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
        URL: s.URL || URL
      };
      t.analyze = function (e, t = {}) {
        if (!e) return n.code("DOMAIN_NON_EMPTY_STRING");
        if ("string" != typeof e) throw new Error("Invalid input: domain must be a string");
        if (e.length > 256) return n.code("DOMAIN_TOO_LONG");

        if (a.nonAsciiRx.test(e)) {
          if (!1 === t.allowUnicode) return n.code("DOMAIN_INVALID_UNICODE_CHARS");
          e = e.normalize("NFC");
        }

        if (a.domainControlRx.test(e)) return n.code("DOMAIN_INVALID_CHARS");
        e = a.punycode(e), t.allowFullyQualified && "." === e[e.length - 1] && (e = e.slice(0, -1));
        const r = t.minDomainSegments || a.minDomainSegments,
              s = e.split(".");
        if (s.length < r) return n.code("DOMAIN_SEGMENTS_COUNT");
        if (t.maxDomainSegments && s.length > t.maxDomainSegments) return n.code("DOMAIN_SEGMENTS_COUNT_MAX");
        const o = t.tlds;

        if (o) {
          const e = s[s.length - 1].toLowerCase();
          if (o.deny && o.deny.has(e) || o.allow && !o.allow.has(e)) return n.code("DOMAIN_FORBIDDEN_TLDS");
        }

        for (let e = 0; e < s.length; ++e) {
          const t = s[e];
          if (!t.length) return n.code("DOMAIN_EMPTY_SEGMENT");
          if (t.length > 63) return n.code("DOMAIN_LONG_SEGMENT");

          if (e < s.length - 1) {
            if (!a.domainSegmentRx.test(t)) return n.code("DOMAIN_INVALID_CHARS");
          } else if (!a.tldSegmentRx.test(t)) return n.code("DOMAIN_INVALID_TLDS_CHARS");
        }

        return null;
      }, t.isValid = function (e, r) {
        return !t.analyze(e, r);
      }, a.punycode = function (e) {
        e.includes("%") && (e = e.replace(/%/g, "%25"));

        try {
          return new a.URL("http://".concat(e)).host;
        } catch (t) {
          return e;
        }
      };
    },
    1745: (e, t, r) => {
      "use strict";

      const s = r(9848),
            n = r(5380),
            a = r(2178),
            o = {
        nonAsciiRx: /[^\x00-\x7f]/,
        encoder: new (s.TextEncoder || TextEncoder)()
      };
      t.analyze = function (e, t) {
        return o.email(e, t);
      }, t.isValid = function (e, t) {
        return !o.email(e, t);
      }, o.email = function (e, t = {}) {
        if ("string" != typeof e) throw new Error("Invalid input: email must be a string");
        if (!e) return a.code("EMPTY_STRING");
        const r = !o.nonAsciiRx.test(e);

        if (!r) {
          if (!1 === t.allowUnicode) return a.code("FORBIDDEN_UNICODE");
          e = e.normalize("NFC");
        }

        const s = e.split("@");
        if (2 !== s.length) return s.length > 2 ? a.code("MULTIPLE_AT_CHAR") : a.code("MISSING_AT_CHAR");
        const [i, l] = s;
        if (!i) return a.code("EMPTY_LOCAL");

        if (!t.ignoreLength) {
          if (e.length > 254) return a.code("ADDRESS_TOO_LONG");
          if (o.encoder.encode(i).length > 64) return a.code("LOCAL_TOO_LONG");
        }

        return o.local(i, r) || n.analyze(l, t);
      }, o.local = function (e, t) {
        const r = e.split(".");

        for (const e of r) {
          if (!e.length) return a.code("EMPTY_LOCAL_SEGMENT");

          if (t) {
            if (!o.atextRx.test(e)) return a.code("INVALID_LOCAL_CHARS");
          } else for (const t of e) {
            if (o.atextRx.test(t)) continue;
            const e = o.binary(t);
            if (!o.atomRx.test(e)) return a.code("INVALID_LOCAL_CHARS");
          }
        }
      }, o.binary = function (e) {
        return Array.from(o.encoder.encode(e)).map(e => String.fromCharCode(e)).join("");
      }, o.atextRx = /^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/, o.atomRx = new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])", "(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})", "(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"));
    },
    2178: (e, t) => {
      "use strict";

      t.codes = {
        EMPTY_STRING: "Address must be a non-empty string",
        FORBIDDEN_UNICODE: "Address contains forbidden Unicode characters",
        MULTIPLE_AT_CHAR: "Address cannot contain more than one @ character",
        MISSING_AT_CHAR: "Address must contain one @ character",
        EMPTY_LOCAL: "Address local part cannot be empty",
        ADDRESS_TOO_LONG: "Address too long",
        LOCAL_TOO_LONG: "Address local part too long",
        EMPTY_LOCAL_SEGMENT: "Address local part contains empty dot-separated segment",
        INVALID_LOCAL_CHARS: "Address local part contains invalid character",
        DOMAIN_NON_EMPTY_STRING: "Domain must be a non-empty string",
        DOMAIN_TOO_LONG: "Domain too long",
        DOMAIN_INVALID_UNICODE_CHARS: "Domain contains forbidden Unicode characters",
        DOMAIN_INVALID_CHARS: "Domain contains invalid character",
        DOMAIN_INVALID_TLDS_CHARS: "Domain contains invalid tld character",
        DOMAIN_SEGMENTS_COUNT: "Domain lacks the minimum required number of segments",
        DOMAIN_SEGMENTS_COUNT_MAX: "Domain contains too many segments",
        DOMAIN_FORBIDDEN_TLDS: "Domain uses forbidden TLD",
        DOMAIN_EMPTY_SEGMENT: "Domain contains empty dot-separated segment",
        DOMAIN_LONG_SEGMENT: "Domain contains dot-separated segment that is too long"
      }, t.code = function (e) {
        return {
          code: e,
          error: t.codes[e]
        };
      };
    },
    9959: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(5752);

      t.regex = function (e = {}) {
        s(void 0 === e.cidr || "string" == typeof e.cidr, "options.cidr must be a string");
        const t = e.cidr ? e.cidr.toLowerCase() : "optional";
        s(["required", "optional", "forbidden"].includes(t), "options.cidr must be one of required, optional, forbidden"), s(void 0 === e.version || "string" == typeof e.version || Array.isArray(e.version), "options.version must be a string or an array of string");
        let r = e.version || ["ipv4", "ipv6", "ipvfuture"];
        Array.isArray(r) || (r = [r]), s(r.length >= 1, "options.version must have at least 1 version specified");

        for (let e = 0; e < r.length; ++e) s("string" == typeof r[e], "options.version must only contain strings"), r[e] = r[e].toLowerCase(), s(["ipv4", "ipv6", "ipvfuture"].includes(r[e]), "options.version contains unknown version " + r[e] + " - must be one of ipv4, ipv6, ipvfuture");

        r = Array.from(new Set(r));
        const a = r.map(e => {
          if ("forbidden" === t) return n.ip[e];
          const r = "\\/".concat("ipv4" === e ? n.ip.v4Cidr : n.ip.v6Cidr);
          return "required" === t ? "".concat(n.ip[e]).concat(r) : "".concat(n.ip[e], "(?:").concat(r, ")?");
        }),
              o = "(?:".concat(a.join("|"), ")"),
              i = new RegExp("^".concat(o, "$"));
        return {
          cidr: t,
          versions: r,
          regex: i,
          raw: o
        };
      };
    },
    5752: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(6064),
            a = {
        generate: function () {
          const e = {},
                t = "!\\$&'\\(\\)\\*\\+,;=",
                r = "\\w-\\.~%\\dA-Fa-f" + t + ":@",
                s = "[" + r + "]",
                n = "(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";
          e.ipv4address = "(?:" + n + "\\.){3}" + n;
          const a = "[\\dA-Fa-f]{1,4}",
                o = "(?:" + a + ":" + a + "|" + e.ipv4address + ")",
                i = "(?:" + a + ":){6}" + o,
                l = "::(?:" + a + ":){5}" + o,
                c = "(?:" + a + ")?::(?:" + a + ":){4}" + o,
                u = "(?:(?:" + a + ":){0,1}" + a + ")?::(?:" + a + ":){3}" + o,
                f = "(?:(?:" + a + ":){0,2}" + a + ")?::(?:" + a + ":){2}" + o,
                m = "(?:(?:" + a + ":){0,3}" + a + ")?::" + a + ":" + o,
                h = "(?:(?:" + a + ":){0,4}" + a + ")?::" + o;
          e.ipv4Cidr = "(?:\\d|[1-2]\\d|3[0-2])", e.ipv6Cidr = "(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])", e.ipv6address = "(?:" + i + "|" + l + "|" + c + "|" + u + "|" + f + "|" + m + "|" + h + "|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)", e.ipvFuture = "v[\\dA-Fa-f]+\\.[\\w-\\.~" + t + ":]+", e.scheme = "[a-zA-Z][a-zA-Z\\d+-\\.]*", e.schemeRegex = new RegExp(e.scheme);

          const d = "[\\w-\\.~%\\dA-Fa-f" + t + ":]*",
                p = "(?:\\[(?:" + e.ipv6address + "|" + e.ipvFuture + ")\\]|" + e.ipv4address + "|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})",
                g = "(?:" + d + "@)?" + p + "(?::\\d*)?",
                y = "(?:" + d + "@)?(" + p + ")(?::\\d*)?",
                b = s + "+",
                v = "(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*",
                _ = "\\/(?:" + b + v + ")?",
                w = b + v,
                $ = "[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+" + v;

          return e.hierPart = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + w + "|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))", e.hierPartCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + w + ")", e.relativeRef = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + $ + "|)", e.relativeRefCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + $ + "|)", e.query = "[" + r + "\\/\\?]*(?=#|$)", e.queryWithSquareBrackets = "[" + r + "\\[\\]\\/\\?]*(?=#|$)", e.fragment = "[" + r + "\\/\\?]*", e;
        }
      };
      a.rfc3986 = a.generate(), t.ip = {
        v4Cidr: a.rfc3986.ipv4Cidr,
        v6Cidr: a.rfc3986.ipv6Cidr,
        ipv4: a.rfc3986.ipv4address,
        ipv6: a.rfc3986.ipv6address,
        ipvfuture: a.rfc3986.ipvFuture
      }, a.createRegex = function (e) {
        const t = a.rfc3986,
              r = "(?:\\?" + (e.allowQuerySquareBrackets ? t.queryWithSquareBrackets : t.query) + ")?(?:#" + t.fragment + ")?",
              o = e.domain ? t.relativeRefCapture : t.relativeRef;
        if (e.relativeOnly) return a.wrap(o + r);
        let i = "";

        if (e.scheme) {
          s(e.scheme instanceof RegExp || "string" == typeof e.scheme || Array.isArray(e.scheme), "scheme must be a RegExp, String, or Array");
          const r = [].concat(e.scheme);
          s(r.length >= 1, "scheme must have at least 1 scheme specified");
          const a = [];

          for (let e = 0; e < r.length; ++e) {
            const o = r[e];
            s(o instanceof RegExp || "string" == typeof o, "scheme at position " + e + " must be a RegExp or String"), o instanceof RegExp ? a.push(o.source.toString()) : (s(t.schemeRegex.test(o), "scheme at position " + e + " must be a valid scheme"), a.push(n(o)));
          }

          i = a.join("|");
        }

        const l = "(?:" + (i ? "(?:" + i + ")" : t.scheme) + ":" + (e.domain ? t.hierPartCapture : t.hierPart) + ")",
              c = e.allowRelative ? "(?:" + l + "|" + o + ")" : l;
        return a.wrap(c + r, i);
      }, a.wrap = function (e, t) {
        return {
          raw: e = "(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])".concat(e),
          regex: new RegExp("^".concat(e, "$")),
          scheme: t
        };
      }, a.uriRegex = a.createRegex({}), t.regex = function (e = {}) {
        return e.scheme || e.allowRelative || e.relativeOnly || e.allowQuerySquareBrackets || e.domain ? a.createRegex(e) : a.uriRegex;
      };
    },
    1447: (e, t) => {
      "use strict";

      const r = {
        operators: ["!", "^", "*", "/", "%", "+", "-", "<", "<=", ">", ">=", "==", "!=", "&&", "||", "??"],
        operatorCharacters: ["!", "^", "*", "/", "%", "+", "-", "<", "=", ">", "&", "|", "?"],
        operatorsOrder: [["^"], ["*", "/", "%"], ["+", "-"], ["<", "<=", ">", ">="], ["==", "!="], ["&&"], ["||", "??"]],
        operatorsPrefix: ["!", "n"],
        literals: {
          '"': '"',
          "`": "`",
          "'": "'",
          "[": "]"
        },
        numberRx: /^(?:[0-9]*\.?[0-9]*){1}$/,
        tokenRx: /^[\w\$\#\.\@\:\{\}]+$/,
        symbol: Symbol("formula"),
        settings: Symbol("settings")
      };
      t.Parser = class {
        constructor(e, t = {}) {
          if (!t[r.settings] && t.constants) for (const e in t.constants) {
            const r = t.constants[e];
            if (null !== r && !["boolean", "number", "string"].includes(typeof r)) throw new Error("Formula constant ".concat(e, " contains invalid ").concat(typeof r, " value type"));
          }
          this.settings = t[r.settings] ? t : Object.assign({
            [r.settings]: !0,
            constants: {},
            functions: {}
          }, t), this.single = null, this._parts = null, this._parse(e);
        }

        _parse(e) {
          let s = [],
              n = "",
              a = 0,
              o = !1;

          const i = e => {
            if (a) throw new Error("Formula missing closing parenthesis");
            const i = s.length ? s[s.length - 1] : null;

            if (o || n || e) {
              if (i && "reference" === i.type && ")" === e) return i.type = "function", i.value = this._subFormula(n, i.value), void (n = "");

              if (")" === e) {
                const e = new t.Parser(n, this.settings);
                s.push({
                  type: "segment",
                  value: e
                });
              } else if (o) {
                if ("]" === o) return s.push({
                  type: "reference",
                  value: n
                }), void (n = "");
                s.push({
                  type: "literal",
                  value: n
                });
              } else if (r.operatorCharacters.includes(n)) i && "operator" === i.type && r.operators.includes(i.value + n) ? i.value += n : s.push({
                type: "operator",
                value: n
              });else if (n.match(r.numberRx)) s.push({
                type: "constant",
                value: parseFloat(n)
              });else if (void 0 !== this.settings.constants[n]) s.push({
                type: "constant",
                value: this.settings.constants[n]
              });else {
                if (!n.match(r.tokenRx)) throw new Error("Formula contains invalid token: ".concat(n));
                s.push({
                  type: "reference",
                  value: n
                });
              }

              n = "";
            }
          };

          for (const t of e) o ? t === o ? (i(), o = !1) : n += t : a ? "(" === t ? (n += t, ++a) : ")" === t ? (--a, a ? n += t : i(t)) : n += t : t in r.literals ? o = r.literals[t] : "(" === t ? (i(), ++a) : r.operatorCharacters.includes(t) ? (i(), n = t, i()) : " " !== t ? n += t : i();

          i(), s = s.map((e, t) => "operator" !== e.type || "-" !== e.value || t && "operator" !== s[t - 1].type ? e : {
            type: "operator",
            value: "n"
          });
          let l = !1;

          for (const e of s) {
            if ("operator" === e.type) {
              if (r.operatorsPrefix.includes(e.value)) continue;
              if (!l) throw new Error("Formula contains an operator in invalid position");
              if (!r.operators.includes(e.value)) throw new Error("Formula contains an unknown operator ".concat(e.value));
            } else if (l) throw new Error("Formula missing expected operator");

            l = !l;
          }

          if (!l) throw new Error("Formula contains invalid trailing operator");
          1 === s.length && ["reference", "literal", "constant"].includes(s[0].type) && (this.single = {
            type: "reference" === s[0].type ? "reference" : "value",
            value: s[0].value
          }), this._parts = s.map(e => {
            if ("operator" === e.type) return r.operatorsPrefix.includes(e.value) ? e : e.value;
            if ("reference" !== e.type) return e.value;
            if (this.settings.tokenRx && !this.settings.tokenRx.test(e.value)) throw new Error("Formula contains invalid reference ".concat(e.value));
            return this.settings.reference ? this.settings.reference(e.value) : r.reference(e.value);
          });
        }

        _subFormula(e, s) {
          const n = this.settings.functions[s];
          if ("function" != typeof n) throw new Error("Formula contains unknown function ".concat(s));
          let a = [];

          if (e) {
            let t = "",
                n = 0,
                o = !1;

            const i = () => {
              if (!t) throw new Error("Formula contains function ".concat(s, " with invalid arguments ").concat(e));
              a.push(t), t = "";
            };

            for (let s = 0; s < e.length; ++s) {
              const a = e[s];
              o ? (t += a, a === o && (o = !1)) : a in r.literals && !n ? (t += a, o = r.literals[a]) : "," !== a || n ? (t += a, "(" === a ? ++n : ")" === a && --n) : i();
            }

            i();
          }

          return a = a.map(e => new t.Parser(e, this.settings)), function (e) {
            const t = [];

            for (const r of a) t.push(r.evaluate(e));

            return n.call(e, ...t);
          };
        }

        evaluate(e) {
          const t = this._parts.slice();

          for (let s = t.length - 2; s >= 0; --s) {
            const n = t[s];

            if (n && "operator" === n.type) {
              const a = t[s + 1];
              t.splice(s + 1, 1);
              const o = r.evaluate(a, e);
              t[s] = r.single(n.value, o);
            }
          }

          return r.operatorsOrder.forEach(s => {
            for (let n = 1; n < t.length - 1;) if (s.includes(t[n])) {
              const s = t[n],
                    a = r.evaluate(t[n - 1], e),
                    o = r.evaluate(t[n + 1], e);
              t.splice(n, 2);
              const i = r.calculate(s, a, o);
              t[n - 1] = 0 === i ? 0 : i;
            } else n += 2;
          }), r.evaluate(t[0], e);
        }

      }, t.Parser.prototype[r.symbol] = !0, r.reference = function (e) {
        return function (t) {
          return t && void 0 !== t[e] ? t[e] : null;
        };
      }, r.evaluate = function (e, t) {
        return null === e ? null : "function" == typeof e ? e(t) : e[r.symbol] ? e.evaluate(t) : e;
      }, r.single = function (e, t) {
        if ("!" === e) return !t;
        const r = -t;
        return 0 === r ? 0 : r;
      }, r.calculate = function (e, t, s) {
        if ("??" === e) return r.exists(t) ? t : s;

        if ("string" == typeof t || "string" == typeof s) {
          if ("+" === e) return (t = r.exists(t) ? t : "") + (r.exists(s) ? s : "");
        } else switch (e) {
          case "^":
            return Math.pow(t, s);

          case "*":
            return t * s;

          case "/":
            return t / s;

          case "%":
            return t % s;

          case "+":
            return t + s;

          case "-":
            return t - s;
        }

        switch (e) {
          case "<":
            return t < s;

          case "<=":
            return t <= s;

          case ">":
            return t > s;

          case ">=":
            return t >= s;

          case "==":
            return t === s;

          case "!=":
            return t !== s;

          case "&&":
            return t && s;

          case "||":
            return t || s;
        }

        return null;
      }, r.exists = function (e) {
        return null != e;
      };
    },
    9926: () => {},
    5688: () => {},
    9708: () => {},
    1152: () => {},
    443: () => {},
    9848: () => {}
  }, t = {}, function r(s) {
    var n = t[s];
    if (void 0 !== n) return n.exports;
    var a = t[s] = {
      exports: {}
    };
    return e[s](a, a.exports, r), a.exports;
  }(5107);
  var e, t;
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/*! exports provided: v1, v3, v4, v5, NIL, version, validate, stringify, parse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/esm-browser/v1.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v1", function() { return _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/esm-browser/v3.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v3", function() { return _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v4", function() { return _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/esm-browser/v5.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v5", function() { return _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/esm-browser/nil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NIL", function() { return _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version", function() { return _version_js__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]; });











/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ __webpack_exports__["default"] = (md5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ __webpack_exports__["default"] = (parse);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rng; });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ __webpack_exports__["default"] = (sha1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ __webpack_exports__["default"] = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ __webpack_exports__["default"] = (v1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/esm-browser/md5.js");


var v3 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v3);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/*! exports provided: DNS, URL, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DNS", function() { return DNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URL", function() { return URL; });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ __webpack_exports__["default"] = (function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = Object(_parse_js__WEBPACK_IMPORTED_MODULE_1__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_0__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ __webpack_exports__["default"] = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ __webpack_exports__["default"] = (validate);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ __webpack_exports__["default"] = (version);

/***/ }),

/***/ "./source/scripts/ContentScript/index.js":
/*!***********************************************!*\
  !*** ./source/scripts/ContentScript/index.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _psychedelic_browser_rpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @psychedelic/browser-rpc */ "./node_modules/@psychedelic/browser-rpc/dist/esm/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./source/scripts/ContentScript/utils/index.js");



const serverRPC = new _psychedelic_browser_rpc__WEBPACK_IMPORTED_MODULE_0__["ProxyRPC"](window, {
  name: 'plug-content-script',
  target: 'plug-inpage-provider'
}); // Listen for runtime message

extensionizer__WEBPACK_IMPORTED_MODULE_1___default.a.runtime.onMessage.addListener(message => {
  if (message.action === 'updateConnection') {
    const event = new CustomEvent('updateConnection');
    window.dispatchEvent(event);
  }
});
serverRPC.exposeHandler('test', (props, name) => {
  const callback = props.callback;
  const result = `hello ${name}!!!`;
  callback(null, result);
});
serverRPC.start();
Object(_utils__WEBPACK_IMPORTED_MODULE_2__["injectScript"])(null, "!function(e){var t={};function r(n){if(t[n])return t[n].exports;var A=t[n]={i:n,l:!1,exports:{}};return e[n].call(A.exports,A,A.exports,r),A.l=!0,A.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var A in e)r.d(n,A,function(t){return e[t]}.bind(null,A));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=93)}([function(e,t,r){\"use strict\";(function(e){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\nvar n=r(58),A=r(39),i=r(59);function s(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(e,t){if(s()<t)throw new RangeError(\"Invalid typed array length\");return a.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=a.prototype:(null===e&&(e=new a(t)),e.length=t),e}function a(e,t,r){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(e,t,r);if(\"number\"==typeof e){if(\"string\"==typeof t)throw new Error(\"If encoding is specified then the first argument must be a string\");return l(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if(\"number\"==typeof t)throw new TypeError('\"value\" argument must not be a number');return\"undefined\"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError(\"'offset' is out of bounds\");if(t.byteLength<r+(n||0))throw new RangeError(\"'length' is out of bounds\");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);a.TYPED_ARRAY_SUPPORT?(e=t).__proto__=a.prototype:e=g(e,t);return e}(e,t,r,n):\"string\"==typeof t?function(e,t,r){\"string\"==typeof r&&\"\"!==r||(r=\"utf8\");if(!a.isEncoding(r))throw new TypeError('\"encoding\" must be a valid string encoding');var n=0|f(t,r),A=(e=o(e,n)).write(t,r);A!==n&&(e=e.slice(0,A));return e}(e,t,r):function(e,t){if(a.isBuffer(t)){var r=0|h(t.length);return 0===(e=o(e,r)).length||t.copy(e,0,0,r),e}if(t){if(\"undefined\"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||\"length\"in t)return\"number\"!=typeof t.length||(n=t.length)!=n?o(e,0):g(e,t);if(\"Buffer\"===t.type&&i(t.data))return g(e,t.data)}var n;throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\")}(e,t)}function u(e){if(\"number\"!=typeof e)throw new TypeError('\"size\" argument must be a number');if(e<0)throw new RangeError('\"size\" argument must not be negative')}function l(e,t){if(u(t),e=o(e,t<0?0:0|h(t)),!a.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function g(e,t){var r=t.length<0?0:0|h(t.length);e=o(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function h(e){if(e>=s())throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+s().toString(16)+\" bytes\");return 0|e}function f(e,t){if(a.isBuffer(e))return e.length;if(\"undefined\"!=typeof ArrayBuffer&&\"function\"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;\"string\"!=typeof e&&(e=\"\"+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case\"ascii\":case\"latin1\":case\"binary\":return r;case\"utf8\":case\"utf-8\":case void 0:return U(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*r;case\"hex\":return r>>>1;case\"base64\":return Y(e).length;default:if(n)return U(e).length;t=(\"\"+t).toLowerCase(),n=!0}}function B(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return\"\";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return\"\";if((r>>>=0)<=(t>>>=0))return\"\";for(e||(e=\"utf8\");;)switch(e){case\"hex\":return S(this,t,r);case\"utf8\":case\"utf-8\":return v(this,t,r);case\"ascii\":return G(this,t,r);case\"latin1\":case\"binary\":return k(this,t,r);case\"base64\":return b(this,t,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return D(this,t,r);default:if(n)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase(),n=!0}}function I(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function d(e,t,r,n,A){if(0===e.length)return-1;if(\"string\"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=A?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(A)return-1;r=e.length-1}else if(r<0){if(!A)return-1;r=0}if(\"string\"==typeof t&&(t=a.from(t,n)),a.isBuffer(t))return 0===t.length?-1:p(e,t,r,n,A);if(\"number\"==typeof t)return t&=255,a.TYPED_ARRAY_SUPPORT&&\"function\"==typeof Uint8Array.prototype.indexOf?A?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):p(e,[t],r,n,A);throw new TypeError(\"val must be string, number or Buffer\")}function p(e,t,r,n,A){var i,s=1,o=e.length,a=t.length;if(void 0!==n&&(\"ucs2\"===(n=String(n).toLowerCase())||\"ucs-2\"===n||\"utf16le\"===n||\"utf-16le\"===n)){if(e.length<2||t.length<2)return-1;s=2,o/=2,a/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(A){var u=-1;for(i=r;i<o;i++)if(c(e,i)===c(t,-1===u?0:i-u)){if(-1===u&&(u=i),i-u+1===a)return u*s}else-1!==u&&(i-=i-u),u=-1}else for(r+a>o&&(r=o-a),i=r;i>=0;i--){for(var l=!0,g=0;g<a;g++)if(c(e,i+g)!==c(t,g)){l=!1;break}if(l)return i}return-1}function E(e,t,r,n){r=Number(r)||0;var A=e.length-r;n?(n=Number(n))>A&&(n=A):n=A;var i=t.length;if(i%2!=0)throw new TypeError(\"Invalid hex string\");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var o=parseInt(t.substr(2*s,2),16);if(isNaN(o))return s;e[r+s]=o}return s}function Q(e,t,r,n){return T(U(t,e.length-r),e,r,n)}function m(e,t,r,n){return T(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function C(e,t,r,n){return m(e,t,r,n)}function y(e,t,r,n){return T(Y(t),e,r,n)}function w(e,t,r,n){return T(function(e,t){for(var r,n,A,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=(r=e.charCodeAt(s))>>8,A=r%256,i.push(A),i.push(n);return i}(t,e.length-r),e,r,n)}function b(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function v(e,t,r){r=Math.min(e.length,r);for(var n=[],A=t;A<r;){var i,s,o,a,c=e[A],u=null,l=c>239?4:c>223?3:c>191?2:1;if(A+l<=r)switch(l){case 1:c<128&&(u=c);break;case 2:128==(192&(i=e[A+1]))&&(a=(31&c)<<6|63&i)>127&&(u=a);break;case 3:i=e[A+1],s=e[A+2],128==(192&i)&&128==(192&s)&&(a=(15&c)<<12|(63&i)<<6|63&s)>2047&&(a<55296||a>57343)&&(u=a);break;case 4:i=e[A+1],s=e[A+2],o=e[A+3],128==(192&i)&&128==(192&s)&&128==(192&o)&&(a=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&o)>65535&&a<1114112&&(u=a)}null===u?(u=65533,l=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),A+=l}return function(e){var t=e.length;if(t<=_)return String.fromCharCode.apply(String,e);var r=\"\",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=_));return r}(n)}t.Buffer=a,t.SlowBuffer=function(e){+e!=e&&(e=0);return a.alloc(+e)},t.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&\"function\"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),a.poolSize=8192,a._augment=function(e){return e.__proto__=a.prototype,e},a.from=function(e,t,r){return c(null,e,t,r)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,\"undefined\"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(e,t,r){return function(e,t,r,n){return u(t),t<=0?o(e,t):void 0!==r?\"string\"==typeof n?o(e,t).fill(r,n):o(e,t).fill(r):o(e,t)}(null,e,t,r)},a.allocUnsafe=function(e){return l(null,e)},a.allocUnsafeSlow=function(e){return l(null,e)},a.isBuffer=function(e){return!(null==e||!e._isBuffer)},a.compare=function(e,t){if(!a.isBuffer(e)||!a.isBuffer(t))throw new TypeError(\"Arguments must be Buffers\");if(e===t)return 0;for(var r=e.length,n=t.length,A=0,i=Math.min(r,n);A<i;++A)if(e[A]!==t[A]){r=e[A],n=t[A];break}return r<n?-1:n<r?1:0},a.isEncoding=function(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},a.concat=function(e,t){if(!i(e))throw new TypeError('\"list\" argument must be an Array of Buffers');if(0===e.length)return a.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=a.allocUnsafe(t),A=0;for(r=0;r<e.length;++r){var s=e[r];if(!a.isBuffer(s))throw new TypeError('\"list\" argument must be an Array of Buffers');s.copy(n,A),A+=s.length}return n},a.byteLength=f,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for(var t=0;t<e;t+=2)I(this,t,t+1);return this},a.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for(var t=0;t<e;t+=4)I(this,t,t+3),I(this,t+1,t+2);return this},a.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for(var t=0;t<e;t+=8)I(this,t,t+7),I(this,t+1,t+6),I(this,t+2,t+5),I(this,t+3,t+4);return this},a.prototype.toString=function(){var e=0|this.length;return 0===e?\"\":0===arguments.length?v(this,0,e):B.apply(this,arguments)},a.prototype.equals=function(e){if(!a.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");return this===e||0===a.compare(this,e)},a.prototype.inspect=function(){var e=\"\",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString(\"hex\",0,r).match(/.{2}/g).join(\" \"),this.length>r&&(e+=\" ... \")),\"<Buffer \"+e+\">\"},a.prototype.compare=function(e,t,r,n,A){if(!a.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===A&&(A=this.length),t<0||r>e.length||n<0||A>this.length)throw new RangeError(\"out of range index\");if(n>=A&&t>=r)return 0;if(n>=A)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(A>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),o=Math.min(i,s),c=this.slice(n,A),u=e.slice(t,r),l=0;l<o;++l)if(c[l]!==u[l]){i=c[l],s=u[l];break}return i<s?-1:s<i?1:0},a.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},a.prototype.indexOf=function(e,t,r){return d(this,e,t,r,!0)},a.prototype.lastIndexOf=function(e,t,r){return d(this,e,t,r,!1)},a.prototype.write=function(e,t,r,n){if(void 0===t)n=\"utf8\",r=this.length,t=0;else if(void 0===r&&\"string\"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");t|=0,isFinite(r)?(r|=0,void 0===n&&(n=\"utf8\")):(n=r,r=void 0)}var A=this.length-t;if((void 0===r||r>A)&&(r=A),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError(\"Attempt to write outside buffer bounds\");n||(n=\"utf8\");for(var i=!1;;)switch(n){case\"hex\":return E(this,e,t,r);case\"utf8\":case\"utf-8\":return Q(this,e,t,r);case\"ascii\":return m(this,e,t,r);case\"latin1\":case\"binary\":return C(this,e,t,r);case\"base64\":return y(this,e,t,r);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return w(this,e,t,r);default:if(i)throw new TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),i=!0}},a.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};var _=4096;function G(e,t,r){var n=\"\";r=Math.min(e.length,r);for(var A=t;A<r;++A)n+=String.fromCharCode(127&e[A]);return n}function k(e,t,r){var n=\"\";r=Math.min(e.length,r);for(var A=t;A<r;++A)n+=String.fromCharCode(e[A]);return n}function S(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var A=\"\",i=t;i<r;++i)A+=O(e[i]);return A}function D(e,t,r){for(var n=e.slice(t,r),A=\"\",i=0;i<n.length;i+=2)A+=String.fromCharCode(n[i]+256*n[i+1]);return A}function q(e,t,r){if(e%1!=0||e<0)throw new RangeError(\"offset is not uint\");if(e+t>r)throw new RangeError(\"Trying to access beyond buffer length\")}function R(e,t,r,n,A,i){if(!a.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(t>A||t<i)throw new RangeError('\"value\" argument is out of bounds');if(r+n>e.length)throw new RangeError(\"Index out of range\")}function F(e,t,r,n){t<0&&(t=65535+t+1);for(var A=0,i=Math.min(e.length-r,2);A<i;++A)e[r+A]=(t&255<<8*(n?A:1-A))>>>8*(n?A:1-A)}function H(e,t,r,n){t<0&&(t=4294967295+t+1);for(var A=0,i=Math.min(e.length-r,4);A<i;++A)e[r+A]=t>>>8*(n?A:3-A)&255}function N(e,t,r,n,A,i){if(r+n>e.length)throw new RangeError(\"Index out of range\");if(r<0)throw new RangeError(\"Index out of range\")}function M(e,t,r,n,i){return i||N(e,0,r,4),A.write(e,t,r,n,23,4),r+4}function x(e,t,r,n,i){return i||N(e,0,r,8),A.write(e,t,r,n,52,8),r+8}a.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),a.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=a.prototype;else{var A=t-e;r=new a(A,void 0);for(var i=0;i<A;++i)r[i]=this[i+e]}return r},a.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||q(e,t,this.length);for(var n=this[e],A=1,i=0;++i<t&&(A*=256);)n+=this[e+i]*A;return n},a.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||q(e,t,this.length);for(var n=this[e+--t],A=1;t>0&&(A*=256);)n+=this[e+--t]*A;return n},a.prototype.readUInt8=function(e,t){return t||q(e,1,this.length),this[e]},a.prototype.readUInt16LE=function(e,t){return t||q(e,2,this.length),this[e]|this[e+1]<<8},a.prototype.readUInt16BE=function(e,t){return t||q(e,2,this.length),this[e]<<8|this[e+1]},a.prototype.readUInt32LE=function(e,t){return t||q(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},a.prototype.readUInt32BE=function(e,t){return t||q(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},a.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||q(e,t,this.length);for(var n=this[e],A=1,i=0;++i<t&&(A*=256);)n+=this[e+i]*A;return n>=(A*=128)&&(n-=Math.pow(2,8*t)),n},a.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||q(e,t,this.length);for(var n=t,A=1,i=this[e+--n];n>0&&(A*=256);)i+=this[e+--n]*A;return i>=(A*=128)&&(i-=Math.pow(2,8*t)),i},a.prototype.readInt8=function(e,t){return t||q(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},a.prototype.readInt16LE=function(e,t){t||q(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt16BE=function(e,t){t||q(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt32LE=function(e,t){return t||q(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},a.prototype.readInt32BE=function(e,t){return t||q(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},a.prototype.readFloatLE=function(e,t){return t||q(e,4,this.length),A.read(this,e,!0,23,4)},a.prototype.readFloatBE=function(e,t){return t||q(e,4,this.length),A.read(this,e,!1,23,4)},a.prototype.readDoubleLE=function(e,t){return t||q(e,8,this.length),A.read(this,e,!0,52,8)},a.prototype.readDoubleBE=function(e,t){return t||q(e,8,this.length),A.read(this,e,!1,52,8)},a.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||R(this,e,t,r,Math.pow(2,8*r)-1,0);var A=1,i=0;for(this[t]=255&e;++i<r&&(A*=256);)this[t+i]=e/A&255;return t+r},a.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||R(this,e,t,r,Math.pow(2,8*r)-1,0);var A=r-1,i=1;for(this[t+A]=255&e;--A>=0&&(i*=256);)this[t+A]=e/i&255;return t+r},a.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,1,255,0),a.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},a.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):F(this,e,t,!0),t+2},a.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):F(this,e,t,!1),t+2},a.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):H(this,e,t,!0),t+4},a.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):H(this,e,t,!1),t+4},a.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var A=Math.pow(2,8*r-1);R(this,e,t,r,A-1,-A)}var i=0,s=1,o=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===o&&0!==this[t+i-1]&&(o=1),this[t+i]=(e/s>>0)-o&255;return t+r},a.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var A=Math.pow(2,8*r-1);R(this,e,t,r,A-1,-A)}var i=r-1,s=1,o=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===o&&0!==this[t+i+1]&&(o=1),this[t+i]=(e/s>>0)-o&255;return t+r},a.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,1,127,-128),a.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},a.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):F(this,e,t,!0),t+2},a.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):F(this,e,t,!1),t+2},a.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):H(this,e,t,!0),t+4},a.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),a.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):H(this,e,t,!1),t+4},a.prototype.writeFloatLE=function(e,t,r){return M(this,e,t,!0,r)},a.prototype.writeFloatBE=function(e,t,r){return M(this,e,t,!1,r)},a.prototype.writeDoubleLE=function(e,t,r){return x(this,e,t,!0,r)},a.prototype.writeDoubleBE=function(e,t,r){return x(this,e,t,!1,r)},a.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError(\"targetStart out of bounds\");if(r<0||r>=this.length)throw new RangeError(\"sourceStart out of bounds\");if(n<0)throw new RangeError(\"sourceEnd out of bounds\");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var A,i=n-r;if(this===e&&r<t&&t<n)for(A=i-1;A>=0;--A)e[A+t]=this[A+r];else if(i<1e3||!a.TYPED_ARRAY_SUPPORT)for(A=0;A<i;++A)e[A+t]=this[A+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},a.prototype.fill=function(e,t,r,n){if(\"string\"==typeof e){if(\"string\"==typeof t?(n=t,t=0,r=this.length):\"string\"==typeof r&&(n=r,r=this.length),1===e.length){var A=e.charCodeAt(0);A<256&&(e=A)}if(void 0!==n&&\"string\"!=typeof n)throw new TypeError(\"encoding must be a string\");if(\"string\"==typeof n&&!a.isEncoding(n))throw new TypeError(\"Unknown encoding: \"+n)}else\"number\"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError(\"Out of range index\");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),\"number\"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var s=a.isBuffer(e)?e:U(new a(e,n).toString()),o=s.length;for(i=0;i<r-t;++i)this[i+t]=s[i%o]}return this};var j=/[^+\\/0-9A-Za-z-_]/g;function O(e){return e<16?\"0\"+e.toString(16):e.toString(16)}function U(e,t){var r;t=t||1/0;for(var n=e.length,A=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!A){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}A=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),A=r;continue}r=65536+(A-55296<<10|r-56320)}else A&&(t-=3)>-1&&i.push(239,191,189);if(A=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error(\"Invalid code point\");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function Y(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\\s+|\\s+$/g,\"\")}(e).replace(j,\"\")).length<2)return\"\";for(;e.length%4!=0;)e+=\"=\";return e}(e))}function T(e,t,r,n){for(var A=0;A<n&&!(A+r>=t.length||A>=e.length);++A)t[A+r]=e[A];return A}}).call(this,r(17))},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return n})),r.d(t,\"h\",(function(){return c})),r.d(t,\"b\",(function(){return B})),r.d(t,\"e\",(function(){return I})),r.d(t,\"d\",(function(){return d})),r.d(t,\"c\",(function(){return p})),r.d(t,\"f\",(function(){return E})),r.d(t,\"g\",(function(){return Q})),r.d(t,\"i\",(function(){return m}));var n={};r.r(n),r.d(n,\"Visitor\",(function(){return v})),r.d(n,\"Type\",(function(){return _})),r.d(n,\"PrimitiveType\",(function(){return G})),r.d(n,\"ConstructType\",(function(){return k})),r.d(n,\"EmptyClass\",(function(){return S})),r.d(n,\"BoolClass\",(function(){return D})),r.d(n,\"NullClass\",(function(){return q})),r.d(n,\"ReservedClass\",(function(){return R})),r.d(n,\"TextClass\",(function(){return H})),r.d(n,\"IntClass\",(function(){return N})),r.d(n,\"NatClass\",(function(){return M})),r.d(n,\"FloatClass\",(function(){return x})),r.d(n,\"FixedIntClass\",(function(){return j})),r.d(n,\"FixedNatClass\",(function(){return O})),r.d(n,\"VecClass\",(function(){return U})),r.d(n,\"OptClass\",(function(){return Y})),r.d(n,\"RecordClass\",(function(){return T})),r.d(n,\"TupleClass\",(function(){return J})),r.d(n,\"VariantClass\",(function(){return L})),r.d(n,\"RecClass\",(function(){return Z})),r.d(n,\"PrincipalClass\",(function(){return K})),r.d(n,\"FuncClass\",(function(){return $})),r.d(n,\"ServiceClass\",(function(){return V})),r.d(n,\"encode\",(function(){return z})),r.d(n,\"decode\",(function(){return X})),r.d(n,\"Empty\",(function(){return ee})),r.d(n,\"Reserved\",(function(){return te})),r.d(n,\"Bool\",(function(){return re})),r.d(n,\"Null\",(function(){return ne})),r.d(n,\"Text\",(function(){return Ae})),r.d(n,\"Int\",(function(){return ie})),r.d(n,\"Nat\",(function(){return se})),r.d(n,\"Float32\",(function(){return oe})),r.d(n,\"Float64\",(function(){return ae})),r.d(n,\"Int8\",(function(){return ce})),r.d(n,\"Int16\",(function(){return ue})),r.d(n,\"Int32\",(function(){return le})),r.d(n,\"Int64\",(function(){return ge})),r.d(n,\"Nat8\",(function(){return he})),r.d(n,\"Nat16\",(function(){return fe})),r.d(n,\"Nat32\",(function(){return Be})),r.d(n,\"Nat64\",(function(){return Ie})),r.d(n,\"Principal\",(function(){return de})),r.d(n,\"Tuple\",(function(){return pe})),r.d(n,\"Vec\",(function(){return Ee})),r.d(n,\"Opt\",(function(){return Qe})),r.d(n,\"Record\",(function(){return me})),r.d(n,\"Variant\",(function(){return Ce})),r.d(n,\"Rec\",(function(){return ye})),r.d(n,\"Func\",(function(){return we})),r.d(n,\"Service\",(function(){return be}));var A=r(21),i=r.n(A),s=r(0),o=r(2);function a(e,t){if(e.buffer.length<t)throw new Error(\"unexpected end of buffer\");return e.read(t)}function c(e){if(\"number\"==typeof e&&(e=BigInt(e)),e<BigInt(0))throw new Error(\"Cannot leb encode negative values.\");const t=new i.a;for(;;){const r=Number(e&BigInt(127));if((e/=BigInt(128))===BigInt(0)){t.write([r]);break}t.write([128|r])}return new s.Buffer(t.buffer)}function u(e){let t,r=BigInt(1),n=BigInt(0);do{t=a(e,1)[0],n+=BigInt(127&t).valueOf()*r,r*=BigInt(128)}while(t>=128);return n}function l(e){\"number\"==typeof e&&(e=BigInt(e));const t=e<BigInt(0);t&&(e=-e-BigInt(1));const r=new i.a;for(;;){const A=n(e);if(e/=BigInt(128),t&&e===BigInt(0)&&0!=(64&A)||!t&&e===BigInt(0)&&0==(64&A)){r.write([A]);break}r.write([128|A])}function n(e){const r=e%BigInt(128);return Number(t?BigInt(128)-r-BigInt(1):r)}return new s.Buffer(r.buffer)}function g(e){const t=new Uint8Array(e.buffer);let r=0;for(;r<t.byteLength;r++)if(t[r]<128){if(0==(64&t[r]))return u(e);break}const n=new Uint8Array(a(e,r+1));let A=BigInt(0);for(let e=n.byteLength-1;e>=0;e--)A=A*BigInt(128)+BigInt(128-(127&n[e])-1);return-A-BigInt(1)}function h(e,t){e=BigInt(e);const r=new i.a;let n=0,A=BigInt(256),o=BigInt(0),a=Number(e%A);for(r.write([a]);++n<t;)e<0&&o===BigInt(0)&&0!==a&&(o=BigInt(1)),a=Number((e/A-o)%BigInt(256)),r.write([a]),A*=BigInt(256);return new s.Buffer(r.buffer)}function f(e,t){let r=BigInt(a(e,1)[0]),n=BigInt(1),A=0;for(;++A<t;){n*=BigInt(256);r+=n*BigInt(a(e,1)[0])}return r}function B(e){return e}function I(e){return s.Buffer.from(e)}function d(e){return s.Buffer.from(e)}function p(e){return s.Buffer.from(e,\"hex\")}function E(e){return e.toString(\"hex\")}function Q(e){return new Uint8Array(e.slice(0,e.byteLength))}function m(){return c(BigInt(+Date.now())*BigInt(1e5)+BigInt(Math.floor(1e5*Math.random())))}function C(e){if(/^_\\d+_$/.test(e)||/^_0x[0-9a-fA-F]+_$/.test(e)){const t=+e.slice(1,-1);if(Number.isSafeInteger(t)&&t>=0&&t<2**32)return t}return function(e){const t=(new TextEncoder).encode(e);let r=0;for(const e of t)r=(223*r+e)%2**32;return r}(e)}const y=\"DIDL\";function w(e,t,r){return e.map(((e,n)=>r(e,t[n])))}class b{constructor(){this._typs=[],this._idx=new Map}has(e){return this._idx.has(e.name)}add(e,t){const r=this._typs.length;this._idx.set(e.name,r),this._typs.push(t)}merge(e,t){const r=this._idx.get(e.name),n=this._idx.get(t);if(void 0===r)throw new Error(\"Missing type index for \"+e);if(void 0===n)throw new Error(\"Missing type index for \"+t);this._typs[r]=this._typs[n],this._typs.splice(n,1),this._idx.delete(t)}encode(){const e=c(this._typs.length),t=s.Buffer.concat(this._typs);return s.Buffer.concat([e,t])}indexOf(e){if(!this._idx.has(e))throw new Error(\"Missing type index for \"+e);return l(this._idx.get(e)||0)}}class v{visitType(e,t){throw new Error(\"Not implemented\")}visitPrimitive(e,t){return this.visitType(e,t)}visitEmpty(e,t){return this.visitPrimitive(e,t)}visitBool(e,t){return this.visitPrimitive(e,t)}visitNull(e,t){return this.visitPrimitive(e,t)}visitReserved(e,t){return this.visitPrimitive(e,t)}visitText(e,t){return this.visitPrimitive(e,t)}visitNumber(e,t){return this.visitPrimitive(e,t)}visitInt(e,t){return this.visitNumber(e,t)}visitNat(e,t){return this.visitNumber(e,t)}visitFloat(e,t){return this.visitPrimitive(e,t)}visitFixedInt(e,t){return this.visitNumber(e,t)}visitFixedNat(e,t){return this.visitNumber(e,t)}visitPrincipal(e,t){return this.visitPrimitive(e,t)}visitConstruct(e,t){return this.visitType(e,t)}visitVec(e,t,r){return this.visitConstruct(e,r)}visitOpt(e,t,r){return this.visitConstruct(e,r)}visitRecord(e,t,r){return this.visitConstruct(e,r)}visitTuple(e,t,r){const n=t.map(((e,t)=>[`_${t}_`,e]));return this.visitRecord(e,n,r)}visitVariant(e,t,r){return this.visitConstruct(e,r)}visitRec(e,t,r){return this.visitConstruct(t,r)}visitFunc(e,t){return this.visitConstruct(e,t)}visitService(e,t){return this.visitConstruct(e,t)}}class _{display(){return this.name}valueToString(e){return W(e)}buildTypeTable(e){e.has(this)||this._buildTypeTableImpl(e)}}class G extends _{checkType(e){if(this.name!==e.name)throw new Error(`type mismatch: type on the wire ${e.name}, expect type ${this.name}`);return e}_buildTypeTableImpl(e){}}class k extends _{checkType(e){if(e instanceof Z){const t=e.getType();if(void 0===t)throw new Error(\"type mismatch with uninitialized type\");return t}throw new Error(`type mismatch: type on the wire ${e.name}, expect type ${this.name}`)}encodeType(e){return e.indexOf(this.name)}}class S extends G{accept(e,t){return e.visitEmpty(this,t)}covariant(e){return!1}encodeValue(){throw new Error(\"Empty cannot appear as a function argument\")}valueToString(){throw new Error(\"Empty cannot appear as a value\")}encodeType(){return l(-17)}decodeValue(){throw new Error(\"Empty cannot appear as an output\")}get name(){return\"empty\"}}class D extends G{accept(e,t){return e.visitBool(this,t)}covariant(e){return\"boolean\"==typeof e}encodeValue(e){const t=s.Buffer.alloc(1);return t.writeInt8(e?1:0,0),t}encodeType(){return l(-2)}decodeValue(e,t){this.checkType(t);const r=a(e,1).toString(\"hex\");if(\"00\"===r)return!1;if(\"01\"===r)return!0;throw new Error(\"Boolean value out of range\")}get name(){return\"bool\"}}class q extends G{accept(e,t){return e.visitNull(this,t)}covariant(e){return null===e}encodeValue(){return s.Buffer.alloc(0)}encodeType(){return l(-1)}decodeValue(e,t){return this.checkType(t),null}get name(){return\"null\"}}class R extends G{accept(e,t){return e.visitReserved(this,t)}covariant(e){return!0}encodeValue(){return s.Buffer.alloc(0)}encodeType(){return l(-16)}decodeValue(e,t){return t.name!==this.name&&t.decodeValue(e,t),null}get name(){return\"reserved\"}}function F(e){return 0===s.Buffer.compare(new s.Buffer(e.toString(),\"utf8\"),e)}class H extends G{accept(e,t){return e.visitText(this,t)}covariant(e){return\"string\"==typeof e}encodeValue(e){const t=s.Buffer.from(e,\"utf8\"),r=c(t.length);return s.Buffer.concat([r,t])}encodeType(){return l(-15)}decodeValue(e,t){this.checkType(t);const r=u(e),n=a(e,Number(r));if(!F(n))throw new Error(\"Not valid UTF8 text\");return n.toString(\"utf8\")}get name(){return\"text\"}valueToString(e){return'\"'+e+'\"'}}class N extends G{accept(e,t){return e.visitInt(this,t)}covariant(e){return\"bigint\"==typeof e||Number.isInteger(e)}encodeValue(e){return l(e)}encodeType(){return l(-4)}decodeValue(e,t){return this.checkType(t),g(e)}get name(){return\"int\"}valueToString(e){return e.toString()}}class M extends G{accept(e,t){return e.visitNat(this,t)}covariant(e){return\"bigint\"==typeof e&&e>=BigInt(0)||Number.isInteger(e)&&e>=0}encodeValue(e){return c(e)}encodeType(){return l(-3)}decodeValue(e,t){return this.checkType(t),u(e)}get name(){return\"nat\"}valueToString(e){return e.toString()}}class x extends G{constructor(e){if(super(),this._bits=e,32!==e&&64!==e)throw new Error(\"not a valid float type\")}accept(e,t){return e.visitFloat(this,t)}covariant(e){return\"number\"==typeof e||e instanceof Number}encodeValue(e){const t=s.Buffer.allocUnsafe(this._bits/8);return 32===this._bits?t.writeFloatLE(e,0):t.writeDoubleLE(e,0),t}encodeType(){return l(32===this._bits?-13:-14)}decodeValue(e,t){this.checkType(t);const r=a(e,this._bits/8);return 32===this._bits?r.readFloatLE(0):r.readDoubleLE(0)}get name(){return\"float\"+this._bits}valueToString(e){return e.toString()}}class j extends G{constructor(e){super(),this._bits=e}accept(e,t){return e.visitFixedInt(this,t)}covariant(e){const t=BigInt(2)**BigInt(this._bits-1)*BigInt(-1),r=BigInt(2)**BigInt(this._bits-1)-BigInt(1);if(\"bigint\"==typeof e)return e>=t&&e<=r;if(Number.isInteger(e)){const n=BigInt(e);return n>=t&&n<=r}return!1}encodeValue(e){return h(e,this._bits/8)}encodeType(){return l(-9-(Math.log2(this._bits)-3))}decodeValue(e,t){this.checkType(t);const r=function(e,t){let r=f(e,t);const n=BigInt(2)**(BigInt(8)*BigInt(t-1)+BigInt(7));return r>=n&&(r-=n*BigInt(2)),r}(e,this._bits/8);return this._bits<=32?Number(r):r}get name(){return`int${this._bits}`}valueToString(e){return e.toString()}}class O extends G{constructor(e){super(),this.bits=e}accept(e,t){return e.visitFixedNat(this,t)}covariant(e){const t=BigInt(2)**BigInt(this.bits);if(\"bigint\"==typeof e&&e>=BigInt(0))return e<t;if(Number.isInteger(e)&&e>=0){return BigInt(e)<t}return!1}encodeValue(e){return function(e,t){if(BigInt(e)<BigInt(0))throw new Error(\"Cannot write negative values.\");return h(e,t)}(e,this.bits/8)}encodeType(){return l(-5-(Math.log2(this.bits)-3))}decodeValue(e,t){this.checkType(t);const r=f(e,this.bits/8);return this.bits<=32?Number(r):r}get name(){return`nat${this.bits}`}valueToString(e){return e.toString()}}class U extends k{constructor(e){super(),this._type=e,this._blobOptimization=!1,e instanceof O&&8===e.bits&&(this._blobOptimization=!0)}accept(e,t){return e.visitVec(this,this._type,t)}covariant(e){return Array.isArray(e)&&e.every((e=>this._type.covariant(e)))}encodeValue(e){const t=c(e.length);return this._blobOptimization?s.Buffer.concat([t,s.Buffer.from(e)]):s.Buffer.concat([t,...e.map((e=>this._type.encodeValue(e)))])}_buildTypeTableImpl(e){this._type.buildTypeTable(e);const t=l(-19),r=this._type.encodeType(e);e.add(this,s.Buffer.concat([t,r]))}decodeValue(e,t){const r=this.checkType(t);if(!(r instanceof U))throw new Error(\"Not a vector type\");const n=Number(u(e));if(this._blobOptimization)return[...new Uint8Array(e.read(n))];const A=[];for(let t=0;t<n;t++)A.push(this._type.decodeValue(e,r._type));return A}get name(){return`vec ${this._type.name}`}display(){return`vec ${this._type.display()}`}valueToString(e){return\"vec {\"+e.map((e=>this._type.valueToString(e))).join(\"; \")+\"}\"}}class Y extends k{constructor(e){super(),this._type=e}accept(e,t){return e.visitOpt(this,this._type,t)}covariant(e){return Array.isArray(e)&&(0===e.length||1===e.length&&this._type.covariant(e[0]))}encodeValue(e){return 0===e.length?s.Buffer.from([0]):s.Buffer.concat([s.Buffer.from([1]),this._type.encodeValue(e[0])])}_buildTypeTableImpl(e){this._type.buildTypeTable(e);const t=l(-18),r=this._type.encodeType(e);e.add(this,s.Buffer.concat([t,r]))}decodeValue(e,t){const r=this.checkType(t);if(!(r instanceof Y))throw new Error(\"Not an option type\");const n=a(e,1).toString(\"hex\");if(\"00\"===n)return[];if(\"01\"===n)return[this._type.decodeValue(e,r._type)];throw new Error(\"Not an option value\")}get name(){return`opt ${this._type.name}`}display(){return`opt ${this._type.display()}`}valueToString(e){return 0===e.length?\"null\":`opt ${this._type.valueToString(e[0])}`}}class T extends k{constructor(e={}){super(),this._fields=Object.entries(e).sort(((e,t)=>C(e[0])-C(t[0])))}accept(e,t){return e.visitRecord(this,this._fields,t)}tryAsTuple(){const e=[];for(let t=0;t<this._fields.length;t++){const[r,n]=this._fields[t];if(r!==`_${t}_`)return null;e.push(n)}return e}covariant(e){return\"object\"==typeof e&&this._fields.every((([t,r])=>{if(!e.hasOwnProperty(t))throw new Error(`Record is missing key \"${t}\".`);return r.covariant(e[t])}))}encodeValue(e){const t=this._fields.map((([t])=>e[t])),r=w(this._fields,t,(([,e],t)=>e.encodeValue(t)));return s.Buffer.concat(r)}_buildTypeTableImpl(e){this._fields.forEach((([t,r])=>r.buildTypeTable(e)));const t=l(-20),r=c(this._fields.length),n=this._fields.map((([t,r])=>s.Buffer.concat([c(C(t)),r.encodeType(e)])));e.add(this,s.Buffer.concat([t,r,s.Buffer.concat(n)]))}decodeValue(e,t){const r=this.checkType(t);if(!(r instanceof T))throw new Error(\"Not a record type\");const n={};let A=0;for(const[t,i]of r._fields){if(A>=this._fields.length||C(this._fields[A][0])!==C(t)){i.decodeValue(e,i);continue}const[r,s]=this._fields[A];n[r]=s.decodeValue(e,i),A++}if(A<this._fields.length)throw new Error(\"Cannot find field \"+this._fields[A][0]);return n}get name(){return`record {${this._fields.map((([e,t])=>e+\":\"+t.name)).join(\"; \")}}`}display(){return`record {${this._fields.map((([e,t])=>e+\":\"+t.display())).join(\"; \")}}`}valueToString(e){const t=this._fields.map((([t])=>e[t]));return`record {${w(this._fields,t,(([e,t],r)=>e+\"=\"+t.valueToString(r))).join(\"; \")}}`}}class J extends T{constructor(e){const t={};e.forEach(((e,r)=>t[\"_\"+r+\"_\"]=e)),super(t),this._components=e}accept(e,t){return e.visitTuple(this,this._components,t)}covariant(e){return Array.isArray(e)&&e.length>=this._fields.length&&this._components.every(((t,r)=>t.covariant(e[r])))}encodeValue(e){const t=w(this._components,e,((e,t)=>e.encodeValue(t)));return s.Buffer.concat(t)}decodeValue(e,t){const r=this.checkType(t);if(!(r instanceof J))throw new Error(\"not a tuple type\");if(r._components.length<this._components.length)throw new Error(\"tuple mismatch\");const n=[];for(const[t,A]of r._components.entries())t>=this._components.length?A.decodeValue(e,A):n.push(this._components[t].decodeValue(e,A));return n}display(){return`record {${this._components.map((e=>e.display())).join(\"; \")}}`}valueToString(e){return`record {${w(this._components,e,((e,t)=>e.valueToString(t))).join(\"; \")}}`}}class L extends k{constructor(e={}){super(),this._fields=Object.entries(e).sort(((e,t)=>C(e[0])-C(t[0])))}accept(e,t){return e.visitVariant(this,this._fields,t)}covariant(e){return\"object\"==typeof e&&1===Object.entries(e).length&&this._fields.every((([t,r])=>!e.hasOwnProperty(t)||r.covariant(e[t])))}encodeValue(e){for(let t=0;t<this._fields.length;t++){const[r,n]=this._fields[t];if(e.hasOwnProperty(r)){const A=c(t),i=n.encodeValue(e[r]);return s.Buffer.concat([A,i])}}throw Error(\"Variant has no data: \"+e)}_buildTypeTableImpl(e){this._fields.forEach((([,t])=>{t.buildTypeTable(e)}));const t=l(-21),r=c(this._fields.length),n=this._fields.map((([t,r])=>s.Buffer.concat([c(C(t)),r.encodeType(e)])));e.add(this,s.Buffer.concat([t,r,...n]))}decodeValue(e,t){const r=this.checkType(t);if(!(r instanceof L))throw new Error(\"Not a variant type\");const n=Number(u(e));if(n>=r._fields.length)throw Error(\"Invalid variant index: \"+n);const[A,i]=r._fields[n];for(const[t,r]of this._fields)if(C(A)===C(t)){return{[t]:r.decodeValue(e,i)}}throw new Error(\"Cannot find field hash \"+A)}get name(){return`variant {${this._fields.map((([e,t])=>e+\":\"+t.name)).join(\"; \")}}`}display(){return`variant {${this._fields.map((([e,t])=>e+(\"null\"===t.name?\"\":`:${t.display()}`))).join(\"; \")}}`}valueToString(e){for(const[t,r]of this._fields)if(e.hasOwnProperty(t)){const n=r.valueToString(e[t]);return\"null\"===n?`variant {${t}}`:`variant {${t}=${n}}`}throw new Error(\"Variant has no data: \"+e)}}class Z extends k{constructor(){super(...arguments),this._id=Z._counter++,this._type=void 0}accept(e,t){if(!this._type)throw Error(\"Recursive type uninitialized.\");return e.visitRec(this,this._type,t)}fill(e){this._type=e}getType(){return this._type}covariant(e){return!!this._type&&this._type.covariant(e)}encodeValue(e){if(!this._type)throw Error(\"Recursive type uninitialized.\");return this._type.encodeValue(e)}_buildTypeTableImpl(e){if(!this._type)throw Error(\"Recursive type uninitialized.\");e.add(this,s.Buffer.alloc(0)),this._type.buildTypeTable(e),e.merge(this,this._type.name)}decodeValue(e,t){if(!this._type)throw Error(\"Recursive type uninitialized.\");return this._type.decodeValue(e,t)}get name(){return`rec_${this._id}`}display(){if(!this._type)throw Error(\"Recursive type uninitialized.\");return`μ${this.name}.${this._type.name}`}valueToString(e){if(!this._type)throw Error(\"Recursive type uninitialized.\");return this._type.valueToString(e)}}function P(e){if(\"01\"!==a(e,1).toString(\"hex\"))throw new Error(\"Cannot decode principal\");const t=a(e,Number(u(e))).toString(\"hex\").toUpperCase();return o.a.fromHex(t)}Z._counter=0;class K extends G{accept(e,t){return e.visitPrincipal(this,t)}covariant(e){return e&&e._isPrincipal}encodeValue(e){const t=e.toHex(),r=s.Buffer.from(t,\"hex\"),n=c(r.length);return s.Buffer.concat([s.Buffer.from([1]),n,r])}encodeType(){return l(-24)}decodeValue(e,t){return this.checkType(t),P(e)}get name(){return\"principal\"}valueToString(e){return`${this.name} \"${e.toText()}\"`}}class $ extends k{constructor(e,t,r=[]){super(),this.argTypes=e,this.retTypes=t,this.annotations=r}static argsToString(e,t){if(e.length!==t.length)throw new Error(\"arity mismatch\");return\"(\"+e.map(((e,r)=>e.valueToString(t[r]))).join(\", \")+\")\"}accept(e,t){return e.visitFunc(this,t)}covariant(e){return Array.isArray(e)&&2===e.length&&e[0]&&e[0]._isPrincipal&&\"string\"==typeof e[1]}encodeValue(e){const t=e[0].toHex(),r=s.Buffer.from(t,\"hex\"),n=c(r.length),A=s.Buffer.concat([s.Buffer.from([1]),n,r]),i=s.Buffer.from(e[1],\"utf8\"),o=c(i.length);return s.Buffer.concat([s.Buffer.from([1]),A,o,i])}_buildTypeTableImpl(e){this.argTypes.forEach((t=>t.buildTypeTable(e))),this.retTypes.forEach((t=>t.buildTypeTable(e)));const t=l(-22),r=c(this.argTypes.length),n=s.Buffer.concat(this.argTypes.map((t=>t.encodeType(e)))),A=c(this.retTypes.length),i=s.Buffer.concat(this.retTypes.map((t=>t.encodeType(e)))),o=c(this.annotations.length),a=s.Buffer.concat(this.annotations.map((e=>this.encodeAnnotation(e))));e.add(this,s.Buffer.concat([t,r,n,A,i,o,a]))}decodeValue(e){if(\"01\"!==a(e,1).toString(\"hex\"))throw new Error(\"Cannot decode function reference\");const t=P(e),r=a(e,Number(u(e)));if(!F(r))throw new Error(\"Not valid UTF8 method name\");return[t,r.toString(\"utf8\")]}get name(){return`(${this.argTypes.map((e=>e.name)).join(\", \")}) -> (${this.retTypes.map((e=>e.name)).join(\", \")})${\" \"+this.annotations.join(\" \")}`}valueToString([e,t]){return`func \"${e.toText()}\".${t}`}display(){return`(${this.argTypes.map((e=>e.display())).join(\", \")}) → (${this.retTypes.map((e=>e.display())).join(\", \")})${\" \"+this.annotations.join(\" \")}`}encodeAnnotation(e){if(\"query\"===e)return s.Buffer.from([1]);if(\"oneway\"===e)return s.Buffer.from([2]);throw new Error(\"Illeagal function annotation\")}}class V extends k{constructor(e){super(),this._fields=Object.entries(e).sort(((e,t)=>C(e[0])-C(t[0])))}accept(e,t){return e.visitService(this,t)}covariant(e){return e&&e._isPrincipal}encodeValue(e){const t=e.toHex(),r=s.Buffer.from(t,\"hex\"),n=c(r.length);return s.Buffer.concat([s.Buffer.from([1]),n,r])}_buildTypeTableImpl(e){this._fields.forEach((([t,r])=>r.buildTypeTable(e)));const t=l(-23),r=c(this._fields.length),n=this._fields.map((([t,r])=>{const n=s.Buffer.from(t,\"utf8\"),A=c(n.length);return s.Buffer.concat([A,n,r.encodeType(e)])}));e.add(this,s.Buffer.concat([t,r,s.Buffer.concat(n)]))}decodeValue(e){return P(e)}get name(){return`service {${this._fields.map((([e,t])=>e+\":\"+t.name)).join(\"; \")}}`}valueToString(e){return`service \"${e.toText()}\"`}}function W(e){return JSON.stringify(e,((e,t)=>\"bigint\"==typeof t?`BigInt(${t})`:t))}function z(e,t){if(t.length<e.length)throw Error(\"Wrong number of message arguments\");const r=new b;e.forEach((e=>e.buildTypeTable(r)));const n=s.Buffer.from(y,\"utf8\"),A=r.encode(),i=c(t.length),o=s.Buffer.concat(e.map((e=>e.encodeType(r)))),a=s.Buffer.concat(w(e,t,((e,t)=>{if(!e.covariant(t))throw new Error(`Invalid ${e.display()} argument: ${W(t)}`);return e.encodeValue(t)})));return s.Buffer.concat([n,A,i,o,a])}function X(e,t){const r=new i.a(t);if(t.byteLength<y.length)throw new Error(\"Message length smaller than magic number\");const n=a(r,y.length).toString();if(n!==y)throw new Error(\"Wrong magic number: \"+n);const[A,s]=function(e){const t=[],r=Number(u(e));for(let n=0;n<r;n++){const r=Number(g(e));switch(r){case-18:case-19:{const n=Number(g(e));t.push([r,n]);break}case-20:case-21:{const n=[];let A,i=Number(u(e));for(;i--;){const t=Number(u(e));if(t>=Math.pow(2,32))throw new Error(\"field id out of 32-bit range\");if(\"number\"==typeof A&&A>=t)throw new Error(\"field id collision or not sorted\");A=t;const r=Number(g(e));n.push([t,r])}t.push([r,n]);break}case-22:for(let t=0;t<2;t++){let t=Number(u(e));for(;t--;)g(e)}a(e,Number(u(e))),t.push([r,void 0]);break;case-23:{let n=Number(u(e));for(;n--;){a(e,Number(u(e))),g(e)}t.push([r,void 0]);break}default:throw new Error(\"Illegal op_code: \"+r)}}const n=[],A=Number(u(e));for(let t=0;t<A;t++)n.push(Number(g(e)));return[t,n]}(r);if(s.length<e.length)throw new Error(\"Wrong number of return values\");const o=A.map((e=>ye()));function c(e){if(e<-24)throw new Error(\"future value not supported\");if(e<0)switch(e){case-1:return ne;case-2:return re;case-3:return se;case-4:return ie;case-5:return he;case-6:return fe;case-7:return Be;case-8:return Ie;case-9:return ce;case-10:return ue;case-11:return le;case-12:return ge;case-13:return oe;case-14:return ae;case-15:return Ae;case-16:return te;case-17:return ee;case-24:return de;default:throw new Error(\"Illegal op_code: \"+e)}if(e>=A.length)throw new Error(\"type index out of range\");return o[e]}A.forEach(((e,t)=>{const r=function(e){switch(e[0]){case-19:return Ee(c(e[1]));case-18:return Qe(c(e[1]));case-20:{const t={};for(const[r,n]of e[1])t[`_${r}_`]=c(n);const r=me(t),n=r.tryAsTuple();return Array.isArray(n)?pe(...n):r}case-21:{const t={};for(const[r,n]of e[1])t[`_${r}_`]=c(n);return Ce(t)}case-22:return we([],[],[]);case-23:return be({});default:throw new Error(\"Illegal op_code: \"+e[0])}}(e);o[t].fill(r)}));const l=s.map((e=>c(e))),h=e.map(((e,t)=>e.decodeValue(r,l[t])));for(let t=e.length;t<l.length;t++)l[t].decodeValue(r,l[t]);if(r.buffer.length>0)throw new Error(\"decode: Left-over bytes\");return h}const ee=new S,te=new R,re=new D,ne=new q,Ae=new H,ie=new N,se=new M,oe=new x(32),ae=new x(64),ce=new j(8),ue=new j(16),le=new j(32),ge=new j(64),he=new O(8),fe=new O(16),Be=new O(32),Ie=new O(64),de=new K;function pe(...e){return new J(e)}function Ee(e){return new U(e)}function Qe(e){return new Y(e)}function me(e){return new T(e)}function Ce(e){return new L(e)}function ye(){return new Z}function we(e,t,r=[]){return new $(e,t,r)}function be(e){return new V(e)}},function(e,t,r){\"use strict\";(function(e){r.d(t,\"a\",(function(){return s}));var n=r(38),A=r(51),i=r(52);class s{constructor(e){this._arr=e,this._isPrincipal=!0}static anonymous(){return new this(new Uint8Array([4]))}static selfAuthenticating(e){const t=Object(i.a)(e);return new this(new Uint8Array([...t,2]))}static from(e){if(\"string\"==typeof e)return s.fromText(e);if(\"object\"==typeof e&&null!==e&&!0===e._isPrincipal)return new s(e._arr);throw new Error(`Impossible to convert ${JSON.stringify(e)} to Principal.`)}static fromHex(e){return new this(new Uint8Array((null!==(t=e.match(/.{1,2}/g))&&void 0!==t?t:[]).map((e=>parseInt(e,16)))));var t}static fromText(e){const t=e.toLowerCase().replace(/-/g,\"\");let r=Object(n.a)(t);r=r.slice(4,r.length);const A=new this(r);if(A.toText()!==e)throw new Error(`Principal \"${A.toText()}\" does not have a valid checksum.`);return A}static fromUint8Array(e){return new this(e)}isAnonymous(){return 1===this._arr.byteLength&&4===this._arr[0]}toUint8Array(){return this._arr}toHex(){return(e=this._arr,e.reduce(((e,t)=>e+t.toString(16).padStart(2,\"0\")),\"\")).toUpperCase();var e}toText(){const t=new ArrayBuffer(4);new DataView(t).setUint32(0,Object(A.a)(this._arr));const r=Uint8Array.from(e.from(t)),i=Uint8Array.from(this._arr),s=new Uint8Array([...r,...i]),o=Object(n.b)(s).match(/.{1,5}/g);if(!o)throw new Error;return o.join(\"-\")}toString(){return this.toText()}}}).call(this,r(0).Buffer)},function(e,t,r){(function(t){var n;e.exports=(n=n||function(e,n){var A;if(\"undefined\"!=typeof window&&window.crypto&&(A=window.crypto),\"undefined\"!=typeof self&&self.crypto&&(A=self.crypto),\"undefined\"!=typeof globalThis&&globalThis.crypto&&(A=globalThis.crypto),!A&&\"undefined\"!=typeof window&&window.msCrypto&&(A=window.msCrypto),!A&&void 0!==t&&t.crypto&&(A=t.crypto),!A)try{A=r(68)}catch(e){}var i=function(){if(A){if(\"function\"==typeof A.getRandomValues)try{return A.getRandomValues(new Uint32Array(1))[0]}catch(e){}if(\"function\"==typeof A.randomBytes)try{return A.randomBytes(4).readInt32LE()}catch(e){}}throw new Error(\"Native crypto module could not be used to get secure random number.\")},s=Object.create||function(){function e(){}return function(t){var r;return e.prototype=t,r=new e,e.prototype=null,r}}(),o={},a=o.lib={},c=a.Base={extend:function(e){var t=s(this);return e&&t.mixIn(e),t.hasOwnProperty(\"init\")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty(\"toString\")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=a.WordArray=c.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=t!=n?t:4*e.length},toString:function(e){return(e||g).stringify(this)},concat:function(e){var t=this.words,r=e.words,n=this.sigBytes,A=e.sigBytes;if(this.clamp(),n%4)for(var i=0;i<A;i++){var s=r[i>>>2]>>>24-i%4*8&255;t[n+i>>>2]|=s<<24-(n+i)%4*8}else for(var o=0;o<A;o+=4)t[n+o>>>2]=r[o>>>2];return this.sigBytes+=A,this},clamp:function(){var t=this.words,r=this.sigBytes;t[r>>>2]&=4294967295<<32-r%4*8,t.length=e.ceil(r/4)},clone:function(){var e=c.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],r=0;r<e;r+=4)t.push(i());return new u.init(t,e)}}),l=o.enc={},g=l.Hex={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],A=0;A<r;A++){var i=t[A>>>2]>>>24-A%4*8&255;n.push((i>>>4).toString(16)),n.push((15&i).toString(16))}return n.join(\"\")},parse:function(e){for(var t=e.length,r=[],n=0;n<t;n+=2)r[n>>>3]|=parseInt(e.substr(n,2),16)<<24-n%8*4;return new u.init(r,t/2)}},h=l.Latin1={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],A=0;A<r;A++){var i=t[A>>>2]>>>24-A%4*8&255;n.push(String.fromCharCode(i))}return n.join(\"\")},parse:function(e){for(var t=e.length,r=[],n=0;n<t;n++)r[n>>>2]|=(255&e.charCodeAt(n))<<24-n%4*8;return new u.init(r,t)}},f=l.Utf8={stringify:function(e){try{return decodeURIComponent(escape(h.stringify(e)))}catch(e){throw new Error(\"Malformed UTF-8 data\")}},parse:function(e){return h.parse(unescape(encodeURIComponent(e)))}},B=a.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){\"string\"==typeof e&&(e=f.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var r,n=this._data,A=n.words,i=n.sigBytes,s=this.blockSize,o=i/(4*s),a=(o=t?e.ceil(o):e.max((0|o)-this._minBufferSize,0))*s,c=e.min(4*a,i);if(a){for(var l=0;l<a;l+=s)this._doProcessBlock(A,l);r=A.splice(0,a),n.sigBytes-=c}return new u.init(r,c)},clone:function(){var e=c.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),I=(a.Hasher=B.extend({cfg:c.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){B.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function(e){return function(t,r){return new I.HMAC.init(e,r).finalize(t)}}}),o.algo={});return o}(Math),n)}).call(this,r(17))},function(e,t,r){\"use strict\";t.a=()=>({url:n(window.location.origin),name:i(),icons:s(),pageWidth:A()});const n=e=>e.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i,\"\").split(\"/\")[0],A=()=>{const e=window,t=document,r=t.documentElement,n=t.getElementsByTagName(\"body\")[0];return e.innerWidth||r.clientWidth||n.clientWidth},i=()=>{var e;let t=null;const r=document.getElementsByTagName(\"meta\");if(!r)return n(window.location.origin);for(let n=0;n<r.length;n+=1){const A=r[n];(null===(e=A.getAttribute(\"property\"))||void 0===e?void 0:e.toLowerCase().indexOf(\"site_name\"))>-1&&(t=A.getAttribute(\"content\"))}return null!=t?t:n(window.location.origin)},s=()=>{var e;const t=document.getElementsByTagName(\"link\"),r=[];for(let n=0;n<t.length;n+=1){const A=t[n];if((null===(e=A.getAttribute(\"rel\"))||void 0===e?void 0:e.toLowerCase().indexOf(\"icon\"))>-1){const e=A.getAttribute(\"href\");if(e)if(-1===e.toLowerCase().indexOf(\"https:\")&&-1===e.toLowerCase().indexOf(\"http:\")&&0!==e.indexOf(\"//\")){let t=`${window.location.protocol}//${window.location.host}`;if(0===e.indexOf(\"/\"))t+=e;else{const r=window.location.pathname.split(\"/\");r.pop();t+=`${r.join(\"/\")}/${e}`}r.push(t)}else if(0===e.indexOf(\"//\")){const t=window.location.protocol+e;r.push(t)}else r.push(e)}}return r}},function(e,t,r){var n,A;self,e.exports=(n={1238:e=>{\"use strict\";e.exports={version:\"17.6.0\"}},7629:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(9474),s=r(1687),o=r(8652),a=r(8160),c=r(3292),u=r(6354),l=r(8901),g=r(9708),h=r(6914),f=r(2294),B=r(6133),I=r(1152),d=r(8863),p=r(2036),E={Base:class{constructor(e){this.type=e,this.$_root=null,this._definition={},this._reset()}_reset(){this._ids=new f.Ids,this._preferences=null,this._refs=new B.Manager,this._cache=null,this._valids=null,this._invalids=null,this._flags={},this._rules=[],this._singleRules=new Map,this.$_terms={},this.$_temp={ruleset:null,whens:{}}}describe(){return n(\"function\"==typeof g.describe,\"Manifest functionality disabled\"),g.describe(this)}allow(...e){return a.verifyFlat(e,\"allow\"),this._values(e,\"_valids\")}alter(e){n(e&&\"object\"==typeof e&&!Array.isArray(e),\"Invalid targets argument\"),n(!this._inRuleset(),\"Cannot set alterations inside a ruleset\");const t=this.clone();t.$_terms.alterations=t.$_terms.alterations||[];for(const r in e){const A=e[r];n(\"function\"==typeof A,\"Alteration adjuster for\",r,\"must be a function\"),t.$_terms.alterations.push({target:r,adjuster:A})}return t.$_temp.ruleset=!1,t}artifact(e){return n(void 0!==e,\"Artifact cannot be undefined\"),n(!this._cache,\"Cannot set an artifact with a rule cache\"),this.$_setFlag(\"artifact\",e)}cast(e){return n(!1===e||\"string\"==typeof e,\"Invalid to value\"),n(!1===e||this._definition.cast[e],\"Type\",this.type,\"does not support casting to\",e),this.$_setFlag(\"cast\",!1===e?void 0:e)}default(e,t){return this._default(\"default\",e,t)}description(e){return n(e&&\"string\"==typeof e,\"Description must be a non-empty string\"),this.$_setFlag(\"description\",e)}empty(e){const t=this.clone();return void 0!==e&&(e=t.$_compile(e,{override:!1})),t.$_setFlag(\"empty\",e,{clone:!1})}error(e){return n(e,\"Missing error\"),n(e instanceof Error||\"function\"==typeof e,\"Must provide a valid Error object or a function\"),this.$_setFlag(\"error\",e)}example(e,t={}){return n(void 0!==e,\"Missing example\"),a.assertOptions(t,[\"override\"]),this._inner(\"examples\",e,{single:!0,override:t.override})}external(e,t){return\"object\"==typeof e&&(n(!t,\"Cannot combine options with description\"),t=e.description,e=e.method),n(\"function\"==typeof e,\"Method must be a function\"),n(void 0===t||t&&\"string\"==typeof t,\"Description must be a non-empty string\"),this._inner(\"externals\",{method:e,description:t},{single:!0})}failover(e,t){return this._default(\"failover\",e,t)}forbidden(){return this.presence(\"forbidden\")}id(e){return e?(n(\"string\"==typeof e,\"id must be a non-empty string\"),n(/^[^\\.]+$/.test(e),\"id cannot contain period character\"),this.$_setFlag(\"id\",e)):this.$_setFlag(\"id\",void 0)}invalid(...e){return this._values(e,\"_invalids\")}label(e){return n(e&&\"string\"==typeof e,\"Label name must be a non-empty string\"),this.$_setFlag(\"label\",e)}meta(e){return n(void 0!==e,\"Meta cannot be undefined\"),this._inner(\"metas\",e,{single:!0})}note(...e){n(e.length,\"Missing notes\");for(const t of e)n(t&&\"string\"==typeof t,\"Notes must be non-empty strings\");return this._inner(\"notes\",e)}only(e=!0){return n(\"boolean\"==typeof e,\"Invalid mode:\",e),this.$_setFlag(\"only\",e)}optional(){return this.presence(\"optional\")}prefs(e){n(e,\"Missing preferences\"),n(void 0===e.context,\"Cannot override context\"),n(void 0===e.externals,\"Cannot override externals\"),n(void 0===e.warnings,\"Cannot override warnings\"),n(void 0===e.debug,\"Cannot override debug\"),a.checkPreferences(e);const t=this.clone();return t._preferences=a.preferences(t._preferences,e),t}presence(e){return n([\"optional\",\"required\",\"forbidden\"].includes(e),\"Unknown presence mode\",e),this.$_setFlag(\"presence\",e)}raw(e=!0){return this.$_setFlag(\"result\",e?\"raw\":void 0)}result(e){return n([\"raw\",\"strip\"].includes(e),\"Unknown result mode\",e),this.$_setFlag(\"result\",e)}required(){return this.presence(\"required\")}strict(e){const t=this.clone(),r=void 0!==e&&!e;return t._preferences=a.preferences(t._preferences,{convert:r}),t}strip(e=!0){return this.$_setFlag(\"result\",e?\"strip\":void 0)}tag(...e){n(e.length,\"Missing tags\");for(const t of e)n(t&&\"string\"==typeof t,\"Tags must be non-empty strings\");return this._inner(\"tags\",e)}unit(e){return n(e&&\"string\"==typeof e,\"Unit name must be a non-empty string\"),this.$_setFlag(\"unit\",e)}valid(...e){a.verifyFlat(e,\"valid\");const t=this.allow(...e);return t.$_setFlag(\"only\",!!t._valids,{clone:!1}),t}when(e,t){const r=this.clone();r.$_terms.whens||(r.$_terms.whens=[]);const A=c.when(r,e,t);if(![\"any\",\"link\"].includes(r.type)){const e=A.is?[A]:A.switch;for(const t of e)n(!t.then||\"any\"===t.then.type||t.then.type===r.type,\"Cannot combine\",r.type,\"with\",t.then&&t.then.type),n(!t.otherwise||\"any\"===t.otherwise.type||t.otherwise.type===r.type,\"Cannot combine\",r.type,\"with\",t.otherwise&&t.otherwise.type)}return r.$_terms.whens.push(A),r.$_mutateRebuild()}cache(e){n(!this._inRuleset(),\"Cannot set caching inside a ruleset\"),n(!this._cache,\"Cannot override schema cache\"),n(void 0===this._flags.artifact,\"Cannot cache a rule with an artifact\");const t=this.clone();return t._cache=e||o.provider.provision(),t.$_temp.ruleset=!1,t}clone(){const e=Object.create(Object.getPrototypeOf(this));return this._assign(e)}concat(e){n(a.isSchema(e),\"Invalid schema object\"),n(\"any\"===this.type||\"any\"===e.type||e.type===this.type,\"Cannot merge type\",this.type,\"with another type:\",e.type),n(!this._inRuleset(),\"Cannot concatenate onto a schema with open ruleset\"),n(!e._inRuleset(),\"Cannot concatenate a schema with open ruleset\");let t=this.clone();if(\"any\"===this.type&&\"any\"!==e.type){const r=e.clone();for(const e of Object.keys(t))\"type\"!==e&&(r[e]=t[e]);t=r}t._ids.concat(e._ids),t._refs.register(e,B.toSibling),t._preferences=t._preferences?a.preferences(t._preferences,e._preferences):e._preferences,t._valids=p.merge(t._valids,e._valids,e._invalids),t._invalids=p.merge(t._invalids,e._invalids,e._valids);for(const r of e._singleRules.keys())t._singleRules.has(r)&&(t._rules=t._rules.filter((e=>e.keep||e.name!==r)),t._singleRules.delete(r));for(const r of e._rules)e._definition.rules[r.method].multi||t._singleRules.set(r.name,r),t._rules.push(r);if(t._flags.empty&&e._flags.empty){t._flags.empty=t._flags.empty.concat(e._flags.empty);const r=Object.assign({},e._flags);delete r.empty,s(t._flags,r)}else if(e._flags.empty){t._flags.empty=e._flags.empty;const r=Object.assign({},e._flags);delete r.empty,s(t._flags,r)}else s(t._flags,e._flags);for(const r in e.$_terms){const n=e.$_terms[r];n?t.$_terms[r]?t.$_terms[r]=t.$_terms[r].concat(n):t.$_terms[r]=n.slice():t.$_terms[r]||(t.$_terms[r]=n)}return this.$_root._tracer&&this.$_root._tracer._combine(t,[this,e]),t.$_mutateRebuild()}extend(e){return n(!e.base,\"Cannot extend type with another base\"),l.type(this,e)}extract(e){return e=Array.isArray(e)?e:e.split(\".\"),this._ids.reach(e)}fork(e,t){n(!this._inRuleset(),\"Cannot fork inside a ruleset\");let r=this;for(let n of[].concat(e))n=Array.isArray(n)?n:n.split(\".\"),r=r._ids.fork(n,t,r);return r.$_temp.ruleset=!1,r}rule(e){const t=this._definition;a.assertOptions(e,Object.keys(t.modifiers)),n(!1!==this.$_temp.ruleset,\"Cannot apply rules to empty ruleset or the last rule added does not support rule properties\");const r=null===this.$_temp.ruleset?this._rules.length-1:this.$_temp.ruleset;n(r>=0&&r<this._rules.length,\"Cannot apply rules to empty ruleset\");const i=this.clone();for(let s=r;s<i._rules.length;++s){const r=i._rules[s],o=A(r);for(const A in e)t.modifiers[A](o,e[A]),n(o.name===r.name,\"Cannot change rule name\");i._rules[s]=o,i._singleRules.get(o.name)===r&&i._singleRules.set(o.name,o)}return i.$_temp.ruleset=!1,i.$_mutateRebuild()}get ruleset(){n(!this._inRuleset(),\"Cannot start a new ruleset without closing the previous one\");const e=this.clone();return e.$_temp.ruleset=e._rules.length,e}get $(){return this.ruleset}tailor(e){e=[].concat(e),n(!this._inRuleset(),\"Cannot tailor inside a ruleset\");let t=this;if(this.$_terms.alterations)for(const{target:r,adjuster:A}of this.$_terms.alterations)e.includes(r)&&(t=A(t),n(a.isSchema(t),\"Alteration adjuster for\",r,\"failed to return a schema object\"));return t=t.$_modify({each:t=>t.tailor(e),ref:!1}),t.$_temp.ruleset=!1,t.$_mutateRebuild()}tracer(){return I.location?I.location(this):this}validate(e,t){return d.entry(e,this,t)}validateAsync(e,t){return d.entryAsync(e,this,t)}$_addRule(e){\"string\"==typeof e&&(e={name:e}),n(e&&\"object\"==typeof e,\"Invalid options\"),n(e.name&&\"string\"==typeof e.name,\"Invalid rule name\");for(const t in e)n(\"_\"!==t[0],\"Cannot set private rule properties\");const t=Object.assign({},e);t._resolve=[],t.method=t.method||t.name;const r=this._definition.rules[t.method],A=t.args;n(r,\"Unknown rule\",t.method);const i=this.clone();if(A){n(1===Object.keys(A).length||Object.keys(A).length===this._definition.rules[t.name].args.length,\"Invalid rule definition for\",this.type,t.name);for(const e in A){let s=A[e];if(void 0!==s){if(r.argsByName){const o=r.argsByName.get(e);if(o.ref&&a.isResolvable(s))t._resolve.push(e),i.$_mutateRegister(s);else if(o.normalize&&(s=o.normalize(s),A[e]=s),o.assert){const t=a.validateArg(s,e,o);n(!t,t,\"or reference\")}}A[e]=s}else delete A[e]}}return r.multi||(i._ruleRemove(t.name,{clone:!1}),i._singleRules.set(t.name,t)),!1===i.$_temp.ruleset&&(i.$_temp.ruleset=null),r.priority?i._rules.unshift(t):i._rules.push(t),i}$_compile(e,t){return c.schema(this.$_root,e,t)}$_createError(e,t,r,n,A,i={}){const s=!1!==i.flags?this._flags:{},o=i.messages?h.merge(this._definition.messages,i.messages):this._definition.messages;return new u.Report(e,t,r,s,o,n,A)}$_getFlag(e){return this._flags[e]}$_getRule(e){return this._singleRules.get(e)}$_mapLabels(e){return e=Array.isArray(e)?e:e.split(\".\"),this._ids.labels(e)}$_match(e,t,r,n){(r=Object.assign({},r)).abortEarly=!0,r._externals=!1,t.snapshot();const A=!d.validate(e,this,t,r,n).errors;return t.restore(),A}$_modify(e){return a.assertOptions(e,[\"each\",\"once\",\"ref\",\"schema\"]),f.schema(this,e)||this}$_mutateRebuild(){return n(!this._inRuleset(),\"Cannot add this rule inside a ruleset\"),this._refs.reset(),this._ids.reset(),this.$_modify({each:(e,{source:t,name:r,path:n,key:A})=>{const i=this._definition[t][r]&&this._definition[t][r].register;!1!==i&&this.$_mutateRegister(e,{family:i,key:A})}}),this._definition.rebuild&&this._definition.rebuild(this),this.$_temp.ruleset=!1,this}$_mutateRegister(e,{family:t,key:r}={}){this._refs.register(e,t),this._ids.register(e,{key:r})}$_property(e){return this._definition.properties[e]}$_reach(e){return this._ids.reach(e)}$_rootReferences(){return this._refs.roots()}$_setFlag(e,t,r={}){n(\"_\"===e[0]||!this._inRuleset(),\"Cannot set flag inside a ruleset\");const A=this._definition.flags[e]||{};if(i(t,A.default)&&(t=void 0),i(t,this._flags[e]))return this;const s=!1!==r.clone?this.clone():this;return void 0!==t?(s._flags[e]=t,s.$_mutateRegister(t)):delete s._flags[e],\"_\"!==e[0]&&(s.$_temp.ruleset=!1),s}$_parent(e,...t){return this[e][a.symbols.parent].call(this,...t)}$_validate(e,t,r){return d.validate(e,this,t,r)}_assign(e){e.type=this.type,e.$_root=this.$_root,e.$_temp=Object.assign({},this.$_temp),e.$_temp.whens={},e._ids=this._ids.clone(),e._preferences=this._preferences,e._valids=this._valids&&this._valids.clone(),e._invalids=this._invalids&&this._invalids.clone(),e._rules=this._rules.slice(),e._singleRules=A(this._singleRules,{shallow:!0}),e._refs=this._refs.clone(),e._flags=Object.assign({},this._flags),e._cache=null,e.$_terms={};for(const t in this.$_terms)e.$_terms[t]=this.$_terms[t]?this.$_terms[t].slice():null;e.$_super={};for(const t in this.$_super)e.$_super[t]=this._super[t].bind(e);return e}_bare(){const e=this.clone();e._reset();const t=e._definition.terms;for(const r in t){const n=t[r];e.$_terms[r]=n.init}return e.$_mutateRebuild()}_default(e,t,r={}){return a.assertOptions(r,\"literal\"),n(void 0!==t,\"Missing\",e,\"value\"),n(\"function\"==typeof t||!r.literal,\"Only function value supports literal option\"),\"function\"==typeof t&&r.literal&&(t={[a.symbols.literal]:!0,literal:t}),this.$_setFlag(e,t)}_generate(e,t,r){if(!this.$_terms.whens)return{schema:this};const n=[],A=[];for(let i=0;i<this.$_terms.whens.length;++i){const s=this.$_terms.whens[i];if(s.concat){n.push(s.concat),A.push(\"\".concat(i,\".concat\"));continue}const o=s.ref?s.ref.resolve(e,t,r):e,a=s.is?[s]:s.switch,c=A.length;for(let c=0;c<a.length;++c){const{is:u,then:l,otherwise:g}=a[c],h=\"\".concat(i).concat(s.switch?\".\"+c:\"\");if(u.$_match(o,t.nest(u,\"\".concat(h,\".is\")),r)){if(l){const i=t.localize([...t.path,\"\".concat(h,\".then\")],t.ancestors,t.schemas),{schema:s,id:o}=l._generate(e,i,r);n.push(s),A.push(\"\".concat(h,\".then\").concat(o?\"(\".concat(o,\")\"):\"\"));break}}else if(g){const i=t.localize([...t.path,\"\".concat(h,\".otherwise\")],t.ancestors,t.schemas),{schema:s,id:o}=g._generate(e,i,r);n.push(s),A.push(\"\".concat(h,\".otherwise\").concat(o?\"(\".concat(o,\")\"):\"\"));break}}if(s.break&&A.length>c)break}const i=A.join(\", \");if(t.mainstay.tracer.debug(t,\"rule\",\"when\",i),!i)return{schema:this};if(!t.mainstay.tracer.active&&this.$_temp.whens[i])return{schema:this.$_temp.whens[i],id:i};let s=this;this._definition.generate&&(s=this._definition.generate(this,e,t,r));for(const e of n)s=s.concat(e);return this.$_root._tracer&&this.$_root._tracer._combine(s,[this,...n]),this.$_temp.whens[i]=s,{schema:s,id:i}}_inner(e,t,r={}){n(!this._inRuleset(),\"Cannot set \".concat(e,\" inside a ruleset\"));const A=this.clone();return A.$_terms[e]&&!r.override||(A.$_terms[e]=[]),r.single?A.$_terms[e].push(t):A.$_terms[e].push(...t),A.$_temp.ruleset=!1,A}_inRuleset(){return null!==this.$_temp.ruleset&&!1!==this.$_temp.ruleset}_ruleRemove(e,t={}){if(!this._singleRules.has(e))return this;const r=!1!==t.clone?this.clone():this;r._singleRules.delete(e);const n=[];for(let t=0;t<r._rules.length;++t){const A=r._rules[t];A.name!==e||A.keep?n.push(A):r._inRuleset()&&t<r.$_temp.ruleset&&--r.$_temp.ruleset}return r._rules=n,r}_values(e,t){a.verifyFlat(e,t.slice(1,-1));const r=this.clone(),A=e[0]===a.symbols.override;if(A&&(e=e.slice(1)),!r[t]&&e.length?r[t]=new p:A&&(r[t]=e.length?new p:null,r.$_mutateRebuild()),!r[t])return r;A&&r[t].override();for(const A of e){n(void 0!==A,\"Cannot call allow/valid/invalid with undefined\"),n(A!==a.symbols.override,\"Override must be the first value\");const e=\"_invalids\"===t?\"_valids\":\"_invalids\";r[e]&&(r[e].remove(A),r[e].length||(n(\"_valids\"===t||!r._flags.only,\"Setting invalid value\",A,\"leaves schema rejecting all values due to previous valid rule\"),r[e]=null)),r[t].add(A,r._refs)}return r}}};E.Base.prototype[a.symbols.any]={version:a.version,compile:c.compile,root:\"$_root\"},E.Base.prototype.isImmutable=!0,E.Base.prototype.deny=E.Base.prototype.invalid,E.Base.prototype.disallow=E.Base.prototype.invalid,E.Base.prototype.equal=E.Base.prototype.valid,E.Base.prototype.exist=E.Base.prototype.required,E.Base.prototype.not=E.Base.prototype.invalid,E.Base.prototype.options=E.Base.prototype.prefs,E.Base.prototype.preferences=E.Base.prototype.prefs,e.exports=new E.Base},8652:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(8160),s={max:1e3,supported:new Set([\"undefined\",\"boolean\",\"number\",\"string\"])};t.provider={provision:e=>new s.Cache(e)},s.Cache=class{constructor(e={}){i.assertOptions(e,[\"max\"]),n(void 0===e.max||e.max&&e.max>0&&isFinite(e.max),\"Invalid max cache size\"),this._max=e.max||s.max,this._map=new Map,this._list=new s.List}get length(){return this._map.size}set(e,t){if(null!==e&&!s.supported.has(typeof e))return;let r=this._map.get(e);if(r)return r.value=t,void this._list.first(r);r=this._list.unshift({key:e,value:t}),this._map.set(e,r),this._compact()}get(e){const t=this._map.get(e);if(t)return this._list.first(t),A(t.value)}_compact(){if(this._map.size>this._max){const e=this._list.pop();this._map.delete(e.key)}}},s.List=class{constructor(){this.tail=null,this.head=null}unshift(e){return e.next=null,e.prev=this.head,this.head&&(this.head.next=e),this.head=e,this.tail||(this.tail=e),e}first(e){e!==this.head&&(this._remove(e),this.unshift(e))}pop(){return this._remove(this.tail)}_remove(e){const{next:t,prev:r}=e;return t.prev=r,r&&(r.next=t),e===this.tail&&(this.tail=t),e.prev=null,e.next=null,e}}},8160:(e,t,r)=>{\"use strict\";const n=r(375),A=r(7916),i=r(1238);let s,o;const a={isoDate:/^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/};t.version=i.version,t.defaults={abortEarly:!0,allowUnknown:!1,artifacts:!1,cache:!0,context:null,convert:!0,dateFormat:\"iso\",errors:{escapeHtml:!1,label:\"path\",language:null,render:!0,stack:!1,wrap:{label:'\"',array:\"[]\"}},externals:!0,messages:{},nonEnumerables:!1,noDefaults:!1,presence:\"optional\",skipFunctions:!1,stripUnknown:!1,warnings:!1},t.symbols={any:Symbol.for(\"@hapi/joi/schema\"),arraySingle:Symbol(\"arraySingle\"),deepDefault:Symbol(\"deepDefault\"),errors:Symbol(\"errors\"),literal:Symbol(\"literal\"),override:Symbol(\"override\"),parent:Symbol(\"parent\"),prefs:Symbol(\"prefs\"),ref:Symbol(\"ref\"),template:Symbol(\"template\"),values:Symbol(\"values\")},t.assertOptions=function(e,t,r=\"Options\"){n(e&&\"object\"==typeof e&&!Array.isArray(e),\"Options must be of type object\");const A=Object.keys(e).filter((e=>!t.includes(e)));n(0===A.length,\"\".concat(r,\" contain unknown keys: \").concat(A))},t.checkPreferences=function(e){o=o||r(3378);const t=o.preferences.validate(e);if(t.error)throw new A([t.error.details[0].message])},t.compare=function(e,t,r){switch(r){case\"=\":return e===t;case\">\":return e>t;case\"<\":return e<t;case\">=\":return e>=t;case\"<=\":return e<=t}},t.default=function(e,t){return void 0===e?t:e},t.isIsoDate=function(e){return a.isoDate.test(e)},t.isNumber=function(e){return\"number\"==typeof e&&!isNaN(e)},t.isResolvable=function(e){return!!e&&(e[t.symbols.ref]||e[t.symbols.template])},t.isSchema=function(e,r={}){const A=e&&e[t.symbols.any];return!!A&&(n(r.legacy||A.version===t.version,\"Cannot mix different versions of joi schemas\"),!0)},t.isValues=function(e){return e[t.symbols.values]},t.limit=function(e){return Number.isSafeInteger(e)&&e>=0},t.preferences=function(e,n){s=s||r(6914),e=e||{},n=n||{};const A=Object.assign({},e,n);return n.errors&&e.errors&&(A.errors=Object.assign({},e.errors,n.errors),A.errors.wrap=Object.assign({},e.errors.wrap,n.errors.wrap)),n.messages&&(A.messages=s.compile(n.messages,e.messages)),delete A[t.symbols.prefs],A},t.tryWithPath=function(e,t,r={}){try{return e()}catch(e){throw void 0!==e.path?e.path=t+\".\"+e.path:e.path=t,r.append&&(e.message=\"\".concat(e.message,\" (\").concat(e.path,\")\")),e}},t.validateArg=function(e,r,{assert:n,message:A}){if(t.isSchema(n)){const t=n.validate(e);if(!t.error)return;return t.error.message}if(!n(e))return r?\"\".concat(r,\" \").concat(A):A},t.verifyFlat=function(e,t){for(const r of e)n(!Array.isArray(r),\"Method no longer accepts array arguments:\",t)}},3292:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8160),i=r(6133),s={};t.schema=function(e,t,r={}){A.assertOptions(r,[\"appendPath\",\"override\"]);try{return s.schema(e,t,r)}catch(e){throw r.appendPath&&void 0!==e.path&&(e.message=\"\".concat(e.message,\" (\").concat(e.path,\")\")),e}},s.schema=function(e,t,r){n(void 0!==t,\"Invalid undefined schema\"),Array.isArray(t)&&(n(t.length,\"Invalid empty array schema\"),1===t.length&&(t=t[0]));const i=(t,...n)=>!1!==r.override?t.valid(e.override,...n):t.valid(...n);if(s.simple(t))return i(e,t);if(\"function\"==typeof t)return e.custom(t);if(n(\"object\"==typeof t,\"Invalid schema content:\",typeof t),A.isResolvable(t))return i(e,t);if(A.isSchema(t))return t;if(Array.isArray(t)){for(const r of t)if(!s.simple(r))return e.alternatives().try(...t);return i(e,...t)}return t instanceof RegExp?e.string().regex(t):t instanceof Date?i(e.date(),t):(n(Object.getPrototypeOf(t)===Object.getPrototypeOf({}),\"Schema can only contain plain objects\"),e.object().keys(t))},t.ref=function(e,t){return i.isRef(e)?e:i.create(e,t)},t.compile=function(e,r,i={}){A.assertOptions(i,[\"legacy\"]);const o=r&&r[A.symbols.any];if(o)return n(i.legacy||o.version===A.version,\"Cannot mix different versions of joi schemas:\",o.version,A.version),r;if(\"object\"!=typeof r||!i.legacy)return t.schema(e,r,{appendPath:!0});const a=s.walk(r);return a?a.compile(a.root,r):t.schema(e,r,{appendPath:!0})},s.walk=function(e){if(\"object\"!=typeof e)return null;if(Array.isArray(e)){for(const t of e){const e=s.walk(t);if(e)return e}return null}const t=e[A.symbols.any];if(t)return{root:e[t.root],compile:t.compile};n(Object.getPrototypeOf(e)===Object.getPrototypeOf({}),\"Schema can only contain plain objects\");for(const t in e){const r=s.walk(e[t]);if(r)return r}return null},s.simple=function(e){return null===e||[\"boolean\",\"string\",\"number\"].includes(typeof e)},t.when=function(e,r,o){if(void 0===o&&(n(r&&\"object\"==typeof r,\"Missing options\"),o=r,r=i.create(\".\")),Array.isArray(o)&&(o={switch:o}),A.assertOptions(o,[\"is\",\"not\",\"then\",\"otherwise\",\"switch\",\"break\"]),A.isSchema(r))return n(void 0===o.is,'\"is\" can not be used with a schema condition'),n(void 0===o.not,'\"not\" can not be used with a schema condition'),n(void 0===o.switch,'\"switch\" can not be used with a schema condition'),s.condition(e,{is:r,then:o.then,otherwise:o.otherwise,break:o.break});if(n(i.isRef(r)||\"string\"==typeof r,\"Invalid condition:\",r),n(void 0===o.not||void 0===o.is,'Cannot combine \"is\" with \"not\"'),void 0===o.switch){let a=o;void 0!==o.not&&(a={is:o.not,then:o.otherwise,otherwise:o.then,break:o.break});let c=void 0!==a.is?e.$_compile(a.is):e.$_root.invalid(null,!1,0,\"\").required();return n(void 0!==a.then||void 0!==a.otherwise,'options must have at least one of \"then\", \"otherwise\", or \"switch\"'),n(void 0===a.break||void 0===a.then||void 0===a.otherwise,\"Cannot specify then, otherwise, and break all together\"),void 0===o.is||i.isRef(o.is)||A.isSchema(o.is)||(c=c.required()),s.condition(e,{ref:t.ref(r),is:c,then:a.then,otherwise:a.otherwise,break:a.break})}n(Array.isArray(o.switch),'\"switch\" must be an array'),n(void 0===o.is,'Cannot combine \"switch\" with \"is\"'),n(void 0===o.not,'Cannot combine \"switch\" with \"not\"'),n(void 0===o.then,'Cannot combine \"switch\" with \"then\"');const a={ref:t.ref(r),switch:[],break:o.break};for(let t=0;t<o.switch.length;++t){const r=o.switch[t],s=t===o.switch.length-1;A.assertOptions(r,s?[\"is\",\"then\",\"otherwise\"]:[\"is\",\"then\"]),n(void 0!==r.is,'Switch statement missing \"is\"'),n(void 0!==r.then,'Switch statement missing \"then\"');const c={is:e.$_compile(r.is),then:e.$_compile(r.then)};if(i.isRef(r.is)||A.isSchema(r.is)||(c.is=c.is.required()),s){n(void 0===o.otherwise||void 0===r.otherwise,'Cannot specify \"otherwise\" inside and outside a \"switch\"');const t=void 0!==o.otherwise?o.otherwise:r.otherwise;void 0!==t&&(n(void 0===a.break,\"Cannot specify both otherwise and break\"),c.otherwise=e.$_compile(t))}a.switch.push(c)}return a},s.condition=function(e,t){for(const r of[\"then\",\"otherwise\"])void 0===t[r]?delete t[r]:t[r]=e.$_compile(t[r]);return t}},6354:(e,t,r)=>{\"use strict\";const n=r(5688),A=r(8160),i=r(3328);t.Report=class{constructor(e,r,n,A,i,s,o){if(this.code=e,this.flags=A,this.messages=i,this.path=s.path,this.prefs=o,this.state=s,this.value=r,this.message=null,this.template=null,this.local=n||{},this.local.label=t.label(this.flags,this.state,this.prefs,this.messages),void 0===this.value||this.local.hasOwnProperty(\"value\")||(this.local.value=this.value),this.path.length){const e=this.path[this.path.length-1];\"object\"!=typeof e&&(this.local.key=e)}}_setTemplate(e){if(this.template=e,!this.flags.label&&0===this.path.length){const e=this._template(this.template,\"root\");e&&(this.local.label=e)}}toString(){if(this.message)return this.message;const e=this.code;if(!this.prefs.errors.render)return this.code;const t=this._template(this.template)||this._template(this.prefs.messages)||this._template(this.messages);return void 0===t?'Error code \"'.concat(e,'\" is not defined, your custom type is missing the correct messages definition'):(this.message=t.render(this.value,this.state,this.prefs,this.local,{errors:this.prefs.errors,messages:[this.prefs.messages,this.messages]}),this.prefs.errors.label||(this.message=this.message.replace(/^\"\" /,\"\").trim()),this.message)}_template(e,r){return t.template(this.value,e,r||this.code,this.state,this.prefs)}},t.path=function(e){let t=\"\";for(const r of e)\"object\"!=typeof r&&(\"string\"==typeof r?(t&&(t+=\".\"),t+=r):t+=\"[\".concat(r,\"]\"));return t},t.template=function(e,t,r,n,s){if(!t)return;if(i.isTemplate(t))return\"root\"!==r?t:null;let o=s.errors.language;if(A.isResolvable(o)&&(o=o.resolve(e,n,s)),o&&t[o]){if(void 0!==t[o][r])return t[o][r];if(void 0!==t[o][\"*\"])return t[o][\"*\"]}return t[r]?t[r]:t[\"*\"]},t.label=function(e,r,n,A){if(e.label)return e.label;if(!n.errors.label)return\"\";let i=r.path;return\"key\"===n.errors.label&&r.path.length>1&&(i=r.path.slice(-1)),t.path(i)||t.template(null,n.messages,\"root\",r,n)||A&&t.template(null,A,\"root\",r,n)||\"value\"},t.process=function(e,r,n){if(!e)return null;const{override:A,message:i,details:s}=t.details(e);if(A)return A;if(n.errors.stack)return new t.ValidationError(i,s,r);const o=Error.stackTraceLimit;Error.stackTraceLimit=0;const a=new t.ValidationError(i,s,r);return Error.stackTraceLimit=o,a},t.details=function(e,t={}){let r=[];const n=[];for(const A of e){if(A instanceof Error){if(!1!==t.override)return{override:A};const e=A.toString();r.push(e),n.push({message:e,type:\"override\",context:{error:A}});continue}const e=A.toString();r.push(e),n.push({message:e,path:A.path.filter((e=>\"object\"!=typeof e)),type:A.code,context:A.local})}return r.length>1&&(r=[...new Set(r)]),{message:r.join(\". \"),details:n}},t.ValidationError=class extends Error{constructor(e,t,r){super(e),this._original=r,this.details=t}static isError(e){return e instanceof t.ValidationError}},t.ValidationError.prototype.isJoi=!0,t.ValidationError.prototype.name=\"ValidationError\",t.ValidationError.prototype.annotate=n.error},8901:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(8160),s=r(6914),o={};t.type=function(e,t){const r=Object.getPrototypeOf(e),a=A(r),c=e._assign(Object.create(a)),u=Object.assign({},t);delete u.base,a._definition=u;const l=r._definition||{};u.messages=s.merge(l.messages,u.messages),u.properties=Object.assign({},l.properties,u.properties),c.type=u.type,u.flags=Object.assign({},l.flags,u.flags);const g=Object.assign({},l.terms);if(u.terms)for(const e in u.terms){const t=u.terms[e];n(void 0===c.$_terms[e],\"Invalid term override for\",u.type,e),c.$_terms[e]=t.init,g[e]=t}u.terms=g,u.args||(u.args=l.args),u.prepare=o.prepare(u.prepare,l.prepare),u.coerce&&(\"function\"==typeof u.coerce&&(u.coerce={method:u.coerce}),u.coerce.from&&!Array.isArray(u.coerce.from)&&(u.coerce={method:u.coerce.method,from:[].concat(u.coerce.from)})),u.coerce=o.coerce(u.coerce,l.coerce),u.validate=o.validate(u.validate,l.validate);const h=Object.assign({},l.rules);if(u.rules)for(const e in u.rules){const t=u.rules[e];n(\"object\"==typeof t,\"Invalid rule definition for\",u.type,e);let r=t.method;if(void 0===r&&(r=function(){return this.$_addRule(e)}),r&&(n(!a[e],\"Rule conflict in\",u.type,e),a[e]=r),n(!h[e],\"Rule conflict in\",u.type,e),h[e]=t,t.alias){const e=[].concat(t.alias);for(const r of e)a[r]=t.method}t.args&&(t.argsByName=new Map,t.args=t.args.map((e=>(\"string\"==typeof e&&(e={name:e}),n(!t.argsByName.has(e.name),\"Duplicated argument name\",e.name),i.isSchema(e.assert)&&(e.assert=e.assert.strict().label(e.name)),t.argsByName.set(e.name,e),e))))}u.rules=h;const f=Object.assign({},l.modifiers);if(u.modifiers)for(const e in u.modifiers){n(!a[e],\"Rule conflict in\",u.type,e);const t=u.modifiers[e];n(\"function\"==typeof t,\"Invalid modifier definition for\",u.type,e);const r=function(t){return this.rule({[e]:t})};a[e]=r,f[e]=t}if(u.modifiers=f,u.overrides){a._super=r,c.$_super={};for(const e in u.overrides)n(r[e],\"Cannot override missing\",e),u.overrides[e][i.symbols.parent]=r[e],c.$_super[e]=r[e].bind(c);Object.assign(a,u.overrides)}u.cast=Object.assign({},l.cast,u.cast);const B=Object.assign({},l.manifest,u.manifest);return B.build=o.build(u.manifest&&u.manifest.build,l.manifest&&l.manifest.build),u.manifest=B,u.rebuild=o.rebuild(u.rebuild,l.rebuild),c},o.build=function(e,t){return e&&t?function(r,n){return t(e(r,n),n)}:e||t},o.coerce=function(e,t){return e&&t?{from:e.from&&t.from?[...new Set([...e.from,...t.from])]:null,method(r,n){let A;if((!t.from||t.from.includes(typeof r))&&(A=t.method(r,n),A)){if(A.errors||void 0===A.value)return A;r=A.value}if(!e.from||e.from.includes(typeof r)){const t=e.method(r,n);if(t)return t}return A}}:e||t},o.prepare=function(e,t){return e&&t?function(r,n){const A=e(r,n);if(A){if(A.errors||void 0===A.value)return A;r=A.value}return t(r,n)||A}:e||t},o.rebuild=function(e,t){return e&&t?function(r){t(r),e(r)}:e||t},o.validate=function(e,t){return e&&t?function(r,n){const A=t(r,n);if(A){if(A.errors&&(!Array.isArray(A.errors)||A.errors.length))return A;r=A.value}return e(r,n)||A}:e||t}},5107:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(8652),s=r(8160),o=r(3292),a=r(6354),c=r(8901),u=r(9708),l=r(6133),g=r(3328),h=r(1152);let f;const B={types:{alternatives:r(4946),any:r(8068),array:r(546),boolean:r(4937),date:r(7500),function:r(390),link:r(8785),number:r(3832),object:r(8966),string:r(7417),symbol:r(8826)},aliases:{alt:\"alternatives\",bool:\"boolean\",func:\"function\"},root:function(){const e={_types:new Set(Object.keys(B.types))};for(const t of e._types)e[t]=function(...e){return n(!e.length||[\"alternatives\",\"link\",\"object\"].includes(t),\"The\",t,\"type does not allow arguments\"),B.generate(this,B.types[t],e)};for(const t of[\"allow\",\"custom\",\"disallow\",\"equal\",\"exist\",\"forbidden\",\"invalid\",\"not\",\"only\",\"optional\",\"options\",\"prefs\",\"preferences\",\"required\",\"strip\",\"valid\",\"when\"])e[t]=function(...e){return this.any()[t](...e)};Object.assign(e,B.methods);for(const t in B.aliases){const r=B.aliases[t];e[t]=e[r]}return e.x=e.expression,h.setup&&h.setup(e),e}};B.methods={ValidationError:a.ValidationError,version:s.version,cache:i.provider,assert(e,t,...r){B.assert(e,t,!0,r)},attempt:(e,t,...r)=>B.assert(e,t,!1,r),build(e){return n(\"function\"==typeof u.build,\"Manifest functionality disabled\"),u.build(this,e)},checkPreferences(e){s.checkPreferences(e)},compile(e,t){return o.compile(this,e,t)},defaults(e){n(\"function\"==typeof e,\"modifier must be a function\");const t=Object.assign({},this);for(const r of t._types){const A=e(t[r]());n(s.isSchema(A),\"modifier must return a valid schema object\"),t[r]=function(...e){return B.generate(this,A,e)}}return t},expression:(...e)=>new g(...e),extend(...e){s.verifyFlat(e,\"extend\"),f=f||r(3378),n(e.length,\"You need to provide at least one extension\"),this.assert(e,f.extensions);const t=Object.assign({},this);t._types=new Set(t._types);for(let r of e){\"function\"==typeof r&&(r=r(t)),this.assert(r,f.extension);const e=B.expandExtension(r,t);for(const r of e){n(void 0===t[r.type]||t._types.has(r.type),\"Cannot override name\",r.type);const e=r.base||this.any(),A=c.type(e,r);t._types.add(r.type),t[r.type]=function(...e){return B.generate(this,A,e)}}}return t},isError:a.ValidationError.isError,isExpression:g.isTemplate,isRef:l.isRef,isSchema:s.isSchema,in:(...e)=>l.in(...e),override:s.symbols.override,ref:(...e)=>l.create(...e),types(){const e={};for(const t of this._types)e[t]=this[t]();for(const t in B.aliases)e[t]=this[t]();return e}},B.assert=function(e,t,r,n){const i=n[0]instanceof Error||\"string\"==typeof n[0]?n[0]:null,o=i?n[1]:n[0],c=t.validate(e,s.preferences({errors:{stack:!0}},o||{}));let u=c.error;if(!u)return c.value;if(i instanceof Error)throw i;const l=r&&\"function\"==typeof u.annotate?u.annotate():u.message;throw u instanceof a.ValidationError==0&&(u=A(u)),u.message=i?\"\".concat(i,\" \").concat(l):l,u},B.generate=function(e,t,r){return n(e,\"Must be invoked on a Joi instance.\"),t.$_root=e,t._definition.args&&r.length?t._definition.args(t,...r):t},B.expandExtension=function(e,t){if(\"string\"==typeof e.type)return[e];const r=[];for(const n of t._types)if(e.type.test(n)){const A=Object.assign({},e);A.type=n,A.base=t[n](),r.push(A)}return r},e.exports=B.root()},6914:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(3328);t.compile=function(e,t){if(\"string\"==typeof e)return n(!t,\"Cannot set single message string\"),new i(e);if(i.isTemplate(e))return n(!t,\"Cannot set single message template\"),e;n(\"object\"==typeof e&&!Array.isArray(e),\"Invalid message options\"),t=t?A(t):{};for(let r in e){const A=e[r];if(\"root\"===r||i.isTemplate(A)){t[r]=A;continue}if(\"string\"==typeof A){t[r]=new i(A);continue}n(\"object\"==typeof A&&!Array.isArray(A),\"Invalid message for\",r);const s=r;for(r in t[s]=t[s]||{},A){const e=A[r];\"root\"===r||i.isTemplate(e)?t[s][r]=e:(n(\"string\"==typeof e,\"Invalid message for\",r,\"in\",s),t[s][r]=new i(e))}}return t},t.decompile=function(e){const t={};for(let r in e){const n=e[r];if(\"root\"===r){t.root=n;continue}if(i.isTemplate(n)){t[r]=n.describe({compact:!0});continue}const A=r;for(r in t[A]={},n){const e=n[r];\"root\"!==r?t[A][r]=e.describe({compact:!0}):t[A].root=e}}return t},t.merge=function(e,r){if(!e)return t.compile(r);if(!r)return e;if(\"string\"==typeof r)return new i(r);if(i.isTemplate(r))return r;const s=A(e);for(let e in r){const t=r[e];if(\"root\"===e||i.isTemplate(t)){s[e]=t;continue}if(\"string\"==typeof t){s[e]=new i(t);continue}n(\"object\"==typeof t&&!Array.isArray(t),\"Invalid message for\",e);const A=e;for(e in s[A]=s[A]||{},t){const r=t[e];\"root\"===e||i.isTemplate(r)?s[A][e]=r:(n(\"string\"==typeof r,\"Invalid message for\",e,\"in\",A),s[A][e]=new i(r))}}return s}},2294:(e,t,r)=>{\"use strict\";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function A(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const s=r(375),o=r(8160),a=r(6133),c={};t.Ids=c.Ids=class{constructor(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}clone(){const e=new c.Ids;return e._byId=new Map(this._byId),e._byKey=new Map(this._byKey),e._schemaChain=this._schemaChain,e}concat(e){e._schemaChain&&(this._schemaChain=!0);for(const[t,r]of e._byId.entries())s(!this._byKey.has(t),\"Schema id conflicts with existing key:\",t),this._byId.set(t,r);for(const[t,r]of e._byKey.entries())s(!this._byId.has(t),\"Schema key conflicts with existing id:\",t),this._byKey.set(t,r)}fork(e,t,r){const n=this._collect(e);n.push({schema:r});const A=n.shift();let i={id:A.id,schema:t(A.schema)};s(o.isSchema(i.schema),\"adjuster function failed to return a joi schema type\");for(const e of n)i={id:e.id,schema:c.fork(e.schema,i.id,i.schema)};return i.schema}labels(e,t=[]){const r=e[0],n=this._get(r);if(!n)return[...t,...e].join(\".\");const A=e.slice(1);return t=[...t,n.schema._flags.label||r],A.length?n.schema._ids.labels(A,t):t.join(\".\")}reach(e,t=[]){const r=e[0],n=this._get(r);s(n,\"Schema does not contain path\",[...t,...e].join(\".\"));const A=e.slice(1);return A.length?n.schema._ids.reach(A,[...t,r]):n.schema}register(e,{key:t}={}){if(!e||!o.isSchema(e))return;(e.$_property(\"schemaChain\")||e._ids._schemaChain)&&(this._schemaChain=!0);const r=e._flags.id;if(r){const t=this._byId.get(r);s(!t||t.schema===e,\"Cannot add different schemas with the same id:\",r),s(!this._byKey.has(r),\"Schema id conflicts with existing key:\",r),this._byId.set(r,{schema:e,id:r})}t&&(s(!this._byKey.has(t),\"Schema already contains key:\",t),s(!this._byId.has(t),\"Schema key conflicts with existing id:\",t),this._byKey.set(t,{schema:e,id:t}))}reset(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}_collect(e,t=[],r=[]){const n=e[0],A=this._get(n);s(A,\"Schema does not contain path\",[...t,...e].join(\".\")),r=[A,...r];const i=e.slice(1);return i.length?A.schema._ids._collect(i,[...t,n],r):r}_get(e){return this._byId.get(e)||this._byKey.get(e)}},c.fork=function(e,r,n){const A=t.schema(e,{each:(e,{key:t})=>{if(r===(e._flags.id||t))return n},ref:!1});return A?A.$_mutateRebuild():e},t.schema=function(e,t){let r;for(const n in e._flags){if(\"_\"===n[0])continue;const A=c.scan(e._flags[n],{source:\"flags\",name:n},t);void 0!==A&&(r=r||e.clone(),r._flags[n]=A)}for(let n=0;n<e._rules.length;++n){const A=e._rules[n],i=c.scan(A.args,{source:\"rules\",name:A.name},t);if(void 0!==i){r=r||e.clone();const t=Object.assign({},A);t.args=i,r._rules[n]=t,r._singleRules.get(A.name)===A&&r._singleRules.set(A.name,t)}}for(const n in e.$_terms){if(\"_\"===n[0])continue;const A=c.scan(e.$_terms[n],{source:\"terms\",name:n},t);void 0!==A&&(r=r||e.clone(),r.$_terms[n]=A)}return r},c.scan=function(e,t,r,n,i){const s=n||[];if(null===e||\"object\"!=typeof e)return;let u;if(Array.isArray(e)){for(let n=0;n<e.length;++n){const A=\"terms\"===t.source&&\"keys\"===t.name&&e[n].key,i=c.scan(e[n],t,r,[n,...s],A);void 0!==i&&(u=u||e.slice(),u[n]=i)}return u}if(!1!==r.schema&&o.isSchema(e)||!1!==r.ref&&a.isRef(e)){const n=r.each(e,A(A({},t),{},{path:s,key:i}));if(n===e)return;return n}for(const n in e){if(\"_\"===n[0])continue;const A=c.scan(e[n],t,r,[n,...s],i);void 0!==A&&(u=u||Object.assign({},e),u[n]=A)}return u}},6133:(e,t,r)=>{\"use strict\";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function A(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const s=r(375),o=r(8571),a=r(9621),c=r(8160);let u;const l={symbol:Symbol(\"ref\"),defaults:{adjust:null,in:!1,iterables:null,map:null,separator:\".\",type:\"value\"}};t.create=function(e,t={}){s(\"string\"==typeof e,\"Invalid reference key:\",e),c.assertOptions(t,[\"adjust\",\"ancestor\",\"in\",\"iterables\",\"map\",\"prefix\",\"render\",\"separator\"]),s(!t.prefix||\"object\"==typeof t.prefix,\"options.prefix must be of type object\");const r=Object.assign({},l.defaults,t);delete r.prefix;const n=r.separator,A=l.context(e,n,t.prefix);if(r.type=A.type,e=A.key,\"value\"===r.type)if(A.root&&(s(!n||e[0]!==n,\"Cannot specify relative path with root prefix\"),r.ancestor=\"root\",e||(e=null)),n&&n===e)e=null,r.ancestor=0;else if(void 0!==r.ancestor)s(!n||!e||e[0]!==n,\"Cannot combine prefix with ancestor option\");else{const[t,A]=l.ancestor(e,n);A&&\"\"===(e=e.slice(A))&&(e=null),r.ancestor=t}return r.path=n?null===e?[]:e.split(n):[e],new l.Ref(r)},t.in=function(e,r={}){return t.create(e,A(A({},r),{},{in:!0}))},t.isRef=function(e){return!!e&&!!e[c.symbols.ref]},l.Ref=class{constructor(e){s(\"object\"==typeof e,\"Invalid reference construction\"),c.assertOptions(e,[\"adjust\",\"ancestor\",\"in\",\"iterables\",\"map\",\"path\",\"render\",\"separator\",\"type\",\"depth\",\"key\",\"root\",\"display\"]),s([!1,void 0].includes(e.separator)||\"string\"==typeof e.separator&&1===e.separator.length,\"Invalid separator\"),s(!e.adjust||\"function\"==typeof e.adjust,\"options.adjust must be a function\"),s(!e.map||Array.isArray(e.map),\"options.map must be an array\"),s(!e.map||!e.adjust,\"Cannot set both map and adjust options\"),Object.assign(this,l.defaults,e),s(\"value\"===this.type||void 0===this.ancestor,\"Non-value references cannot reference ancestors\"),Array.isArray(this.map)&&(this.map=new Map(this.map)),this.depth=this.path.length,this.key=this.path.length?this.path.join(this.separator):null,this.root=this.path[0],this.updateDisplay()}resolve(e,t,r,n,A={}){return s(!this.in||A.in,\"Invalid in() reference usage\"),\"global\"===this.type?this._resolve(r.context,t,A):\"local\"===this.type?this._resolve(n,t,A):this.ancestor?\"root\"===this.ancestor?this._resolve(t.ancestors[t.ancestors.length-1],t,A):(s(this.ancestor<=t.ancestors.length,\"Invalid reference exceeds the schema root:\",this.display),this._resolve(t.ancestors[this.ancestor-1],t,A)):this._resolve(e,t,A)}_resolve(e,t,r){let n;if(\"value\"===this.type&&t.mainstay.shadow&&!1!==r.shadow&&(n=t.mainstay.shadow.get(this.absolute(t))),void 0===n&&(n=a(e,this.path,{iterables:this.iterables,functions:!0})),this.adjust&&(n=this.adjust(n)),this.map){const e=this.map.get(n);void 0!==e&&(n=e)}return t.mainstay&&t.mainstay.tracer.resolve(t,this,n),n}toString(){return this.display}absolute(e){return[...e.path.slice(0,-this.ancestor),...this.path]}clone(){return new l.Ref(this)}describe(){const e={path:this.path};\"value\"!==this.type&&(e.type=this.type),\".\"!==this.separator&&(e.separator=this.separator),\"value\"===this.type&&1!==this.ancestor&&(e.ancestor=this.ancestor),this.map&&(e.map=[...this.map]);for(const t of[\"adjust\",\"iterables\",\"render\"])null!==this[t]&&void 0!==this[t]&&(e[t]=this[t]);return!1!==this.in&&(e.in=!0),{ref:e}}updateDisplay(){const e=null!==this.key?this.key:\"\";if(\"value\"!==this.type)return void(this.display=\"ref:\".concat(this.type,\":\").concat(e));if(!this.separator)return void(this.display=\"ref:\".concat(e));if(!this.ancestor)return void(this.display=\"ref:\".concat(this.separator).concat(e));if(\"root\"===this.ancestor)return void(this.display=\"ref:root:\".concat(e));if(1===this.ancestor)return void(this.display=\"ref:\".concat(e||\"..\"));const t=new Array(this.ancestor+1).fill(this.separator).join(\"\");this.display=\"ref:\".concat(t).concat(e||\"\")}},l.Ref.prototype[c.symbols.ref]=!0,t.build=function(e){return\"value\"===(e=Object.assign({},l.defaults,e)).type&&void 0===e.ancestor&&(e.ancestor=1),new l.Ref(e)},l.context=function(e,t,r={}){if(e=e.trim(),r){const n=void 0===r.global?\"$\":r.global;if(n!==t&&e.startsWith(n))return{key:e.slice(n.length),type:\"global\"};const A=void 0===r.local?\"#\":r.local;if(A!==t&&e.startsWith(A))return{key:e.slice(A.length),type:\"local\"};const i=void 0===r.root?\"/\":r.root;if(i!==t&&e.startsWith(i))return{key:e.slice(i.length),type:\"value\",root:!0}}return{key:e,type:\"value\"}},l.ancestor=function(e,t){if(!t)return[1,0];if(e[0]!==t)return[1,0];if(e[1]!==t)return[0,1];let r=2;for(;e[r]===t;)++r;return[r-1,r]},t.toSibling=0,t.toParent=1,t.Manager=class{constructor(){this.refs=[]}register(e,n){if(e)if(n=void 0===n?t.toParent:n,Array.isArray(e))for(const t of e)this.register(t,n);else if(c.isSchema(e))for(const t of e._refs.refs)t.ancestor-n>=0&&this.refs.push({ancestor:t.ancestor-n,root:t.root});else t.isRef(e)&&\"value\"===e.type&&e.ancestor-n>=0&&this.refs.push({ancestor:e.ancestor-n,root:e.root}),u=u||r(3328),u.isTemplate(e)&&this.register(e.refs(),n)}get length(){return this.refs.length}clone(){const e=new t.Manager;return e.refs=o(this.refs),e}reset(){this.refs=[]}roots(){return this.refs.filter((e=>!e.ancestor)).map((e=>e.root))}}},3378:(e,t,r)=>{\"use strict\";const n=r(5107),A={};A.wrap=n.string().min(1).max(2).allow(!1),t.preferences=n.object({allowUnknown:n.boolean(),abortEarly:n.boolean(),artifacts:n.boolean(),cache:n.boolean(),context:n.object(),convert:n.boolean(),dateFormat:n.valid(\"date\",\"iso\",\"string\",\"time\",\"utc\"),debug:n.boolean(),errors:{escapeHtml:n.boolean(),label:n.valid(\"path\",\"key\",!1),language:[n.string(),n.object().ref()],render:n.boolean(),stack:n.boolean(),wrap:{label:A.wrap,array:A.wrap,string:A.wrap}},externals:n.boolean(),messages:n.object(),noDefaults:n.boolean(),nonEnumerables:n.boolean(),presence:n.valid(\"required\",\"optional\",\"forbidden\"),skipFunctions:n.boolean(),stripUnknown:n.object({arrays:n.boolean(),objects:n.boolean()}).or(\"arrays\",\"objects\").allow(!0,!1),warnings:n.boolean()}).strict(),A.nameRx=/^[a-zA-Z0-9]\\w*$/,A.rule=n.object({alias:n.array().items(n.string().pattern(A.nameRx)).single(),args:n.array().items(n.string(),n.object({name:n.string().pattern(A.nameRx).required(),ref:n.boolean(),assert:n.alternatives([n.function(),n.object().schema()]).conditional(\"ref\",{is:!0,then:n.required()}),normalize:n.function(),message:n.string().when(\"assert\",{is:n.function(),then:n.required()})})),convert:n.boolean(),manifest:n.boolean(),method:n.function().allow(!1),multi:n.boolean(),validate:n.function()}),t.extension=n.object({type:n.alternatives([n.string(),n.object().regex()]).required(),args:n.function(),cast:n.object().pattern(A.nameRx,n.object({from:n.function().maxArity(1).required(),to:n.function().minArity(1).maxArity(2).required()})),base:n.object().schema().when(\"type\",{is:n.object().regex(),then:n.forbidden()}),coerce:[n.function().maxArity(3),n.object({method:n.function().maxArity(3).required(),from:n.array().items(n.string()).single()})],flags:n.object().pattern(A.nameRx,n.object({setter:n.string(),default:n.any()})),manifest:{build:n.function().arity(2)},messages:[n.object(),n.string()],modifiers:n.object().pattern(A.nameRx,n.function().minArity(1).maxArity(2)),overrides:n.object().pattern(A.nameRx,n.function()),prepare:n.function().maxArity(3),rebuild:n.function().arity(1),rules:n.object().pattern(A.nameRx,A.rule),terms:n.object().pattern(A.nameRx,n.object({init:n.array().allow(null).required(),manifest:n.object().pattern(/.+/,[n.valid(\"schema\",\"single\"),n.object({mapped:n.object({from:n.string().required(),to:n.string().required()}).required()})])})),validate:n.function().maxArity(3)}).strict(),t.extensions=n.array().items(n.object(),n.function().arity(1)).strict(),A.desc={buffer:n.object({buffer:n.string()}),func:n.object({function:n.function().required(),options:{literal:!0}}),override:n.object({override:!0}),ref:n.object({ref:n.object({type:n.valid(\"value\",\"global\",\"local\"),path:n.array().required(),separator:n.string().length(1).allow(!1),ancestor:n.number().min(0).integer().allow(\"root\"),map:n.array().items(n.array().length(2)).min(1),adjust:n.function(),iterables:n.boolean(),in:n.boolean(),render:n.boolean()}).required()}),regex:n.object({regex:n.string().min(3)}),special:n.object({special:n.valid(\"deep\").required()}),template:n.object({template:n.string().required(),options:n.object()}),value:n.object({value:n.alternatives([n.object(),n.array()]).required()})},A.desc.entity=n.alternatives([n.array().items(n.link(\"...\")),n.boolean(),n.function(),n.number(),n.string(),A.desc.buffer,A.desc.func,A.desc.ref,A.desc.regex,A.desc.special,A.desc.template,A.desc.value,n.link(\"/\")]),A.desc.values=n.array().items(null,n.boolean(),n.function(),n.number().allow(1/0,-1/0),n.string().allow(\"\"),n.symbol(),A.desc.buffer,A.desc.func,A.desc.override,A.desc.ref,A.desc.regex,A.desc.template,A.desc.value),A.desc.messages=n.object().pattern(/.+/,[n.string(),A.desc.template,n.object().pattern(/.+/,[n.string(),A.desc.template])]),t.description=n.object({type:n.string().required(),flags:n.object({cast:n.string(),default:n.any(),description:n.string(),empty:n.link(\"/\"),failover:A.desc.entity,id:n.string(),label:n.string(),only:!0,presence:[\"optional\",\"required\",\"forbidden\"],result:[\"raw\",\"strip\"],strip:n.boolean(),unit:n.string()}).unknown(),preferences:{allowUnknown:n.boolean(),abortEarly:n.boolean(),artifacts:n.boolean(),cache:n.boolean(),convert:n.boolean(),dateFormat:[\"date\",\"iso\",\"string\",\"time\",\"utc\"],errors:{escapeHtml:n.boolean(),label:[\"path\",\"key\"],language:[n.string(),A.desc.ref],wrap:{label:A.wrap,array:A.wrap}},externals:n.boolean(),messages:A.desc.messages,noDefaults:n.boolean(),nonEnumerables:n.boolean(),presence:[\"required\",\"optional\",\"forbidden\"],skipFunctions:n.boolean(),stripUnknown:n.object({arrays:n.boolean(),objects:n.boolean()}).or(\"arrays\",\"objects\").allow(!0,!1),warnings:n.boolean()},allow:A.desc.values,invalid:A.desc.values,rules:n.array().min(1).items({name:n.string().required(),args:n.object().min(1),keep:n.boolean(),message:[n.string(),A.desc.messages],warn:n.boolean()}),keys:n.object().pattern(/.*/,n.link(\"/\")),link:A.desc.ref}).pattern(/^[a-z]\\w*$/,n.any())},493:(e,t,r)=>{\"use strict\";const n=r(8571),A=r(9621),i=r(8160),s={value:Symbol(\"value\")};e.exports=s.State=class{constructor(e,t,r){this.path=e,this.ancestors=t,this.mainstay=r.mainstay,this.schemas=r.schemas,this.debug=null}localize(e,t=null,r=null){const n=new s.State(e,t,this);return r&&n.schemas&&(n.schemas=[s.schemas(r),...n.schemas]),n}nest(e,t){const r=new s.State(this.path,this.ancestors,this);return r.schemas=r.schemas&&[s.schemas(e),...r.schemas],r.debug=t,r}shadow(e,t){this.mainstay.shadow=this.mainstay.shadow||new s.Shadow,this.mainstay.shadow.set(this.path,e,t)}snapshot(){this.mainstay.shadow&&(this._snapshot=n(this.mainstay.shadow.node(this.path)))}restore(){this.mainstay.shadow&&(this.mainstay.shadow.override(this.path,this._snapshot),this._snapshot=void 0)}},s.schemas=function(e){return i.isSchema(e)?{schema:e}:e},s.Shadow=class{constructor(){this._values=null}set(e,t,r){if(!e.length)return;if(\"strip\"===r&&\"number\"==typeof e[e.length-1])return;this._values=this._values||new Map;let n=this._values;for(let t=0;t<e.length;++t){const r=e[t];let A=n.get(r);A||(A=new Map,n.set(r,A)),n=A}n[s.value]=t}get(e){const t=this.node(e);if(t)return t[s.value]}node(e){if(this._values)return A(this._values,e,{iterables:!0})}override(e,t){if(!this._values)return;const r=e.slice(0,-1),n=e[e.length-1],i=A(this._values,r,{iterables:!0});t?i.set(n,t):i&&i.delete(n)}}},3328:(e,t,r)=>{\"use strict\";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function A(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const s=r(375),o=r(8571),a=r(5277),c=r(1447),u=r(8160),l=r(6354),g=r(6133),h={symbol:Symbol(\"template\"),opens:new Array(1e3).join(\"\\0\"),closes:new Array(1e3).join(\"\u0001\"),dateFormat:{date:Date.prototype.toDateString,iso:Date.prototype.toISOString,string:Date.prototype.toString,time:Date.prototype.toTimeString,utc:Date.prototype.toUTCString}};e.exports=h.Template=class{constructor(e,t){s(\"string\"==typeof e,\"Template source must be a string\"),s(!e.includes(\"\\0\")&&!e.includes(\"\u0001\"),\"Template source cannot contain reserved control characters\"),this.source=e,this.rendered=e,this._template=null,this._settings=o(t),this._parse()}_parse(){if(!this.source.includes(\"{\"))return;const e=h.encode(this.source),t=h.split(e);let r=!1;const n=[],A=t.shift();A&&n.push(A);for(const e of t){const t=\"{\"!==e[0],A=t?\"}\":\"}}\",i=e.indexOf(A);if(-1===i||\"{\"===e[1]){n.push(\"{\".concat(h.decode(e)));continue}let s=e.slice(t?0:1,i);const o=\":\"===s[0];o&&(s=s.slice(1));const a=this._ref(h.decode(s),{raw:t,wrapped:o});n.push(a),\"string\"!=typeof a&&(r=!0);const c=e.slice(i+A.length);c&&n.push(h.decode(c))}r?this._template=n:this.rendered=n.join(\"\")}static date(e,t){return h.dateFormat[t.dateFormat].call(e)}describe(e={}){if(!this._settings&&e.compact)return this.source;const t={template:this.source};return this._settings&&(t.options=this._settings),t}static build(e){return new h.Template(e.template,e.options)}isDynamic(){return!!this._template}static isTemplate(e){return!!e&&!!e[u.symbols.template]}refs(){if(!this._template)return;const e=[];for(const t of this._template)\"string\"!=typeof t&&e.push(...t.refs);return e}resolve(e,t,r,n){return this._template&&1===this._template.length?this._part(this._template[0],e,t,r,n,{}):this.render(e,t,r,n)}_part(e,...t){return e.ref?e.ref.resolve(...t):e.formula.evaluate(t)}render(e,t,r,n,A={}){if(!this.isDynamic())return this.rendered;const i=[];for(const s of this._template)if(\"string\"==typeof s)i.push(s);else{const o=this._part(s,e,t,r,n,A),c=h.stringify(o,e,t,r,n,A);if(void 0!==c){const e=s.raw||!1===(A.errors&&A.errors.escapeHtml)?c:a(c);i.push(h.wrap(e,s.wrapped&&r.errors.wrap.label))}}return i.join(\"\")}_ref(e,{raw:t,wrapped:r}){const n=[],A=e=>{const t=g.create(e,this._settings);return n.push(t),e=>t.resolve(...e)};try{var i=new c.Parser(e,{reference:A,functions:h.functions,constants:h.constants})}catch(t){throw t.message='Invalid template variable \"'.concat(e,'\" fails due to: ').concat(t.message),t}if(i.single){if(\"reference\"===i.single.type){const e=n[0];return{ref:e,raw:t,refs:n,wrapped:r||\"local\"===e.type&&\"label\"===e.key}}return h.stringify(i.single.value)}return{formula:i,raw:t,refs:n}}toString(){return this.source}},h.Template.prototype[u.symbols.template]=!0,h.Template.prototype.isImmutable=!0,h.encode=function(e){return e.replace(/\\\\(\\{+)/g,((e,t)=>h.opens.slice(0,t.length))).replace(/\\\\(\\}+)/g,((e,t)=>h.closes.slice(0,t.length)))},h.decode=function(e){return e.replace(/\\u0000/g,\"{\").replace(/\\u0001/g,\"}\")},h.split=function(e){const t=[];let r=\"\";for(let n=0;n<e.length;++n){const A=e[n];if(\"{\"===A){let A=\"\";for(;n+1<e.length&&\"{\"===e[n+1];)A+=\"{\",++n;t.push(r),r=A}else r+=A}return t.push(r),t},h.wrap=function(e,t){return t?1===t.length?\"\".concat(t).concat(e).concat(t):\"\".concat(t[0]).concat(e).concat(t[1]):e},h.stringify=function(e,t,r,n,i,s={}){const o=typeof e,a=n&&n.errors&&n.errors.wrap||{};let c=!1;if(g.isRef(e)&&e.render&&(c=e.in,e=e.resolve(t,r,n,i,A({in:e.in},s))),null===e)return\"null\";if(\"string\"===o)return h.wrap(e,s.arrayItems&&a.string);if(\"number\"===o||\"function\"===o||\"symbol\"===o)return e.toString();if(\"object\"!==o)return JSON.stringify(e);if(e instanceof Date)return h.Template.date(e,n);if(e instanceof Map){const t=[];for(const[r,n]of e.entries())t.push(\"\".concat(r.toString(),\" -> \").concat(n.toString()));e=t}if(!Array.isArray(e))return e.toString();const u=[];for(const o of e)u.push(h.stringify(o,t,r,n,i,A({arrayItems:!0},s)));return h.wrap(u.join(\", \"),!c&&a.array)},h.constants={true:!0,false:!1,null:null,second:1e3,minute:6e4,hour:36e5,day:864e5},h.functions={if:(e,t,r)=>e?t:r,length:e=>\"string\"==typeof e?e.length:e&&\"object\"==typeof e?Array.isArray(e)?e.length:Object.keys(e).length:null,msg(e){const[t,r,n,A,i]=this,s=i.messages;if(!s)return\"\";const o=l.template(t,s[0],e,r,n)||l.template(t,s[1],e,r,n);return o?o.render(t,r,n,A,i):\"\"},number:e=>\"number\"==typeof e?e:\"string\"==typeof e?parseFloat(e):\"boolean\"==typeof e?e?1:0:e instanceof Date?e.getTime():null}},4946:(e,t,r)=>{\"use strict\";const n=r(375),A=r(1687),i=r(8068),s=r(8160),o=r(3292),a=r(6354),c=r(6133),u={};e.exports=i.extend({type:\"alternatives\",flags:{match:{default:\"any\"}},terms:{matches:{init:[],register:c.toSibling}},args:(e,...t)=>1===t.length&&Array.isArray(t[0])?e.try(...t[0]):e.try(...t),validate(e,t){const{schema:r,error:n,state:i,prefs:s}=t;if(r._flags.match){const t=[],o=[];for(let n=0;n<r.$_terms.matches.length;++n){const A=r.$_terms.matches[n],a=i.nest(A.schema,\"match.\".concat(n));a.snapshot();const c=A.schema.$_validate(e,a,s);c.errors?(o.push(c.errors),a.restore()):t.push(c.value)}if(0===t.length)return{errors:n(\"alternatives.any\",{details:o.map((e=>a.details(e,{override:!1})))})};if(\"one\"===r._flags.match)return 1===t.length?{value:t[0]}:{errors:n(\"alternatives.one\")};if(t.length!==r.$_terms.matches.length)return{errors:n(\"alternatives.all\",{details:o.map((e=>a.details(e,{override:!1})))})};const c=e=>e.$_terms.matches.some((e=>\"object\"===e.schema.type||\"alternatives\"===e.schema.type&&c(e.schema)));return c(r)?{value:t.reduce(((e,t)=>A(e,t,{mergeArrays:!1})))}:{value:t[t.length-1]}}const o=[];for(let t=0;t<r.$_terms.matches.length;++t){const n=r.$_terms.matches[t];if(n.schema){const r=i.nest(n.schema,\"match.\".concat(t));r.snapshot();const A=n.schema.$_validate(e,r,s);if(!A.errors)return A;r.restore(),o.push({schema:n.schema,reports:A.errors});continue}const A=n.ref?n.ref.resolve(e,i,s):e,a=n.is?[n]:n.switch;for(let r=0;r<a.length;++r){const o=a[r],{is:c,then:u,otherwise:l}=o,g=\"match.\".concat(t).concat(n.switch?\".\"+r:\"\");if(c.$_match(A,i.nest(c,\"\".concat(g,\".is\")),s)){if(u)return u.$_validate(e,i.nest(u,\"\".concat(g,\".then\")),s)}else if(l)return l.$_validate(e,i.nest(l,\"\".concat(g,\".otherwise\")),s)}}return u.errors(o,t)},rules:{conditional:{method(e,t){n(!this._flags._endedSwitch,\"Unreachable condition\"),n(!this._flags.match,\"Cannot combine match mode\",this._flags.match,\"with conditional rule\"),n(void 0===t.break,\"Cannot use break option with alternatives conditional\");const r=this.clone(),A=o.when(r,e,t),i=A.is?[A]:A.switch;for(const e of i)if(e.then&&e.otherwise){r.$_setFlag(\"_endedSwitch\",!0,{clone:!1});break}return r.$_terms.matches.push(A),r.$_mutateRebuild()}},match:{method(e){if(n([\"any\",\"one\",\"all\"].includes(e),\"Invalid alternatives match mode\",e),\"any\"!==e)for(const t of this.$_terms.matches)n(t.schema,\"Cannot combine match mode\",e,\"with conditional rules\");return this.$_setFlag(\"match\",e)}},try:{method(...e){n(e.length,\"Missing alternative schemas\"),s.verifyFlat(e,\"try\"),n(!this._flags._endedSwitch,\"Unreachable condition\");const t=this.clone();for(const r of e)t.$_terms.matches.push({schema:t.$_compile(r)});return t.$_mutateRebuild()}}},overrides:{label(e){return this.$_parent(\"label\",e).$_modify({each:(t,r)=>\"is\"!==r.path[0]?t.label(e):void 0,ref:!1})}},rebuild(e){e.$_modify({each:t=>{s.isSchema(t)&&\"array\"===t.type&&e.$_setFlag(\"_arrayItems\",!0,{clone:!1})}})},manifest:{build(e,t){if(t.matches)for(const r of t.matches){const{schema:t,ref:n,is:A,not:i,then:s,otherwise:o}=r;e=t?e.try(t):n?e.conditional(n,{is:A,then:s,not:i,otherwise:o,switch:r.switch}):e.conditional(A,{then:s,otherwise:o})}return e}},messages:{\"alternatives.all\":\"{{#label}} does not match all of the required types\",\"alternatives.any\":\"{{#label}} does not match any of the allowed types\",\"alternatives.match\":\"{{#label}} does not match any of the allowed types\",\"alternatives.one\":\"{{#label}} matches more than one allowed type\",\"alternatives.types\":\"{{#label}} must be one of {{#types}}\"}}),u.errors=function(e,{error:t,state:r}){if(!e.length)return{errors:t(\"alternatives.any\")};if(1===e.length)return{errors:e[0].reports};const n=new Set,A=[];for(const{reports:i,schema:s}of e){if(i.length>1)return u.unmatched(e,t);const o=i[0];if(o instanceof a.Report==0)return u.unmatched(e,t);if(o.state.path.length!==r.path.length){A.push({type:s.type,report:o});continue}if(\"any.only\"===o.code){for(const e of o.local.valids)n.add(e);continue}const[c,l]=o.code.split(\".\");\"base\"===l?n.add(c):A.push({type:s.type,report:o})}return A.length?1===A.length?{errors:A[0].report}:u.unmatched(e,t):{errors:t(\"alternatives.types\",{types:[...n]})}},u.unmatched=function(e,t){const r=[];for(const t of e)r.push(...t.reports);return{errors:t(\"alternatives.match\",a.details(r,{override:!1}))}}},8068:(e,t,r)=>{\"use strict\";const n=r(375),A=r(7629),i=r(8160),s=r(6914);e.exports=A.extend({type:\"any\",flags:{only:{default:!1}},terms:{alterations:{init:null},examples:{init:null},externals:{init:null},metas:{init:[]},notes:{init:[]},shared:{init:null},tags:{init:[]},whens:{init:null}},rules:{custom:{method(e,t){return n(\"function\"==typeof e,\"Method must be a function\"),n(void 0===t||t&&\"string\"==typeof t,\"Description must be a non-empty string\"),this.$_addRule({name:\"custom\",args:{method:e,description:t}})},validate(e,t,{method:r}){try{return r(e,t)}catch(e){return t.error(\"any.custom\",{error:e})}},args:[\"method\",\"description\"],multi:!0},messages:{method(e){return this.prefs({messages:e})}},shared:{method(e){n(i.isSchema(e)&&e._flags.id,\"Schema must be a schema with an id\");const t=this.clone();return t.$_terms.shared=t.$_terms.shared||[],t.$_terms.shared.push(e),t.$_mutateRegister(e),t}},warning:{method(e,t){return n(e&&\"string\"==typeof e,\"Invalid warning code\"),this.$_addRule({name:\"warning\",args:{code:e,local:t},warn:!0})},validate:(e,t,{code:r,local:n})=>t.error(r,n),args:[\"code\",\"local\"],multi:!0}},modifiers:{keep(e,t=!0){e.keep=t},message(e,t){e.message=s.compile(t)},warn(e,t=!0){e.warn=t}},manifest:{build(e,t){for(const r in t){const n=t[r];if([\"examples\",\"externals\",\"metas\",\"notes\",\"tags\"].includes(r))for(const t of n)e=e[r.slice(0,-1)](t);else if(\"alterations\"!==r)if(\"whens\"!==r){if(\"shared\"===r)for(const t of n)e=e.shared(t)}else for(const t of n){const{ref:r,is:n,not:A,then:i,otherwise:s,concat:o}=t;e=o?e.concat(o):r?e.when(r,{is:n,not:A,then:i,otherwise:s,switch:t.switch,break:t.break}):e.when(n,{then:i,otherwise:s,break:t.break})}else{const t={};for(const{target:e,adjuster:r}of n)t[e]=r;e=e.alter(t)}}return e}},messages:{\"any.custom\":\"{{#label}} failed custom validation because {{#error.message}}\",\"any.default\":\"{{#label}} threw an error when running default method\",\"any.failover\":\"{{#label}} threw an error when running failover method\",\"any.invalid\":\"{{#label}} contains an invalid value\",\"any.only\":'{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\"any.ref\":\"{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}\",\"any.required\":\"{{#label}} is required\",\"any.unknown\":\"{{#label}} is not allowed\"}})},546:(e,t,r)=>{\"use strict\";const n=r(375),A=r(9474),i=r(9621),s=r(8068),o=r(8160),a=r(3292),c={};e.exports=s.extend({type:\"array\",flags:{single:{default:!1},sparse:{default:!1}},terms:{items:{init:[],manifest:\"schema\"},ordered:{init:[],manifest:\"schema\"},_exclusions:{init:[]},_inclusions:{init:[]},_requireds:{init:[]}},coerce:{from:\"object\",method(e,{schema:t,state:r,prefs:n}){if(!Array.isArray(e))return;const A=t.$_getRule(\"sort\");return A?c.sort(t,e,A.args.options,r,n):void 0}},validate(e,{schema:t,error:r}){if(!Array.isArray(e)){if(t._flags.single){const t=[e];return t[o.symbols.arraySingle]=!0,{value:t}}return{errors:r(\"array.base\")}}if(t.$_getRule(\"items\")||t.$_terms.externals)return{value:e.slice()}},rules:{has:{method(e){e=this.$_compile(e,{appendPath:!0});const t=this.$_addRule({name:\"has\",args:{schema:e}});return t.$_mutateRegister(e),t},validate(e,{state:t,prefs:r,error:n},{schema:A}){const i=[e,...t.ancestors];for(let n=0;n<e.length;++n){const s=t.localize([...t.path,n],i,A);if(A.$_match(e[n],s,r))return e}const s=A._flags.label;return s?n(\"array.hasKnown\",{patternLabel:s}):n(\"array.hasUnknown\",null)},multi:!0},items:{method(...e){o.verifyFlat(e,\"items\");const t=this.$_addRule(\"items\");for(let r=0;r<e.length;++r){const n=o.tryWithPath((()=>this.$_compile(e[r])),r,{append:!0});t.$_terms.items.push(n)}return t.$_mutateRebuild()},validate(e,{schema:t,error:r,state:n,prefs:A,errorsArray:i}){const s=t.$_terms._requireds.slice(),a=t.$_terms.ordered.slice(),u=[...t.$_terms._inclusions,...s],l=!e[o.symbols.arraySingle];delete e[o.symbols.arraySingle];const g=i();let h=e.length;for(let i=0;i<h;++i){const o=e[i];let f=!1,B=!1;const I=l?i:new Number(i),d=[...n.path,I];if(!t._flags.sparse&&void 0===o){if(g.push(r(\"array.sparse\",{key:I,path:d,pos:i,value:void 0},n.localize(d))),A.abortEarly)return g;a.shift();continue}const p=[e,...n.ancestors];for(const e of t.$_terms._exclusions)if(e.$_match(o,n.localize(d,p,e),A,{presence:\"ignore\"})){if(g.push(r(\"array.excludes\",{pos:i,value:o},n.localize(d))),A.abortEarly)return g;f=!0,a.shift();break}if(f)continue;if(t.$_terms.ordered.length){if(a.length){const s=a.shift(),u=s.$_validate(o,n.localize(d,p,s),A);if(u.errors){if(g.push(...u.errors),A.abortEarly)return g}else if(\"strip\"===s._flags.result)c.fastSplice(e,i),--i,--h;else{if(!t._flags.sparse&&void 0===u.value){if(g.push(r(\"array.sparse\",{key:I,path:d,pos:i,value:void 0},n.localize(d))),A.abortEarly)return g;continue}e[i]=u.value}continue}if(!t.$_terms.items.length){if(g.push(r(\"array.orderedLength\",{pos:i,limit:t.$_terms.ordered.length})),A.abortEarly)return g;break}}const E=[];let Q=s.length;for(let a=0;a<Q;++a){const u=n.localize(d,p,s[a]);u.snapshot();const l=s[a].$_validate(o,u,A);if(E[a]=l,!l.errors){if(e[i]=l.value,B=!0,c.fastSplice(s,a),--a,--Q,!t._flags.sparse&&void 0===l.value&&(g.push(r(\"array.sparse\",{key:I,path:d,pos:i,value:void 0},n.localize(d))),A.abortEarly))return g;break}u.restore()}if(B)continue;const m=A.stripUnknown&&!!A.stripUnknown.arrays||!1;Q=u.length;for(const a of u){let u;const l=s.indexOf(a);if(-1!==l)u=E[l];else{const s=n.localize(d,p,a);if(s.snapshot(),u=a.$_validate(o,s,A),!u.errors){\"strip\"===a._flags.result?(c.fastSplice(e,i),--i,--h):t._flags.sparse||void 0!==u.value?e[i]=u.value:(g.push(r(\"array.sparse\",{key:I,path:d,pos:i,value:void 0},n.localize(d))),f=!0),B=!0;break}s.restore()}if(1===Q){if(m){c.fastSplice(e,i),--i,--h,B=!0;break}if(g.push(...u.errors),A.abortEarly)return g;f=!0;break}}if(!f&&(t.$_terms._inclusions.length||t.$_terms._requireds.length)&&!B){if(m){c.fastSplice(e,i),--i,--h;continue}if(g.push(r(\"array.includes\",{pos:i,value:o},n.localize(d))),A.abortEarly)return g}}return s.length&&c.fillMissedErrors(t,g,s,e,n,A),a.length&&(c.fillOrderedErrors(t,g,a,e,n,A),g.length||c.fillDefault(a,e,n,A)),g.length?g:e},priority:!0,manifest:!1},length:{method(e){return this.$_addRule({name:\"length\",args:{limit:e},operator:\"=\"})},validate:(e,t,{limit:r},{name:n,operator:A,args:i})=>o.compare(e.length,r,A)?e:t.error(\"array.\"+n,{limit:i.limit,value:e}),args:[{name:\"limit\",ref:!0,assert:o.limit,message:\"must be a positive integer\"}]},max:{method(e){return this.$_addRule({name:\"max\",method:\"length\",args:{limit:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"length\",args:{limit:e},operator:\">=\"})}},ordered:{method(...e){o.verifyFlat(e,\"ordered\");const t=this.$_addRule(\"items\");for(let r=0;r<e.length;++r){const n=o.tryWithPath((()=>this.$_compile(e[r])),r,{append:!0});c.validateSingle(n,t),t.$_mutateRegister(n),t.$_terms.ordered.push(n)}return t.$_mutateRebuild()}},single:{method(e){const t=void 0===e||!!e;return n(!t||!this._flags._arrayItems,\"Cannot specify single rule when array has array items\"),this.$_setFlag(\"single\",t)}},sort:{method(e={}){o.assertOptions(e,[\"by\",\"order\"]);const t={order:e.order||\"ascending\"};return e.by&&(t.by=a.ref(e.by,{ancestor:0}),n(!t.by.ancestor,\"Cannot sort by ancestor\")),this.$_addRule({name:\"sort\",args:{options:t}})},validate(e,{error:t,state:r,prefs:n,schema:A},{options:i}){const{value:s,errors:o}=c.sort(A,e,i,r,n);if(o)return o;for(let r=0;r<e.length;++r)if(e[r]!==s[r])return t(\"array.sort\",{order:i.order,by:i.by?i.by.key:\"value\"});return e},convert:!0},sparse:{method(e){const t=void 0===e||!!e;return this._flags.sparse===t?this:(t?this.clone():this.$_addRule(\"items\")).$_setFlag(\"sparse\",t,{clone:!1})}},unique:{method(e,t={}){n(!e||\"function\"==typeof e||\"string\"==typeof e,\"comparator must be a function or a string\"),o.assertOptions(t,[\"ignoreUndefined\",\"separator\"]);const r={name:\"unique\",args:{options:t,comparator:e}};if(e)if(\"string\"==typeof e){const n=o.default(t.separator,\".\");r.path=n?e.split(n):[e]}else r.comparator=e;return this.$_addRule(r)},validate(e,{state:t,error:r,schema:s},{comparator:o,options:a},{comparator:c,path:u}){const l={string:Object.create(null),number:Object.create(null),undefined:Object.create(null),boolean:Object.create(null),object:new Map,function:new Map,custom:new Map},g=c||A,h=a.ignoreUndefined;for(let A=0;A<e.length;++A){const s=u?i(e[A],u):e[A],a=c?l.custom:l[typeof s];if(n(a,\"Failed to find unique map container for type\",typeof s),a instanceof Map){const n=a.entries();let i;for(;!(i=n.next()).done;)if(g(i.value[0],s)){const n=t.localize([...t.path,A],[e,...t.ancestors]),s={pos:A,value:e[A],dupePos:i.value[1],dupeValue:e[i.value[1]]};return u&&(s.path=o),r(\"array.unique\",s,n)}a.set(s,A)}else{if((!h||void 0!==s)&&void 0!==a[s]){const n={pos:A,value:e[A],dupePos:a[s],dupeValue:e[a[s]]};return u&&(n.path=o),r(\"array.unique\",n,t.localize([...t.path,A],[e,...t.ancestors]))}a[s]=A}}return e},args:[\"comparator\",\"options\"],multi:!0}},cast:{set:{from:Array.isArray,to:(e,t)=>new Set(e)}},rebuild(e){e.$_terms._inclusions=[],e.$_terms._exclusions=[],e.$_terms._requireds=[];for(const t of e.$_terms.items)c.validateSingle(t,e),\"required\"===t._flags.presence?e.$_terms._requireds.push(t):\"forbidden\"===t._flags.presence?e.$_terms._exclusions.push(t):e.$_terms._inclusions.push(t);for(const t of e.$_terms.ordered)c.validateSingle(t,e)},manifest:{build:(e,t)=>(t.items&&(e=e.items(...t.items)),t.ordered&&(e=e.ordered(...t.ordered)),e)},messages:{\"array.base\":\"{{#label}} must be an array\",\"array.excludes\":\"{{#label}} contains an excluded value\",\"array.hasKnown\":\"{{#label}} does not contain at least one required match for type {:#patternLabel}\",\"array.hasUnknown\":\"{{#label}} does not contain at least one required match\",\"array.includes\":\"{{#label}} does not match any of the allowed types\",\"array.includesRequiredBoth\":\"{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)\",\"array.includesRequiredKnowns\":\"{{#label}} does not contain {{#knownMisses}}\",\"array.includesRequiredUnknowns\":\"{{#label}} does not contain {{#unknownMisses}} required value(s)\",\"array.length\":\"{{#label}} must contain {{#limit}} items\",\"array.max\":\"{{#label}} must contain less than or equal to {{#limit}} items\",\"array.min\":\"{{#label}} must contain at least {{#limit}} items\",\"array.orderedLength\":\"{{#label}} must contain at most {{#limit}} items\",\"array.sort\":\"{{#label}} must be sorted in {#order} order by {{#by}}\",\"array.sort.mismatching\":\"{{#label}} cannot be sorted due to mismatching types\",\"array.sort.unsupported\":\"{{#label}} cannot be sorted due to unsupported type {#type}\",\"array.sparse\":\"{{#label}} must not be a sparse array item\",\"array.unique\":\"{{#label}} contains a duplicate value\"}}),c.fillMissedErrors=function(e,t,r,n,A,i){const s=[];let o=0;for(const e of r){const t=e._flags.label;t?s.push(t):++o}s.length?o?t.push(e.$_createError(\"array.includesRequiredBoth\",n,{knownMisses:s,unknownMisses:o},A,i)):t.push(e.$_createError(\"array.includesRequiredKnowns\",n,{knownMisses:s},A,i)):t.push(e.$_createError(\"array.includesRequiredUnknowns\",n,{unknownMisses:o},A,i))},c.fillOrderedErrors=function(e,t,r,n,A,i){const s=[];for(const e of r)\"required\"===e._flags.presence&&s.push(e);s.length&&c.fillMissedErrors(e,t,s,n,A,i)},c.fillDefault=function(e,t,r,n){const A=[];let i=!0;for(let s=e.length-1;s>=0;--s){const o=e[s],a=[t,...r.ancestors],c=o.$_validate(void 0,r.localize(r.path,a,o),n).value;if(i){if(void 0===c)continue;i=!1}A.unshift(c)}A.length&&t.push(...A)},c.fastSplice=function(e,t){let r=t;for(;r<e.length;)e[r++]=e[r];--e.length},c.validateSingle=function(e,t){(\"array\"===e.type||e._flags._arrayItems)&&(n(!t._flags.single,\"Cannot specify array item with single rule enabled\"),t.$_setFlag(\"_arrayItems\",!0,{clone:!1}))},c.sort=function(e,t,r,n,A){const i=\"ascending\"===r.order?1:-1,s=-1*i,o=i,a=(a,u)=>{let l=c.compare(a,u,s,o);if(null!==l)return l;if(r.by&&(a=r.by.resolve(a,n,A),u=r.by.resolve(u,n,A)),l=c.compare(a,u,s,o),null!==l)return l;const g=typeof a;if(g!==typeof u)throw e.$_createError(\"array.sort.mismatching\",t,null,n,A);if(\"number\"!==g&&\"string\"!==g)throw e.$_createError(\"array.sort.unsupported\",t,{type:g},n,A);return\"number\"===g?(a-u)*i:a<u?s:o};try{return{value:t.slice().sort(a)}}catch(e){return{errors:e}}},c.compare=function(e,t,r,n){return e===t?0:void 0===e?1:void 0===t?-1:null===e?n:null===t?r:null}},4937:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8068),i=r(8160),s=r(2036),o={isBool:function(e){return\"boolean\"==typeof e}};e.exports=A.extend({type:\"boolean\",flags:{sensitive:{default:!1}},terms:{falsy:{init:null,manifest:\"values\"},truthy:{init:null,manifest:\"values\"}},coerce(e,{schema:t}){if(\"boolean\"!=typeof e){if(\"string\"==typeof e){const r=t._flags.sensitive?e:e.toLowerCase();e=\"true\"===r||\"false\"!==r&&e}return\"boolean\"!=typeof e&&(e=t.$_terms.truthy&&t.$_terms.truthy.has(e,null,null,!t._flags.sensitive)||(!t.$_terms.falsy||!t.$_terms.falsy.has(e,null,null,!t._flags.sensitive))&&e),{value:e}}},validate(e,{error:t}){if(\"boolean\"!=typeof e)return{value:e,errors:t(\"boolean.base\")}},rules:{truthy:{method(...e){i.verifyFlat(e,\"truthy\");const t=this.clone();t.$_terms.truthy=t.$_terms.truthy||new s;for(let r=0;r<e.length;++r){const A=e[r];n(void 0!==A,\"Cannot call truthy with undefined\"),t.$_terms.truthy.add(A)}return t}},falsy:{method(...e){i.verifyFlat(e,\"falsy\");const t=this.clone();t.$_terms.falsy=t.$_terms.falsy||new s;for(let r=0;r<e.length;++r){const A=e[r];n(void 0!==A,\"Cannot call falsy with undefined\"),t.$_terms.falsy.add(A)}return t}},sensitive:{method(e=!0){return this.$_setFlag(\"sensitive\",e)}}},cast:{number:{from:o.isBool,to:(e,t)=>e?1:0},string:{from:o.isBool,to:(e,t)=>e?\"true\":\"false\"}},manifest:{build:(e,t)=>(t.truthy&&(e=e.truthy(...t.truthy)),t.falsy&&(e=e.falsy(...t.falsy)),e)},messages:{\"boolean.base\":\"{{#label}} must be a boolean\"}})},7500:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8068),i=r(8160),s=r(3328),o={isDate:function(e){return e instanceof Date}};e.exports=A.extend({type:\"date\",coerce:{from:[\"number\",\"string\"],method:(e,{schema:t})=>({value:o.parse(e,t._flags.format)||e})},validate(e,{schema:t,error:r,prefs:n}){if(e instanceof Date&&!isNaN(e.getTime()))return;const A=t._flags.format;return n.convert&&A&&\"string\"==typeof e?{value:e,errors:r(\"date.format\",{format:A})}:{value:e,errors:r(\"date.base\")}},rules:{compare:{method:!1,validate(e,t,{date:r},{name:n,operator:A,args:s}){const o=\"now\"===r?Date.now():r.getTime();return i.compare(e.getTime(),o,A)?e:t.error(\"date.\"+n,{limit:s.date,value:e})},args:[{name:\"date\",ref:!0,normalize:e=>\"now\"===e?e:o.parse(e),assert:e=>null!==e,message:\"must have a valid date format\"}]},format:{method(e){return n([\"iso\",\"javascript\",\"unix\"].includes(e),\"Unknown date format\",e),this.$_setFlag(\"format\",e)}},greater:{method(e){return this.$_addRule({name:\"greater\",method:\"compare\",args:{date:e},operator:\">\"})}},iso:{method(){return this.format(\"iso\")}},less:{method(e){return this.$_addRule({name:\"less\",method:\"compare\",args:{date:e},operator:\"<\"})}},max:{method(e){return this.$_addRule({name:\"max\",method:\"compare\",args:{date:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"compare\",args:{date:e},operator:\">=\"})}},timestamp:{method(e=\"javascript\"){return n([\"javascript\",\"unix\"].includes(e),'\"type\" must be one of \"javascript, unix\"'),this.format(e)}}},cast:{number:{from:o.isDate,to:(e,t)=>e.getTime()},string:{from:o.isDate,to:(e,{prefs:t})=>s.date(e,t)}},messages:{\"date.base\":\"{{#label}} must be a valid date\",\"date.format\":'{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format',\"date.greater\":\"{{#label}} must be greater than {{:#limit}}\",\"date.less\":\"{{#label}} must be less than {{:#limit}}\",\"date.max\":\"{{#label}} must be less than or equal to {{:#limit}}\",\"date.min\":\"{{#label}} must be greater than or equal to {{:#limit}}\",\"date.format.iso\":\"ISO 8601 date\",\"date.format.javascript\":\"timestamp or number of milliseconds\",\"date.format.unix\":\"timestamp or number of seconds\"}}),o.parse=function(e,t){if(e instanceof Date)return e;if(\"string\"!=typeof e&&(isNaN(e)||!isFinite(e)))return null;if(/^\\s*$/.test(e))return null;if(\"iso\"===t)return i.isIsoDate(e)?o.date(e.toString()):null;const r=e;if(\"string\"==typeof e&&/^[+-]?\\d+(\\.\\d+)?$/.test(e)&&(e=parseFloat(e)),t){if(\"javascript\"===t)return o.date(1*e);if(\"unix\"===t)return o.date(1e3*e);if(\"string\"==typeof r)return null}return o.date(e)},o.date=function(e){const t=new Date(e);return isNaN(t.getTime())?null:t}},390:(e,t,r)=>{\"use strict\";const n=r(375),A=r(7824);e.exports=A.extend({type:\"function\",properties:{typeof:\"function\"},rules:{arity:{method(e){return n(Number.isSafeInteger(e)&&e>=0,\"n must be a positive integer\"),this.$_addRule({name:\"arity\",args:{n:e}})},validate:(e,t,{n:r})=>e.length===r?e:t.error(\"function.arity\",{n:r})},class:{method(){return this.$_addRule(\"class\")},validate:(e,t)=>/^\\s*class\\s/.test(e.toString())?e:t.error(\"function.class\",{value:e})},minArity:{method(e){return n(Number.isSafeInteger(e)&&e>0,\"n must be a strict positive integer\"),this.$_addRule({name:\"minArity\",args:{n:e}})},validate:(e,t,{n:r})=>e.length>=r?e:t.error(\"function.minArity\",{n:r})},maxArity:{method(e){return n(Number.isSafeInteger(e)&&e>=0,\"n must be a positive integer\"),this.$_addRule({name:\"maxArity\",args:{n:e}})},validate:(e,t,{n:r})=>e.length<=r?e:t.error(\"function.maxArity\",{n:r})}},messages:{\"function.arity\":\"{{#label}} must have an arity of {{#n}}\",\"function.class\":\"{{#label}} must be a class\",\"function.maxArity\":\"{{#label}} must have an arity lesser or equal to {{#n}}\",\"function.minArity\":\"{{#label}} must have an arity greater or equal to {{#n}}\"}})},7824:(e,t,r)=>{\"use strict\";const n=r(978),A=r(375),i=r(8571),s=r(3652),o=r(8068),a=r(8160),c=r(3292),u=r(6354),l=r(6133),g=r(3328),h={renameDefaults:{alias:!1,multiple:!1,override:!1}};e.exports=o.extend({type:\"_keys\",properties:{typeof:\"object\"},flags:{unknown:{default:!1}},terms:{dependencies:{init:null},keys:{init:null,manifest:{mapped:{from:\"schema\",to:\"key\"}}},patterns:{init:null},renames:{init:null}},args:(e,t)=>e.keys(t),validate(e,{schema:t,error:r,state:n,prefs:A}){if(!e||typeof e!==t.$_property(\"typeof\")||Array.isArray(e))return{value:e,errors:r(\"object.base\",{type:t.$_property(\"typeof\")})};if(!(t.$_terms.renames||t.$_terms.dependencies||t.$_terms.keys||t.$_terms.patterns||t.$_terms.externals))return;e=h.clone(e,A);const i=[];if(t.$_terms.renames&&!h.rename(t,e,n,A,i))return{value:e,errors:i};if(!t.$_terms.keys&&!t.$_terms.patterns&&!t.$_terms.dependencies)return{value:e,errors:i};const s=new Set(Object.keys(e));if(t.$_terms.keys){const r=[e,...n.ancestors];for(const o of t.$_terms.keys){const t=o.key,a=e[t];s.delete(t);const c=n.localize([...n.path,t],r,o),u=o.schema.$_validate(a,c,A);if(u.errors){if(A.abortEarly)return{value:e,errors:u.errors};void 0!==u.value&&(e[t]=u.value),i.push(...u.errors)}else\"strip\"===o.schema._flags.result||void 0===u.value&&void 0!==a?delete e[t]:void 0!==u.value&&(e[t]=u.value)}}if(s.size||t._flags._hasPatternMatch){const r=h.unknown(t,e,s,i,n,A);if(r)return r}if(t.$_terms.dependencies)for(const r of t.$_terms.dependencies){if(r.key&&void 0===r.key.resolve(e,n,A,null,{shadow:!1}))continue;const s=h.dependencies[r.rel](t,r,e,n,A);if(s){const r=t.$_createError(s.code,e,s.context,n,A);if(A.abortEarly)return{value:e,errors:r};i.push(r)}}return{value:e,errors:i}},rules:{and:{method(...e){return a.verifyFlat(e,\"and\"),h.dependency(this,\"and\",null,e)}},append:{method(e){return null==e||0===Object.keys(e).length?this:this.keys(e)}},assert:{method(e,t,r){g.isTemplate(e)||(e=c.ref(e)),A(void 0===r||\"string\"==typeof r,\"Message must be a string\"),t=this.$_compile(t,{appendPath:!0});const n=this.$_addRule({name:\"assert\",args:{subject:e,schema:t,message:r}});return n.$_mutateRegister(e),n.$_mutateRegister(t),n},validate(e,{error:t,prefs:r,state:n},{subject:A,schema:i,message:s}){const o=A.resolve(e,n,r),a=l.isRef(A)?A.absolute(n):[];return i.$_match(o,n.localize(a,[e,...n.ancestors],i),r)?e:t(\"object.assert\",{subject:A,message:s})},args:[\"subject\",\"schema\",\"message\"],multi:!0},instance:{method(e,t){return A(\"function\"==typeof e,\"constructor must be a function\"),t=t||e.name,this.$_addRule({name:\"instance\",args:{constructor:e,name:t}})},validate:(e,t,{constructor:r,name:n})=>e instanceof r?e:t.error(\"object.instance\",{type:n,value:e}),args:[\"constructor\",\"name\"]},keys:{method(e){A(void 0===e||\"object\"==typeof e,\"Object schema must be a valid object\"),A(!a.isSchema(e),\"Object schema cannot be a joi schema\");const t=this.clone();if(e)if(Object.keys(e).length){t.$_terms.keys=t.$_terms.keys?t.$_terms.keys.filter((t=>!e.hasOwnProperty(t.key))):new h.Keys;for(const r in e)a.tryWithPath((()=>t.$_terms.keys.push({key:r,schema:this.$_compile(e[r])})),r)}else t.$_terms.keys=new h.Keys;else t.$_terms.keys=null;return t.$_mutateRebuild()}},length:{method(e){return this.$_addRule({name:\"length\",args:{limit:e},operator:\"=\"})},validate:(e,t,{limit:r},{name:n,operator:A,args:i})=>a.compare(Object.keys(e).length,r,A)?e:t.error(\"object.\"+n,{limit:i.limit,value:e}),args:[{name:\"limit\",ref:!0,assert:a.limit,message:\"must be a positive integer\"}]},max:{method(e){return this.$_addRule({name:\"max\",method:\"length\",args:{limit:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"length\",args:{limit:e},operator:\">=\"})}},nand:{method(...e){return a.verifyFlat(e,\"nand\"),h.dependency(this,\"nand\",null,e)}},or:{method(...e){return a.verifyFlat(e,\"or\"),h.dependency(this,\"or\",null,e)}},oxor:{method(...e){return h.dependency(this,\"oxor\",null,e)}},pattern:{method(e,t,r={}){const n=e instanceof RegExp;n||(e=this.$_compile(e,{appendPath:!0})),A(void 0!==t,\"Invalid rule\"),a.assertOptions(r,[\"fallthrough\",\"matches\"]),n&&A(!e.flags.includes(\"g\")&&!e.flags.includes(\"y\"),\"pattern should not use global or sticky mode\"),t=this.$_compile(t,{appendPath:!0});const i=this.clone();i.$_terms.patterns=i.$_terms.patterns||[];const s={[n?\"regex\":\"schema\"]:e,rule:t};return r.matches&&(s.matches=this.$_compile(r.matches),\"array\"!==s.matches.type&&(s.matches=s.matches.$_root.array().items(s.matches)),i.$_mutateRegister(s.matches),i.$_setFlag(\"_hasPatternMatch\",!0,{clone:!1})),r.fallthrough&&(s.fallthrough=!0),i.$_terms.patterns.push(s),i.$_mutateRegister(t),i}},ref:{method(){return this.$_addRule(\"ref\")},validate:(e,t)=>l.isRef(e)?e:t.error(\"object.refType\",{value:e})},regex:{method(){return this.$_addRule(\"regex\")},validate:(e,t)=>e instanceof RegExp?e:t.error(\"object.regex\",{value:e})},rename:{method(e,t,r={}){A(\"string\"==typeof e||e instanceof RegExp,\"Rename missing the from argument\"),A(\"string\"==typeof t||t instanceof g,\"Invalid rename to argument\"),A(t!==e,\"Cannot rename key to same name:\",e),a.assertOptions(r,[\"alias\",\"ignoreUndefined\",\"override\",\"multiple\"]);const i=this.clone();i.$_terms.renames=i.$_terms.renames||[];for(const t of i.$_terms.renames)A(t.from!==e,\"Cannot rename the same key multiple times\");return t instanceof g&&i.$_mutateRegister(t),i.$_terms.renames.push({from:e,to:t,options:n(h.renameDefaults,r)}),i}},schema:{method(e=\"any\"){return this.$_addRule({name:\"schema\",args:{type:e}})},validate:(e,t,{type:r})=>!a.isSchema(e)||\"any\"!==r&&e.type!==r?t.error(\"object.schema\",{type:r}):e},unknown:{method(e){return this.$_setFlag(\"unknown\",!1!==e)}},with:{method(e,t,r={}){return h.dependency(this,\"with\",e,t,r)}},without:{method(e,t,r={}){return h.dependency(this,\"without\",e,t,r)}},xor:{method(...e){return a.verifyFlat(e,\"xor\"),h.dependency(this,\"xor\",null,e)}}},overrides:{default(e,t){return void 0===e&&(e=a.symbols.deepDefault),this.$_parent(\"default\",e,t)}},rebuild(e){if(e.$_terms.keys){const t=new s.Sorter;for(const r of e.$_terms.keys)a.tryWithPath((()=>t.add(r,{after:r.schema.$_rootReferences(),group:r.key})),r.key);e.$_terms.keys=new h.Keys(...t.nodes)}},manifest:{build(e,t){if(t.keys&&(e=e.keys(t.keys)),t.dependencies)for(const{rel:r,key:n=null,peers:A,options:i}of t.dependencies)e=h.dependency(e,r,n,A,i);if(t.patterns)for(const{regex:r,schema:n,rule:A,fallthrough:i,matches:s}of t.patterns)e=e.pattern(r||n,A,{fallthrough:i,matches:s});if(t.renames)for(const{from:r,to:n,options:A}of t.renames)e=e.rename(r,n,A);return e}},messages:{\"object.and\":\"{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}\",\"object.assert\":'{{#label}} is invalid because {if(#subject.key, `\"` + #subject.key + `\" failed to ` + (#message || \"pass the assertion test\"), #message || \"the assertion failed\")}',\"object.base\":\"{{#label}} must be of type {{#type}}\",\"object.instance\":\"{{#label}} must be an instance of {{:#type}}\",\"object.length\":'{{#label}} must have {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\"object.max\":'{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\"object.min\":'{{#label}} must have at least {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\"object.missing\":\"{{#label}} must contain at least one of {{#peersWithLabels}}\",\"object.nand\":\"{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}\",\"object.oxor\":\"{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}\",\"object.pattern.match\":\"{{#label}} keys failed to match pattern requirements\",\"object.refType\":\"{{#label}} must be a Joi reference\",\"object.regex\":\"{{#label}} must be a RegExp object\",\"object.rename.multiple\":\"{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}\",\"object.rename.override\":\"{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists\",\"object.schema\":\"{{#label}} must be a Joi schema of {{#type}} type\",\"object.unknown\":\"{{#label}} is not allowed\",\"object.with\":\"{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}\",\"object.without\":\"{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}\",\"object.xor\":\"{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}\"}}),h.clone=function(e,t){if(\"object\"==typeof e){if(t.nonEnumerables)return i(e,{shallow:!0});const r=Object.create(Object.getPrototypeOf(e));return Object.assign(r,e),r}const r=function(...t){return e.apply(this,t)};return r.prototype=i(e.prototype),Object.defineProperty(r,\"name\",{value:e.name,writable:!1}),Object.defineProperty(r,\"length\",{value:e.length,writable:!1}),Object.assign(r,e),r},h.dependency=function(e,t,r,n,i){A(null===r||\"string\"==typeof r,t,\"key must be a strings\"),i||(i=n.length>1&&\"object\"==typeof n[n.length-1]?n.pop():{}),a.assertOptions(i,[\"separator\"]),n=[].concat(n);const s=a.default(i.separator,\".\"),o=[];for(const e of n)A(\"string\"==typeof e,t,\"peers must be strings\"),o.push(c.ref(e,{separator:s,ancestor:0,prefix:!1}));null!==r&&(r=c.ref(r,{separator:s,ancestor:0,prefix:!1}));const u=e.clone();return u.$_terms.dependencies=u.$_terms.dependencies||[],u.$_terms.dependencies.push(new h.Dependency(t,r,o,n)),u},h.dependencies={and(e,t,r,n,A){const i=[],s=[],o=t.peers.length;for(const e of t.peers)void 0===e.resolve(r,n,A,null,{shadow:!1})?i.push(e.key):s.push(e.key);if(i.length!==o&&s.length!==o)return{code:\"object.and\",context:{present:s,presentWithLabels:h.keysToLabels(e,s),missing:i,missingWithLabels:h.keysToLabels(e,i)}}},nand(e,t,r,n,A){const i=[];for(const e of t.peers)void 0!==e.resolve(r,n,A,null,{shadow:!1})&&i.push(e.key);if(i.length!==t.peers.length)return;const s=t.paths[0],o=t.paths.slice(1);return{code:\"object.nand\",context:{main:s,mainWithLabel:h.keysToLabels(e,s),peers:o,peersWithLabels:h.keysToLabels(e,o)}}},or(e,t,r,n,A){for(const e of t.peers)if(void 0!==e.resolve(r,n,A,null,{shadow:!1}))return;return{code:\"object.missing\",context:{peers:t.paths,peersWithLabels:h.keysToLabels(e,t.paths)}}},oxor(e,t,r,n,A){const i=[];for(const e of t.peers)void 0!==e.resolve(r,n,A,null,{shadow:!1})&&i.push(e.key);if(!i.length||1===i.length)return;const s={peers:t.paths,peersWithLabels:h.keysToLabels(e,t.paths)};return s.present=i,s.presentWithLabels=h.keysToLabels(e,i),{code:\"object.oxor\",context:s}},with(e,t,r,n,A){for(const i of t.peers)if(void 0===i.resolve(r,n,A,null,{shadow:!1}))return{code:\"object.with\",context:{main:t.key.key,mainWithLabel:h.keysToLabels(e,t.key.key),peer:i.key,peerWithLabel:h.keysToLabels(e,i.key)}}},without(e,t,r,n,A){for(const i of t.peers)if(void 0!==i.resolve(r,n,A,null,{shadow:!1}))return{code:\"object.without\",context:{main:t.key.key,mainWithLabel:h.keysToLabels(e,t.key.key),peer:i.key,peerWithLabel:h.keysToLabels(e,i.key)}}},xor(e,t,r,n,A){const i=[];for(const e of t.peers)void 0!==e.resolve(r,n,A,null,{shadow:!1})&&i.push(e.key);if(1===i.length)return;const s={peers:t.paths,peersWithLabels:h.keysToLabels(e,t.paths)};return 0===i.length?{code:\"object.missing\",context:s}:(s.present=i,s.presentWithLabels=h.keysToLabels(e,i),{code:\"object.xor\",context:s})}},h.keysToLabels=function(e,t){return Array.isArray(t)?t.map((t=>e.$_mapLabels(t))):e.$_mapLabels(t)},h.rename=function(e,t,r,n,A){const i={};for(const s of e.$_terms.renames){const o=[],a=\"string\"!=typeof s.from;if(a)for(const e in t){if(void 0===t[e]&&s.options.ignoreUndefined)continue;if(e===s.to)continue;const r=s.from.exec(e);r&&o.push({from:e,to:s.to,match:r})}else!Object.prototype.hasOwnProperty.call(t,s.from)||void 0===t[s.from]&&s.options.ignoreUndefined||o.push(s);for(const c of o){const o=c.from;let u=c.to;if(u instanceof g&&(u=u.render(t,r,n,c.match)),o!==u){if(!s.options.multiple&&i[u]&&(A.push(e.$_createError(\"object.rename.multiple\",t,{from:o,to:u,pattern:a},r,n)),n.abortEarly))return!1;if(Object.prototype.hasOwnProperty.call(t,u)&&!s.options.override&&!i[u]&&(A.push(e.$_createError(\"object.rename.override\",t,{from:o,to:u,pattern:a},r,n)),n.abortEarly))return!1;void 0===t[o]?delete t[u]:t[u]=t[o],i[u]=!0,s.options.alias||delete t[o]}}}return!0},h.unknown=function(e,t,r,n,A,i){if(e.$_terms.patterns){let s=!1;const o=e.$_terms.patterns.map((e=>{if(e.matches)return s=!0,[]})),a=[t,...A.ancestors];for(const s of r){const c=t[s],u=[...A.path,s];for(let l=0;l<e.$_terms.patterns.length;++l){const g=e.$_terms.patterns[l];if(g.regex){const e=g.regex.test(s);if(A.mainstay.tracer.debug(A,\"rule\",\"pattern.\".concat(l),e?\"pass\":\"error\"),!e)continue}else if(!g.schema.$_match(s,A.nest(g.schema,\"pattern.\".concat(l)),i))continue;r.delete(s);const h=A.localize(u,a,{schema:g.rule,key:s}),f=g.rule.$_validate(c,h,i);if(f.errors){if(i.abortEarly)return{value:t,errors:f.errors};n.push(...f.errors)}if(g.matches&&o[l].push(s),t[s]=f.value,!g.fallthrough)break}}if(s)for(let r=0;r<o.length;++r){const s=o[r];if(!s)continue;const c=e.$_terms.patterns[r].matches,l=A.localize(A.path,a,c),g=c.$_validate(s,l,i);if(g.errors){const r=u.details(g.errors,{override:!1});r.matches=s;const o=e.$_createError(\"object.pattern.match\",t,r,A,i);if(i.abortEarly)return{value:t,errors:o};n.push(o)}}}if(r.size&&(e.$_terms.keys||e.$_terms.patterns)){if(i.stripUnknown&&!e._flags.unknown||i.skipFunctions){const e=!(!i.stripUnknown||!0!==i.stripUnknown&&!i.stripUnknown.objects);for(const n of r)e?(delete t[n],r.delete(n)):\"function\"==typeof t[n]&&r.delete(n)}if(!a.default(e._flags.unknown,i.allowUnknown))for(const s of r){const r=A.localize([...A.path,s],[]),o=e.$_createError(\"object.unknown\",t[s],{child:s},r,i,{flags:!1});if(i.abortEarly)return{value:t,errors:o};n.push(o)}}},h.Dependency=class{constructor(e,t,r,n){this.rel=e,this.key=t,this.peers=r,this.paths=n}describe(){const e={rel:this.rel,peers:this.paths};return null!==this.key&&(e.key=this.key.key),\".\"!==this.peers[0].separator&&(e.options={separator:this.peers[0].separator}),e}},h.Keys=class extends Array{concat(e){const t=this.slice(),r=new Map;for(let e=0;e<t.length;++e)r.set(t[e].key,e);for(const n of e){const e=n.key,A=r.get(e);void 0!==A?t[A]={key:e,schema:t[A].schema.concat(n.schema)}:t.push(n)}return t}}},8785:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8068),i=r(8160),s=r(3292),o=r(6354),a={};e.exports=A.extend({type:\"link\",properties:{schemaChain:!0},terms:{link:{init:null,manifest:\"single\",register:!1}},args:(e,t)=>e.ref(t),validate(e,{schema:t,state:r,prefs:A}){n(t.$_terms.link,\"Uninitialized link schema\");const i=a.generate(t,e,r,A),s=t.$_terms.link[0].ref;return i.$_validate(e,r.nest(i,\"link:\".concat(s.display,\":\").concat(i.type)),A)},generate:(e,t,r,n)=>a.generate(e,t,r,n),rules:{ref:{method(e){n(!this.$_terms.link,\"Cannot reinitialize schema\"),e=s.ref(e),n(\"value\"===e.type||\"local\"===e.type,\"Invalid reference type:\",e.type),n(\"local\"===e.type||\"root\"===e.ancestor||e.ancestor>0,\"Link cannot reference itself\");const t=this.clone();return t.$_terms.link=[{ref:e}],t}},relative:{method(e=!0){return this.$_setFlag(\"relative\",e)}}},overrides:{concat(e){n(this.$_terms.link,\"Uninitialized link schema\"),n(i.isSchema(e),\"Invalid schema object\"),n(\"link\"!==e.type,\"Cannot merge type link with another link\");const t=this.clone();return t.$_terms.whens||(t.$_terms.whens=[]),t.$_terms.whens.push({concat:e}),t.$_mutateRebuild()}},manifest:{build:(e,t)=>(n(t.link,\"Invalid link description missing link\"),e.ref(t.link))}}),a.generate=function(e,t,r,n){let A=r.mainstay.links.get(e);if(A)return A._generate(t,r,n).schema;const i=e.$_terms.link[0].ref,{perspective:s,path:o}=a.perspective(i,r);a.assert(s,\"which is outside of schema boundaries\",i,e,r,n);try{A=o.length?s.$_reach(o):s}catch(t){a.assert(!1,\"to non-existing schema\",i,e,r,n)}return a.assert(\"link\"!==A.type,\"which is another link\",i,e,r,n),e._flags.relative||r.mainstay.links.set(e,A),A._generate(t,r,n).schema},a.perspective=function(e,t){if(\"local\"===e.type){for(const{schema:r,key:n}of t.schemas){if((r._flags.id||n)===e.path[0])return{perspective:r,path:e.path.slice(1)};if(r.$_terms.shared)for(const t of r.$_terms.shared)if(t._flags.id===e.path[0])return{perspective:t,path:e.path.slice(1)}}return{perspective:null,path:null}}return\"root\"===e.ancestor?{perspective:t.schemas[t.schemas.length-1].schema,path:e.path}:{perspective:t.schemas[e.ancestor]&&t.schemas[e.ancestor].schema,path:e.path}},a.assert=function(e,t,r,A,i,s){e||n(!1,'\"'.concat(o.label(A._flags,i,s),'\" contains link reference \"').concat(r.display,'\" ').concat(t))}},3832:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8068),i=r(8160),s={numberRx:/^\\s*[+-]?(?:(?:\\d+(?:\\.\\d*)?)|(?:\\.\\d+))(?:e([+-]?\\d+))?\\s*$/i,precisionRx:/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/};e.exports=A.extend({type:\"number\",flags:{unsafe:{default:!1}},coerce:{from:\"string\",method(e,{schema:t,error:r}){const n=e.match(s.numberRx);if(!n)return;e=e.trim();const A={value:parseFloat(e)};if(0===A.value&&(A.value=0),!t._flags.unsafe)if(e.match(/e/i)){if(s.normalizeExponent(\"\".concat(A.value/Math.pow(10,n[1]),\"e\").concat(n[1]))!==s.normalizeExponent(e))return A.errors=r(\"number.unsafe\"),A}else{const t=A.value.toString();if(t.match(/e/i))return A;if(t!==s.normalizeDecimal(e))return A.errors=r(\"number.unsafe\"),A}return A}},validate(e,{schema:t,error:r,prefs:n}){if(e===1/0||e===-1/0)return{value:e,errors:r(\"number.infinity\")};if(!i.isNumber(e))return{value:e,errors:r(\"number.base\")};const A={value:e};if(n.convert){const e=t.$_getRule(\"precision\");if(e){const t=Math.pow(10,e.args.limit);A.value=Math.round(A.value*t)/t}}return 0===A.value&&(A.value=0),!t._flags.unsafe&&(e>Number.MAX_SAFE_INTEGER||e<Number.MIN_SAFE_INTEGER)&&(A.errors=r(\"number.unsafe\")),A},rules:{compare:{method:!1,validate:(e,t,{limit:r},{name:n,operator:A,args:s})=>i.compare(e,r,A)?e:t.error(\"number.\"+n,{limit:s.limit,value:e}),args:[{name:\"limit\",ref:!0,assert:i.isNumber,message:\"must be a number\"}]},greater:{method(e){return this.$_addRule({name:\"greater\",method:\"compare\",args:{limit:e},operator:\">\"})}},integer:{method(){return this.$_addRule(\"integer\")},validate:(e,t)=>Math.trunc(e)-e==0?e:t.error(\"number.integer\")},less:{method(e){return this.$_addRule({name:\"less\",method:\"compare\",args:{limit:e},operator:\"<\"})}},max:{method(e){return this.$_addRule({name:\"max\",method:\"compare\",args:{limit:e},operator:\"<=\"})}},min:{method(e){return this.$_addRule({name:\"min\",method:\"compare\",args:{limit:e},operator:\">=\"})}},multiple:{method(e){return this.$_addRule({name:\"multiple\",args:{base:e}})},validate:(e,t,{base:r},n)=>e*(1/r)%1==0?e:t.error(\"number.multiple\",{multiple:n.args.base,value:e}),args:[{name:\"base\",ref:!0,assert:e=>\"number\"==typeof e&&isFinite(e)&&e>0,message:\"must be a positive number\"}],multi:!0},negative:{method(){return this.sign(\"negative\")}},port:{method(){return this.$_addRule(\"port\")},validate:(e,t)=>Number.isSafeInteger(e)&&e>=0&&e<=65535?e:t.error(\"number.port\")},positive:{method(){return this.sign(\"positive\")}},precision:{method(e){return n(Number.isSafeInteger(e),\"limit must be an integer\"),this.$_addRule({name:\"precision\",args:{limit:e}})},validate(e,t,{limit:r}){const n=e.toString().match(s.precisionRx);return Math.max((n[1]?n[1].length:0)-(n[2]?parseInt(n[2],10):0),0)<=r?e:t.error(\"number.precision\",{limit:r,value:e})},convert:!0},sign:{method(e){return n([\"negative\",\"positive\"].includes(e),\"Invalid sign\",e),this.$_addRule({name:\"sign\",args:{sign:e}})},validate:(e,t,{sign:r})=>\"negative\"===r&&e<0||\"positive\"===r&&e>0?e:t.error(\"number.\".concat(r))},unsafe:{method(e=!0){return n(\"boolean\"==typeof e,\"enabled must be a boolean\"),this.$_setFlag(\"unsafe\",e)}}},cast:{string:{from:e=>\"number\"==typeof e,to:(e,t)=>e.toString()}},messages:{\"number.base\":\"{{#label}} must be a number\",\"number.greater\":\"{{#label}} must be greater than {{#limit}}\",\"number.infinity\":\"{{#label}} cannot be infinity\",\"number.integer\":\"{{#label}} must be an integer\",\"number.less\":\"{{#label}} must be less than {{#limit}}\",\"number.max\":\"{{#label}} must be less than or equal to {{#limit}}\",\"number.min\":\"{{#label}} must be greater than or equal to {{#limit}}\",\"number.multiple\":\"{{#label}} must be a multiple of {{#multiple}}\",\"number.negative\":\"{{#label}} must be a negative number\",\"number.port\":\"{{#label}} must be a valid port\",\"number.positive\":\"{{#label}} must be a positive number\",\"number.precision\":\"{{#label}} must have no more than {{#limit}} decimal places\",\"number.unsafe\":\"{{#label}} must be a safe number\"}}),s.normalizeExponent=function(e){return e.replace(/E/,\"e\").replace(/\\.(\\d*[1-9])?0+e/,\".$1e\").replace(/\\.e/,\"e\").replace(/e\\+/,\"e\").replace(/^\\+/,\"\").replace(/^(-?)0+([1-9])/,\"$1$2\")},s.normalizeDecimal=function(e){return(e=e.replace(/^\\+/,\"\").replace(/\\.0*$/,\"\").replace(/^(-?)\\.([^\\.]*)$/,\"$10.$2\").replace(/^(-?)0+([0-9])/,\"$1$2\")).includes(\".\")&&e.endsWith(\"0\")&&(e=e.replace(/0+$/,\"\")),\"-0\"===e?\"0\":e}},8966:(e,t,r)=>{\"use strict\";const n=r(7824);e.exports=n.extend({type:\"object\",cast:{map:{from:e=>e&&\"object\"==typeof e,to:(e,t)=>new Map(Object.entries(e))}}})},7417:(e,t,r)=>{\"use strict\";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function A(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const s=r(375),o=r(5380),a=r(1745),c=r(9959),u=r(6064),l=r(9926),g=r(5752),h=r(8068),f=r(8160),B={tlds:l instanceof Set&&{tlds:{allow:l,deny:null}},base64Regex:{true:{true:/^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}==|[\\w\\-]{3}=)?$/,false:/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/},false:{true:/^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}(==)?|[\\w\\-]{3}=?)?$/,false:/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}(==)?|[A-Za-z0-9+\\/]{3}=?)?$/}},dataUriRegex:/^data:[\\w+.-]+\\/[\\w+.-]+;((charset=[\\w-]+|base64),)?(.*)$/,hexRegex:/^[a-f0-9]+$/i,ipRegex:c.regex({cidr:\"forbidden\"}).regex,isoDurationRegex:/^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$/,guidBrackets:{\"{\":\"}\",\"[\":\"]\",\"(\":\")\",\"\":\"\"},guidVersions:{uuidv1:\"1\",uuidv2:\"2\",uuidv3:\"3\",uuidv4:\"4\",uuidv5:\"5\"},guidSeparators:new Set([void 0,!0,!1,\"-\",\":\"]),normalizationForms:[\"NFC\",\"NFD\",\"NFKC\",\"NFKD\"]};e.exports=h.extend({type:\"string\",flags:{insensitive:{default:!1},truncate:{default:!1}},terms:{replacements:{init:null}},coerce:{from:\"string\",method(e,{schema:t,state:r,prefs:n}){const A=t.$_getRule(\"normalize\");A&&(e=e.normalize(A.args.form));const i=t.$_getRule(\"case\");i&&(e=\"upper\"===i.args.direction?e.toLocaleUpperCase():e.toLocaleLowerCase());const s=t.$_getRule(\"trim\");if(s&&s.args.enabled&&(e=e.trim()),t.$_terms.replacements)for(const r of t.$_terms.replacements)e=e.replace(r.pattern,r.replacement);const o=t.$_getRule(\"hex\");if(o&&o.args.options.byteAligned&&e.length%2!=0&&(e=\"0\".concat(e)),t.$_getRule(\"isoDate\")){const t=B.isoDate(e);t&&(e=t)}if(t._flags.truncate){const A=t.$_getRule(\"max\");if(A){let i=A.args.limit;if(f.isResolvable(i)&&(i=i.resolve(e,r,n),!f.limit(i)))return{value:e,errors:t.$_createError(\"any.ref\",i,{ref:A.args.limit,arg:\"limit\",reason:\"must be a positive integer\"},r,n)};e=e.slice(0,i)}}return{value:e}}},validate(e,{schema:t,error:r}){if(\"string\"!=typeof e)return{value:e,errors:r(\"string.base\")};if(\"\"===e){const n=t.$_getRule(\"min\");if(n&&0===n.args.limit)return;return{value:e,errors:r(\"string.empty\")}}},rules:{alphanum:{method(){return this.$_addRule(\"alphanum\")},validate:(e,t)=>/^[a-zA-Z0-9]+$/.test(e)?e:t.error(\"string.alphanum\")},base64:{method(e={}){return f.assertOptions(e,[\"paddingRequired\",\"urlSafe\"]),e=A({urlSafe:!1,paddingRequired:!0},e),s(\"boolean\"==typeof e.paddingRequired,\"paddingRequired must be boolean\"),s(\"boolean\"==typeof e.urlSafe,\"urlSafe must be boolean\"),this.$_addRule({name:\"base64\",args:{options:e}})},validate:(e,t,{options:r})=>B.base64Regex[r.paddingRequired][r.urlSafe].test(e)?e:t.error(\"string.base64\")},case:{method(e){return s([\"lower\",\"upper\"].includes(e),\"Invalid case:\",e),this.$_addRule({name:\"case\",args:{direction:e}})},validate:(e,t,{direction:r})=>\"lower\"===r&&e===e.toLocaleLowerCase()||\"upper\"===r&&e===e.toLocaleUpperCase()?e:t.error(\"string.\".concat(r,\"case\")),convert:!0},creditCard:{method(){return this.$_addRule(\"creditCard\")},validate(e,t){let r=e.length,n=0,A=1;for(;r--;){const t=e.charAt(r)*A;n+=t-9*(t>9),A^=3}return n>0&&n%10==0?e:t.error(\"string.creditCard\")}},dataUri:{method(e={}){return f.assertOptions(e,[\"paddingRequired\"]),e=A({paddingRequired:!0},e),s(\"boolean\"==typeof e.paddingRequired,\"paddingRequired must be boolean\"),this.$_addRule({name:\"dataUri\",args:{options:e}})},validate(e,t,{options:r}){const n=e.match(B.dataUriRegex);if(n){if(!n[2])return e;if(\"base64\"!==n[2])return e;if(B.base64Regex[r.paddingRequired].false.test(n[3]))return e}return t.error(\"string.dataUri\")}},domain:{method(e){e&&f.assertOptions(e,[\"allowFullyQualified\",\"allowUnicode\",\"maxDomainSegments\",\"minDomainSegments\",\"tlds\"]);const t=B.addressOptions(e);return this.$_addRule({name:\"domain\",args:{options:e},address:t})},validate:(e,t,r,{address:n})=>o.isValid(e,n)?e:t.error(\"string.domain\")},email:{method(e={}){f.assertOptions(e,[\"allowFullyQualified\",\"allowUnicode\",\"ignoreLength\",\"maxDomainSegments\",\"minDomainSegments\",\"multiple\",\"separator\",\"tlds\"]),s(void 0===e.multiple||\"boolean\"==typeof e.multiple,\"multiple option must be an boolean\");const t=B.addressOptions(e),r=new RegExp(\"\\\\s*[\".concat(e.separator?u(e.separator):\",\",\"]\\\\s*\"));return this.$_addRule({name:\"email\",args:{options:e},regex:r,address:t})},validate(e,t,{options:r},{regex:n,address:A}){const i=r.multiple?e.split(n):[e],s=[];for(const e of i)a.isValid(e,A)||s.push(e);return s.length?t.error(\"string.email\",{value:e,invalids:s}):e}},guid:{alias:\"uuid\",method(e={}){f.assertOptions(e,[\"version\",\"separator\"]);let t=\"\";if(e.version){const r=[].concat(e.version);s(r.length>=1,\"version must have at least 1 valid version specified\");const n=new Set;for(let e=0;e<r.length;++e){const A=r[e];s(\"string\"==typeof A,\"version at position \"+e+\" must be a string\");const i=B.guidVersions[A.toLowerCase()];s(i,\"version at position \"+e+\" must be one of \"+Object.keys(B.guidVersions).join(\", \")),s(!n.has(i),\"version at position \"+e+\" must not be a duplicate\"),t+=i,n.add(i)}}s(B.guidSeparators.has(e.separator),'separator must be one of true, false, \"-\", or \":\"');const r=void 0===e.separator?\"[:-]?\":!0===e.separator?\"[:-]\":!1===e.separator?\"[]?\":\"\\\\\".concat(e.separator),n=new RegExp(\"^([\\\\[{\\\\(]?)[0-9A-F]{8}(\".concat(r,\")[0-9A-F]{4}\\\\2?[\").concat(t||\"0-9A-F\",\"][0-9A-F]{3}\\\\2?[\").concat(t?\"89AB\":\"0-9A-F\",\"][0-9A-F]{3}\\\\2?[0-9A-F]{12}([\\\\]}\\\\)]?)$\"),\"i\");return this.$_addRule({name:\"guid\",args:{options:e},regex:n})},validate(e,t,r,{regex:n}){const A=n.exec(e);return A?B.guidBrackets[A[1]]!==A[A.length-1]?t.error(\"string.guid\"):e:t.error(\"string.guid\")}},hex:{method(e={}){return f.assertOptions(e,[\"byteAligned\"]),e=A({byteAligned:!1},e),s(\"boolean\"==typeof e.byteAligned,\"byteAligned must be boolean\"),this.$_addRule({name:\"hex\",args:{options:e}})},validate:(e,t,{options:r})=>B.hexRegex.test(e)?r.byteAligned&&e.length%2!=0?t.error(\"string.hexAlign\"):e:t.error(\"string.hex\")},hostname:{method(){return this.$_addRule(\"hostname\")},validate:(e,t)=>o.isValid(e,{minDomainSegments:1})||B.ipRegex.test(e)?e:t.error(\"string.hostname\")},insensitive:{method(){return this.$_setFlag(\"insensitive\",!0)}},ip:{method(e={}){f.assertOptions(e,[\"cidr\",\"version\"]);const{cidr:t,versions:r,regex:n}=c.regex(e),A=e.version?r:void 0;return this.$_addRule({name:\"ip\",args:{options:{cidr:t,version:A}},regex:n})},validate:(e,t,{options:r},{regex:n})=>n.test(e)?e:r.version?t.error(\"string.ipVersion\",{value:e,cidr:r.cidr,version:r.version}):t.error(\"string.ip\",{value:e,cidr:r.cidr})},isoDate:{method(){return this.$_addRule(\"isoDate\")},validate:(e,{error:t})=>B.isoDate(e)?e:t(\"string.isoDate\")},isoDuration:{method(){return this.$_addRule(\"isoDuration\")},validate:(e,t)=>B.isoDurationRegex.test(e)?e:t.error(\"string.isoDuration\")},length:{method(e,t){return B.length(this,\"length\",e,\"=\",t)},validate(e,t,{limit:r,encoding:n},{name:A,operator:i,args:s}){const o=!n&&e.length;return f.compare(o,r,i)?e:t.error(\"string.\"+A,{limit:s.limit,value:e,encoding:n})},args:[{name:\"limit\",ref:!0,assert:f.limit,message:\"must be a positive integer\"},\"encoding\"]},lowercase:{method(){return this.case(\"lower\")}},max:{method(e,t){return B.length(this,\"max\",e,\"<=\",t)},args:[\"limit\",\"encoding\"]},min:{method(e,t){return B.length(this,\"min\",e,\">=\",t)},args:[\"limit\",\"encoding\"]},normalize:{method(e=\"NFC\"){return s(B.normalizationForms.includes(e),\"normalization form must be one of \"+B.normalizationForms.join(\", \")),this.$_addRule({name:\"normalize\",args:{form:e}})},validate:(e,{error:t},{form:r})=>e===e.normalize(r)?e:t(\"string.normalize\",{value:e,form:r}),convert:!0},pattern:{alias:\"regex\",method(e,t={}){s(e instanceof RegExp,\"regex must be a RegExp\"),s(!e.flags.includes(\"g\")&&!e.flags.includes(\"y\"),\"regex should not use global or sticky mode\"),\"string\"==typeof t&&(t={name:t}),f.assertOptions(t,[\"invert\",\"name\"]);const r=[\"string.pattern\",t.invert?\".invert\":\"\",t.name?\".name\":\".base\"].join(\"\");return this.$_addRule({name:\"pattern\",args:{regex:e,options:t},errorCode:r})},validate:(e,t,{regex:r,options:n},{errorCode:A})=>r.test(e)^n.invert?e:t.error(A,{name:n.name,regex:r,value:e}),args:[\"regex\",\"options\"],multi:!0},replace:{method(e,t){\"string\"==typeof e&&(e=new RegExp(u(e),\"g\")),s(e instanceof RegExp,\"pattern must be a RegExp\"),s(\"string\"==typeof t,\"replacement must be a String\");const r=this.clone();return r.$_terms.replacements||(r.$_terms.replacements=[]),r.$_terms.replacements.push({pattern:e,replacement:t}),r}},token:{method(){return this.$_addRule(\"token\")},validate:(e,t)=>/^\\w+$/.test(e)?e:t.error(\"string.token\")},trim:{method(e=!0){return s(\"boolean\"==typeof e,\"enabled must be a boolean\"),this.$_addRule({name:\"trim\",args:{enabled:e}})},validate:(e,t,{enabled:r})=>r&&e!==e.trim()?t.error(\"string.trim\"):e,convert:!0},truncate:{method(e=!0){return s(\"boolean\"==typeof e,\"enabled must be a boolean\"),this.$_setFlag(\"truncate\",e)}},uppercase:{method(){return this.case(\"upper\")}},uri:{method(e={}){f.assertOptions(e,[\"allowRelative\",\"allowQuerySquareBrackets\",\"domain\",\"relativeOnly\",\"scheme\"]),e.domain&&f.assertOptions(e.domain,[\"allowFullyQualified\",\"allowUnicode\",\"maxDomainSegments\",\"minDomainSegments\",\"tlds\"]);const{regex:t,scheme:r}=g.regex(e),n=e.domain?B.addressOptions(e.domain):null;return this.$_addRule({name:\"uri\",args:{options:e},regex:t,domain:n,scheme:r})},validate(e,t,{options:r},{regex:n,domain:A,scheme:i}){if([\"http:/\",\"https:/\"].includes(e))return t.error(\"string.uri\");const s=n.exec(e);if(s){const n=s[1]||s[2];return!A||r.allowRelative&&!n||o.isValid(n,A)?e:t.error(\"string.domain\",{value:n})}return r.relativeOnly?t.error(\"string.uriRelativeOnly\"):r.scheme?t.error(\"string.uriCustomScheme\",{scheme:i,value:e}):t.error(\"string.uri\")}}},manifest:{build(e,t){if(t.replacements)for(const{pattern:r,replacement:n}of t.replacements)e=e.replace(r,n);return e}},messages:{\"string.alphanum\":\"{{#label}} must only contain alpha-numeric characters\",\"string.base\":\"{{#label}} must be a string\",\"string.base64\":\"{{#label}} must be a valid base64 string\",\"string.creditCard\":\"{{#label}} must be a credit card\",\"string.dataUri\":\"{{#label}} must be a valid dataUri string\",\"string.domain\":\"{{#label}} must contain a valid domain name\",\"string.email\":\"{{#label}} must be a valid email\",\"string.empty\":\"{{#label}} is not allowed to be empty\",\"string.guid\":\"{{#label}} must be a valid GUID\",\"string.hex\":\"{{#label}} must only contain hexadecimal characters\",\"string.hexAlign\":\"{{#label}} hex decoded representation must be byte aligned\",\"string.hostname\":\"{{#label}} must be a valid hostname\",\"string.ip\":\"{{#label}} must be a valid ip address with a {{#cidr}} CIDR\",\"string.ipVersion\":\"{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR\",\"string.isoDate\":\"{{#label}} must be in iso format\",\"string.isoDuration\":\"{{#label}} must be a valid ISO 8601 duration\",\"string.length\":\"{{#label}} length must be {{#limit}} characters long\",\"string.lowercase\":\"{{#label}} must only contain lowercase characters\",\"string.max\":\"{{#label}} length must be less than or equal to {{#limit}} characters long\",\"string.min\":\"{{#label}} length must be at least {{#limit}} characters long\",\"string.normalize\":\"{{#label}} must be unicode normalized in the {{#form}} form\",\"string.token\":\"{{#label}} must only contain alpha-numeric and underscore characters\",\"string.pattern.base\":\"{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}\",\"string.pattern.name\":\"{{#label}} with value {:[.]} fails to match the {{#name}} pattern\",\"string.pattern.invert.base\":\"{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}\",\"string.pattern.invert.name\":\"{{#label}} with value {:[.]} matches the inverted {{#name}} pattern\",\"string.trim\":\"{{#label}} must not have leading or trailing whitespace\",\"string.uri\":\"{{#label}} must be a valid uri\",\"string.uriCustomScheme\":\"{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern\",\"string.uriRelativeOnly\":\"{{#label}} must be a valid relative uri\",\"string.uppercase\":\"{{#label}} must only contain uppercase characters\"}}),B.addressOptions=function(e){if(!e)return e;if(s(void 0===e.minDomainSegments||Number.isSafeInteger(e.minDomainSegments)&&e.minDomainSegments>0,\"minDomainSegments must be a positive integer\"),s(void 0===e.maxDomainSegments||Number.isSafeInteger(e.maxDomainSegments)&&e.maxDomainSegments>0,\"maxDomainSegments must be a positive integer\"),!1===e.tlds)return e;if(!0===e.tlds||void 0===e.tlds)return s(B.tlds,\"Built-in TLD list disabled\"),Object.assign({},e,B.tlds);s(\"object\"==typeof e.tlds,\"tlds must be true, false, or an object\");const t=e.tlds.deny;if(t)return Array.isArray(t)&&(e=Object.assign({},e,{tlds:{deny:new Set(t)}})),s(e.tlds.deny instanceof Set,\"tlds.deny must be an array, Set, or boolean\"),s(!e.tlds.allow,\"Cannot specify both tlds.allow and tlds.deny lists\"),B.validateTlds(e.tlds.deny,\"tlds.deny\"),e;const r=e.tlds.allow;return r?!0===r?(s(B.tlds,\"Built-in TLD list disabled\"),Object.assign({},e,B.tlds)):(Array.isArray(r)&&(e=Object.assign({},e,{tlds:{allow:new Set(r)}})),s(e.tlds.allow instanceof Set,\"tlds.allow must be an array, Set, or boolean\"),B.validateTlds(e.tlds.allow,\"tlds.allow\"),e):e},B.validateTlds=function(e,t){for(const r of e)s(o.isValid(r,{minDomainSegments:1,maxDomainSegments:1}),\"\".concat(t,\" must contain valid top level domain names\"))},B.isoDate=function(e){if(!f.isIsoDate(e))return null;/.*T.*[+-]\\d\\d$/.test(e)&&(e+=\"00\");const t=new Date(e);return isNaN(t.getTime())?null:t.toISOString()},B.length=function(e,t,r,n,A){return s(!A||!1,\"Invalid encoding:\",A),e.$_addRule({name:t,method:\"length\",args:{limit:r,encoding:A},operator:n})}},8826:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8068),i={};i.Map=class extends Map{slice(){return new i.Map(this)}},e.exports=A.extend({type:\"symbol\",terms:{map:{init:new i.Map}},coerce:{method(e,{schema:t,error:r}){const n=t.$_terms.map.get(e);return n&&(e=n),t._flags.only&&\"symbol\"!=typeof e?{value:e,errors:r(\"symbol.map\",{map:t.$_terms.map})}:{value:e}}},validate(e,{error:t}){if(\"symbol\"!=typeof e)return{value:e,errors:t(\"symbol.base\")}},rules:{map:{method(e){e&&!e[Symbol.iterator]&&\"object\"==typeof e&&(e=Object.entries(e)),n(e&&e[Symbol.iterator],\"Iterable must be an iterable or object\");const t=this.clone(),r=[];for(const A of e){n(A&&A[Symbol.iterator],\"Entry must be an iterable\");const[e,i]=A;n(\"object\"!=typeof e&&\"function\"!=typeof e&&\"symbol\"!=typeof e,\"Key must not be of type object, function, or Symbol\"),n(\"symbol\"==typeof i,\"Value must be a Symbol\"),t.$_terms.map.set(e,i),r.push(i)}return t.valid(...r)}}},manifest:{build:(e,t)=>(t.map&&(e=e.map(t.map)),e)},messages:{\"symbol.base\":\"{{#label}} must be a symbol\",\"symbol.map\":\"{{#label}} must be one of {{#map}}\"}})},8863:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(738),s=r(9621),o=r(8160),a=r(6354),c=r(493),u={result:Symbol(\"result\")};t.entry=function(e,t,r){let A=o.defaults;r&&(n(void 0===r.warnings,\"Cannot override warnings preference in synchronous validation\"),n(void 0===r.artifacts,\"Cannot override artifacts preference in synchronous validation\"),A=o.preferences(o.defaults,r));const i=u.entry(e,t,A);n(!i.mainstay.externals.length,\"Schema with external rules must use validateAsync()\");const s={value:i.value};return i.error&&(s.error=i.error),i.mainstay.warnings.length&&(s.warning=a.details(i.mainstay.warnings)),i.mainstay.debug&&(s.debug=i.mainstay.debug),i.mainstay.artifacts&&(s.artifacts=i.mainstay.artifacts),s},t.entryAsync=async function(e,t,r){let n=o.defaults;r&&(n=o.preferences(o.defaults,r));const A=u.entry(e,t,n),i=A.mainstay;if(A.error)throw i.debug&&(A.error.debug=i.debug),A.error;if(i.externals.length){let t=A.value;for(const{method:A,path:o,label:a}of i.externals){let i,c,u=t;o.length&&(i=o[o.length-1],c=s(t,o.slice(0,-1)),u=c[i]);try{const e=await A(u,{prefs:r});if(void 0===e||e===u)continue;c?c[i]=e:t=e}catch(e){throw n.errors.label&&(e.message+=\" (\".concat(a,\")\")),e}}A.value=t}if(!n.warnings&&!n.debug&&!n.artifacts)return A.value;const c={value:A.value};return i.warnings.length&&(c.warning=a.details(i.warnings)),i.debug&&(c.debug=i.debug),i.artifacts&&(c.artifacts=i.artifacts),c},u.entry=function(e,r,n){const{tracer:A,cleanup:i}=u.tracer(r,n),s={externals:[],warnings:[],tracer:A,debug:n.debug?[]:null,links:r._ids._schemaChain?new Map:null},o=r._ids._schemaChain?[{schema:r}]:null,l=new c([],[],{mainstay:s,schemas:o}),g=t.validate(e,r,l,n);i&&r.$_root.untrace();const h=a.process(g.errors,e,n);return{value:g.value,error:h,mainstay:s}},u.tracer=function(e,t){return e.$_root._tracer?{tracer:e.$_root._tracer._register(e)}:t.debug?(n(e.$_root.trace,\"Debug mode not supported\"),{tracer:e.$_root.trace()._register(e),cleanup:!0}):{tracer:u.ignore}},t.validate=function(e,t,r,n,A={}){if(t.$_terms.whens&&(t=t._generate(e,r,n).schema),t._preferences&&(n=u.prefs(t,n)),t._cache&&n.cache){const n=t._cache.get(e);if(r.mainstay.tracer.debug(r,\"validate\",\"cached\",!!n),n)return n}const i=(A,i,s)=>t.$_createError(A,e,i,s||r,n),s={original:e,prefs:n,schema:t,state:r,error:i,errorsArray:u.errorsArray,warn:(e,t,n)=>r.mainstay.warnings.push(i(e,t,n)),message:(A,i)=>t.$_createError(\"custom\",e,i,r,n,{messages:A})};r.mainstay.tracer.entry(t,r);const a=t._definition;if(a.prepare&&void 0!==e&&n.convert){const t=a.prepare(e,s);if(t){if(r.mainstay.tracer.value(r,\"prepare\",e,t.value),t.errors)return u.finalize(t.value,[].concat(t.errors),s);e=t.value}}if(a.coerce&&void 0!==e&&n.convert&&(!a.coerce.from||a.coerce.from.includes(typeof e))){const t=a.coerce.method(e,s);if(t){if(r.mainstay.tracer.value(r,\"coerced\",e,t.value),t.errors)return u.finalize(t.value,[].concat(t.errors),s);e=t.value}}const c=t._flags.empty;c&&c.$_match(u.trim(e,t),r.nest(c),o.defaults)&&(r.mainstay.tracer.value(r,\"empty\",e,void 0),e=void 0);const l=A.presence||t._flags.presence||(t._flags._endedSwitch?null:n.presence);if(void 0===e){if(\"forbidden\"===l)return u.finalize(e,null,s);if(\"required\"===l)return u.finalize(e,[t.$_createError(\"any.required\",e,null,r,n)],s);if(\"optional\"===l){if(t._flags.default!==o.symbols.deepDefault)return u.finalize(e,null,s);r.mainstay.tracer.value(r,\"default\",e,{}),e={}}}else if(\"forbidden\"===l)return u.finalize(e,[t.$_createError(\"any.unknown\",e,null,r,n)],s);const g=[];if(t._valids){const A=t._valids.get(e,r,n,t._flags.insensitive);if(A)return n.convert&&(r.mainstay.tracer.value(r,\"valids\",e,A.value),e=A.value),r.mainstay.tracer.filter(t,r,\"valid\",A),u.finalize(e,null,s);if(t._flags.only){const A=t.$_createError(\"any.only\",e,{valids:t._valids.values({display:!0})},r,n);if(n.abortEarly)return u.finalize(e,[A],s);g.push(A)}}if(t._invalids){const A=t._invalids.get(e,r,n,t._flags.insensitive);if(A){r.mainstay.tracer.filter(t,r,\"invalid\",A);const i=t.$_createError(\"any.invalid\",e,{invalids:t._invalids.values({display:!0})},r,n);if(n.abortEarly)return u.finalize(e,[i],s);g.push(i)}}if(a.validate){const t=a.validate(e,s);if(t&&(r.mainstay.tracer.value(r,\"base\",e,t.value),e=t.value,t.errors)){if(!Array.isArray(t.errors))return g.push(t.errors),u.finalize(e,g,s);if(t.errors.length)return g.push(...t.errors),u.finalize(e,g,s)}}return t._rules.length?u.rules(e,g,s):u.finalize(e,g,s)},u.rules=function(e,t,r){const{schema:n,state:A,prefs:i}=r;for(const s of n._rules){const a=n._definition.rules[s.method];if(a.convert&&i.convert){A.mainstay.tracer.log(n,A,\"rule\",s.name,\"full\");continue}let c,l=s.args;if(s._resolve.length){l=Object.assign({},l);for(const t of s._resolve){const r=a.argsByName.get(t),s=l[t].resolve(e,A,i),u=r.normalize?r.normalize(s):s,g=o.validateArg(u,null,r);if(g){c=n.$_createError(\"any.ref\",s,{arg:t,ref:l[t],reason:g},A,i);break}l[t]=u}}c=c||a.validate(e,r,l,s);const g=u.rule(c,s);if(g.errors){if(A.mainstay.tracer.log(n,A,\"rule\",s.name,\"error\"),s.warn){A.mainstay.warnings.push(...g.errors);continue}if(i.abortEarly)return u.finalize(e,g.errors,r);t.push(...g.errors)}else A.mainstay.tracer.log(n,A,\"rule\",s.name,\"pass\"),A.mainstay.tracer.value(A,\"rule\",e,g.value,s.name),e=g.value}return u.finalize(e,t,r)},u.rule=function(e,t){return e instanceof a.Report?(u.error(e,t),{errors:[e],value:null}):Array.isArray(e)&&e[o.symbols.errors]?(e.forEach((e=>u.error(e,t))),{errors:e,value:null}):{errors:null,value:e}},u.error=function(e,t){return t.message&&e._setTemplate(t.message),e},u.finalize=function(e,t,r){t=t||[];const{schema:A,state:i,prefs:s}=r;if(t.length){const n=u.default(\"failover\",void 0,t,r);void 0!==n&&(i.mainstay.tracer.value(i,\"failover\",e,n),e=n,t=[])}if(t.length&&A._flags.error)if(\"function\"==typeof A._flags.error){t=A._flags.error(t),Array.isArray(t)||(t=[t]);for(const e of t)n(e instanceof Error||e instanceof a.Report,\"error() must return an Error object\")}else t=[A._flags.error];if(void 0===e){const n=u.default(\"default\",e,t,r);i.mainstay.tracer.value(i,\"default\",e,n),e=n}if(A._flags.cast&&void 0!==e){const t=A._definition.cast[A._flags.cast];if(t.from(e)){const n=t.to(e,r);i.mainstay.tracer.value(i,\"cast\",e,n,A._flags.cast),e=n}}if(A.$_terms.externals&&s.externals&&!1!==s._externals)for(const{method:e}of A.$_terms.externals)i.mainstay.externals.push({method:e,path:i.path,label:a.label(A._flags,i,s)});const o={value:e,errors:t.length?t:null};return A._flags.result&&(o.value=\"strip\"===A._flags.result?void 0:r.original,i.mainstay.tracer.value(i,A._flags.result,e,o.value),i.shadow(e,A._flags.result)),A._cache&&!1!==s.cache&&!A._refs.length&&A._cache.set(r.original,o),void 0===e||o.errors||void 0===A._flags.artifact||(i.mainstay.artifacts=i.mainstay.artifacts||new Map,i.mainstay.artifacts.has(A._flags.artifact)||i.mainstay.artifacts.set(A._flags.artifact,[]),i.mainstay.artifacts.get(A._flags.artifact).push(i.path)),o},u.prefs=function(e,t){const r=t===o.defaults;return r&&e._preferences[o.symbols.prefs]?e._preferences[o.symbols.prefs]:(t=o.preferences(t,e._preferences),r&&(e._preferences[o.symbols.prefs]=t),t)},u.default=function(e,t,r,n){const{schema:i,state:s,prefs:a}=n,c=i._flags[e];if(a.noDefaults||void 0===c)return t;if(s.mainstay.tracer.log(i,s,\"rule\",e,\"full\"),!c)return c;if(\"function\"==typeof c){const o=c.length?[A(s.ancestors[0]),n]:[];try{return c(...o)}catch(t){return void r.push(i.$_createError(\"any.\".concat(e),null,{error:t},s,a))}}return\"object\"!=typeof c?c:c[o.symbols.literal]?c.literal:o.isResolvable(c)?c.resolve(t,s,a):A(c)},u.trim=function(e,t){if(\"string\"!=typeof e)return e;const r=t.$_getRule(\"trim\");return r&&r.args.enabled?e.trim():e},u.ignore={active:!1,debug:i,entry:i,filter:i,log:i,resolve:i,value:i},u.errorsArray=function(){const e=[];return e[o.symbols.errors]=!0,e}},2036:(e,t,r)=>{\"use strict\";const n=r(375),A=r(9474),i=r(8160),s={};e.exports=s.Values=class{constructor(e,t){this._values=new Set(e),this._refs=new Set(t),this._lowercase=s.lowercases(e),this._override=!1}get length(){return this._values.size+this._refs.size}add(e,t){i.isResolvable(e)?this._refs.has(e)||(this._refs.add(e),t&&t.register(e)):this.has(e,null,null,!1)||(this._values.add(e),\"string\"==typeof e&&this._lowercase.set(e.toLowerCase(),e))}static merge(e,t,r){if(e=e||new s.Values,t){if(t._override)return t.clone();for(const r of[...t._values,...t._refs])e.add(r)}if(r)for(const t of[...r._values,...r._refs])e.remove(t);return e.length?e:null}remove(e){i.isResolvable(e)?this._refs.delete(e):(this._values.delete(e),\"string\"==typeof e&&this._lowercase.delete(e.toLowerCase()))}has(e,t,r,n){return!!this.get(e,t,r,n)}get(e,t,r,n){if(!this.length)return!1;if(this._values.has(e))return{value:e};if(\"string\"==typeof e&&e&&n){const t=this._lowercase.get(e.toLowerCase());if(t)return{value:t}}if(!this._refs.size&&\"object\"!=typeof e)return!1;if(\"object\"==typeof e)for(const t of this._values)if(A(t,e))return{value:t};if(t)for(const i of this._refs){const s=i.resolve(e,t,r,null,{in:!0});if(void 0===s)continue;const o=i.in&&\"object\"==typeof s?Array.isArray(s)?s:Object.keys(s):[s];for(const t of o)if(typeof t==typeof e)if(n&&e&&\"string\"==typeof e){if(t.toLowerCase()===e.toLowerCase())return{value:t,ref:i}}else if(A(t,e))return{value:t,ref:i}}return!1}override(){this._override=!0}values(e){if(e&&e.display){const e=[];for(const t of[...this._values,...this._refs])void 0!==t&&e.push(t);return e}return Array.from([...this._values,...this._refs])}clone(){const e=new s.Values(this._values,this._refs);return e._override=this._override,e}concat(e){n(!e._override,\"Cannot concat override set of values\");const t=new s.Values([...this._values,...e._values],[...this._refs,...e._refs]);return t._override=this._override,t}describe(){const e=[];this._override&&e.push({override:!0});for(const t of this._values.values())e.push(t&&\"object\"==typeof t?{value:t}:t);for(const t of this._refs.values())e.push(t.describe());return e}},s.Values.prototype[i.symbols.values]=!0,s.Values.prototype.slice=s.Values.prototype.clone,s.lowercases=function(e){const t=new Map;if(e)for(const r of e)\"string\"==typeof r&&t.set(r.toLowerCase(),r);return t}},978:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(1687),s=r(9621),o={};e.exports=function(e,t,r={}){if(n(e&&\"object\"==typeof e,\"Invalid defaults value: must be an object\"),n(!t||!0===t||\"object\"==typeof t,\"Invalid source value: must be true, falsy or an object\"),n(\"object\"==typeof r,\"Invalid options: must be an object\"),!t)return null;if(r.shallow)return o.applyToDefaultsWithShallow(e,t,r);const s=A(e);if(!0===t)return s;const a=void 0!==r.nullOverride&&r.nullOverride;return i(s,t,{nullOverride:a,mergeArrays:!1})},o.applyToDefaultsWithShallow=function(e,t,r){const a=r.shallow;n(Array.isArray(a),\"Invalid keys\");const c=new Map,u=!0===t?null:new Set;for(let r of a){r=Array.isArray(r)?r:r.split(\".\");const n=s(e,r);n&&\"object\"==typeof n?c.set(n,u&&s(t,r)||n):u&&u.add(r)}const l=A(e,{},c);if(!u)return l;for(const e of u)o.reachCopy(l,t,e);const g=void 0!==r.nullOverride&&r.nullOverride;return i(l,t,{nullOverride:g,mergeArrays:!1})},o.reachCopy=function(e,t,r){for(const e of r){if(!(e in t))return;const r=t[e];if(\"object\"!=typeof r||null===r)return;t=r}const n=t;let A=e;for(let e=0;e<r.length-1;++e){const t=r[e];\"object\"!=typeof A[t]&&(A[t]={}),A=A[t]}A[r[r.length-1]]=n}},375:(e,t,r)=>{\"use strict\";const n=r(7916);e.exports=function(e,...t){if(!e){if(1===t.length&&t[0]instanceof Error)throw t[0];throw new n(t)}}},8571:(e,t,r)=>{\"use strict\";const n=r(9621),A=r(4277),i=r(7043),s={needsProtoHack:new Set([A.set,A.map,A.weakSet,A.weakMap])};e.exports=s.clone=function(e,t={},r=null){if(\"object\"!=typeof e||null===e)return e;let n=s.clone,o=r;if(t.shallow){if(!0!==t.shallow)return s.cloneWithShallow(e,t);n=e=>e}else if(o){const t=o.get(e);if(t)return t}else o=new Map;const a=A.getInternalProto(e);if(a===A.buffer)return!1;if(a===A.date)return new Date(e.getTime());if(a===A.regex)return new RegExp(e);const c=s.base(e,a,t);if(c===e)return e;if(o&&o.set(e,c),a===A.set)for(const r of e)c.add(n(r,t,o));else if(a===A.map)for(const[r,A]of e)c.set(r,n(A,t,o));const u=i.keys(e,t);for(const r of u){if(\"__proto__\"===r)continue;if(a===A.array&&\"length\"===r){c.length=e.length;continue}const i=Object.getOwnPropertyDescriptor(e,r);i?i.get||i.set?Object.defineProperty(c,r,i):i.enumerable?c[r]=n(e[r],t,o):Object.defineProperty(c,r,{enumerable:!1,writable:!0,configurable:!0,value:n(e[r],t,o)}):Object.defineProperty(c,r,{enumerable:!0,writable:!0,configurable:!0,value:n(e[r],t,o)})}return c},s.cloneWithShallow=function(e,t){const r=t.shallow;(t=Object.assign({},t)).shallow=!1;const A=new Map;for(const t of r){const r=n(e,t);\"object\"!=typeof r&&\"function\"!=typeof r||A.set(r,r)}return s.clone(e,t,A)},s.base=function(e,t,r){if(!1===r.prototype)return s.needsProtoHack.has(t)?new t.constructor:t===A.array?[]:{};const n=Object.getPrototypeOf(e);if(n&&n.isImmutable)return e;if(t===A.array){const e=[];return n!==t&&Object.setPrototypeOf(e,n),e}if(s.needsProtoHack.has(t)){const e=new n.constructor;return n!==t&&Object.setPrototypeOf(e,n),e}return Object.create(n)}},9474:(e,t,r)=>{\"use strict\";const n=r(4277),A={mismatched:null};e.exports=function(e,t,r){return r=Object.assign({prototype:!0},r),!!A.isDeepEqual(e,t,r,[])},A.isDeepEqual=function(e,t,r,i){if(e===t)return 0!==e||1/e==1/t;const s=typeof e;if(s!==typeof t)return!1;if(null===e||null===t)return!1;if(\"function\"===s){if(!r.deepFunction||e.toString()!==t.toString())return!1}else if(\"object\"!==s)return e!=e&&t!=t;const o=A.getSharedType(e,t,!!r.prototype);switch(o){case n.buffer:return!1;case n.promise:return e===t;case n.regex:return e.toString()===t.toString();case A.mismatched:return!1}for(let r=i.length-1;r>=0;--r)if(i[r].isSame(e,t))return!0;i.push(new A.SeenEntry(e,t));try{return!!A.isDeepEqualObj(o,e,t,r,i)}finally{i.pop()}},A.getSharedType=function(e,t,r){if(r)return Object.getPrototypeOf(e)!==Object.getPrototypeOf(t)?A.mismatched:n.getInternalProto(e);const i=n.getInternalProto(e);return i!==n.getInternalProto(t)?A.mismatched:i},A.valueOf=function(e){const t=e.valueOf;if(void 0===t)return e;try{return t.call(e)}catch(e){return e}},A.hasOwnEnumerableProperty=function(e,t){return Object.prototype.propertyIsEnumerable.call(e,t)},A.isSetSimpleEqual=function(e,t){for(const r of Set.prototype.values.call(e))if(!Set.prototype.has.call(t,r))return!1;return!0},A.isDeepEqualObj=function(e,t,r,i,s){const{isDeepEqual:o,valueOf:a,hasOwnEnumerableProperty:c}=A,{keys:u,getOwnPropertySymbols:l}=Object;if(e===n.array){if(!i.part){if(t.length!==r.length)return!1;for(let e=0;e<t.length;++e)if(!o(t[e],r[e],i,s))return!1;return!0}for(const e of t)for(const t of r)if(o(e,t,i,s))return!0}else if(e===n.set){if(t.size!==r.size)return!1;if(!A.isSetSimpleEqual(t,r)){const e=new Set(Set.prototype.values.call(r));for(const r of Set.prototype.values.call(t)){if(e.delete(r))continue;let t=!1;for(const n of e)if(o(r,n,i,s)){e.delete(n),t=!0;break}if(!t)return!1}}}else if(e===n.map){if(t.size!==r.size)return!1;for(const[e,n]of Map.prototype.entries.call(t)){if(void 0===n&&!Map.prototype.has.call(r,e))return!1;if(!o(n,Map.prototype.get.call(r,e),i,s))return!1}}else if(e===n.error&&(t.name!==r.name||t.message!==r.message))return!1;const g=a(t),h=a(r);if((t!==g||r!==h)&&!o(g,h,i,s))return!1;const f=u(t);if(!i.part&&f.length!==u(r).length&&!i.skip)return!1;let B=0;for(const e of f)if(i.skip&&i.skip.includes(e))void 0===r[e]&&++B;else{if(!c(r,e))return!1;if(!o(t[e],r[e],i,s))return!1}if(!i.part&&f.length-B!==u(r).length)return!1;if(!1!==i.symbols){const e=l(t),n=new Set(l(r));for(const A of e){if(!i.skip||!i.skip.includes(A))if(c(t,A)){if(!c(r,A))return!1;if(!o(t[A],r[A],i,s))return!1}else if(c(r,A))return!1;n.delete(A)}for(const e of n)if(c(r,e))return!1}return!0},A.SeenEntry=class{constructor(e,t){this.obj=e,this.ref=t}isSame(e,t){return this.obj===e&&this.ref===t}}},7916:(e,t,r)=>{\"use strict\";const n=r(8761);e.exports=class extends Error{constructor(e){super(e.filter((e=>\"\"!==e)).map((e=>\"string\"==typeof e?e:e instanceof Error?e.message:n(e))).join(\" \")||\"Unknown error\"),\"function\"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,t.assert)}}},5277:e=>{\"use strict\";const t={};e.exports=function(e){if(!e)return\"\";let r=\"\";for(let n=0;n<e.length;++n){const A=e.charCodeAt(n);t.isSafe(A)?r+=e[n]:r+=t.escapeHtmlChar(A)}return r},t.escapeHtmlChar=function(e){const r=t.namedHtml[e];if(void 0!==r)return r;if(e>=256)return\"&#\"+e+\";\";const n=e.toString(16).padStart(2,\"0\");return\"&#x\".concat(n,\";\")},t.isSafe=function(e){return void 0!==t.safeCharCodes[e]},t.namedHtml={38:\"&amp;\",60:\"&lt;\",62:\"&gt;\",34:\"&quot;\",160:\"&nbsp;\",162:\"&cent;\",163:\"&pound;\",164:\"&curren;\",169:\"&copy;\",174:\"&reg;\"},t.safeCharCodes=function(){const e={};for(let t=32;t<123;++t)(t>=97||t>=65&&t<=90||t>=48&&t<=57||32===t||46===t||44===t||45===t||58===t||95===t)&&(e[t]=null);return e}()},6064:e=>{\"use strict\";e.exports=function(e){return e.replace(/[\\^\\$\\.\\*\\+\\-\\?\\=\\!\\:\\|\\\\\\/\\(\\)\\[\\]\\{\\}\\,]/g,\"\\\\$&\")}},738:e=>{\"use strict\";e.exports=function(){}},1687:(e,t,r)=>{\"use strict\";const n=r(375),A=r(8571),i=r(7043),s={};e.exports=s.merge=function(e,t,r){if(n(e&&\"object\"==typeof e,\"Invalid target value: must be an object\"),n(null==t||\"object\"==typeof t,\"Invalid source value: must be null, undefined, or an object\"),!t)return e;if(r=Object.assign({nullOverride:!0,mergeArrays:!0},r),Array.isArray(t)){n(Array.isArray(e),\"Cannot merge array onto an object\"),r.mergeArrays||(e.length=0);for(let n=0;n<t.length;++n)e.push(A(t[n],{symbols:r.symbols}));return e}const o=i.keys(t,r);for(let n=0;n<o.length;++n){const i=o[n];if(\"__proto__\"===i||!Object.prototype.propertyIsEnumerable.call(t,i))continue;const a=t[i];if(a&&\"object\"==typeof a){if(e[i]===a)continue;!e[i]||\"object\"!=typeof e[i]||Array.isArray(e[i])!==Array.isArray(a)||a instanceof Date||a instanceof RegExp?e[i]=A(a,{symbols:r.symbols}):s.merge(e[i],a,r)}else(null!=a||r.nullOverride)&&(e[i]=a)}return e}},9621:(e,t,r)=>{\"use strict\";const n=r(375),A={};e.exports=function(e,t,r){if(!1===t||null==t)return e;\"string\"==typeof(r=r||{})&&(r={separator:r});const i=Array.isArray(t);n(!i||!r.separator,\"Separator option no valid for array-based chain\");const s=i?t:t.split(r.separator||\".\");let o=e;for(let e=0;e<s.length;++e){let i=s[e];const a=r.iterables&&A.iterables(o);if(Array.isArray(o)||\"set\"===a){const e=Number(i);Number.isInteger(e)&&(i=e<0?o.length+e:e)}if(!o||\"function\"==typeof o&&!1===r.functions||!a&&void 0===o[i]){n(!r.strict||e+1===s.length,\"Missing segment\",i,\"in reach path \",t),n(\"object\"==typeof o||!0===r.functions||\"function\"!=typeof o,\"Invalid segment\",i,\"in reach path \",t),o=r.default;break}o=a?\"set\"===a?[...o][i]:o.get(i):o[i]}return o},A.iterables=function(e){return e instanceof Set?\"set\":e instanceof Map?\"map\":void 0}},8761:e=>{\"use strict\";e.exports=function(...e){try{return JSON.stringify.apply(null,e)}catch(e){return\"[Cannot display object: \"+e.message+\"]\"}}},4277:(e,t)=>{\"use strict\";const r={};t=e.exports={array:Array.prototype,buffer:!1,date:Date.prototype,error:Error.prototype,generic:Object.prototype,map:Map.prototype,promise:Promise.prototype,regex:RegExp.prototype,set:Set.prototype,weakMap:WeakMap.prototype,weakSet:WeakSet.prototype},r.typeMap=new Map([[\"[object Error]\",t.error],[\"[object Map]\",t.map],[\"[object Promise]\",t.promise],[\"[object Set]\",t.set],[\"[object WeakMap]\",t.weakMap],[\"[object WeakSet]\",t.weakSet]]),t.getInternalProto=function(e){if(Array.isArray(e))return t.array;if(e instanceof Date)return t.date;if(e instanceof RegExp)return t.regex;if(e instanceof Error)return t.error;const n=Object.prototype.toString.call(e);return r.typeMap.get(n)||t.generic}},7043:(e,t)=>{\"use strict\";t.keys=function(e,t={}){return!1!==t.symbols?Reflect.ownKeys(e):Object.getOwnPropertyNames(e)}},3652:(e,t,r)=>{\"use strict\";const n=r(375),A={};t.Sorter=class{constructor(){this._items=[],this.nodes=[]}add(e,t){const r=[].concat((t=t||{}).before||[]),A=[].concat(t.after||[]),i=t.group||\"?\",s=t.sort||0;n(!r.includes(i),\"Item cannot come before itself: \".concat(i)),n(!r.includes(\"?\"),\"Item cannot come before unassociated items\"),n(!A.includes(i),\"Item cannot come after itself: \".concat(i)),n(!A.includes(\"?\"),\"Item cannot come after unassociated items\"),Array.isArray(e)||(e=[e]);for(const t of e){const e={seq:this._items.length,sort:s,before:r,after:A,group:i,node:t};this._items.push(e)}if(!t.manual){const e=this._sort();n(e,\"item\",\"?\"!==i?\"added into group \".concat(i):\"\",\"created a dependencies error\")}return this.nodes}merge(e){Array.isArray(e)||(e=[e]);for(const t of e)if(t)for(const e of t._items)this._items.push(Object.assign({},e));this._items.sort(A.mergeSort);for(let e=0;e<this._items.length;++e)this._items[e].seq=e;const t=this._sort();return n(t,\"merge created a dependencies error\"),this.nodes}sort(){const e=this._sort();return n(e,\"sort created a dependencies error\"),this.nodes}_sort(){const e={},t=Object.create(null),r=Object.create(null);for(const n of this._items){const A=n.seq,i=n.group;r[i]=r[i]||[],r[i].push(A),e[A]=n.before;for(const e of n.after)t[e]=t[e]||[],t[e].push(A)}for(const t in e){const n=[];for(const A in e[t]){const i=e[t][A];r[i]=r[i]||[],n.push(...r[i])}e[t]=n}for(const n in t)if(r[n])for(const A of r[n])e[A].push(...t[n]);const n={};for(const t in e){const r=e[t];for(const e of r)n[e]=n[e]||[],n[e].push(t)}const A={},i=[];for(let e=0;e<this._items.length;++e){let t=e;if(n[e]){t=null;for(let e=0;e<this._items.length;++e){if(!0===A[e])continue;n[e]||(n[e]=[]);const r=n[e].length;let i=0;for(let t=0;t<r;++t)A[n[e][t]]&&++i;if(i===r){t=e;break}}}null!==t&&(A[t]=!0,i.push(t))}if(i.length!==this._items.length)return!1;const s={};for(const e of this._items)s[e.seq]=e;this._items=[],this.nodes=[];for(const e of i){const t=s[e];this.nodes.push(t.node),this._items.push(t)}return!0}},A.mergeSort=(e,t)=>e.sort===t.sort?0:e.sort<t.sort?-1:1},5380:(e,t,r)=>{\"use strict\";const n=r(443),A=r(2178),i={minDomainSegments:2,nonAsciiRx:/[^\\x00-\\x7f]/,domainControlRx:/[\\x00-\\x20@\\:\\/\\\\#!\\$&\\'\\(\\)\\*\\+,;=\\?]/,tldSegmentRx:/^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,domainSegmentRx:/^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,URL:n.URL||URL};t.analyze=function(e,t={}){if(!e)return A.code(\"DOMAIN_NON_EMPTY_STRING\");if(\"string\"!=typeof e)throw new Error(\"Invalid input: domain must be a string\");if(e.length>256)return A.code(\"DOMAIN_TOO_LONG\");if(i.nonAsciiRx.test(e)){if(!1===t.allowUnicode)return A.code(\"DOMAIN_INVALID_UNICODE_CHARS\");e=e.normalize(\"NFC\")}if(i.domainControlRx.test(e))return A.code(\"DOMAIN_INVALID_CHARS\");e=i.punycode(e),t.allowFullyQualified&&\".\"===e[e.length-1]&&(e=e.slice(0,-1));const r=t.minDomainSegments||i.minDomainSegments,n=e.split(\".\");if(n.length<r)return A.code(\"DOMAIN_SEGMENTS_COUNT\");if(t.maxDomainSegments&&n.length>t.maxDomainSegments)return A.code(\"DOMAIN_SEGMENTS_COUNT_MAX\");const s=t.tlds;if(s){const e=n[n.length-1].toLowerCase();if(s.deny&&s.deny.has(e)||s.allow&&!s.allow.has(e))return A.code(\"DOMAIN_FORBIDDEN_TLDS\")}for(let e=0;e<n.length;++e){const t=n[e];if(!t.length)return A.code(\"DOMAIN_EMPTY_SEGMENT\");if(t.length>63)return A.code(\"DOMAIN_LONG_SEGMENT\");if(e<n.length-1){if(!i.domainSegmentRx.test(t))return A.code(\"DOMAIN_INVALID_CHARS\")}else if(!i.tldSegmentRx.test(t))return A.code(\"DOMAIN_INVALID_TLDS_CHARS\")}return null},t.isValid=function(e,r){return!t.analyze(e,r)},i.punycode=function(e){e.includes(\"%\")&&(e=e.replace(/%/g,\"%25\"));try{return new i.URL(\"http://\".concat(e)).host}catch(t){return e}}},1745:(e,t,r)=>{\"use strict\";const n=r(9848),A=r(5380),i=r(2178),s={nonAsciiRx:/[^\\x00-\\x7f]/,encoder:new(n.TextEncoder||TextEncoder)};t.analyze=function(e,t){return s.email(e,t)},t.isValid=function(e,t){return!s.email(e,t)},s.email=function(e,t={}){if(\"string\"!=typeof e)throw new Error(\"Invalid input: email must be a string\");if(!e)return i.code(\"EMPTY_STRING\");const r=!s.nonAsciiRx.test(e);if(!r){if(!1===t.allowUnicode)return i.code(\"FORBIDDEN_UNICODE\");e=e.normalize(\"NFC\")}const n=e.split(\"@\");if(2!==n.length)return n.length>2?i.code(\"MULTIPLE_AT_CHAR\"):i.code(\"MISSING_AT_CHAR\");const[o,a]=n;if(!o)return i.code(\"EMPTY_LOCAL\");if(!t.ignoreLength){if(e.length>254)return i.code(\"ADDRESS_TOO_LONG\");if(s.encoder.encode(o).length>64)return i.code(\"LOCAL_TOO_LONG\")}return s.local(o,r)||A.analyze(a,t)},s.local=function(e,t){const r=e.split(\".\");for(const e of r){if(!e.length)return i.code(\"EMPTY_LOCAL_SEGMENT\");if(t){if(!s.atextRx.test(e))return i.code(\"INVALID_LOCAL_CHARS\")}else for(const t of e){if(s.atextRx.test(t))continue;const e=s.binary(t);if(!s.atomRx.test(e))return i.code(\"INVALID_LOCAL_CHARS\")}}},s.binary=function(e){return Array.from(s.encoder.encode(e)).map((e=>String.fromCharCode(e))).join(\"\")},s.atextRx=/^[\\w!#\\$%&'\\*\\+\\-/=\\?\\^`\\{\\|\\}~]+$/,s.atomRx=new RegExp([\"(?:[\\\\xc2-\\\\xdf][\\\\x80-\\\\xbf])\",\"(?:\\\\xe0[\\\\xa0-\\\\xbf][\\\\x80-\\\\xbf])|(?:[\\\\xe1-\\\\xec][\\\\x80-\\\\xbf]{2})|(?:\\\\xed[\\\\x80-\\\\x9f][\\\\x80-\\\\xbf])|(?:[\\\\xee-\\\\xef][\\\\x80-\\\\xbf]{2})\",\"(?:\\\\xf0[\\\\x90-\\\\xbf][\\\\x80-\\\\xbf]{2})|(?:[\\\\xf1-\\\\xf3][\\\\x80-\\\\xbf]{3})|(?:\\\\xf4[\\\\x80-\\\\x8f][\\\\x80-\\\\xbf]{2})\"].join(\"|\"))},2178:(e,t)=>{\"use strict\";t.codes={EMPTY_STRING:\"Address must be a non-empty string\",FORBIDDEN_UNICODE:\"Address contains forbidden Unicode characters\",MULTIPLE_AT_CHAR:\"Address cannot contain more than one @ character\",MISSING_AT_CHAR:\"Address must contain one @ character\",EMPTY_LOCAL:\"Address local part cannot be empty\",ADDRESS_TOO_LONG:\"Address too long\",LOCAL_TOO_LONG:\"Address local part too long\",EMPTY_LOCAL_SEGMENT:\"Address local part contains empty dot-separated segment\",INVALID_LOCAL_CHARS:\"Address local part contains invalid character\",DOMAIN_NON_EMPTY_STRING:\"Domain must be a non-empty string\",DOMAIN_TOO_LONG:\"Domain too long\",DOMAIN_INVALID_UNICODE_CHARS:\"Domain contains forbidden Unicode characters\",DOMAIN_INVALID_CHARS:\"Domain contains invalid character\",DOMAIN_INVALID_TLDS_CHARS:\"Domain contains invalid tld character\",DOMAIN_SEGMENTS_COUNT:\"Domain lacks the minimum required number of segments\",DOMAIN_SEGMENTS_COUNT_MAX:\"Domain contains too many segments\",DOMAIN_FORBIDDEN_TLDS:\"Domain uses forbidden TLD\",DOMAIN_EMPTY_SEGMENT:\"Domain contains empty dot-separated segment\",DOMAIN_LONG_SEGMENT:\"Domain contains dot-separated segment that is too long\"},t.code=function(e){return{code:e,error:t.codes[e]}}},9959:(e,t,r)=>{\"use strict\";const n=r(375),A=r(5752);t.regex=function(e={}){n(void 0===e.cidr||\"string\"==typeof e.cidr,\"options.cidr must be a string\");const t=e.cidr?e.cidr.toLowerCase():\"optional\";n([\"required\",\"optional\",\"forbidden\"].includes(t),\"options.cidr must be one of required, optional, forbidden\"),n(void 0===e.version||\"string\"==typeof e.version||Array.isArray(e.version),\"options.version must be a string or an array of string\");let r=e.version||[\"ipv4\",\"ipv6\",\"ipvfuture\"];Array.isArray(r)||(r=[r]),n(r.length>=1,\"options.version must have at least 1 version specified\");for(let e=0;e<r.length;++e)n(\"string\"==typeof r[e],\"options.version must only contain strings\"),r[e]=r[e].toLowerCase(),n([\"ipv4\",\"ipv6\",\"ipvfuture\"].includes(r[e]),\"options.version contains unknown version \"+r[e]+\" - must be one of ipv4, ipv6, ipvfuture\");r=Array.from(new Set(r));const i=r.map((e=>{if(\"forbidden\"===t)return A.ip[e];const r=\"\\\\/\".concat(\"ipv4\"===e?A.ip.v4Cidr:A.ip.v6Cidr);return\"required\"===t?\"\".concat(A.ip[e]).concat(r):\"\".concat(A.ip[e],\"(?:\").concat(r,\")?\")})),s=\"(?:\".concat(i.join(\"|\"),\")\"),o=new RegExp(\"^\".concat(s,\"$\"));return{cidr:t,versions:r,regex:o,raw:s}}},5752:(e,t,r)=>{\"use strict\";const n=r(375),A=r(6064),i={generate:function(){const e={},t=\"!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=\",r=\"\\\\w-\\\\.~%\\\\dA-Fa-f\"+t+\":@\",n=\"[\"+r+\"]\",A=\"(?:0{0,2}\\\\d|0?[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\";e.ipv4address=\"(?:\"+A+\"\\\\.){3}\"+A;const i=\"[\\\\dA-Fa-f]{1,4}\",s=\"(?:\"+i+\":\"+i+\"|\"+e.ipv4address+\")\",o=\"(?:\"+i+\":){6}\"+s,a=\"::(?:\"+i+\":){5}\"+s,c=\"(?:\"+i+\")?::(?:\"+i+\":){4}\"+s,u=\"(?:(?:\"+i+\":){0,1}\"+i+\")?::(?:\"+i+\":){3}\"+s,l=\"(?:(?:\"+i+\":){0,2}\"+i+\")?::(?:\"+i+\":){2}\"+s,g=\"(?:(?:\"+i+\":){0,3}\"+i+\")?::\"+i+\":\"+s,h=\"(?:(?:\"+i+\":){0,4}\"+i+\")?::\"+s;e.ipv4Cidr=\"(?:\\\\d|[1-2]\\\\d|3[0-2])\",e.ipv6Cidr=\"(?:0{0,2}\\\\d|0?[1-9]\\\\d|1[01]\\\\d|12[0-8])\",e.ipv6address=\"(?:\"+o+\"|\"+a+\"|\"+c+\"|\"+u+\"|\"+l+\"|\"+g+\"|\"+h+\"|(?:(?:[\\\\dA-Fa-f]{1,4}:){0,5}[\\\\dA-Fa-f]{1,4})?::[\\\\dA-Fa-f]{1,4}|(?:(?:[\\\\dA-Fa-f]{1,4}:){0,6}[\\\\dA-Fa-f]{1,4})?::)\",e.ipvFuture=\"v[\\\\dA-Fa-f]+\\\\.[\\\\w-\\\\.~\"+t+\":]+\",e.scheme=\"[a-zA-Z][a-zA-Z\\\\d+-\\\\.]*\",e.schemeRegex=new RegExp(e.scheme);const f=\"[\\\\w-\\\\.~%\\\\dA-Fa-f\"+t+\":]*\",B=\"(?:\\\\[(?:\"+e.ipv6address+\"|\"+e.ipvFuture+\")\\\\]|\"+e.ipv4address+\"|[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]{1,255})\",I=\"(?:\"+f+\"@)?\"+B+\"(?::\\\\d*)?\",d=\"(?:\"+f+\"@)?(\"+B+\")(?::\\\\d*)?\",p=n+\"+\",E=\"(?:\\\\/[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]*)*\",Q=\"\\\\/(?:\"+p+E+\")?\",m=p+E,C=\"[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=@]+\"+E;return e.hierPart=\"(?:(?:\\\\/\\\\/\"+I+E+\")|\"+Q+\"|\"+m+\"|(?:\\\\/\\\\/\\\\/[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]*(?:\\\\/[\\\\w-\\\\.~%\\\\dA-Fa-f!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]*)*))\",e.hierPartCapture=\"(?:(?:\\\\/\\\\/\"+d+E+\")|\"+Q+\"|\"+m+\")\",e.relativeRef=\"(?:(?:\\\\/\\\\/\"+I+E+\")|\"+Q+\"|\"+C+\"|)\",e.relativeRefCapture=\"(?:(?:\\\\/\\\\/\"+d+E+\")|\"+Q+\"|\"+C+\"|)\",e.query=\"[\"+r+\"\\\\/\\\\?]*(?=#|$)\",e.queryWithSquareBrackets=\"[\"+r+\"\\\\[\\\\]\\\\/\\\\?]*(?=#|$)\",e.fragment=\"[\"+r+\"\\\\/\\\\?]*\",e}};i.rfc3986=i.generate(),t.ip={v4Cidr:i.rfc3986.ipv4Cidr,v6Cidr:i.rfc3986.ipv6Cidr,ipv4:i.rfc3986.ipv4address,ipv6:i.rfc3986.ipv6address,ipvfuture:i.rfc3986.ipvFuture},i.createRegex=function(e){const t=i.rfc3986,r=\"(?:\\\\?\"+(e.allowQuerySquareBrackets?t.queryWithSquareBrackets:t.query)+\")?(?:#\"+t.fragment+\")?\",s=e.domain?t.relativeRefCapture:t.relativeRef;if(e.relativeOnly)return i.wrap(s+r);let o=\"\";if(e.scheme){n(e.scheme instanceof RegExp||\"string\"==typeof e.scheme||Array.isArray(e.scheme),\"scheme must be a RegExp, String, or Array\");const r=[].concat(e.scheme);n(r.length>=1,\"scheme must have at least 1 scheme specified\");const i=[];for(let e=0;e<r.length;++e){const s=r[e];n(s instanceof RegExp||\"string\"==typeof s,\"scheme at position \"+e+\" must be a RegExp or String\"),s instanceof RegExp?i.push(s.source.toString()):(n(t.schemeRegex.test(s),\"scheme at position \"+e+\" must be a valid scheme\"),i.push(A(s)))}o=i.join(\"|\")}const a=\"(?:\"+(o?\"(?:\"+o+\")\":t.scheme)+\":\"+(e.domain?t.hierPartCapture:t.hierPart)+\")\",c=e.allowRelative?\"(?:\"+a+\"|\"+s+\")\":a;return i.wrap(c+r,o)},i.wrap=function(e,t){return{raw:e=\"(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])\".concat(e),regex:new RegExp(\"^\".concat(e,\"$\")),scheme:t}},i.uriRegex=i.createRegex({}),t.regex=function(e={}){return e.scheme||e.allowRelative||e.relativeOnly||e.allowQuerySquareBrackets||e.domain?i.createRegex(e):i.uriRegex}},1447:(e,t)=>{\"use strict\";const r={operators:[\"!\",\"^\",\"*\",\"/\",\"%\",\"+\",\"-\",\"<\",\"<=\",\">\",\">=\",\"==\",\"!=\",\"&&\",\"||\",\"??\"],operatorCharacters:[\"!\",\"^\",\"*\",\"/\",\"%\",\"+\",\"-\",\"<\",\"=\",\">\",\"&\",\"|\",\"?\"],operatorsOrder:[[\"^\"],[\"*\",\"/\",\"%\"],[\"+\",\"-\"],[\"<\",\"<=\",\">\",\">=\"],[\"==\",\"!=\"],[\"&&\"],[\"||\",\"??\"]],operatorsPrefix:[\"!\",\"n\"],literals:{'\"':'\"',\"`\":\"`\",\"'\":\"'\",\"[\":\"]\"},numberRx:/^(?:[0-9]*\\.?[0-9]*){1}$/,tokenRx:/^[\\w\\$\\#\\.\\@\\:\\{\\}]+$/,symbol:Symbol(\"formula\"),settings:Symbol(\"settings\")};t.Parser=class{constructor(e,t={}){if(!t[r.settings]&&t.constants)for(const e in t.constants){const r=t.constants[e];if(null!==r&&![\"boolean\",\"number\",\"string\"].includes(typeof r))throw new Error(\"Formula constant \".concat(e,\" contains invalid \").concat(typeof r,\" value type\"))}this.settings=t[r.settings]?t:Object.assign({[r.settings]:!0,constants:{},functions:{}},t),this.single=null,this._parts=null,this._parse(e)}_parse(e){let n=[],A=\"\",i=0,s=!1;const o=e=>{if(i)throw new Error(\"Formula missing closing parenthesis\");const o=n.length?n[n.length-1]:null;if(s||A||e){if(o&&\"reference\"===o.type&&\")\"===e)return o.type=\"function\",o.value=this._subFormula(A,o.value),void(A=\"\");if(\")\"===e){const e=new t.Parser(A,this.settings);n.push({type:\"segment\",value:e})}else if(s){if(\"]\"===s)return n.push({type:\"reference\",value:A}),void(A=\"\");n.push({type:\"literal\",value:A})}else if(r.operatorCharacters.includes(A))o&&\"operator\"===o.type&&r.operators.includes(o.value+A)?o.value+=A:n.push({type:\"operator\",value:A});else if(A.match(r.numberRx))n.push({type:\"constant\",value:parseFloat(A)});else if(void 0!==this.settings.constants[A])n.push({type:\"constant\",value:this.settings.constants[A]});else{if(!A.match(r.tokenRx))throw new Error(\"Formula contains invalid token: \".concat(A));n.push({type:\"reference\",value:A})}A=\"\"}};for(const t of e)s?t===s?(o(),s=!1):A+=t:i?\"(\"===t?(A+=t,++i):\")\"===t?(--i,i?A+=t:o(t)):A+=t:t in r.literals?s=r.literals[t]:\"(\"===t?(o(),++i):r.operatorCharacters.includes(t)?(o(),A=t,o()):\" \"!==t?A+=t:o();o(),n=n.map(((e,t)=>\"operator\"!==e.type||\"-\"!==e.value||t&&\"operator\"!==n[t-1].type?e:{type:\"operator\",value:\"n\"}));let a=!1;for(const e of n){if(\"operator\"===e.type){if(r.operatorsPrefix.includes(e.value))continue;if(!a)throw new Error(\"Formula contains an operator in invalid position\");if(!r.operators.includes(e.value))throw new Error(\"Formula contains an unknown operator \".concat(e.value))}else if(a)throw new Error(\"Formula missing expected operator\");a=!a}if(!a)throw new Error(\"Formula contains invalid trailing operator\");1===n.length&&[\"reference\",\"literal\",\"constant\"].includes(n[0].type)&&(this.single={type:\"reference\"===n[0].type?\"reference\":\"value\",value:n[0].value}),this._parts=n.map((e=>{if(\"operator\"===e.type)return r.operatorsPrefix.includes(e.value)?e:e.value;if(\"reference\"!==e.type)return e.value;if(this.settings.tokenRx&&!this.settings.tokenRx.test(e.value))throw new Error(\"Formula contains invalid reference \".concat(e.value));return this.settings.reference?this.settings.reference(e.value):r.reference(e.value)}))}_subFormula(e,n){const A=this.settings.functions[n];if(\"function\"!=typeof A)throw new Error(\"Formula contains unknown function \".concat(n));let i=[];if(e){let t=\"\",A=0,s=!1;const o=()=>{if(!t)throw new Error(\"Formula contains function \".concat(n,\" with invalid arguments \").concat(e));i.push(t),t=\"\"};for(let n=0;n<e.length;++n){const i=e[n];s?(t+=i,i===s&&(s=!1)):i in r.literals&&!A?(t+=i,s=r.literals[i]):\",\"!==i||A?(t+=i,\"(\"===i?++A:\")\"===i&&--A):o()}o()}return i=i.map((e=>new t.Parser(e,this.settings))),function(e){const t=[];for(const r of i)t.push(r.evaluate(e));return A.call(e,...t)}}evaluate(e){const t=this._parts.slice();for(let n=t.length-2;n>=0;--n){const A=t[n];if(A&&\"operator\"===A.type){const i=t[n+1];t.splice(n+1,1);const s=r.evaluate(i,e);t[n]=r.single(A.value,s)}}return r.operatorsOrder.forEach((n=>{for(let A=1;A<t.length-1;)if(n.includes(t[A])){const n=t[A],i=r.evaluate(t[A-1],e),s=r.evaluate(t[A+1],e);t.splice(A,2);const o=r.calculate(n,i,s);t[A-1]=0===o?0:o}else A+=2})),r.evaluate(t[0],e)}},t.Parser.prototype[r.symbol]=!0,r.reference=function(e){return function(t){return t&&void 0!==t[e]?t[e]:null}},r.evaluate=function(e,t){return null===e?null:\"function\"==typeof e?e(t):e[r.symbol]?e.evaluate(t):e},r.single=function(e,t){if(\"!\"===e)return!t;const r=-t;return 0===r?0:r},r.calculate=function(e,t,n){if(\"??\"===e)return r.exists(t)?t:n;if(\"string\"==typeof t||\"string\"==typeof n){if(\"+\"===e)return(t=r.exists(t)?t:\"\")+(r.exists(n)?n:\"\")}else switch(e){case\"^\":return Math.pow(t,n);case\"*\":return t*n;case\"/\":return t/n;case\"%\":return t%n;case\"+\":return t+n;case\"-\":return t-n}switch(e){case\"<\":return t<n;case\"<=\":return t<=n;case\">\":return t>n;case\">=\":return t>=n;case\"==\":return t===n;case\"!=\":return t!==n;case\"&&\":return t&&n;case\"||\":return t||n}return null},r.exists=function(e){return null!=e}},9926:()=>{},5688:()=>{},9708:()=>{},1152:()=>{},443:()=>{},9848:()=>{}},A={},function e(t){var r=A[t];if(void 0!==r)return r.exports;var i=A[t]={exports:{}};return n[t](i,i.exports,e),i.exports}(5107))},function(e,t,r){var n;e.exports=(n=r(3),r(15),void(n.lib.Cipher||function(e){var t=n,r=t.lib,A=r.Base,i=r.WordArray,s=r.BufferedBlockAlgorithm,o=t.enc,a=(o.Utf8,o.Base64),c=t.algo.EvpKDF,u=r.Cipher=s.extend({cfg:A.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,r){this.cfg=this.cfg.extend(r),this._xformMode=e,this._key=t,this.reset()},reset:function(){s.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return\"string\"==typeof e?E:d}return function(t){return{encrypt:function(r,n,A){return e(n).encrypt(t,r,n,A)},decrypt:function(r,n,A){return e(n).decrypt(t,r,n,A)}}}}()}),l=(r.StreamCipher=u.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),t.mode={}),g=r.BlockCipherMode=A.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),h=l.CBC=function(){var t=g.extend();function r(t,r,n){var A,i=this._iv;i?(A=i,this._iv=e):A=this._prevBlock;for(var s=0;s<n;s++)t[r+s]^=A[s]}return t.Encryptor=t.extend({processBlock:function(e,t){var n=this._cipher,A=n.blockSize;r.call(this,e,t,A),n.encryptBlock(e,t),this._prevBlock=e.slice(t,t+A)}}),t.Decryptor=t.extend({processBlock:function(e,t){var n=this._cipher,A=n.blockSize,i=e.slice(t,t+A);n.decryptBlock(e,t),r.call(this,e,t,A),this._prevBlock=i}}),t}(),f=(t.pad={}).Pkcs7={pad:function(e,t){for(var r=4*t,n=r-e.sigBytes%r,A=n<<24|n<<16|n<<8|n,s=[],o=0;o<n;o+=4)s.push(A);var a=i.create(s,n);e.concat(a)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},B=(r.BlockCipher=u.extend({cfg:u.cfg.extend({mode:h,padding:f}),reset:function(){var e;u.reset.call(this);var t=this.cfg,r=t.iv,n=t.mode;this._xformMode==this._ENC_XFORM_MODE?e=n.createEncryptor:(e=n.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==e?this._mode.init(this,r&&r.words):(this._mode=e.call(n,this,r&&r.words),this._mode.__creator=e)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e,t=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(t.pad(this._data,this.blockSize),e=this._process(!0)):(e=this._process(!0),t.unpad(e)),e},blockSize:4}),r.CipherParams=A.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}})),I=(t.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,r=e.salt;return(r?i.create([1398893684,1701076831]).concat(r).concat(t):t).toString(a)},parse:function(e){var t,r=a.parse(e),n=r.words;return 1398893684==n[0]&&1701076831==n[1]&&(t=i.create(n.slice(2,4)),n.splice(0,4),r.sigBytes-=16),B.create({ciphertext:r,salt:t})}},d=r.SerializableCipher=A.extend({cfg:A.extend({format:I}),encrypt:function(e,t,r,n){n=this.cfg.extend(n);var A=e.createEncryptor(r,n),i=A.finalize(t),s=A.cfg;return B.create({ciphertext:i,key:r,iv:s.iv,algorithm:e,mode:s.mode,padding:s.padding,blockSize:e.blockSize,formatter:n.format})},decrypt:function(e,t,r,n){return n=this.cfg.extend(n),t=this._parse(t,n.format),e.createDecryptor(r,n).finalize(t.ciphertext)},_parse:function(e,t){return\"string\"==typeof e?t.parse(e,this):e}}),p=(t.kdf={}).OpenSSL={execute:function(e,t,r,n){n||(n=i.random(8));var A=c.create({keySize:t+r}).compute(e,n),s=i.create(A.words.slice(t),4*r);return A.sigBytes=4*t,B.create({key:A,iv:s,salt:n})}},E=r.PasswordBasedCipher=d.extend({cfg:d.cfg.extend({kdf:p}),encrypt:function(e,t,r,n){var A=(n=this.cfg.extend(n)).kdf.execute(r,e.keySize,e.ivSize);n.iv=A.iv;var i=d.encrypt.call(this,e,t,A.key,n);return i.mixIn(A),i},decrypt:function(e,t,r,n){n=this.cfg.extend(n),t=this._parse(t,n.format);var A=n.kdf.execute(r,e.keySize,e.ivSize,t.salt);return n.iv=A.iv,d.decrypt.call(this,e,t,A.key,n)}})}()))},function(e,t,r){\"use strict\";r.d(t,\"c\",(function(){return c})),r.d(t,\"a\",(function(){return u})),r.d(t,\"b\",(function(){return f}));var n=r(29),A=r(30),i=r.n(A),s=r(0),o=r(1),a=r(2);function c(e){return Object(o.f)(e)}function u(e){const t=n.sha256.create().update(e).arrayBuffer();return Object(o.e)(new Uint8Array(t))}function l(e){if(e instanceof i.a.Tagged)return l(e.value);if(\"string\"==typeof e)return g(e);if(\"number\"==typeof e)return u(Object(o.h)(e));if(s.Buffer.isBuffer(e))return u(Object(o.e)(new Uint8Array(e)));if(e instanceof Uint8Array||e instanceof ArrayBuffer)return u(Object(o.e)(new Uint8Array(e)));if(Array.isArray(e)){const t=e.map(l);return u(s.Buffer.concat(t))}if(e instanceof a.a)return u(Object(o.e)(e.toUint8Array()));if(\"object\"==typeof e&&null!==e&&\"function\"==typeof e.toHash)return l(e.toHash());if(\"bigint\"==typeof e)return u(Object(o.h)(e));throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${e}`),{value:e})}const g=e=>{const t=(new TextEncoder).encode(e);return u(s.Buffer.from(t))};function h(e){return Object(o.b)(s.Buffer.concat(e))}function f(e){return u(h(Object.entries(e).filter((([,e])=>void 0!==e)).map((([e,t])=>[g(e),l(t)])).sort((([e],[t])=>s.Buffer.compare(s.Buffer.from(e),s.Buffer.from(t)))).map(h)))}},function(e,t,r){\"use strict\";(function(e){r.d(t,\"d\",(function(){return i}));var n=r(40);r.d(t,\"b\",(function(){return n.a}));var A=r(41);r.d(t,\"a\",(function(){return A.a})),r.d(t,\"c\",(function(){return A.b}));r(48);function i(){const t=\"undefined\"==typeof window?void 0===e?\"undefined\"==typeof self?void 0:self.ic.agent:e.ic.agent:window.ic.agent;if(!t)throw new Error(\"No Agent could be found.\");return t}}).call(this,r(17))},function(e,t,r){\"use strict\";r.d(t,\"b\",(function(){return u})),r.d(t,\"a\",(function(){return g}));var n=r(30),A=r.n(n),i=r(0),s=r(10),o=r(1);const a=s.SelfDescribeCborSerializer.withDefaultEncoders(!0);var c;a.addEncoder(new class{get name(){return\"Principal\"}get priority(){return 0}match(e){return e&&!0===e._isPrincipal}encode(e){return s.value.bytes(e.toUint8Array().buffer)}}),a.addEncoder(new class{get name(){return\"Buffer\"}get priority(){return 1}match(e){return i.Buffer.isBuffer(e)}encode(e){return s.value.bytes(new Uint8Array(e))}}),a.addEncoder(new class{get name(){return\"BigInt\"}get priority(){return 1}match(e){return\"bigint\"==typeof e}encode(e){return e>BigInt(0)?s.value.tagged(2,s.value.bytes(Object(o.c)(e.toString(16)))):s.value.tagged(3,s.value.bytes(Object(o.c)((BigInt(\"-1\")*e).toString(16))))}}),function(e){e[e.Uint64LittleEndian=71]=\"Uint64LittleEndian\",e[e.Semantic=55799]=\"Semantic\"}(c||(c={}));const u=e=>Object(o.b)(i.Buffer.from(a.serialize(e)));function l(e){const t=e.byteLength;let r=BigInt(0);for(let n=0;n<t;n++)r=r*BigInt(256)+BigInt(e[n]);return r}function g(e){return new A.a.Decoder({size:e.byteLength,tags:{2:e=>l(e),3:e=>-l(e),[c.Semantic]:e=>e}}).decodeFirst(e)}},function(e,t,r){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(67));const A=n(r(47));t.value=A},function(e,t,r){\"use strict\";r.d(t,\"b\",(function(){return A})),r.d(t,\"a\",(function(){return i})),r.d(t,\"c\",(function(){return s}));var n=r(56);const A=\"https://mainnet.plugwallet.ooo/\",i=[\"https://mainnet.dfinity.network\",\"ic0.app\",A],s={extension:\"0.5.3\",provider:n.version}},function(e,t,r){\"use strict\";(function(e){r.d(t,\"b\",(function(){return n})),r.d(t,\"a\",(function(){return A}));const n=t=>e.from(t).toString(\"base64\"),A=t=>e.from(t,\"base64\")}).call(this,r(0).Buffer)},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return o}));var n=r(10),A=r(1);const i=BigInt(1e6),s=BigInt(6e4);class o{constructor(e){this._value=(BigInt(Date.now())+BigInt(e)-s)*i}toCBOR(){return n.value.u64(this._value.toString(16),16)}toHash(){return Object(A.h)(this._value)}}},function(e,t,r){\"use strict\";r.d(t,\"c\",(function(){return f})),r.d(t,\"b\",(function(){return B})),r.d(t,\"a\",(function(){return I}));var n=r(16),A=r(11),i=r(2),s=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))};class o extends n.c{constructor(e,t){super(),this.publicKey=Object.assign(Object.assign({},e),{toDer:()=>{var t,r;return null!==(r=null===(t=e.derKey)||void 0===t?void 0:t.data)&&void 0!==r?r:e.derKey}}),this.whitelist=t||[]}getPublicKey(){return this.publicKey}sign(e,t){return s(this,void 0,void 0,(function*(){throw\"DONT USE SIGN FROM IDENTITY\"}))}getPrincipal(){return this._principal||(this._principal=i.a.selfAuthenticating(this.publicKey.toDer())),this._principal}}var a=r(33),c=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))};const u=A.a[0],l=[],g=u;class h extends n.b{constructor(e={},t,r,n=\"\"){super(e),this.query=Object(a.b)(t),this.call=Object(a.a)(t,n,r),this.readState=Object(a.c)(t)}}const f=({publicKey:e,clientRPC:t,idl:r=null,batchTxId:n=\"\",whitelist:i=l,host:s=g})=>c(void 0,void 0,void 0,(function*(){const a=new o(e,i),c=new h({identity:a,host:s},t,r,n);return A.a.includes(s)||(yield c.fetchRootKey()),c})),B=(e,t,{whitelist:r=l,host:n=g},A=null,i=\"\")=>c(void 0,void 0,void 0,(function*(){const s=yield e.call({handler:\"verifyWhitelist\",args:[t,r]});return yield f({publicKey:s,clientRPC:e,idl:A,batchTxId:i,whitelist:r,host:n})})),I=(e,t,r)=>c(void 0,void 0,void 0,(function*(){return n.a.createActor(r,{agent:e,canisterId:t})}))},function(e,t,r){var n,A,i,s,o,a,c,u;e.exports=(u=r(3),r(36),r(37),A=(n=u).lib,i=A.Base,s=A.WordArray,o=n.algo,a=o.MD5,c=o.EvpKDF=i.extend({cfg:i.extend({keySize:4,hasher:a,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var r,n=this.cfg,A=n.hasher.create(),i=s.create(),o=i.words,a=n.keySize,c=n.iterations;o.length<a;){r&&A.update(r),r=A.update(e).finalize(t),A.reset();for(var u=1;u<c;u++)r=A.finalize(r),A.reset();i.concat(r)}return i.sigBytes=4*a,i}}),n.EvpKDF=function(e,t,r){return c.create(r).compute(e,t)},u.EvpKDF)},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return J})),r.d(t,\"b\",(function(){return i.a})),r.d(t,\"c\",(function(){return K.b})),r.d(t,\"d\",(function(){return g.c}));var n={};r.r(n),r.d(n,\"defaultStrategy\",(function(){return S})),r.d(n,\"once\",(function(){return D})),r.d(n,\"conditionalDelay\",(function(){return q})),r.d(n,\"maxAttempts\",(function(){return R})),r.d(n,\"throttle\",(function(){return F})),r.d(n,\"timeout\",(function(){return H})),r.d(n,\"backoff\",(function(){return N})),r.d(n,\"chain\",(function(){return M}));var A=r(0),i=r(8),s=r(2),o=({IDL:e})=>{const t=e.Principal,r=e.Vec(e.Nat8),n=e.Record({compute_allocation:e.Opt(e.Nat),memory_allocation:e.Opt(e.Nat)});return e.Service({provisional_create_canister_with_cycles:e.Func([e.Record({amount:e.Opt(e.Nat),settings:e.Opt(n)})],[e.Record({canister_id:t})],[]),create_canister:e.Func([],[e.Record({canister_id:t})],[]),install_code:e.Func([e.Record({mode:e.Variant({install:e.Null,reinstall:e.Null,upgrade:e.Null}),canister_id:t,wasm_module:r,arg:e.Vec(e.Nat8)})],[],[]),set_controller:e.Func([e.Record({canister_id:t,new_controller:e.Principal})],[],[])})};function a(e){function t(e,t,r){const n=t[0];let A=s.a.fromHex(\"\");return n&&\"object\"==typeof n&&n.canister_id&&(A=s.a.from(n.canister_id)),{effectiveCanisterId:A}}return J.createActor(o,Object.assign(Object.assign(Object.assign({},e),{canisterId:s.a.fromHex(\"\")}),{callTransform:t,queryTransform:t}))}class c extends Error{}var u=r(1),l=r(9),g=r(7),h=r(53);let f;const B=\"\\n    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\\n    g8AAEF8CQAJAIAZB6AFqEFoNACAGQShqEIQBDQAgBkGIPWoQS0EAIQcgBkGIwwBqQTgQchogBkG4IWpBOBByGiAGQYjA\\n    AGoQSyAGQcjEAGoQSyAGQcjJAGoQSyAGQcjMAGoQSyAGQagGahBLIAZBsAxqEEsgBkHIzwBqEEsgBkHQ1QBqEEsgBkHY\\n    2wBqEEsgBkG4FWoQSyAGQZgjaiAGQcjJAGpBwAEQZxogBkHYJGogBkHIzABqQcABEGcaIAZBmCZqIAZBqAZqQcABEGca\\n    IAZB2CdqIAZBsAxqQcABEGcaIAZBmClqIAZByM8AakHAARBnGiAGQdgqaiAGQdDVAGpBwAEQZxogBkGYLGogBkHY2wBq\\n    QcABEGcaIAZB2C1qIAZBuBVqQcABEGcaIAZBuBVqQecAEHIaIAZBiMAAaiAGQShqEH8gBkGIwABqEBggBkGYI2ogBkEo\\n    ahB/A0AgB0HACkYEQCAGQbghaiAGQegBahBrIAYpA7ghIRcgBkG4IWpBARCdASAGQbghahBEIAYpA7ghIRYgBkGIwwBq\\n    IAZBuCFqEGsgBkGIwwBqQQEQnQEgBkGIwwBqEEQgBkG4IWogBkGIwwBqIBdCAoGnEE8gBkGIwABqIAZBKGogFkICgacQ\\n    bSAGQcjEAGogBkGIwABqEH8gBkG4IWoQKUEDaiIJQQJ2IgdBAWohAkEAIQgCQAJAAkADQAJAIAZBuCFqQQUQjAEhAyAC\\n    IAhGBEAgCUGYA0kNASACQecAQbCEwAAQPAALIAhB5wBGDQIgBkG4FWogCGogA0FwaiIDOgAAIAZBuCFqIANBGHRBGHUQ\\n    ngEgBkG4IWoQRCAGQbghakEEEDsgCEEBaiEIDAELCyAGQbgVaiACaiADOgAAIANBGHRBGHVBf2oiA0EBdiECIANBD0sN\\n    ASAGQYg9aiAGQZgjaiACQcABbGoQfwNAIAdBf0YEQCAGQYg9aiAGQcjEAGoQcyAGQZgjaiAGQYg9akHAARBnGgwICyAH\\n    QeYASw0DIAZBiMAAaiAGQZgjaiAGQbgVaiAHaiwAABAfIAdBf2ohByAGQYg9ahAYIAZBiD1qEBggBkGIPWoQGCAGQYg9\\n    ahAYIAZBiD1qIAZBiMAAahAMDAALAAtB5wBB5wBBoITAABA8AAsgAkEIQcCEwAAQPAALIAdB5wBB0ITAABA8AAUgBkHI\\n    xABqIAZBmCNqIAdqIgIQfyACQcABaiICIAZByMQAahB/IAIgBkGIwABqEAwgB0HAAWohBwwBCwALAAsgBkGYI2oQSwsgB\\n    kEoaiAGQZgjahB/IAZBKGoQRyAMEAlBACEHIAZBqAZqQTAQchogBkGwDGpBoKfAABBfAkACQAJAAkACQANAAkAgB0EwRg\\n    RAIAYgBi0AqAZBH3E6AKgGIAZByM8AaiAGQagGahBdIAENAUEAQQBB8ILAABA8AAsgASAHRg0CIAZBqAZqIAdqIAAgB2o\\n    tAAA6AAAgB0EBaiEHDAELC0EAIQcCQCAALAAAIgJBAE4EQCAAQTBqIQAgAUEwIAFBMEsbQVBqIQIDQCAHQTBGBEAgBkHY\\n    2wBqIAZBqAZqEF0gBkHoAWoQSyAGQegBaiAGQcjPAGoQtAEgBkGoAmoiACAGQdjbAGoQtAEgBkHoAmoQaSAGQegBahBEI\\n    AZBuBVqIAZB6AFqEE0gBkGYI2ogABCFASAGQZgjahADIAZBmCNqIAZBuBVqEFkNAyAGQegBahCUAQwDCyACIAdGDQQgBk\\n    GoBmogB2ogACAHai0AADoAACAHQQFqIQcMAAsACyAGQZgjahBLIAZB0NUAakE4EHIaIAZBATYCiFYgBkGYI2ogBkHIzwB\\n    qELQBIAZBmCNqEEQgBkGYJGoQaSAGQdjbAGogBkGYI2oQTQJAIAZB2NsAaiAGQdDVAGoQXEEBRwRAIAZBmCNqEJQBDAEL\\n    IAZBuBVqIAZB2NsAaiAGQdDVAGoQIyAGQbgVahBYBEAgBkG4FWoQQSAGQbgVahBECyAGQdgjaiAGQbgVahClAQsgAkEgc\\n    UEFdiAGQdgjahBMQQFGRwRAIAZBmCNqEKYBCyAGQegBaiAGQZgjakHAARBnGgsgBkHQPGpB8IHAABBfIAZB6AFqEIQBRQ\\n    0CDAMLIAEgAUHggsAAEDwACyAHQTBqIAFBgIPAABA8AAsgBkGoA2oQSyAGQagDaiAGQegBahB/IAZBuBJqEEsgBkG4Emo\\n    gBkHoAWoQfyAGQbgSahBHIAZByMcAakHwgcAAEF8gBkGYI2pBqILAABBfIAZBiMMAaiAGQZgjahCLAUEAIQAgBkG4IWpB\\n    OBByGiAGQfAhakE4EHIhCSAGQdjbAGpB8IHAABBfIAZBuBVqQYCAwAAQXyAGQZgjakE4EHIaIAZBkCNqIQsgBkGwFWohC\\n    gJAAkADQCAAQQdGDQIgAEEBaiEBIAZBuBVqIABBA3RqIQxCACEXQQAhAwNAIANBf2ohByAKIANBA3RqIQIgCyAAIANqQQ\\n    N0aiEIA0AgB0EGRgRAIAEhAAwDCyAIQQhqIQggAkEIaiECIAAgB0EBaiIHakEGSw0ACyAAQQZNBEAgB0EGSw0DIAdBAWo\\n    hAyAGQQhqIAIpAwAiFiAWQj+HIAwpAwAiFiAWQj+HEDEgCCAGKQMIIhkgF3wiFiAIKQMAIhp8IhhC//////////8DgzcD\\n    ACAYIBZUrSAWIBlUrSAGQRBqKQMAIBdCP4d8fCAaQj+HfHxCBoYgGEI6iIQhFwwBCwsLIABBB0G0ncAAEDwACyAHQQdBx\\n    J3AABA8AAsgBkG4IWogBkHQPGoQayAGQbghaiAGQZgjahAkIAkgBkHQPGoQayAJIAZBmCNqEBwgCSAGQdjbAGoQYyAGQb\\n    gSaiAGQYjDAGoQSCAGQbghahApIQAgBkGIyABqIAZBuCFqIAZByMcAahCNASAGQYjIAGoQKSAASQRAIAZBuCFqIAZBiMg\\n    AahBrIAZBqANqEKYBCyAJECkhACAGQYjIAGogCSAGQcjHAGoQjQEgBkGIyABqECkgAEkEQCAJIAZBiMgAahBrIAZBuBJq\\n    EKYBCyAGQbghahBEIAkQREEAIQcgBkHIyABqQTgQchogBkGIyQBqQTgQchogBkGYO2pBOBByGiAGQYg9ahBLIAZBiMAAa\\n    hBLIAZByMQAahBLIAZByMkAahBLIAZByMwAahBLIAZBqAZqEEsgBkGwDGoQSyAGQcjPAGoQSyAGQdDVAGoQSyAGQdjbAG\\n    oQSyAGQbgVahBLIAZBmCNqIAZByMkAakHAARBnGiAGQdgkaiAGQcjMAGpBwAEQZyEAIAZBmCZqIAZBqAZqQcABEGchASA\\n    GQdgnaiAGQbAMakHAARBnIQsgBkGYKWogBkHIzwBqQcABEGchCiAGQdgqaiAGQdDVAGpBwAEQZyECIAZBmCxqIAZB2NsA\\n    akHAARBnIQMgBkHYLWogBkG4FWpBwAEQZyEIIAZBuBVqQcwBEHIaIAZByMgAaiAGQbghahBrIAZBiMkAaiAJEGsgACAGQ\\n    agDahB/IAAgBkG4EmoQcyABIAZBqANqEH8gASAGQbgSahAMIAZBiD1qIAZBuBJqEH8gBkGIPWoQGCAGQcjEAGogABB/IA\\n    ZBmCNqIAZByMQAahB/IAZBmCNqIAZBiD1qEHMgBkHIxABqIAEQfyALIAZByMQAahB/IAsgBkGIPWoQDCAGQYjAAGogBkG\\n    oA2oQfyAGQYjAAGoQGCAGQcjEAGogABB/IAIgBkHIxABqEH8gAiAGQYjAAGoQDCAGQcjEAGogARB/IAMgBkHIxABqEH8g\\n    AyAGQYjAAGoQDCAGQcjEAGogAhB/IAogBkHIxABqEH8gCiAGQYg9ahBzIAZByMQAaiADEH8gCCAGQcjEAGoQfyAIIAZBi\\n    D1qEAwgBikDyEghFyAGQcjIAGpBARCdASAGQcjIAGoQRCAGKQPISCEWIAZBmDtqIAZByMgAahBrIAZBmDtqQQEQnQEgBk\\n    GYO2oQRCAGQcjIAGogBkGYO2ogF0ICgacQTyAGQYjAAGogBkGoA2ogFkICgacQbSAGQcjEAGogBkGIwABqEH8gBikDiEk\\n    hFyAGQYjJAGpBARCdASAGQYjJAGoQRCAGKQOISSEWIAZBmDtqIAZBiMkAahBrIAZBmDtqQQEQnQEgBkGYO2oQRCAGQYjJ\\n    AGogBkGYO2ogF0ICgacQTyAGQYg9aiAGQbgSaiAWQgKBpxBtIAZByMQAaiAGQYg9ahAMIAZBmDtqIAZByMgAahBrIAZBm\\n    DtqIAZBiMkAahBhIAZBmDtqEEQgBkGYO2oQKUEBaiICQQF2IghBAWohAAJAAkACQAJAA0ACQCAGQcjIAGpBAxCMASEBIA\\n    AgB0YEQCAGQYjJAGpBAxCMASEDIAJBlgNJDQEgAEHMAUG0g8AAEDwACyAGQcjIAGogAUF8aiIBEJ4BIAZByMgAahBEIAZ\\n    ByMgAakECEDsgBkGIyQBqIAZBiMkAakEDEIwBQXxqIgMQngEgBkGIyQBqEEQgBkGIyQBqQQIQOyAHQcwBRg0CIAZBuBVq\\n    IAdqIAMgAUECdGo6AAAgB0EBaiEHDAELCyAGQbgVaiAAaiADIAFBAnRqIgA6AAAgAEEYdEEYdUF/aiIBQQF2IQAgAUEPS\\n    w0BIAZBiD1qIAZBmCNqIABBwAFsahB/A0AgCEF/Rg0EIAhBywFLDQMgBkGIwABqIAZBmCNqIAZBuBVqIAhqLAAAEB8gCE\\n    F/aiEIIAZBiD1qEBggBkGIPWoQGCAGQYg9aiAGQYjAAGoQDAwACwALQcwBQcwBQaSDwAAQPAALIABBCEHEg8AAEDwACyA\\n    IQcwBQdSDwAAQPAALIAZBiD1qIAZByMQAahBzIAZBqANqIAZBiD1qQcABEGcaQX8hByAGQagDahCEAUUNASAGQegBahCm\\n    AUEAIQcgBkHIzwBqQeAAEHIaIAUEQANAIAdB4ABGBEAgBiAGLQDIT0EfcToAyE8gBkHQ1QBqIAZByM8AahAhAkACQAJAI\\n    AQsAAAiA0F/SgRAIARB4ABqIQAgBUHgACAFQeAASxtBoH9qIQFBACEHA0AgB0HgAEYEQCAGQZgjaiAGQcjPAGoQISAGQa\\n    gDaiAGQdDVAGogBkGYI2oQPwwDCyABIAdGDQMgBkHIzwBqIAdqIAAgB2otAAA6AAAgB0EBaiEHDAALAAsgBkGYI2oQKiA\\n    GQYjAAGpBOBByGiAGQQE2AsBAIAZBmCNqIAZB0NUAahCQASAGQZgkaiIBELABIAZBmCVqELABIAZBmCNqEKgBIAZB2NsA\\n    aiAGQZgjahAmIAZBuBVqIAZB2NsAahBeIAZBuBVqEKYBIAZBuBVqIAZB2NsAahAPIAZBsAxqIAZBuBVqQcAAEGcaAkAgB\\n    kGwDGogBkGIwABqEFxBAUcEQCAGQZgjahCYAQwBCyAGQdjbAGoQhwFFBEAgBkHIxABqIAZBmNwAaiIAEIUBIAZByMkAai\\n    AGQdjbAGoQhQEgBkHIzABqIAZB2NsAahCFASAGQagGakE4EHIaIAZBATYC4AYgBkGwDGpBOBByGiAGQQE2AugMIAZByMQ\\n    AahADIAZByMkAahADIAZByMQAaiAGQcjJAGoQeCAGQcjEAGoQRCAGQbgVaiAGQcjEAGogBkGIwABqECMgBkHIyQBqIAZB\\n    uBVqEKUBIAZByMQAaiAGQcjJAGoQpQEgBkHIyQBqIAZB2NsAahClASAGQcjJAGogBkHIxABqEHggBkHIyQBqEEQgBkHIy\\n    QBqEEIgBkHIxABqIAAQpQEgBkHIxABqEEIgBkHIyQBqIAZBsAxqEFwhAiAGQcjMAGogBkGwDGoQpQEgBkHIzABqEEEgBk\\n    HIzABqEEQgBkGoBmogBkHIyQBqEKUBIAZBqAZqEEEgBkGoBmoQRCAGQcjJAGogBkGoBmpBASACayICEHkgBkGwDGogBkH\\n    IzABqIAIQeSAGQbgVaiAGQcjJAGogBkGwDGoQIyAGQdjbAGogBkG4FWoQpQEgBkHIzABqIAZByMkAahClASAGQcjMAGog\\n    BkGwDGoQNCAGQcjMAGogBkHY2wBqEEggACAGQcjMAGoQpQEgACAGQcjEAGoQSCAGQagGaiAGQdjbAGoQpQEgBkHY2wBqI\\n    AAgAhB5IAAgBkGoBmogAhB5IAZB2NsAahCJASEAIAZBuBVqIAZB2NsAahBeIAZBuBVqEDogBkG4FWoQqAEgBkHY2wBqIA\\n    ZBuBVqIAAQjwELIAZB2NsAahCJAQRAIAZB2NsAahA6CyAGQdjbAGoQqwEgASAGQdjbAGoQkAELQQAhAgJAIAEQhwENACA\\n    GQdgkahBMIgINACABEEwhAgsgA0EgcUEFdiACQQFGRwRAIAZBmCNqEJwBCyAGQagDaiAGQZgjakGAAxBnGgsgBkHIyABq\\n    QfCBwAAQXyAGQagDahCIAQ0FIAZBuBJqECogBkG4FWoQKiAGQdDVAGoQKiAGQdjbAGoQKiAGQZgjahAqIAZBuBhqIAZB0\\n    NUAakGAAxBnIQ0gBkG4G2ogBkHY2wBqQYADEGchCSAGQbgeaiAGQZgjakGAAxBnIQAgBkHY2wBqQbiAwAAQXyAGQZgjak\\n    HwgMAAEF8gBkGIwwBqIAZB2NsAaiAGQZgjahBJIAZBiMkAakHwgcAAEF9BACEHIAZBuCFqQTgQchogBkHwIWpBqAEQciE\\n    DIAZBsAxqQfCBwAAQXyAGQcjPAGpBgIDAABBfIAZB4CJqIQEgBkGoImohDyAGQdDVAGogBkHIyABqEF8DQCAHQagBRg0C\\n    IAZBuCFqIAdqIgIgBkHQ1QBqEGsgAiAGQcjPAGoQJCAHQThqIQcgBkHQ1QBqIAZByM8AahAcDAALAAsgB0HgAGogBUGwp\\n    MAAEDwACyABIAZB0NUAahBrQQAhByAGQdjbAGpBOBByGiAGQZgjaiADIAZBsAxqEI0BIAZB2NsAaiAGQZgjahBrIAMgBk\\n    HY2wBqEGsgBkGYI2ogASAGQbAMahCNASAGQdjbAGogBkGYI2oQayABIAZB2NsAahBrIAZBiD1qECogBkGIwwBqEEAgBkG\\n    IwwBqEKgBIAZBmDtqQTgQchogBkG4FWogBkGoA2oQfgNAIAdBgAlGBEACQCAGQbgVaiECQQAhBwNAIAdB4AFHBEAgBkG4\\n    IWogB2oiBBApIQUgBkGYI2ogBCAGQYjJAGoQjQEgBkGYO2ogBkGYI2oQayAGQZg7ahApIAVJBEAgBCAGQZg7ahBrIAIQn\\n    AELIAQQRCAHQThqIQcgAkGAA2ohAgwBCwsgBkHIxABqECogBkGIwABqECogBkGYI2oQKiAGQcjJAGoQKiAGQcjMAGoQKi\\n    AGQagGahAqIAZBsAxqECogBkHIzwBqECogBkHQ1QBqECogBkHY2wBqECogBkGYJmogBkHIyQBqQYADEGchAiAGQZgpaiA\\n    GQcjMAGpBgAMQZyEEIAZBmCxqIAZBqAZqQYADEGchBSAGQZgvaiAGQbAMakGAAxBnIQsgBkGYMmogBkHIzwBqQYADEGch\\n    CiAGQZg1aiAGQdDVAGpBgAMQZyEIIAZBmDhqIAZB2NsAakGAAxBnIQxBACEHIAZBqAZqQTgQchogBkGwDGogBkG4IWoQX\\n    yAGQcjPAGogAxBfIAZB0NUAaiAPEF8gBkHY2wBqIAEQXyAGQegMaiAGQcjPAGpBOBBnGiAGQaANaiAGQdDVAGpBOBBnGi\\n    AGQdgNaiAGQdjbAGpBOBBnGiAGQdDVAGpBlwMQchogBkHY2wBqQZcDEHIaA0AgB0HgAUYEQAJAIAZBmCNqIAZBuBVqEH4\\n    gBkHIxABqIAZBmCNqEH4gAiAGQcjEAGoQfiACIA0QCyAEIAZByMQAahB+IAQgCRALIAZByMQAaiACEH4gBSAGQcjEAGoQ\\n    fiAFIAkQCyAGQcjEAGogBkGYI2oQfiALIAZByMQAahB+IAsgABALIAZByMQAaiACEH4gCiAGQcjEAGoQfiAKIAAQCyAGQ\\n    cjEAGogBBB+IAggBkHIxABqEH4gCCAAEAsgBkHIxABqIAUQfiAMIAZByMQAahB+IAwgABALIAZBsAxqQQEgBikDsAxCAo\\n    GnayIFEJ0BIAZBsAxqEEQgBkGoBmoQdEEAIQAgBkGwDGohAgJAAkACQAJAA38gAEEERgR/IAZBqAZqECkiA0GXA08NAiA\\n    DQQFqIQkgBkHY2wBqIANqQQE6AAAgBkHY2wBqIQggAwVBACEHA0AgB0E4RwRAIAZBqAZqIAdqIgEgASkDACACIAdqKQMA\\n    hDcDACAHQQhqIQcMAQsLIAJBOGohAiAAQQFqIQAMAQsLIQcDQCAHBEAgBkGwDGpBARA7IAggBikDsAxCAoGnQQF0QX9qO\\n    gAAIAdBf2ohByAIQQFqIQgMAQsLQQAhBwNAIAcgCUYEQCAGQYjAAGogBkGYI2ogBkHQ1QBqIANqLQAAQRl0QRh1QQFyEC\\n    AgA0F/aiEHA0AgB0F/Rg0GIAZBiMAAahAUIAdBlgNLDQUgBkHIxABqIAZBmCNqIAZB2NsAaiAHai0AACAGQdDVAGogB2o\\n    tAABBAXRqQRh0QRh1ECAgB0F/aiEHIAZBiMAAaiAGQcjEAGoQCwwACwALIAdBlwNGDQIgB0EBaiEBQQAhACAGQdDVAGog\\n    B2oiC0EAOgAAIAZB2NsAaiAHai0AACEKQQEhAkE4IQcDQCAHQeABRgRAIAEhBwwCBSAGQbAMaiAHaiIEKQMAIRcgBEEBE\\n    DsgBCAKIBdCAoGnbCIIQRh0QRl1EJ4BIAQQRCALIAAgAiAIbGoiADoAACAHQThqIQcgAkEBdCECDAELAAsACwALIANBlw\\n    NBkKXAABA8AAtBlwNBlwNBoKXAABA8AAsgB0GXA0GwpcAAEDwACyAGQcjEAGogBkGIwABqEH4gBkHIzwBqECogBkHIzwB\\n    qIAZBuBVqEH4gBkHIzwBqEJwBIAZByMQAaiAGQcjPAGoQCyAGQYjAAGogBkHIxABqIAUQbyAGQbgSaiAGQYjAAGoQfkF/\\n    IQcgBkG4EmoQiAFFDQogBkG4EmoQOCAGQbgVakG4gMAAEF8gBkGYI2pB8IDAABBfIAZBmDtqIAZBuBVqIAZBmCNqEEkgB\\n    kGYPGpBOBByGiAGQdA8akE4EHIaIAZBiD1qECogBkHoAWoQhAFFBEAgBkEoahCEAQ0BIAZBiMAAahAqIAZBiMAAaiAGQb\\n    gSahB+IAZBiMAAahBKIAZBiMMAahBLIAZBiMMAaiAGQegBahB/IAZBiMMAahBHIAZByMQAahAqIAZByMQAaiAGQagDahB\\n    +IAZByMQAahBKIAZBuCFqEEsgBkG4IWogBkEoahB/IAZBuCFqEEcgBkGYI2ogBkGIwwBqEIUBIAZByMcAaiAGQZgjahCF\\n    ASAGQZgjaiAGQcjDAGoQhQEgBkGIyABqIAZBmCNqEIUBIAZBmCNqIAZBuCFqEIUBIAZByMgAaiAGQZgjahCFASAGQZgja\\n    iAGQfghahCFASAGQYjJAGogBkGYI2oQhQEgBkHIyQBqECogBkHIzABqECogBkHQ1QBqEGAgBkHIyQBqIAZBiMAAahB+IA\\n    ZByMwAaiAGQcjEAGoQfiAGQbAMahAqIAZBsAxqIAZBiMAAahB+IAZBsAxqEJwBIAZByM8AahAqIAZByM8AaiAGQcjEAGo\\n    QfiAGQcjPAGoQnAEgBkHQPGogBkGYPGoQVEF/aiEHA0AgB0EBTQRAIAZB0NUAahCTASAGQagGaiAGQdDVAGpBiAYQZxoM\\n    BgsgBkHQ1QBqEBsgBkHY2wBqIAZByMkAaiAGQcjHAGogBkGIyABqEBcgBkG4FWogBkHIzABqIAZByMgAaiAGQYjJAGoQF\\n    yAGQdjbAGogBkG4FWoQBiAGQdDVAGogBkHY2wBqEAQCQAJAIAZB0DxqIAdBf2oiBxBXIAZBmDxqIAcQV2tBAWoOAwECAA\\n    ILIAZB2NsAaiAGQcjJAGogBkGIwABqIAZByMcAaiAGQYjIAGoQFiAGQZgjaiAGQcjMAGogBkHIxABqIAZByMgAaiAGQYj\\n    JAGoQFiAGQdjbAGogBkGYI2oQBiAGQdDVAGogBkHY2wBqEAQMAQsgBkHY2wBqIAZByMkAaiAGQbAMaiAGQcjHAGogBkGI\\n    yABqEBYgBkGYI2ogBkHIzABqIAZByM8AaiAGQcjIAGogBkGIyQBqEBYgBkHY2wBqIAZBmCNqEAYgBkHQ1QBqIAZB2NsAa\\n    hAEDAALAAsgBkGoBmogBkGoA2ogBkEoahAQDAMLBSAGQbAMaiAHahBEIAdBOGohBwwBCwsgBkGoBmogBkG4EmogBkHoAW\\n    oQEAsFIAZBiD1qIAZBuBVqIAdqIgIQfiACQYADaiIEIAZBiD1qEH4gBkGYI2ogBkGIwwBqEF4gBkGYI2oQMiAEEKYBIAJ\\n    BgARqIgUQpgEgAkGABWoiAhCmASACEKsBIAQgBkGYI2oQDyAFIAZBmCNqEA8gBSAGQYjDAGoQDyAHQYADaiEHDAELCyAG\\n    QbgVakG4gMAAEF8gBkGYI2pB8IDAABBfIAZByMQAaiAGQbgVaiAGQZgjahBJIAZBiMAAakGAgMAAEF8gBkGwDGogBkGoB\\n    moQaiAGQcjPAGogBkGwDGoQaiAGQdDVAGogBkHIzwBqEI4BIAZB2NsAaiAGQcjRAGoiARCOASAGQbgVaiAGQcjPAGoQjg\\n    EgBkGYI2oQLyAGQcjPAGoQmQEgBkHQ1QBqECIgBkHY2wBqIAZByNMAaiIAEBkgBkHY2wBqEGYgBkHQ1QBqIAZB2NsAahC\\n    BASAGQdDVAGoQrAEgBkHY2wBqIAAQkgEgBkHY2wBqECIgBkHY2wBqEGYgBkG4FWogARAZIAZB2NsAaiAGQbgVahCBASAG\\n    QdjbAGoQrAEgBkG4FWogARCSASAGQbgVahAiIAZBmCNqIAZByM8AahCSASAGQZgjaiAAEBkgBkG4FWogBkGYI2oQgQEgB\\n    kG4FWoQrAEgBkGYI2ogARCSASAGQZgjaiAGQbgVahAZIAZBmCNqEGYgBkHIzwBqIAZB0NUAahAZIAZBmCNqIAZByM8Aah\\n    CWASAAIAZB2NsAahAZIAAQZiAGQZgjaiAAEJYBIAZBmCNqEKwBIAZByMkAaiAGQZgjahBeIAZByMwAaiAGQZgkaiICEF4\\n    gBkHIyQBqEDIgBkHIzABqEDIgBkHIzABqEFUgBkHIzABqEKgBIAZByMkAaiAGQcjMAGoQfSAGQcjJAGoQQCAGQZgjaiAG\\n    QcjJAGoQDyAGQcjJAGoQOiAGQcjJAGoQqAEgAiAGQcjJAGoQDyAGQcjPAGogBkHQ1QBqEJIBIAZByM8AaiAGQZgjahAZI\\n    AEgBkHY2wBqEJIBIAEgBkGYI2oQGSAAIAZBuBVqEJIBIAAgBkGYI2oQGSAGQQU2AshVIAZBsAxqEJMBIAZBsAxqIAZByM\\n    8AahAOIAZByM8AaiAGQbAMahBsIAZBsAxqIAZByMQAahA3IAZBsAxqIAZByMQAahA3IAZBsAxqIAZByM8AahAOIAZB0NU\\n    AaiAGQbAMahBqIAZB0NUAahAaIAZB0NUAaiAGQbAMahAOIAZBmCNqIAZBsAxqIAZBiMAAahAdIAZB2NsAaiAGQZgjahBq\\n    IAZB2NsAahCTASAGQbgVaiAGQbAMahBqIAZBuBVqEJMBIAZBsAxqIAZB2NsAahBsIAZBsAxqIAZBuBVqEA4gBkGYI2ogB\\n    kGwDGogBkGIwABqEB0gBkHY2wBqIAZBmCNqEGwgBkHY2wBqEJMBIAZBuBVqIAZBsAxqEGwgBkG4FWoQkwEgBkGwDGogBk\\n    HY2wBqEGwgBkGwDGogBkG4FWoQDiAGQZgjaiAGQbAMaiAGQYjAAGoQHSAGQdjbAGogBkGYI2oQbCAGQdjbAGoQkwEgBkG\\n    4FWogBkGwDGoQbCAGQbgVaiAGQcjEAGoQNyAGQbAMaiAGQdjbAGoQbCAGQbAMaiAGQbgVahAOIAZBmCNqIAZBsAxqIAZB\\n    iMAAahAdIAZB2NsAaiAGQZgjahBsIAZBmCNqIAZB2NsAaiAGQYjAAGoQHSAGQdjbAGogBkGYI2oQbCAGQbgVaiAGQbAMa\\n    hBsIAZBuBVqIAZByMQAahA3IAZBuBVqIAZByMQAahA3IAZB2NsAaiAGQbgVahAOIAZBuBVqIAZBsAxqEGwgBkG4FWoQkw\\n    EgBkGwDGogBkHY2wBqEGwgBkGwDGogBkG4FWoQDiAGQbAMaiAGQdDVAGoQDiAGQbAMahCaASAGQagGaiAGQbAMakGIBhB\\n    nGiAGQZgjahBuIAZBqAZqIAZBmCNqEHtFDQMgBkGoB2ogAhB7RQ0DIAZBqAhqEIYBRQ0DQQAhByAGQagKahCGAUUNAwwE\\n    CyAFIAdHBEAgBkHIzwBqIAdqIAQgB2otAAA6AAAgB0EBaiEHDAELCyAFIAVBoKTAABA8AAtBAEEAQZCkwAAQPAALQX8hB\\n    wsgBkHg4QBqJAAgBw8LQQAhByAGQbAMakE4EHIaA0AgB0E4RwRAIAZBsAxqIAdqIAZByM8AaiAHaikDADcDACAHQQhqIQ\\n    cMAQsLIAZBmCNqIAZBsAxqEIsBIAZBqANqIAlBBnRqIAZBmCNqQcAAEGcaIAMgCmohAyALIQkMAAsACyAHIAlqIQkgAiE\\n    DDAALAAtBK0EBQaS5wQAoAgAiAEEBIAAbEQAAAAvBKgIIfwF+AkACQAJAAkAgAEH1AU8EQCAAQc3/e08NAiAAQQtqIgBB\\n    eHEhBkHYtcEAKAIAIgdFDQFBHyEIQQAgBmshBQJAAkAgBkH///8HTQRAIAZBBiAAQQh2ZyIAa0EfcXZBAXEgAEEBdGtBP\\n    mohCAsgCEECdEHkt8EAaigCACIABEAgBkEAQRkgCEEBdmtBH3EgCEEfRht0IQMDQAJAIABBBGooAgBBeHEiBCAGSQ0AIA\\n    QgBmsiBCAFTw0AIAAhAiAEIgUNAEEAIQUMAwsgAEEUaigCACIEIAEgBCAAIANBHXZBBHFqQRBqKAIAIgBHGyABIAQbIQE\\n    gA0EBdCEDIAANAAsgAQRAIAEhAAwCCyACDQILQQAhAkECIAhBH3F0IgBBACAAa3IgB3EiAEUNAyAAQQAgAGtxaEECdEHk\\n    t8EAaigCACIARQ0DCwNAIAAgAiAAQQRqKAIAQXhxIgEgBk8gASAGayIDIAVJcSIEGyECIAMgBSAEGyEFIAAoAhAiAQR/I\\n    AEFIABBFGooAgALIgANAAsgAkUNAgtB5LjBACgCACIAIAZPQQAgBSAAIAZrTxsNASACKAIYIQcCQAJAIAIgAigCDCIBRg\\n    RAIAJBFEEQIAJBFGoiAygCACIBG2ooAgAiAA0BQQAhAQwCCyACKAIIIgAgATYCDCABIAA2AggMAQsgAyACQRBqIAEbIQM\\n    DQCADIQQgACIBQRRqIgMoAgAiAEUEQCABQRBqIQMgASgCECEACyAADQALIARBADYCAAsCQCAHRQ0AAkAgAiACKAIcQQJ0\\n    QeS3wQBqIgAoAgBHBEAgB0EQQRQgBygCECACRhtqIAE2AgAgAUUNAgwBCyAAIAE2AgAgAQ0AQdi1wQBB2LXBACgCAEF+I\\n    AIoAhx3cTYCAAwBCyABIAc2AhggAigCECIABEAgASAANgIQIAAgATYCGAsgAkEUaigCACIARQ0AIAFBFGogADYCACAAIA\\n    E2AhgLAkAgBUEQTwRAIAIgBkEDcjYCBCACIAZqIgcgBUEBcjYCBCAFIAdqIAU2AgAgBUGAAk8EQEEfIQAgB0IANwIQIAV\\n    B////B00EQCAFQQYgBUEIdmciAGtBH3F2QQFxIABBAXRrQT5qIQALIAcgADYCHCAAQQJ0QeS3wQBqIQQCQAJAAkACQEHY\\n    tcEAKAIAIgNBASAAQR9xdCIBcQRAIAQoAgAiA0EEaigCAEF4cSAFRw0BIAMhAAwCC0HYtcEAIAEgA3I2AgAgBCAHNgIAI\\n    AcgBDYCGAwDCyAFQQBBGSAAQQF2a0EfcSAAQR9GG3QhAQNAIAMgAUEddkEEcWpBEGoiBCgCACIARQ0CIAFBAXQhASAAIQ\\n    MgAEEEaigCAEF4cSAFRw0ACwsgACgCCCIBIAc2AgwgACAHNgIIIAdBADYCGCAHIAA2AgwgByABNgIIDAQLIAQgBzYCACA\\n    HIAM2AhgLIAcgBzYCDCAHIAc2AggMAgsgBUEDdiIBQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgNBASABdCIBcQRAIAAoAggM\\n    AQtB1LXBACABIANyNgIAIAALIQUgACAHNgIIIAUgBzYCDCAHIAA2AgwgByAFNgIIDAELIAIgBSAGaiIAQQNyNgIEIAAgA\\n    moiACAAKAIEQQFyNgIECyACQQhqDwsCQAJAQdS1wQAoAgAiB0EQIABBC2pBeHEgAEELSRsiBkEDdiIBdiICQQNxRQRAIA\\n    ZB5LjBACgCAE0NAyACDQFB2LXBACgCACIARQ0DIABBACAAa3FoQQJ0QeS3wQBqKAIAIgFBBGooAgBBeHEgBmshBSABIQM\\n    DQCABKAIQIgBFBEAgAUEUaigCACIARQ0ECyAAQQRqKAIAQXhxIAZrIgIgBSACIAVJIgIbIQUgACADIAIbIQMgACEBDAAL\\n    AAsCQCACQX9zQQFxIAFqIgVBA3QiAEHktcEAaigCACIDQQhqIgIoAgAiASAAQdy1wQBqIgBHBEAgASAANgIMIAAgATYCC\\n    AwBC0HUtcEAIAdBfiAFd3E2AgALIAMgBUEDdCIAQQNyNgIEIAAgA2oiACAAKAIEQQFyNgIEIAIPCwJAQQIgAXQiAEEAIA\\n    BrciACIAF0cSIAQQAgAGtxaCIBQQN0IgBB5LXBAGooAgAiA0EIaiIEKAIAIgIgAEHctcEAaiIARwRAIAIgADYCDCAAIAI\\n    2AggMAQtB1LXBACAHQX4gAXdxNgIACyADIAZBA3I2AgQgAyAGaiIFIAFBA3QiACAGayIHQQFyNgIEIAAgA2ogBzYCAEHk\\n    uMEAKAIAIgAEQCAAQQN2IgJBA3RB3LXBAGohAEHsuMEAKAIAIQgCf0HUtcEAKAIAIgFBASACQR9xdCICcQRAIAAoAggMA\\n    QtB1LXBACABIAJyNgIAIAALIQMgACAINgIIIAMgCDYCDCAIIAA2AgwgCCADNgIIC0HsuMEAIAU2AgBB5LjBACAHNgIAIA\\n    QPCyADKAIYIQcCQAJAIAMgAygCDCIBRgRAIANBFEEQIANBFGoiASgCACICG2ooAgAiAA0BQQAhAQwCCyADKAIIIgAgATY\\n    CDCABIAA2AggMAQsgASADQRBqIAIbIQIDQCACIQQgACIBQRRqIgIoAgAiAEUEQCABQRBqIQIgASgCECEACyAADQALIARB\\n    ADYCAAsgB0UNAyADIAMoAhxBAnRB5LfBAGoiACgCAEcEQCAHQRBBFCAHKAIQIANGG2ogATYCACABRQ0EDAMLIAAgATYCA\\n    CABDQJB2LXBAEHYtcEAKAIAQX4gAygCHHdxNgIADAMLAkACQAJAAkACQEHkuMEAKAIAIgEgBkkEQEHouMEAKAIAIgAgBk\\n    sNA0EAIQUgBkGvgARqIgJBEHZAACIAQX9GDQYgAEEQdCIDRQ0GQfS4wQAgAkGAgHxxIgVB9LjBACgCAGoiAjYCAEH4uME\\n    AQfi4wQAoAgAiACACIAAgAksbNgIAQfC4wQAoAgAiBEUNAUH8uMEAIQADQCAAKAIAIgEgACgCBCICaiADRg0DIAAoAggi\\n    AA0ACwwEC0HsuMEAKAIAIQMCfyABIAZrIgJBD00EQEHsuMEAQQA2AgBB5LjBAEEANgIAIAMgAUEDcjYCBCABIANqIgJBB\\n    GohACACKAIEQQFyDAELQeS4wQAgAjYCAEHsuMEAIAMgBmoiADYCACAAIAJBAXI2AgQgASADaiACNgIAIANBBGohACAGQQ\\n    NyCyEGIAAgBjYCACADQQhqDwtBkLnBACgCACIAQQAgACADTRtFBEBBkLnBACADNgIAC0GUucEAQf8fNgIAQYC5wQAgBTY\\n    CAEH8uMEAIAM2AgBB6LXBAEHctcEANgIAQfC1wQBB5LXBADYCAEHktcEAQdy1wQA2AgBB+LXBAEHstcEANgIAQey1wQBB\\n    5LXBADYCAEGAtsEAQfS1wQA2AgBB9LXBAEHstcEANgIAQYi2wQBB/LXBADYCAEH8tcEAQfS1wQA2AgBBkLbBAEGEtsEAN\\n    gIAQYS2wQBB/LXBADYCAEGYtsEAQYy2wQA2AgBBjLbBAEGEtsEANgIAQaC2wQBBlLbBADYCAEGUtsEAQYy2wQA2AgBBiL\\n    nBAEEANgIAQai2wQBBnLbBADYCAEGctsEAQZS2wQA2AgBBpLbBAEGctsEANgIAQbC2wQBBpLbBADYCAEGstsEAQaS2wQA\\n    2AgBBuLbBAEGstsEANgIAQbS2wQBBrLbBADYCAEHAtsEAQbS2wQA2AgBBvLbBAEG0tsEANgIAQci2wQBBvLbBADYCAEHE\\n    tsEAQby2wQA2AgBB0LbBAEHEtsEANgIAQcy2wQBBxLbBADYCAEHYtsEAQcy2wQA2AgBB1LbBAEHMtsEANgIAQeC2wQBB1\\n    LbBADYCAEHctsEAQdS2wQA2AgBB6LbBAEHctsEANgIAQfC2wQBB5LbBADYCAEHktsEAQdy2wQA2AgBB+LbBAEHstsEANg\\n    IAQey2wQBB5LbBADYCAEGAt8EAQfS2wQA2AgBB9LbBAEHstsEANgIAQYi3wQBB/LbBADYCAEH8tsEAQfS2wQA2AgBBkLf\\n    BAEGEt8EANgIAQYS3wQBB/LbBADYCAEGYt8EAQYy3wQA2AgBBjLfBAEGEt8EANgIAQaC3wQBBlLfBADYCAEGUt8EAQYy3\\n    wQA2AgBBqLfBAEGct8EANgIAQZy3wQBBlLfBADYCAEGwt8EAQaS3wQA2AgBBpLfBAEGct8EANgIAQbi3wQBBrLfBADYCA\\n    EGst8EAQaS3wQA2AgBBwLfBAEG0t8EANgIAQbS3wQBBrLfBADYCAEHIt8EAQby3wQA2AgBBvLfBAEG0t8EANgIAQdC3wQ\\n    BBxLfBADYCAEHEt8EAQby3wQA2AgBB2LfBAEHMt8EANgIAQcy3wQBBxLfBADYCAEHgt8EAQdS3wQA2AgBB1LfBAEHMt8E\\n    ANgIAQfC4wQAgAzYCAEHct8EAQdS3wQA2AgBB6LjBACAFQVhqIgA2AgAgAyAAQQFyNgIEIAAgA2pBKDYCBEGMucEAQYCA\\n    gAE2AgAMAwsgAEEMaigCACADIARNciABIARLcg0BIAAgAiAFajYCBEHwuMEAQfC4wQAoAgAiA0EPakF4cSIBQXhqNgIAQ\\n    ei4wQBB6LjBACgCACAFaiICIAMgAWtqQQhqIgA2AgAgAUF8aiAAQQFyNgIAIAIgA2pBKDYCBEGMucEAQYCAgAE2AgAMAg\\n    tB6LjBACAAIAZrIgI2AgBB8LjBAEHwuMEAKAIAIgEgBmoiADYCACAAIAJBAXI2AgQgASAGQQNyNgIEIAFBCGohBQwCC0G\\n    QucEAQZC5wQAoAgAiACADIAAgA0kbNgIAIAMgBWohAUH8uMEAIQACQANAIAEgACgCAEcEQCAAKAIIIgANAQwCCwsgAEEM\\n    aigCAA0AIAAgAzYCACAAIAAoAgQgBWo2AgQgAyAGQQNyNgIEIAMgBmohBCABIANrIAZrIQYCQAJAIAFB8LjBACgCAEcEQ\\n    EHsuMEAKAIAIAFGDQEgAUEEaigCACIAQQNxQQFGBEAgASAAQXhxIgAQFSAAIAZqIQYgACABaiEBCyABIAEoAgRBfnE2Ag\\n    QgBCAGQQFyNgIEIAQgBmogBjYCACAGQYACTwRAQR8hBSAEQgA3AhAgBkH///8HTQRAIAZBBiAGQQh2ZyIAa0EfcXZBAXE\\n    gAEEBdGtBPmohBQsgBCAFNgIcIAVBAnRB5LfBAGohAQJAAkACQAJAQdi1wQAoAgAiAkEBIAVBH3F0IgBxBEAgASgCACIC\\n    QQRqKAIAQXhxIAZHDQEgAiEFDAILQdi1wQAgACACcjYCACABIAQ2AgAgBCABNgIYDAMLIAZBAEEZIAVBAXZrQR9xIAVBH\\n    0YbdCEBA0AgAiABQR12QQRxakEQaiIAKAIAIgVFDQIgAUEBdCEBIAUiAkEEaigCAEF4cSAGRw0ACwsgBSgCCCIAIAQ2Ag\\n    wgBSAENgIIIARBADYCGCAEIAU2AgwgBCAANgIIDAULIAAgBDYCACAEIAI2AhgLIAQgBDYCDCAEIAQ2AggMAwsgBkEDdiI\\n    CQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgFBASACdCICcQRAIAAoAggMAQtB1LXBACABIAJyNgIAIAALIQUgACAENgIIIAUg\\n    BDYCDCAEIAA2AgwgBCAFNgIIDAILQfC4wQAgBDYCAEHouMEAQei4wQAoAgAgBmoiADYCACAEIABBAXI2AgQMAQtB7LjBA\\n    CAENgIAQeS4wQBB5LjBACgCACAGaiIANgIAIAQgAEEBcjYCBCAAIARqIAA2AgALIANBCGoPC0H8uMEAIQADQAJAIAAoAg\\n    AiAiAETQRAIAIgACgCBGoiAiAESw0BCyAAKAIIIQAMAQsLQfC4wQAgAzYCAEHouMEAIAVBWGoiADYCACADIABBAXI2AgQ\\n    gACADakEoNgIEQYy5wQBBgICAATYCACAEIAJBYGpBeHFBeGoiACAAIARBEGpJGyIBQRs2AgRB/LjBACkCACEJIAFBEGpB\\n    hLnBACkCADcCACABIAk3AghBgLnBACAFNgIAQfy4wQAgAzYCAEGEucEAIAFBCGo2AgBBiLnBAEEANgIAIAFBHGohAANAI\\n    ABBBzYCACACIABBBGoiAEsNAAsgASAERg0AIAEgASgCBEF+cTYCBCAEIAEgBGsiBUEBcjYCBCABIAU2AgAgBUGAAk8EQE\\n    EfIQAgBEIANwIQIAVB////B00EQCAFQQYgBUEIdmciAGtBH3F2QQFxIABBAXRrQT5qIQALIARBHGogADYCACAAQQJ0QeS\\n    3wQBqIQMCQAJAAkACQEHYtcEAKAIAIgFBASAAQR9xdCICcQRAIAMoAgAiAkEEaigCAEF4cSAFRw0BIAIhAAwCC0HYtcEA\\n    IAEgAnI2AgAgAyAENgIAIARBGGogAzYCAAwDCyAFQQBBGSAAQQF2a0EfcSAAQR9GG3QhAQNAIAIgAUEddkEEcWpBEGoiA\\n    ygCACIARQ0CIAFBAXQhASAAIQIgAEEEaigCAEF4cSAFRw0ACwsgACgCCCICIAQ2AgwgACAENgIIIARBGGpBADYCACAEIA\\n    A2AgwgBCACNgIIDAMLIAMgBDYCACAEQRhqIAI2AgALIAQgBDYCDCAEIAQ2AggMAQsgBUEDdiICQQN0Qdy1wQBqIQACf0H\\n    UtcEAKAIAIgFBASACdCICcQRAIAAoAggMAQtB1LXBACABIAJyNgIAIAALIQEgACAENgIIIAEgBDYCDCAEIAA2AgwgBCAB\\n    NgIIC0EAIQVB6LjBACgCACIAIAZNDQBB6LjBACAAIAZrIgI2AgBB8LjBAEHwuMEAKAIAIgEgBmoiADYCACAAIAJBAXI2A\\n    gQgASAGQQNyNgIEIAFBCGoPCyAFDwsgASAHNgIYIAMoAhAiAARAIAEgADYCECAAIAE2AhgLIANBFGooAgAiAEUNACABQR\\n    RqIAA2AgAgACABNgIYCwJAIAVBEE8EQCADIAZBA3I2AgQgAyAGaiIEIAVBAXI2AgQgBCAFaiAFNgIAQeS4wQAoAgAiAAR\\n    AIABBA3YiAkEDdEHctcEAaiEAQey4wQAoAgAhBwJ/QdS1wQAoAgAiAUEBIAJBH3F0IgJxBEAgACgCCAwBC0HUtcEAIAEg\\n    AnI2AgAgAAshAiAAIAc2AgggAiAHNgIMIAcgADYCDCAHIAI2AggLQey4wQAgBDYCAEHkuMEAIAU2AgAMAQsgAyAFIAZqI\\n    gBBA3I2AgQgACADaiIAIAAoAgRBAXI2AgQLIANBCGoLtA8BA38jAEGAC2siAiQAIAJBCGoQSyACQcgBakE4EHIaIAJBAT\\n    YCgAIgAkGIAmpBOBByGiACQQE2AsACIAJByAJqQTgQchogAkEBNgKAAyACQYgDakE4EHIaIAJBATYCwAMgAkHIA2pBOBB\\n    yGiACQQE2AoAEIAJBiARqQQEQigEgAkHIBGpBOBByGiACQQE2AoAFIAJBiAVqQTgQchogAkEBNgLABSACQcgFaiABEIUB\\n    IAJBiAZqQTgQchogAkEBNgLABiACQcgGakE4EHIaIAJBATYCgAcgAkGIB2pBOBByGiACQQE2AsAHIAJByAdqQTgQchogA\\n    kEBNgKACCACQcgFahBYIQMgAkHICWpB4ITAABBfIAJBiApqIAJByAlqEIsBIAJByAFqIAJBiApqEKUBIAJByAlqQZiFwA\\n    AQXyACQYgKaiACQcgJahCLASACQYgCaiACQYgKahClASACQcgFahADIAJByAVqQQsQUiACQYgGaiACQcgFahClASACQYg\\n    GaiACQYgEahB4IAJBiAZqEEQgAkGIBmogAkHIBWoQSCACQYgFaiACQcgBahClASACQYgFaiACQYgGahBIIAJBiAZqIAJB\\n    iARqEHggAkGIBmoQRCACQYgGaiACQYgCahBIIAJBiAZqEEEgAkGIBmoQRCACQYgDaiACQYgGahClASACQcgDaiACQcgFa\\n    hClASACQcgDaiACQYgDahBIIAJByAdqIAJBiANqEKUBIAJByAdqEAMgAkHIBmogAkGIBWoQpQEgAkHIBmoQAyACQYgGai\\n    ACQcgBahClASACQYgGaiACQcgGahBIIAJByAdqIAJBiAZqEHggAkHIB2oQRCACQcgHaiACQYgDahBIIAJByAZqIAJBiAV\\n    qEEggAkGIBmogAkGIAmoQpQEgAkGIBmogAkHIBmoQSCACQcgHaiACQYgGahB4IAJByAdqEEQgAkGIBmogAkHIB2oQpQEg\\n    AkGIBmogAkGIBWoQSCACQYgGaiACQYgHahBcIQQgAkGIBWogAkGIBmoQpQEgAkGIBWogAkGIB2oQNCACQYgFaiACQcgHa\\n    hBIIAJBiANqIAJBiAVqEEggAkHIA2ogAkGIBWoQSCACQcgFaiABEEggAkHIBmogAkGIBWoQpQEgAkHIBmoQAyACQYgFai\\n    ACQcgGahClASACQYgFaiACQcgFahBIIAJByAVqIAJBiAZqEKUBIAJByAVqQQsQUiACQcgJakHQhcAAEF8gAkGICmogAkH\\n    ICWoQiwEgAkHIAmogAkGICmoQpQEgAkHIAmogAkGIB2oQSCACQYgDaiACQcgDakEBIARrIgEQeSACQcgGaiACQYgFaiAB\\n    EHkgAkGIBmogAkHIBWogARB5IAJBiAdqIAJByAJqIAEQeSACQYgKaiACQYgGaiACQYgHahAjIAJByARqIAJBiApqEKUBI\\n    AJByARqIAJByAZqEEggAkHIBGoQWCEBIAJBiAZqIAJByARqEKUBIAJBiAZqEEEgAkGIBmoQRCACQcgEaiACQYgGaiABIA\\n    NzEHkgAkGICmpBiIbAABBfIAJBiAhqIAJBiApqEIsBQTghAQNAIAFBoAVGRQRAIAJBiAhqIAJBiANqEEggAkHICWogAUG\\n    IhsAAahBfIAFBOGohASACQYgKaiACQcgJahCLASACQYgGaiACQYgKahClASACQYgIaiACQYgGahB4IAJBiAhqEEQMAQsL\\n    IAJByAhqIAJBiANqEIUBIAJByAlqQaiLwAAQXyACQYgKaiACQcgJahCLASACQYgGaiACQYgKahClASACQcgIaiACQYgGa\\n    hB4IAJByAhqEERBACEBA0AgAUH4A0ZFBEAgAkHICGogAkGIA2oQSCACQcgJaiABQeCLwABqEF8gAUE4aiEBIAJBiApqIA\\n    JByAlqEIsBIAJBiAZqIAJBiApqEKUBIAJByAhqIAJBiAZqEHggAkHICGoQRAwBCwsgAkGICmpB2I/AABBfIAJBiAlqIAJ\\n    BiApqEIsBQQAhAQNAIAFByAZGBEACQCACQcgJaiACQYgDahCFASACQcgKakHYlsAAEF8gAkGICmogAkHICmoQiwEgAkGI\\n    BmogAkGICmoQpQEgAkHICWogAkGIBmoQeCACQcgJahBEQQAhAQNAIAFBkAZGDQEgAkHICWogAkGIA2oQSCACQcgKaiABQ\\n    ZCXwABqEF8gAUE4aiEBIAJBiApqIAJByApqEIsBIAJBiAZqIAJBiApqEKUBIAJByAlqIAJBiAZqEHggAkHICWoQRAwACw\\n    ALBSACQYgJaiACQYgDahBIIAJByAlqIAFBkJDAAGoQXyABQThqIQEgAkGICmogAkHICWoQiwEgAkGIBmogAkGICmoQpQE\\n    gAkGICWogAkGIBmoQeCACQYgJahBEDAELCyACQYgJaiACQcgEahBIIAJBiAZqIAJBiAhqEKUBIAJBiAZqIAJByAlqEEgg\\n    AkEIaiACQYgGahClASACQYgGaiACQYgJahClASACQYgGaiACQcgIahBIIAJByABqIAJBiAZqEKUBIAJBiAZqIAJByAhqE\\n    KUBIAJBiAZqIAJByAlqEEggAkGIAWogAkGIBmoQpQEgACACQQhqQcABEGcaIAJBgAtqJAALzQ0CE38IfiMAQYADayIBJA\\n    AgADQCOCIUIBR+QoCAgBBaBEAgABASCyABQeABakHoABByGiABQcgBaiAAKQMAIhggGEI/hyIZIBggGRAxIAEgASkDyAE\\n    iFEL//////////wODNwPYASABQdABaikDACIXQgaGIBRCOoiEIRUgF0I6iCEaIABBCGoiCyEFIAAhBkEBIQcDQCAHQQZP\\n    BEAgAEEYaiEMIABBKGohCyAAQRBqIQcgACkDMCEYQQQhBkEAIQkgAUGgAWohDUEDIQpBAiEIQQchBQJAAkADQCAFQQpLD\\n    QIgBiAIIAYgCEsbIQ4gBiAKIAYgCksbQQN0QWhqIQ8gAUGYAWogBUEDdCIQIABqQVBqKQMAIhQgFEI/hyAYIBhCP4ciGR\\n    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\\n    OBByGiACQQE2AvgMIAJBgA1qQTgQchogAkG4DWpBATYCACACQYAIakE4EHIaIAJBATYCuAggAkHACGpBOBByGiACQfgIa\\n    kEBNgIAIAJBgApqIABBgANqIgMQXiACQYAIaiACQYAKahCQASACQYAKaiABQYADaiIFEF4gAkGACGogAkGACmoQDyACQc\\n    AMahCpASAERQRAIAJBgApqIAMQXiACQcAMaiACQYAKahCQASACQYAKaiABQYACahBeIAJBwAxqIAJBgApqEA8LIAAoAoA\\n    GQQRHBEAgAkGACmogAEGAAmoQXiACQcAMaiACQYAKahCQASACQYAKaiAFEF4gAkHADGogAkGACmoQDwsgAkGABGogAkHA\\n    DGogAkGACGoQoQEgAkGABGoQZgsgAkGACGogABCOASACQYAKaiABEI4BIAJBgAhqIABBgAJqIgQQlgEgAkGACGoQrAEgA\\n    kGACmogAUGAAmoiBRCWASACQYAKahCsASACQYACaiACQYAIahCSASACQYACaiACQYAKahAZIAJBgAhqIAQQkgEgAkGACG\\n    ogAEGABGoiAxCWASACQYAIahCsASACQYAKaiAFEJIBIAJBgApqIAFBgARqIgUQlgEgAkGACmoQrAEgAkGABmogAkGACGo\\n    QkgEgAkGABmogAkGACmoQGSACQYAIaiACEJIBIAJBgAhqECsgAkGACmogAkGABGoQkgEgAkGACmoQKyACQYACaiACQYAI\\n    ahCWASAEIAJBgAJqEJIBIAQgAkGACmoQlgEgAkGABmogAkGACmoQlgEgAkGABGogAkGACGoQlgEgAkGACGogABCSASACQ\\n    YAIaiADEJYBIAJBgAhqEKwBIAJBgApqIAEQkgEgAkGACmogBRCWASACQYAKahCsASACQYAIaiACQYAKahAZIAJBgARqIA\\n    JBgAhqEJYBIAJBgAhqIAMQkgEgAkGACGogBRAZIAJBgApqIAJBgAhqEJIBIAJBgApqECsgAyACQYAEahCSASADIAJBgAp\\n    qEJYBIAJBgAZqIAJBgApqEJYBIAJBgAhqEGYgBCACQYAIahCWAQwDCyAAIAEQBgwECyACQcAMaiABQYAFahBeIAJBgAxq\\n    IAJBwAxqQcAAEGcaIAJBgAZqIAJBgAxqEKMBCyACQYAGahBmIAJBgAhqIAIQkgEgAkGACGoQKyACQYACaiACQYAIahCWA\\n    SAFIAJBgAJqEJIBIAJBgARqIAJBgAhqEJIBIAJBgAhqIAAQkgEgAkGACGogAxCWASACQYAIahCsASACQYAKaiABEJIBIA\\n    JBgApqIAFBgARqEJYBIAJBgApqEKwBIAJBgAhqIAJBgApqEBkgAkGABGogAkGACGoQlgEgAkGACGogAxCSAQJAIARBAkc\\n    EQCACQcAMaiABQYAFahBeIAJBgAhqIAJBwAxqEKIBDAELIAJBwAxqIAFBgAVqEF4gAkGADGogAkHADGpBwAAQZxogAkGA\\n    CGogAkGADGoQowELIAJBgAhqEGYgAkGACmogAkGACGoQkgEgAkGACmoQKyADIAJBgARqEJIBIAMgAkGACmoQlgEgAkGAB\\n    mogAkGACmoQlgEgAkGACGoQZiAFIAJBgAhqEJYBCyACQYAGahCsASACQYAGahBmIAAgAhCSASAAIAJBgAZqEJYBIABBBT\\n    YCgAYgABCZAQwBCyAAIAEQbAsgAkHADWokAAuaCQIPfwt+IwBBwAJrIgIkACACQeAAakGgp8AAEF8gAEE4EHIhDCACQZg\\n    BakHwABByGiACQZACakEwEHIaIAwQdCACIAEpAwAiFEL9//P/z///+QF+Qv//////////A4MiETcDiAIgAkHQAGogEUIA\\n    IAIpA2AiGCAYQj+HIhoQMSAUIAIpA1AiEXwiFiARVK0gAkHYAGopAwAgFEI/h3x8IhRCOocgASkDCCIRQj+HfCARIBRCB\\n    oYgFkI6iIQiEXwiEiARVK18IRNBASEDAkADQAJAIANBB0YEQCACQZACaiEJIAJB6ABqIQpBByEEIAJB4ABqIQ0gAkGIAm\\n    ohDkEGIQ8MAQsgA0EBdiIAQQFqIQUgCiAAayEGIAkgAEEDdCIHayEAIAdBCGohCCACQUBrIANBA3QiBCACQeAAamopAwA\\n    iFiAWQj+HIhQgAikDiAIiESARQj+HEDEgAkHIAGopAwAgEiAVfCIRIBJUrSATIBd8fHwgESACKQNAfCITIBFUrXwhEiAD\\n    QQFqIQcDQCADIAVNBEAgAkGIAmogBGogE0L9//P/z///+QF+Qv//////////A4MiETcDACACQTBqIBFCACAYIBoQMSACQ\\n    SBqIBFCACAWIBQQMSACQZgBaiADQQR0aiIAIAJBKGopAwAiGzcDCCAAIAIpAyAiGTcDACACKQMwIhEgE3wiFiARVK0gAk\\n    E4aikDACASfHwiFEI6hyABIAdBA3RqKQMAIhFCP4d8IBEgFEIGhiAWQjqIhCIRfCISIBFUrXwhEyAVIBl8IhUgGVStIBc\\n    gG3x8IRcgCUEIaiEJIApBAWohCiAHIQMMAwsgBkEGSw0DIAJBEGogAkHgAGogCGopAwAgAkHgAGogAGopAwB9IhEgEUI/\\n    hyACQYgCaiAAaikDACACQYgCaiAIaikDAH0iESARQj+HEDEgAikDECIRIBN8IhMgEVStIAJBGGopAwAgEnx8IRIgBUEBa\\n    iEFIABBeGohACAGQX9qIQYgCEEIaiEIDAALAAsLA0ACQCAEQQ1HBEAgDyAEQQF2IgBrIQUgDiAAQQN0IgtrIRAgDSALay\\n    EIIBMgF3wgEiAVfCITIBJUrXwhEiAEQQFqIQdBMCEAIAkhBiAKIQMDQCAAIAtGDQIgBUEGTQRAIAIgAyALaikDACAAIAh\\n    qKQMAfSIRIBFCP4cgACAQaikDACAGIAtqKQMAfSIRIBFCP4cQMSACKQMAIhEgE3wiEyARVK0gAkEIaikDACASfHwhEiAF\\n    QX9qIQUgBkEIaiEGIANBCGohAyAAQXhqIQAMAQsLIAVBB0HknsAAEDwACyAMIBJC//////////8DgzcDMCACQcACaiQAD\\n    wsgBEEDdCAMakFIaiATQv//////////A4M3AwAgEkI6hyABIAdBA3RqKQMAIhFCP4d8IBEgEkIGhiATQjqIhCIRfCISIB\\n    FUrXwhEyAXIARBBHQgAmpBOGoiAEEIaikDAH0gFSAAKQMAIhFUrX0hFyAOQQhqIQ4gDUEIaiENIA9BAWohDyAVIBF9IRU\\n    gByEEDAALAAsgBkEHQdSewAAQPAAL+QkBBH8jAEGACWsiAiQAIAJBgAhqIAAQXiACIAJBgAhqEF4gAkGACGogAEGAAWoi\\n    BBBeIAJBgAFqIAJBgAhqEF4gAkGACGogARBeIAIgAkGACGoQDyACQYAIaiABQYABaiIFEF4gAkGAAWogAkGACGoQDyAAK\\n    AKABiEDAkACQCABKAKABkECRwRAIANBAkYNASACQYAIaiAAQYAFahBeIAJBgAJqIAJBgAhqEF4gAkGACGogAUGABWoQXi\\n    ACQYACaiACQYAIahAPDAILIANBAkYEQCACQYAIaiAAQYAFahBeIAJBgAdqIAJBgAhqQcAAEGcaIAJBgAZqIAJBgAdqEIU\\n    BIAJBgAhqIAFBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGABmogAkGAB2oQSCACQYAIakE4EHIaIAJBATYCuAggAkHA\\n    CGpBOBByIAJB+AhqQQE2AgAgAkGACGogAkGABmoQpQEQsgEgAkGAAmogAkGACGpBgAEQZxoMAgsgAkGACGogAEGABWoQX\\n    iACQYACaiACQYAIahBeIAJBgAhqIAFBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGAAmogAkGAB2oQoAEMAQsgAkGACG\\n    ogAUGABWoQXiACQYACaiACQYAIahBeIAJBgAhqIABBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGAAmogAkGAB2oQoAE\\n    LIAJBgAhqIAAQXiACQYADaiACQYAIahBeIAJBgAhqIAEQXiACQYAEaiACQYAIahBeIAJBgAhqIAQQXiACQYADaiACQYAI\\n    ahCVASACQYADahCoASACQYAIaiAFEF4gAkGABGogAkGACGoQlQEgAkGABGoQqAEgAkGABWogAkGAA2oQXiACQYAFaiACQ\\n    YAEahAPIAJBgAZqIAIQXiACQYAGaiACQYABahCVASACQYAGahA6IAJBgAVqIAJBgAZqEJUBIAJBgAhqIAAQXiACQYADai\\n    ACQYAIahCQASACQYAIaiAAQYAFaiIDEF4gAkGAA2ogAkGACGoQlQEgAkGAA2oQqAEgAkGACGogARBeIAJBgARqIAJBgAh\\n    qEJABIAJBgAhqIAFBgAVqIgEQXiACQYAEaiACQYAIahCVASACQYAEahCoASACQYAHaiACQYADahBeIAJBgAdqIAJBgARq\\n    EA8gAkGABmogAhCQASACQYAGaiACQYACahCVASACQYAGahA6IAJBgAdqIAJBgAZqEJUBIAJBgAhqIAQQXiACQYADaiACQ\\n    YAIahCQASACQYAIaiADEF4gAkGAA2ogAkGACGoQlQEgAkGAA2oQqAEgAkGACGogBRBeIAJBgARqIAJBgAhqEJABIAJBgA\\n    hqIAEQXiACQYAEaiACQYAIahCVASACQYAEahCoASACQYAIaiACQYADahBeIAJBgAhqIAJBgARqEA8gAkGABmogAkGAAWo\\n    QkAEgAkGABmogAkGAAmoQlQEgAkGABmoQOiACQYAIaiACQYAGahCVASACQYABahBVIAIgAkGAAWoQlQEgACACIAJBgAVq\\n    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\\n    GogAkGABWoQfSACQYAEahCoASACQYAFaiAAEJABIAJBgAVqIAQQlQEgAkGABWoQqAEgAkGABmogARBeIAJBgAZqIAYQlQ\\n    EgAkGABmoQqAEgAkGABWogAkGABmoQDyACQYAGaiACEJABIAJBgAZqIAJBgAJqEJUBIAJBgAZqIAJBgAVqELUBIAJBgAZ\\n    qEKgBIAJBgAVqIAIQkAEgAkGABWogAhCVASACIAJBgAVqEJUBIAIQqAEgAkGAAmpBDBCfASACQYACahBVIAJBgAJqEKgB\\n    IAJBgAdqIAJBgAFqEF4gAkGAB2ogAkGAAmoQlQEgAkGAB2oQqAEgAkGAAWogAkGAAmoQfSACQYABahCoASACQYAGakEME\\n    J8BIAJBgAZqEFUgAkGABmoQqAEgAkGABWogAkGABmoQkAEgAkGABWogAkGABGoQDyACQYACaiACQYADahCQASACQYACai\\n    ACQYABahAPIAJBgAVqIAJBgAJqELUBIAJBgAZqIAIQDyACQYABaiACQYAHahAPIAJBgAZqIAJBgAFqEJUBIAIgAkGAA2o\\n    QDyACQYAHaiACQYAEahAPIAJBgAdqIAIQlQEgACACQYAFahCQASAAEKgBIAMgAkGABmoQkAEgAxCoASAEIAJBgAdqEJAB\\n    IAQQqAEgAkGACGokAAv2BQEFfyMAQYAEayICJAAgAiAAEIUBIAIgARBIIAJBQGsgAEFAayIDEIUBIAJBQGsgAUFAayIFE\\n    EggAkGAAWogAEGAAWoiBBCFASACQYABaiABQYABaiIGEEggAkHAAWogABCFASACQcABaiADEHggAkHAAWoQRCACQYACai\\n    ABEIUBIAJBgAJqIAUQeCACQYACahBEIAJBwAFqIAJBgAJqEEggAkGAAmogAhClASACQYACaiACQUBrEHggAkHAAWogAkG\\n    AAmoQgAEgAkHAAWoQRCACQYACaiADEKUBIAJBgAJqIAQQeCACQYACahBEIAJBwAJqIAUQhQEgAkHAAmogBhB4IAJBwAJq\\n    EEQgAkGAAmogAkHAAmoQSCACQcACaiACQUBrEKUBIAJBwAJqIAJBgAFqEHggAkGAAmogAkHAAmoQgAEgAkGAAmoQRCACQ\\n    cACaiAAEKUBIAJBwAJqIAQQeCACQcACahBEIAJBgANqIAEQhQEgAkGAA2ogBhB4IAJBgANqEEQgAkHAAmogAkGAA2oQSC\\n    ACQYADaiACEKUBIAJBgANqIAJBgAFqEHggAkGAA2ogAkHAAmoQswEgAkGAA2oQRCACQcACaiACEKUBIAJBwAJqIAIQeCA\\n    CIAJBwAJqEHggAhBEIAJBgAFqQQwQUiACQcADaiACQUBrEIUBIAJBwANqIAJBgAFqEHggAkHAA2oQRCACQUBrIAJBgAFq\\n    EIABIAJBQGsQRCACQYADakEMEFIgAkHAAmogAkGAA2oQpQEgAkHAAmogAkGAAmoQSCACQYABaiACQcABahClASACQYABa\\n    iACQUBrEEggAkHAAmogAkGAAWoQswEgAkGAA2ogAhBIIAJBQGsgAkHAA2oQSCACQYADaiACQUBrEHggAiACQcABahBIIA\\n    JBwANqIAJBgAJqEEggAkHAA2ogAhB4IAAgAkHAAmoQpQEgABBEIAMgAkGAA2oQpQEgAxBEIAQgAkHAA2oQpQEgBBBEIAJ\\n    BgARqJAALxQUBBH8jAEHwEmsiACQAIAAQOEF/IQEgABCIAUUEQCAAQYADakE4EHIaIABBuANqQTgQchogAEG4A2ogAEGA\\n    A2oQVCAAQfAKakG4gMAAEF8gAEHwDWpB8IDAABBfIABB8ANqIABB8ApqIABB8A1qEEkgAEHwBGpBOBByGiAAQQE2AqgFI\\n    ABBsAVqQTgQchogAEHoBWpBATYCACAAQfAFakE4EHIaIABBATYCqAYgAEGwBmpBOBByGiAAQegGakEBNgIAIABB8AZqQT\\n    gQchogAEEBNgKoByAAQbAHakE4EHIaIABB6AdqQQE2AgBBf2ohAyAAQfAHahAqIABB8AdqIAAQfiAAQfAKahAqIABB8Ap\\n    qIABB8AdqEH4gAEHwDWoQKiAAQfANaiAAQfAHahB+IABB8A1qEJwBAkACQAJAA0AgAiEBIANBAkkNAyAAQfAKaiAAQfAE\\n    aiAAQfAFaiAAQfAGahAlIAFBxABNBEAgAEHwEGogAEHwBGogAEHwBWogAEHwBmoQRiABQQh0QdCrwABqIABB8BBqEJIBI\\n    AFBAWohAgJAAkAgAEG4A2ogA0F/aiIDEFcgAEGAA2ogAxBXa0EBag4DAQMAAwsgAEHwCmogAEHwB2ogAEHwBGogAEHwBW\\n    ogAEHwBmoQHiABQcMASw0DIABB8BBqIABB8ARqIABB8AVqIABB8AZqEEYgAkEIdEHQq8AAaiAAQfAQahCSASABQQJqIQI\\n    MAgsgAEHwCmogAEHwDWogAEHwBGogAEHwBWogAEHwBmoQHiABQcMASw0DIABB8BBqIABB8ARqIABB8AVqIABB8AZqEEYg\\n    AkEIdEHQq8AAaiAAQfAQahCSASABQQJqIQIMAQsLIAFBxQBBvIHAABA8AAtBxQBBxQBBzIHAABA8AAtBxQBBxQBB3IHAA\\n    BA8AAtBACEBCyAAQfASaiQAIAEL8gQBBH8jAEGADGsiAiQAIAIgABCOASACQYACahAvIAJBgARqIABBgAJqIgMQjgEgAk\\n    GABmoQLyACQYAIaiAAEI4BIAJBgApqIAEQjgEgAiABEBkgAkGABGogAUGAAmoiBBAZIAJBgAhqIAMQlgEgAkGACmogBBC\\n    WASACQYAIahCsASACQYAKahCsASACQYACaiACQYAIahCSASACQYACaiACQYAKahAZIAJBgAhqIAMQkgEgAkGACGogAEGA\\n    BGoiBRCWASACQYAKaiAEEJIBIAJBgApqIAFBgARqIgQQlgEgAkGACGoQrAEgAkGACmoQrAEgAkGABmogAkGACGoQkgEgA\\n    kGABmogAkGACmoQGSACQYAIaiACEJIBIAJBgAhqECsgAkGACmogAkGABGoQkgEgAkGACmoQKyACQYACaiACQYAIahCWAS\\n    ADIAJBgAJqEJIBIAMgAkGACmoQlgEgAkGABmogAkGACmoQlgEgAkGABGogAkGACGoQlgEgAkGACGogABCSASACQYAIaiA\\n    FEJYBIAJBgAhqEKwBIAJBgApqIAEQkgEgAkGACmogBBCWASACQYAKahCsASACQYAIaiACQYAKahAZIAJBgARqIAJBgAhq\\n    EJYBIAJBgAhqIAUQkgEgAkGACGogBBAZIAJBgApqIAJBgAhqEJIBIAJBgApqECsgBSACQYAEahCSASAFIAJBgApqEJYBI\\n    AJBgAZqIAJBgApqEJYBIAJBgAhqEGYgAyACQYAIahCWASACQYAGahCsASACQYAGahBmIAAgAhCSASAAIAJBgAZqEJYBIA\\n    BBBTYCgAYgABCZASACQYAMaiQAC68EAQV/IwBBkAZrIgIkACAAQUBrIQQCQCABQfgAaigCACABKAI4aqwgAEH4AGooAgA\\n    iAyAAKAI4IgVqrH5CgICAEFMNACAFQQJOBH8gABASIAAoAngFIAMLQQJIDQAgBBASCyACQaCnwAAQX0EAIQMgAkE4akHw\\n    ABByGiABQUBrIQUDQCADQThGBEAgAkHwAGohBkEAIQMDQCADQThGRQRAIAMgBmogAiADaikDADcDACADQQhqIQMMAQsLI\\n    AJBqAFqIAAQXyACQeABaiABEF8gAkGYAmogACABEAggAkGIA2ogBCAFEAggAkGoAWogBBBhIAJBqAFqEEQgAkHgAWogBR\\n    BhIAJB4AFqEEQgAkH4A2ogAkGoAWogAkHgAWoQCEEAIQMgAkHoBGpB8AAQchoDQCADQfAARkUEQCACQegEaiADaiACQZg\\n    CaiADaikDADcDACADQQhqIQMMAQsLIAJB6ARqIAJBiANqEGVBACEDA0AgA0HwAEZFBEAgAkGIA2ogA2oiASACQThqIANq\\n    KQMAIAEpAwB9NwMAIANBCGohAwwBCwsgAkGYAmogAkGIA2oQZSACQZgCahBFIAJB+ANqIAJB6ARqEGQgAkH4A2oQRSACQ\\n    dgFaiACQZgCahAFIAAgAkHYBWoQayAAQQM2AjggAkHYBWogAkH4A2oQBSAEIAJB2AVqEGsgAEECNgJ4IAJBkAZqJAAFIA\\n    JBOGogA2pCADcDACADQQhqIQMMAQsLC5QEAQF/IwBB0CJrIgMkACADQcAWakG4gMAAEF8gA0HIHGpB8IDAABBfIANBCGo\\n    gA0HAFmogA0HIHGoQSSADQYgBakE4EHIaIANBwAFqQTgQchogA0H4AWoQKgJAIAIQhAFFBEAgA0H4BGoQKiADQfgEaiAB\\n    EH4gA0H4BGoQSiADQfgHahBLIANB+AdqIAIQfyADQfgHahBHIANByBxqIANB+AdqEIUBIANBuAlqIANByBxqEIUBIANBy\\n    BxqIANBuAhqEIUBIANB+AlqIANByBxqEIUBIANBuApqECogA0G4DWoQYCADQbgKaiADQfgEahB+IANBwBNqECogA0HAE2\\n    ogA0H4BGoQfiADQcATahCcASADQcABaiADQYgBahBUQX9qIQIDQCACQQFNBEAgA0G4DWoQkwEgACADQbgNakGIBhBnGgw\\n    DBSADQbgNahAbIANBwBZqIANBuApqIANBuAlqIANB+AlqEBcCQAJAAkAgA0HAAWogAkF/aiICEFcgA0GIAWogAhBXa0EB\\n    ag4DAQIAAgsgA0HIHGogA0G4CmogA0H4BGogA0G4CWogA0H4CWoQFiADQcAWaiADQcgcahAGDAELIANByBxqIANBuApqI\\n    ANBwBNqIANBuAlqIANB+AlqEBYgA0HAFmogA0HIHGoQBgsgA0G4DWogA0HAFmoQBAwBCwALAAsgABBgCyADQdAiaiQAC8\\n    MDARV/A0AgAUHAAUYEQAJAIABBKGohCyAAQRRqKAIAIgwhCCAAQRBqKAIAIg0hAyAAQQxqKAIAIg4hAiAAKAIIIg8hASA\\n    AQRhqKAIAIhAhCiAAQRxqKAIAIhEhBCAAQSBqKAIAIhIhByAAQSRqKAIAIhMhBgNAIAchCSAEIQcgCiEEIAVBgAJGDQEg\\n    AiADcSEUIAIgA3MhFSAFIAtqKAIAIAVB9J7AAGooAgAgBEEadyAEQRV3cyAEQQd3cyAGaiAJIARBf3NxIAQgB3FyampqI\\n    gYgCGohCiAFQQRqIQUgAyEIIAIhAyABIQIgAUEedyABQRN3cyABQQp3cyAUIAEgFXFzaiAGaiEBIAkhBgwACwALBSAAIA\\n    FqIgNB6ABqIANBzABqKAIAIANBKGooAgAgA0EsaigCACICQRl3IAJBDndzIAJBA3ZzIANB4ABqKAIAIgJBD3cgAkENd3M\\n    gAkEKdnNqamo2AgAgAUEEaiEBDAELCyAAIAYgE2o2AiQgACAJIBJqNgIgIAAgByARajYCHCAAIAQgEGo2AhggACAIIAxq\\n    NgIUIAAgAyANajYCECAAIAIgDmo2AgwgACABIA9qNgIIC9YDAgZ/An4jAEHwAGsiASQAIAFBoKfAABBfIAFBOGogARBfI\\n    AAQRAJAAkACQCABAn8gACgCOCICQRBMBEAgAkF/ahA5DAELIAEpAzAiCEIBfCIHIAhUDQEgACkDMCIIQoCAgICAgICAgH\\n    9RQQAgB0J/URsNAiABQThqIAggB3+nECghByABIAEpA2ggB0I6hnw3A2ggACABQThqEGIgABBEQQILIgMQLSAAQQhqIQQ\\n    DQCADRQ0DIAEgASkDCEI5hkKAgICAgICAgAKDIAEpAwBCAYeEIgc3AwAgASAAKQMAIAd9IgdC//////////8DgzcDOEEA\\n    IQIDQCAHQjqHIQcgAkEoRkUEQCABIAJqIgVBCGoiBiAFQRBqKQMAQjmGQoCAgICAgICAAoMgBikDAEIBh4QiCDcDACABI\\n    AJqQUBrIAIgBGopAwAgCH0gB3wiB0L//////////wODNwMAIAJBCGohAgwBCwsgASABKQMwQgGHIgg3AzAgASAAKQMwIA\\n    h9IAd8Igc3A2ggACABQThqIAdCP4enQQFqEE8gA0F/aiEDDAALAAtBoKLAAEEZQbyiwAAQWwALQdCiwABBH0G8osAAEFs\\n    ACyAAQQE2AjggAUHwAGokAAuhAwEBfyMAQZADayIGJAAgBkEIakHAABByGiAGQcgAakGoAhByGiAGQcgAahBDA0AgAQRA\\n    IAZByABqQQAQPiABQX9qIQEMAQUCQCACBEAgBkHIAGogAiADEHoLIAQEQCAGQcgAaiAEIAUQegsgBkGIA2pCADcDACAGQ\\n    YADakIANwMAIAZB+AJqQgA3AwAgBkIANwPwAiAGKAJIIQEgBigCTCECIAZByABqQYABED4DQCAGKAJIQf8DcUHAA0ZFBE\\n    AgBkHIAGpBABA+DAELCyAGQawBaiABNgIAIAZBqAFqIAI2AgAgBkHIAGoQEUEAIQJBACEBA0AgAUEgRkUEQCAGQfACaiA\\n    BaiABQXxxIAZqQdAAaigCACACQX9zQRhxdjoAACACQQhqIQIgAUEBaiEBDAELCyAGQcgAahBDQQAhAQNAIAFBIEZFBEAg\\n    BkEIaiABaiAGQfACaiABai0AADoAACABQQFqIQEMAQsLQQAhAQNAIAFBIEYNASAAIAFqIAZBCGogAWotAAA6AAAgAUEBa\\n    iEBDAALAAsLCyAGQZADaiQAC6EDAQN/IwBBgAZrIgEkACABIABBgAFqIgMQXiABQYABaiADEF4gAUGAAWoQMiABQYACai\\n    ABEF4gAUGAAmogAEGAAmoiAhAPIAFBgANqIAIQXiABQYADahAyIAIgAUGAAWoQkAEgAiABQYABahCVASACEKgBIAIQpwE\\n    gAhCnASACEKgBIAFBgANqQQwQnwEgAUGAA2oQVSABQYADahCoASABQYAEaiABQYADahBeIAFBgARqIAIQDyABQYAFaiAB\\n    QYABahBeIAFBgAVqIAFBgANqEJUBIAFBgAVqEKgBIAIgAUGAAmoQDyABQYACaiABQYADahCQASABQYACaiABQYADahCVA\\n    SABQYADaiABQYACahCVASABQYADahCoASABQYABaiABQYADahB9IAFBgAFqEKgBIAFBgAVqIAFBgAFqEA8gAUGABWogAU\\n    GABGoQlQEgAUGAAmogABCQASABQYACaiABEA8gACABQYABahCQASAAEKgBIAAgAUGAAmoQDyAAEKcBIAAQqAEgAyABQYA\\n    FahCQASADEKgBIAFBgAZqJAALhQMBBH8CQAJAIAFBgAJPBEAgAEEYaigCACEEAkACQCAAIAAoAgwiAkYEQCAAQRRBECAA\\n    QRRqIgIoAgAiAxtqKAIAIgENAUEAIQIMAgsgACgCCCIBIAI2AgwgAiABNgIIDAELIAIgAEEQaiADGyEDA0AgAyEFIAEiA\\n    kEUaiIDKAIAIgFFBEAgAkEQaiEDIAIoAhAhAQsgAQ0ACyAFQQA2AgALIARFDQIgACAAQRxqKAIAQQJ0QeS3wQBqIgEoAg\\n    BHBEAgBEEQQRQgBCgCECAARhtqIAI2AgAgAkUNAwwCCyABIAI2AgAgAg0BQdi1wQBB2LXBACgCAEF+IAAoAhx3cTYCAA8\\n    LIABBDGooAgAiAiAAQQhqKAIAIgBHBEAgACACNgIMIAIgADYCCA8LQdS1wQBB1LXBACgCAEF+IAFBA3Z3cTYCAAwBCyAC\\n    IAQ2AhggACgCECIBBEAgAiABNgIQIAEgAjYCGAsgAEEUaigCACIARQ0AIAJBFGogADYCACAAIAI2AhgLC7MCAQF/IwBBg\\n    AtrIgUkACAFEC8gBUGAAmoQLyAFQYAEahAvIAVBgAZqQTgQchogBUEBNgK4BiAFQcAGakE4EHIaIAVB+AZqQQE2AgAgBU\\n    GAB2pBOBByGiAFQQE2ArgHIAVBwAdqQTgQchogBUH4B2pBATYCACAFQYAIakE4EHIaIAVBATYCuAggBUHACGpBOBByGiA\\n    FQfgIakEBNgIAIAEgAiAFQYAGaiAFQYAHaiAFQYAIahAeIAVBgAhqIAMQoAEgBUGABmogBBCgASAFQYAJaiAFQYAGaiAF\\n    QYAHahCRASAFIAVBgAlqEJIBIAVBgAlqIAVBgAhqEJsBIAVBgARqIAVBgAlqEJIBIAVBgARqEGYgACAFIAVBgAJqIAVBg\\n    ARqEHYgAEEDNgKABiAFQYALaiQAC7ECAQF/IwBBgAtrIgQkACAEEC8gBEGAAmoQLyAEQYAEahAvIARBgAZqQTgQchogBE\\n    EBNgK4BiAEQcAGakE4EHIaIARB+AZqQQE2AgAgBEGAB2pBOBByGiAEQQE2ArgHIARBwAdqQTgQchogBEH4B2pBATYCACA\\n    EQYAIakE4EHIaIARBATYCuAggBEHACGpBOBByGiAEQfgIakEBNgIAIAEgBEGABmogBEGAB2ogBEGACGoQJSAEQYAIaiAC\\n    EKABIARBgAZqIAMQoAEgBEGACWogBEGABmogBEGAB2oQkQEgBCAEQYAJahCSASAEQYAJaiAEQYAIahCbASAEQYAEaiAEQ\\n    YAJahCSASAEQYAEahBmIAAgBCAEQYACaiAEQYAEahB2IABBAzYCgAYgBEGAC2okAAvJAgEDfyMAQcACayIBJAAgASAAQU\\n    BrIgMQhQEgARADIAFBQGsgAxCFASABQUBrIABBgAFqIgIQSCABQYABaiACEIUBIAFBgAFqEAMgAiABEKUBIAIgARB4IAI\\n    QRCACEE4gAhBOIAIQRCABQYABakEMEFIgAUHAAWogAUGAAWoQhQEgAUHAAWogAhBIIAFBgAJqIAEQhQEgAUGAAmogAUGA\\n    AWoQeCABQYACahBEIAIgAUFAaxBIIAFBQGsgAUGAAWoQpQEgAUFAayABQYABahB4IAFBgAFqIAFBQGsQeCABIAFBgAFqE\\n    IABIAEQRCABQYACaiABEEggAUGAAmogAUHAAWoQeCABQUBrIAAQpQEgAUFAayADEEggACABEKUBIAAQRCAAIAFBQGsQSC\\n    AAEE4gABBEIAMgAUGAAmoQpQEgAxBEIAFBwAJqJAALrQIBA38jAEGABGsiAiQAIAIgABBeIAJBgAFqIABBgAFqIgMQXiA\\n    CQYACakE4EHIaIAJBATYCuAIgAkHAAmpBOBByGiACQfgCakEBNgIAIAJBgANqIAMQXiACIAEQDyACQYABaiABQYABaiIE\\n    EA8gAkGAAmogBBCQASACQYACaiABEJUBIAJBgANqIAAQlQEgAkGAAmoQqAEgAkGAA2oQqAEgAkGAA2ogAkGAAmoQDyACQ\\n    YACaiACEJABIAJBgAJqEDogAkGAA2ogAkGAAmoQlQEgAkGAA2oQqAEgAkGAAmogAkGAAWoQkAEgAkGAAmoQOiADIAJBgA\\n    NqEJABIAMgAkGAAmoQlQEgAkGAAWoQVSAAIAJBgAFqEJABIAAgAhCVASAAEKwBIAJBgARqJAALvQIBA38jAEGACGsiASQ\\n    AIAEgABCOASABQYACaiAAQYAEaiICEI4BIAFBgARqIABBgAJqIgMQjgEgAUGABmoQLyAAECIgAUGABmogABCSASABQYAG\\n    aiAAEJYBIAAgAUGABmoQlgEgABCsASABELYBIAEQrwEgACABEJYBIAFBgAJqECIgAUGAAmoQZiABQYAGaiABQYACahCSA\\n    SABQYAGaiABQYACahCWASABQYACaiABQYAGahCWASABQYACahCsASABQYAEahAiIAFBgAZqIAFBgARqEJIBIAFBgAZqIA\\n    FBgARqEJYBIAFBgARqIAFBgAZqEJYBIAFBgARqEKwBIAMQrgEgAxCvASACELYBIAIQrwEgAyABQYACahCWASACIAFBgAR\\n    qEJYBIABBBTYCgAYgABCaASABQYAIaiQAC7ICAQN/IwBBgAhrIgEkACAAKAKABkEBRwRAIAEgABCOASABQYACaiAAQYAC\\n    aiIDEI4BIAFBgARqIABBgARqIgIQjgEgAUGABmogABCOASABECIgAUGAAmogAhAZIAFBgAJqEK8BIAFBgAJqEKwBIAFBg\\n    ARqECIgAUGABmogAxAZIAFBgAZqEK8BIAIgABCWASACIAMQlgEgAhCsASACECIgACABEJIBIAEgAUGAAmoQlgEgARCsAS\\n    ABIAFBgARqEJYBIAEgAUGABmoQlgEgARCsASABECsgAUGAAmoQZiABQYAEahBmIAAgAUGAAmoQlgEgAyABQYAEahCSASA\\n    DIAFBgAZqEJYBIAIgARCWASAAQQRBBSAAKAKABkF+cUECRhs2AoAGIAAQmQELIAFBgAhqJAALigIBAn8jAEHgAWsiAiQA\\n    IAAQRCACQQhqQTAQchogAkIBNwMAIAJBOGogABBfIAJB8ABqIAEQXyACQagBakE4EHIaIAAQdANAIAJBOGogAkHwAGoQN\\n    UF/TARAA0ACQCADQQBMDQAgAkHwAGpBARA7IAJBARA7IAJBqAFqIAJBOGoQayACQagBaiACQfAAahBiIAJBqAFqEEQgAk\\n    E4aiACQagBaiACKQPYAUI/h6dBAWoiARBPIAJBqAFqIAAQayACQagBaiACEGEgAkGoAWoQRCAAIAJBqAFqIAEQTyADQX9\\n    qIQMMAQsLBSACQQEQLSACQfAAakEBEC0gA0EBaiEDDAELCyACQeABaiQAC54CAQF/IwBBgA1rIgMkACADIAEQaiADEJkB\\n    IANBiAZqIAIQXyADQYgGahBEIANBwAZqIANBiAZqEF8gA0HABmpBAxAoGiADQcAGahBEIANB+AZqIAMQagJAIANBwAZqE\\n    FpFBEAgA0HABmoQKUF/aiECA0AgAkEBTQRAIANB+AZqEJoBDAMLIANB+AZqEBoCQAJAIANBwAZqIAJBf2oiAhBXIANBiA\\n    ZqIAIQV2tBAWoOAwECAAILIANB+AZqIAMQDgwBCyADEJMBIANB+AZqIAMQDiADEJMBDAALAAsgA0H4BmoQsAEgA0H4B2o\\n    QqQEgA0H4CGoQrQEgA0H4CmoQrQEgA0EBNgL4DAsgACADQfgGakGIBhBnGiADQYANaiQAC5ACAQJ/IwBBgAJrIgUkACAF\\n    QYABaiAAEF4gAiAFQYABahCQASAFQYABaiAAQYABahBeIAQgBUGAAWoQkAEgBUGAAWogAEGAAmoiBhBeIAUgBUGAAWoQX\\n    iAFQYABaiAGEF4gAyAFQYABahCQASAFQYABaiABQYABaiIGEF4gBSAFQYABahAPIAVBgAFqIAEQXiADIAVBgAFqEA8gAi\\n    ADEH0gAhCoASAEIAUQfSAEEKgBIAUgAhCQASACEFUgAhCoASAFQYABaiAGEF4gBSAFQYABahAPIAMgBBCQASAFQYABaiA\\n    BEF4gAyAFQYABahAPIAMgBRB9IAMQqAEgBBA6IAQQqAEgACABEAsgBUGAAmokAAvkAQECfyMAQcABayIDJAAgAxBLIAAg\\n    ASACQR91IgQgAnMgBEF/c2pBAm0iAkF/akEfdhBtIAAgAUHAAWogAkEBc0F/akEfdhBtIAAgAUGAA2ogAkECc0F/akEfd\\n    hBtIAAgAUHABGogAkEDc0F/akEfdhBtIAAgAUGABmogAkEEc0F/akEfdhBtIAAgAUHAB2ogAkEFc0F/akEfdhBtIAAgAU\\n    GACWogAkEGc0F/akEfdhBtIAAgAUHACmogAkEHc0F/akEfdhBtIAMgABB/IAMQpgEgACADIARBAXEQbSADQcABaiQAC+Q\\n    BAQJ/IwBBgANrIgMkACADECogACABIAJBH3UiBCACcyAEQX9zakECbSICQX9qQR92EG8gACABQYADaiACQQFzQX9qQR92\\n    EG8gACABQYAGaiACQQJzQX9qQR92EG8gACABQYAJaiACQQNzQX9qQR92EG8gACABQYAMaiACQQRzQX9qQR92EG8gACABQ\\n    YAPaiACQQVzQX9qQR92EG8gACABQYASaiACQQZzQX9qQR92EG8gACABQYAVaiACQQdzQX9qQR92EG8gAyAAEH4gAxCcAS\\n    AAIAMgBEEBcRBvIANBgANqJAALvAEBAn8jAEGwAWsiAiQAIAJBMBByIQIDQCADQTBGBEACQCABQTBqIQEgAkEwaiACEHV\\n    BACEDA0AgA0EwRg0BIAIgA2ogASADai0AADoAACADQQFqIQMMAAsACwUgAiADaiABIANqLQAAOgAAIANBAWohAwwBCwsg\\n    AkHwAGogAhB1IABBOBByIgBBATYCOCAAQUBrQTgQciAAQfgAakEBNgIAIAAgAkHwAGoQpQEgAkEwahClASACQbABaiQAC\\n    9QBAQJ/IwBBgANrIgEkACABIAAQXiABQYABaiAAQYABaiICEF4gAUGAAmogABBeIAFBgAJqIAIQDyABIAIQlQEgAUGAAW\\n    oQVSABQYABaiAAEJUBIAEQqAEgAUGAAWoQqAEgACABEJABIAAgAUGAAWoQDyABQYABaiABQYACahCQASABQYABahBVIAF\\n    BgAFqIAFBgAJqEJUBIAFBgAFqEKgBIAFBgAFqEDogACABQYABahCVASABQYACahCnASACIAFBgAJqEJABIAAQrAEgAUGA\\n    A2okAAvEAQEBfyMAQYADayIDJAAgA0EIaiABEIUBAkAgAkUEQCADQQhqEAcMAQsgA0EIaiACEKUBCyADQcgAakHYo8AAE\\n    F8gA0GAAWogA0HIAGoQiwEgA0HAAWogA0EIahCFASADQcABahADIANBwAFqIAEQSCAAIAEQhQEgACADQQhqEEggA0GAAm\\n    ogA0HAAWoQhQEgABBYIQEgA0HAAmogABCFASADQcACahBBIANBwAJqEEQgACADQcACaiABEHkgA0GAA2okAAufAQEBfyM\\n    AQfAAayICJAAgAiABEF9BACEBIAJBOGpBOBByGiAAEEQCQCAAIAIQNUEASA0AA0AgAkEBEC0gAUEBaiEBIAAgAhA1QX9K\\n    DQALA0AgAUEATA0BIAJBARA7IAJBOGogABBrIAJBOGogAhBiIAJBOGoQRCAAIAJBOGogAikDaEI/h6dBAWoQTyABQX9qI\\n    QEMAAsACyACQfAAaiQAC7IBAQF/IwBBgAJrIgQkACAEQYABaiAAEF4gAyAEQYABahCQASAEQYABaiAAQYABahBeIAQgBE\\n    GAAWoQXiAEQYABaiAAQYACahBeIAIgBEGAAWoQkAEgASAEEJABIAEgAhAPIAMQMiAEEDIgAhAyIAEQpwEgARA6IAEQqAE\\n    gARBVIAEQqAEgAkEMEJ8BIANBAxCfASACEFUgAhCoASACIAQQfSACEKgBIAAQFCAEQYACaiQAC58BAQJ/IwBBgAJrIgIk\\n    ACAAIAEQXiAAEDIgAkGIAWpB2KTAABBfIAJBCGpBOBByGiACQQE2AkAgAkHIAGpBOBByIAJBgAFqQQE2AgAgAkHAAWogA\\n    kGIAWoQiwEgAkEIaiACQcABahClARCyASACQQhqEKgBIAJBCGoQVSACQQhqEKgBIAAgARAPIAAgAkEIahCVASAAEKsBIA\\n    JBgAJqJAALowEBAX8jAEEwayIGJAAgBkEQaiAAIAEQsQEgBiAGKAIUIgA2AhwgBiAGKAIQIgE2AhggBkEIaiACIAMQsQE\\n    gBiAGKAIMIgI2AiQgBiAGKAIIIgM2AiAgBiAEIAUQsQEgBiAGKAIEIgQ2AiwgBiAGKAIAIgU2AiggASAAIAMgAiAFIAQQ\\n    ACAGQShqEKQBIAZBIGoQpAEgBkEYahCkASAGQTBqJAALiAECA38DfiMAQRBrIgIkAAN+IANBOEYEfiACQRBqJAAgBgUgA\\n    iAAIANqIgQpAwAiBSAFQj+HIAGsIgUgBUI/hxAxIAQgAikDACIHIAZ8IgVC//////////8DgzcDACAFIAdUrSACQQhqKQ\\n    MAIAZCP4d8fEIGhiAFQjqIhCEGIANBCGohAwwBCwsLhAECA38BfiMAQUBqIgEkACABQQhqIAAQXyABQQhqEEQgAUE4aiE\\n    CQQYhA0HcAiEAAn8DQEEAIANBAEgNARogAikDACIEUARAIAJBeGohAiAAQUZqIQAgA0F/aiEDDAELCwN/IARQBH8gAAUg\\n    AEEBaiEAIARCAn8hBAwBCwsLIAFBQGskAAuHAQEBfyMAQcABayIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByGiAAQfgAa\\n    kEBNgIAIAEQUCABQYgBakE4EHIaIABBgAFqIAFBgAEQZxogAEGAAmpBOBByGiAAQbgCakEBNgIAIABBvAJqIAFBhAFqQT\\n    wQZxogAEH4AmpBATYCACABQcABaiQAC48BAQJ/IwBBgAJrIgEkACAAEKwBIAEgABBeIAFBgAFqQTgQchogAUEBNgK4ASA\\n    BQcABakE4EHIaIAFB+AFqQQE2AgAgASAAQYABaiICEJUBIAEQOiABQYABaiABEJABIAFBgAFqIAIQlQEgAiABEJABIAIg\\n    ABCVASAAIAFBgAFqEJABIAAQrAEgAUGAAmokAAt9AgF/An4jAEGAAWsiASQAIAFBCGogABCFASABQQhqEBIgAUHIAGogA\\n    UEIahCDAUEIIQADQCAAQThGRQRAIAFByABqIABqKQMAIAKEIQIgAEEIaiEADAELCyABKQNIIQMgAUGAAWokACACQn98IA\\n    NCAYVCf3yDQjqIp0EBcQuJAQIBfwJ+IAAgACkDMCABQT9xrSIDhiAAKQMoQTogAWtBP3GtIgSHhDcDMCAAQShqIQFBBiE\\n    CA0AgAkEBTQRAIAAgACkDACADhkL//////////wODNwMABSABIAEpAwAgA4ZC//////////8DgyABQXhqIgEpAwAgBIeE\\n    NwMAIAJBf2ohAgwBCwsLiQECAX8CfiAAIAApA2BBOiABQTpwIgFrrSIEhyAAKQNoIAGtIgOGhDcDaCAAQeAAaiEBQQ0hA\\n    gNAIAJBAU0EQCAAIAApAwAgA4ZC//////////8DgzcDAAUgASABKQMAIAOGQv//////////A4MgAUF4aiIBKQMAIASHhD\\n    cDACACQX9qIQIMAQsLC3EBAX8jAEFAaiIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByGiAAQfgAakEBNgIAIAFBCGpBOBB\\n    yGiAAQYABakE4EHIaIABBuAFqQQE2AgAgAEG8AWogAUEEakE8EGcaIABB+AFqQQE2AgAgAUFAayQAC4EBAgF/AX4gAEHw\\n    ABByIQADQCACQThGBEACQCAAIAEpAzAiA0I6hzcDOCAAIANC//////////8DgzcDMCAAQUBrIQBBACECA0AgAkEwRg0BI\\n    AAgAmpCADcDACACQQhqIQIMAAsACwUgACACaiABIAJqKQMANwMAIAJBCGohAgwBCwsLdQECfiAAIANCIIgiBSABQiCIIg\\n    Z+IAIgA358IAEgBH58IANC/////w+DIgIgAUL/////D4MiAX4iA0IgiCACIAZ+fCICQiCIfCABIAV+IAJC/////w+DfCI\\n    BQiCIfDcDCCAAIANC/////w+DIAFCIIaENwMAC3YBAn8jAEHAAWsiASQAIAEgABCFASABQUBrIAAQhQEgAUGAAWogAEFA\\n    ayICEIUBIAEgAhB4IAFBQGsgABB4IAFBQGsQRCACIAFBQGsQSCABQYABahBBIAAgAUGAAWoQeCABEEQgABBEIAAgARBII\\n    AFBwAFqJAALkwEBAn9B0LXBAEHQtcEAKAIAQQFqNgIAAkACQEGYucEAKAIAQQFGBEBBnLnBAEGcucEAKAIAQQFqIgA2Ag\\n    AgAEECSw0CQaC5wQAoAgAiAUF/Sg0BDAILQZi5wQBCgYCAgBA3AwBBoLnBACgCACIAQQBIDQFBoLnBACAANgIAAAtBoLn\\n    BACABNgIAIABBAUsNAAALAAtnAQJ/IwBBQGoiAiQAIAAQRCACIAAQhQECQCABRQRAIAAQBwwBCyAAIAEQpQELQQAhAQNA\\n    IAFBAUsgA3JFBEAgABADIAFBAEchAyABIAFFaiEBDAELCyAAIAIQSCAAEBIgAkFAayQAC18CAX8EfkIBIQNBMCECA38gA\\n    kF4RgR/IARCAYYgA3ynQX9qBSABIAJqKQMAIgUgACACaikDACIGfUI6hyADgyAEhCEEIAJBeGohAiAFIAaFQn98QjqHIA\\n    ODIQMMAQsLC2ACAX8EfkIBIQNB6AAhAgN/IAJBeEYEfyAEQgGGIAN8p0F/agUgASACaikDACIFIAAgAmopAwAiBn1COoc\\n    gA4MgBIQhBCACQXhqIQIgBSAGhUJ/fEI6hyADgyEDDAELCwt3AQN/IwBBgAJrIgIkACACIAEQXiACQYABaiABEF4gAhAy\\n    IAJBgAFqIAIQDyAAIAJBgAFqEJcBIABBgAJqIgMgAkGAAWoQlwEgAEGABGoiBCACQYABahCXASADIAEQogEgBCACEKIBI\\n    ABBBTYCgAYgAkGAAmokAAt6AQF/IwBB4ANrIgEkACABQYABakHApcAAEF8gAUG4AWpB+KXAABBfIAEgAUGAAWogAUG4AW\\n    oQSSABQfACakGwpsAAEF8gAUGoA2pB6KbAABBfIAFB8AFqIAFB8AJqIAFBqANqEEkgACABIAFB8AFqED8gAUHgA2okAAt\\n    nACAAQQF2IAByIgBBAnYgAHIiAEEEdiAAciIAQQh2IAByIgBBEHYgAHIiACAAQQF2QdWq1aoFcWsiAEECdkGz5syZA3Eg\\n    AEGz5syZA3FqIgBBBHYgAGpBj568+ABxQYGChAhsQRh2C2cBAn8jAEGAAWsiASQAIAEgABCFASABQUBrQTgQchogAUEBN\\n    gJ4IAEgAEFAayICEHggARBBIAFBQGsgARClASABQUBrIAIQeCACIAEQpQEgAiAAEHggACABQUBrEKUBIAFBgAFqJAALaA\\n    IBfwJ+IAFBP3GtIQNBOiABa0E/ca0hBEEAIQEDQCABQTBGBEAgACAAKQMwIAOHNwMwBSAAIAFqIgIgAkEIaikDACAEhkL\\n    //////////wODIAIpAwAgA4eENwMAIAFBCGohAQwBCwsLbAEBfyMAQTBrIgMkACADIAE2AgQgAyAANgIAIANBHGpBAjYC\\n    ACADQSxqQQI2AgAgA0ICNwIMIANBlKjAADYCCCADQQI2AiQgAyADQSBqNgIYIAMgAzYCKCADIANBBGo2AiAgA0EIaiACE\\n    HAAC2wBAX8jAEEwayIDJAAgAyABNgIEIAMgADYCACADQRxqQQI2AgAgA0EsakECNgIAIANCAjcCDCADQbCqwAA2AgggA0\\n    ECNgIkIAMgA0EgajYCGCADIANBBGo2AiggAyADNgIgIANBCGogAhBwAAtlAQJ/IAAgACgCACICQQhqIgM2AgAgACACQQN\\n    2QTxxakEoaiICIAFB/wFxIAIoAgBBCHRyNgIAAkACQCADRQRAIABBADYCACAAIAAoAgRBAWo2AgQMAQsgA0H/A3ENAQsg\\n    ABARCwtnAQF/IwBBgAJrIgMkACAAECogACABEJABIABBgAFqIgEgAhCQASAAQYACahCwASAAEKgBIAMgABAmIANBgAFqI\\n    AEQXiADQYABahAyIANBgAFqIAMQe0UEQCAAEJgBCyADQYACaiQAC18BAn8jAEGAAWsiASQAIAAQqAEgASAAEIUBIAFBQG\\n    sgAEFAayICEIUBIAEQAyABQUBrEAMgASABQUBrEHggAUEAEDQgACABEEggARBBIAEQRCACIAEQSCABQYABaiQAC10BAn8\\n    jAEFAaiIBJAAgAUEIakGgp8AAEF8gAUEIaiAAKAI4QX9qEDkiAhAtIAAgAUEIahBjIABBASACQQFqQR9xdCICNgI4IAJB\\n    gICAEE4EQCAAEBILIAFBQGskAAtfAgF/AX4jAEHwAGsiASQAIAFBoKfAABBfIAApAwAhAiABQThqIAAQXyAAQQEQOyABQ\\n    ThqIAEQYSABQThqEEQgAUE4akEBEDsgACABQThqIAJCAoGnEE8gAUHwAGokAAt7AQJ/IABBKGohAgNAIAFBgAJGBEAgAE\\n    LnzKfQ1tDrs7t/NwIIIABCADcCACAAQSBqQquzj/yRo7Pw2wA3AgAgAEEYakL/pLmIxZHagpt/NwIAIABBEGpC8ua746O\\n    n/aelfzcCAAUgASACakEANgIAIAFBBGohAQwBCwsLaQICfwF+IAAgACkDACIDQv//////////A4M3AwBBCCEBA0AgA0I6\\n    hyEDIAFBMEYEQCAAIAApAzAgA3w3AzAFIAAgAWoiAiACKQMAIAN8IgNC//////////8DgzcDACABQQhqIQEMAQsLC2oCA\\n    n8BfiAAIAApAwAiA0L//////////wODNwMAQQghAQNAIANCOochAyABQegARgRAIAAgACkDaCADfDcDaAUgACABaiICIA\\n    IpAwAgA3wiA0L//////////wODNwMAIAFBCGohAQwBCwsLWQEBfyMAQYADayIEJAAgBCADEF4gBBBAIARBgAFqIAEQXiA\\n    EQYACaiACEF4gBEGAAWogBBAPIARBgAJqIAQQDyAAIARBgAFqIARBgAJqEJEBIARBgANqJAALWQECfyMAQUBqIgEkAAJA\\n    IAAQhAENACABQQEQigEgAEGAAWoiAiABEFkNACACQQAQNCAAIAIQSCAAEBIgAEFAayIAIAIQSCAAEBIgAiABEKUBCyABQ\\n    UBrJAALVwEBfyMAQbABayICJAAgATQCOCAANAI4fkKAgIAQWQRAIAAQEgsgAkEIaiAAIAEQCCACQfgAaiACQQhqEAUgAC\\n    ACQfgAahBrIABBAjYCOCACQbABaiQAC08BAn8jAEFAaiIDJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByIABB+ABqQQE2AgA\\n    gAyABEIsBIAAgAxClASADIAIQiwEgAxClASADQUBrJAALWQECfyMAQYABayIBJAACQCAAEIgBDQAgARBQIABBgAJqIgIg\\n    ARB7DQAgAhBAIAAgAhAPIAAQqwEgAEGAAWoiACACEA8gABCrASACIAEQkAELIAFBgAFqJAALSwEBfyMAQUBqIgEkACAAQ\\n    TgQciIAQQE2AjggAUEBEIoBIABBQGsgAUHAABBnGiAAQYABakE4EHIaIABBuAFqQQE2AgAgAUFAayQAC0sBAn8jAEHwAG\\n    siASQAIAAQd0UEQCABQaCnwAAQXyABQThqIAAQgwEgASABQThqEGIgARBEIAFBOGogARA1IQILIAFB8ABqJAAgAgtPAQF\\n    /IwBBgAFrIgIkACAAIAEQhQEgABADIAJByABqQdikwAAQXyACQQhqIAJByABqEIsBIAAgARBIIAAgAkEIahB4IAAQEiAC\\n    QYABaiQAC0kBAn8DQCABQThGRQRAIAAgAWoiAiACKQMAQgGGNwMAIAFBCGohAQwBCwsgACAAKAI4QQF0IgE2AjggAUGAg\\n    IAQTgRAIAAQEgsLQgIBfwJ+QQAgAmusIQQDQCADQThHBEAgACADaiICIAIpAwAiBSABIANqKQMAhSAEgyAFhTcDACADQQ\\n    hqIQMMAQsLC0YBAn8jAEFAaiIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByIABB+ABqQQE2AgAgAUEBEIoBIAAgARClARC\\n    yASABQUBrJAALTgEBfyMAQYAEayIBJAAgABAvIAEQLyABQYACahAvIABBgAJqIAFBgAIQZxogAEGABGogAUGAAmpBgAIQ\\n    ZxogAEEANgKABiABQYAEaiQAC0sBAX8jAEFAaiICJAACQCAAKAI4IAFsQYCAgBBOBEAgAiABEIoBIAAgAhBIDAELIAAgA\\n    RAoGiAAIAAoAjggAWw2AjgLIAJBQGskAAtKAAJ/IAFBgIDEAEcEQEEBIAAoAhggASAAQRxqKAIAKAIQEQMADQEaCyACRQ\\n    RAQQAPCyAAKAIYIAJBACAAQRxqKAIAKAIMEQUACwtCAQF/IwBBQGoiAiQAIAJBCGpBgIDAABBfIAEgAkEIahBrIAEQRCA\\n    AIAEQayAAQQMQKBogABBEIAAQKSACQUBrJAALSQECfyMAQcABayIBJAAgASAAEF4gAUGAAWogABCFASAAIABBQGsiAhCl\\n    ASAAEEEgAiABQYABahClASAAIAEQlQEgAUHAAWokAAtIAQF/IwBB4AFrIgEkACABQeihwAAQXyABQThqIAAgARAIIAFBq\\n    AFqIAFBOGoQBSAAIAFBqAFqEGsgAEECNgI4IAFB4AFqJAALPgEBfyABQTpuIQIgAUGVA00EQCAAIAJBA3RqKQMAQgEgAU\\n    H//wNxQTpwrYaDQgBVDwsgAkEHQdSdwAAQPAALQAIBfwF+IwBBgAFrIgEkACABQQhqIAAQhQEgAUEIahASIAFByABqIAF\\n    BCGoQgwEgASkDSCABQYABaiQAQgKBpws8AQF/IwBBgAFrIgIkACACIAAQhQEgAkFAayABEIUBIAIQEiACQUBrEBIgAiAC\\n    QUBrEDUgAkGAAWokAEULPAIBfwF+A38gAUE4RgR/IAJCf3xCgICAgICAgIAEg0I6iKcFIAAgAWopAwAgAoQhAiABQQhqI\\n    QEMAQsLC0cBAX8jAEEgayIDJAAgA0EUakEANgIAIANB9KrAADYCECADQgE3AgQgAyABNgIcIAMgADYCGCADIANBGGo2Ag\\n    AgAyACEHAACzkBAX8jAEFAaiICJAAgAiAAEIUBIAIQByABBEAgASACEKUBCyACEAMgAiAAEEggAhAsIAJBQGskAAs6AQF\\n    /IABBOBByIQADQCACQTBGRQRAIABBCBAtIAAgACkDACABIAJqMQAAfDcDACACQQFqIQIMAQsLCzQBAX8gAEE4EHIiAEEB\\n    NgI4IABBQGtBOBByIABB+ABqQQE2AgAgACABEKUBIAFBQGsQpQELMAEBfyAAQTgQciEAA0AgAkE4RwRAIAAgAmogASACa\\n    ikDADcDACACQQhqIQIMAQsLCz8BAX8jAEGAAmsiASQAIAAQUSABEG4gACABEJIBIABBgAJqEK0BIABBgARqEK0BIABBAT\\n    YCgAYgAUGAAmokAAswAQJ/A0AgAkE4RwRAIAAgAmoiAyADKQMAIAEgAmopAwB8NwMAIAJBCGohAgwBCwsLMAECfwNAIAJ\\n    BOEcEQCAAIAJqIgMgAykDACABIAJqKQMAfTcDACACQQhqIQIMAQsLCzABAn8DQCACQThHBEAgACACaiIDIAEgAmopAwAg\\n    AykDAH03AwAgAkEIaiECDAELCwsxAQJ/A0AgAkHwAEcEQCAAIAJqIgMgAykDACABIAJqKQMAfTcDACACQQhqIQIMAQsLC\\n    zEBAn8DQCACQfAARwRAIAAgAmoiAyADKQMAIAEgAmopAwB8NwMAIAJBCGohAgwBCwsLOQECfyMAQYABayIBJAAgASAAQY\\n    ABaiICEF4gAiAAEJABIAEQVSAAIAEQkAEgABCsASABQYABaiQACzMBAX8gAgRAIAAhAwNAIAMgAS0AADoAACABQQFqIQE\\n    gA0EBaiEDIAJBf2oiAg0ACwsgAAtIAQN/IwBBEGsiASQAIAAoAgwhAyAAKAIIIgJFBEBB9KrAAEErQaCrwAAQWwALIAEg\\n    AzYCCCABIAA2AgQgASACNgIAIAEQcQALMgEBfyAAQgE3AwBBCCEBA0AgAUE4RkUEQCAAIAFqQgA3AwAgAUEIaiEBDAELC\\n    yAAEFYLNwAgABBRIAAgARCSASAAQYACaiABQYACahCSASAAQYAEaiABQYAEahCSASAAIAEoAoAGNgKABgsoAQF/A0AgAk\\n    E4RwRAIAAgAmogASACaikDADcDACACQQhqIQIMAQsLCzMAIAAgARCSASAAQYACaiABQYACahCSASAAQYAEaiABQYAEahC\\n    SASAAIAEoAoAGNgKABgsoACAAIAEgAhB5IABBQGsgAUFAayACEHkgAEGAAWogAUGAAWogAhB5Cy4BAX8jAEGAAWsiASQA\\n    IAAQLyABEFAgACABEJABIABBgAFqEKkBIAFBgAFqJAALLQAgACABIAIQjwEgAEGAAWogAUGAAWogAhCPASAAQYACaiABQ\\n    YACaiACEI8BCzQBAX8jAEEQayICJAAgAiABNgIMIAIgADYCCCACQaSowAA2AgQgAkH0qsAANgIAIAIQaAALPgEBfyMAQR\\n    BrIgEkACABQQhqIABBCGooAgA2AgAgASAAKQIANwMAIAEoAgAiAEEUaigCABogACgCBBoQMwALKQEBfyABBEAgACECA0A\\n    gAkEAOgAAIAJBAWohAiABQX9qIgENAAsLIAALKwEBfyMAQcABayICJAAgAhBLIAIgARB/IAIQpgEgACACEAwgAkHAAWok\\n    AAsiAQF/A0AgAUE4RwRAIAAgAWpCADcDACABQQhqIQEMAQsLCycBAX8jAEFAaiICJAAgAkEIaiABEF0gACACQQhqEIsBI\\n    AJBQGskAAsrACAAEFEgACABEJIBIABBgAJqIAIQkgEgAEGABGogAxCSASAAQQU2AoAGCyMBAX8jAEFAaiIBJAAgASAAEI\\n    UBIAEQEiABEFogAUFAayQACykAIAAgARBhIAAgACgCOCABKAI4aiIBNgI4IAFBgICAEE4EQCAAEBILCyUAIAAgASACEE8\\n    gAEEAIAJrIAAoAjgiACABKAI4c3EgAHM2AjgLIwADQCACBEAgACABLQAAED4gAkF/aiECIAFBAWohAQwBCwsLIgACQCAA\\n    IAEQWUUNACAAQUBrIAFBQGsQWUUNAEEBDwtBAAskAAJAIABBfE0EQCAARQRAQQQhAAwCCyAAEAEiAA0BCwALIAALJwEBf\\n    yMAQYABayICJAAgAiABEF4gAhA6IAAgAhCVASACQYABaiQACycAIAAgARCQASAAQYABaiABQYABahCQASAAQYACaiABQY\\n    ACahCQAQslACAAIAEQpQEgAEFAayABQUBrEKUBIABBgAFqIAFBgAFqEKUBCyUBAX8jAEFAaiICJAAgAiABEIUBIAIQQSA\\n    AIAIQeCACQUBrJAALKAEBfyMAQYACayICJAAgAiABEI4BIAIQKyAAIAIQlgEgAkGAAmokAAsjAEGEAiACSQRAIAJBhAIg\\n    AxA9AAsgACACNgIEIAAgATYCAAsiAQF/IwBB8ABrIgIkACACIAEQMCAAIAIQBSACQfAAaiQACxwAAkAgABB3RQ0AIABBg\\n    AFqEHdFDQBBAQ8LQQALHwAgAEE4EHIiAEEBNgI4IAAgARBrIAAgASgCODYCOAseAAJAIAAQhwFFDQAgAEGAAWoQhwFFDQ\\n    BBAQ8LQQALGwACQCAAEHdFDQAgAEFAaxB3RQ0AQQEPC0EACx4AAkAgABCHAUUNACAAQYACahCHAUUNAEEBDwtBAAsaAQF\\n    /IAAQWCIBIABBQGsQWCABcyAAEHdxcwsaACAAQTgQciIAQQE2AjggACABEJ0BIAAQVgsZACAAQTgQciIAQQE2AjggACAB\\n    EGsgABBWCxcAIAAQRCAAKAIAQX8gAUEfcXRBf3NxCxoAIAAgARBfIAAgAhAkIAAgAhBjIAAgAhAkCxwAIAAQLyAAIAEQk\\n    AEgAEGAAWogAUGAAWoQkAELGAAgACABIAIQeSAAQUBrIAFBQGsgAhB5CxYAIAAgARClASAAQUBrIAFBQGsQpQELGAAgAB\\n    AvIAAgARCQASAAQYABaiACEJABCxgAIAAgARCQASAAQYABaiABQYABahCQAQsZACAAEK4BIABBgAJqELYBIABBgARqEK4\\n    BCxcAIAAQsgEgAEFAaxBpIABBgAFqELIBCxQAIAAgARB4IABBQGsgAUFAaxB4CxgAIAAgARCVASAAQYABaiABQYABahCV\\n    AQsYACAAEKYBIABBgAFqIgAQpgEgACABEA8LGQAgABCpASAAQYABahCwASAAQYACahCpAQsZACAAEKwBIABBgAJqEKwBI\\n    ABBgARqEKwBCxkAIAAQqgEgAEGAAmoQqgEgAEGABGoQqgELFgAgABAvIAAgARCQASAAQYABahCpAQsWACAAQYABaiIAEK\\n    gBIAAQOiAAEKgBCxQAIAAQRCAAIAApAwAgAax8NwMACxQAIAAQRCAAIAApAwAgAax9NwMACxEAIAAgARBSIABBQGsgARB\\n    SCxEAIAAgARBIIABBQGsgARBICxQAIAAgARCQASAAQYABaiACEJABCxIAIAAgARAPIABBgAFqIAEQDwsUACAAIAEQoAEg\\n    AEGAAWogARCgAQsRACAAKAIEBEAgACgCABAJCwsSACAAIAEQayAAIAEoAjg2AjgLDwAgAEFAayIAEEEgABBECw0AIAAQT\\n    iAAQUBrEE4LDQAgABBEIABBQGsQRAsPACAAELIBIABBQGsQsgELEAAgABCrASAAQYABahCrAQsNACAAEBIgAEFAaxASCx\\n    AAIAAQqAEgAEGAAWoQqAELEAAgABCpASAAQYABahCpAQsPACAAQYABahA6IAAQrAELEAAgABCnASAAQYABahCnAQsOACA\\n    AEGkgAEFAaxCyAQsQACAAIAI2AgQgACABNgIACw0AIAAQdCAAQQE2AjgLDAAgABBBIAAgARB4CwwAIAAgARBrIAAQVgsN\\n    ACAAEDogACABEJUBCwsAIAAQOiAAEKwBCwwAQunQotvMouq7RgsDAAELAwABCwv+PZoCAEGCgMAACwcBAAAAAQI0AEG4g\\n    MAAC9sBuF8jku11BwFjT+D5WE+pA2dPnKtLeD0Akew9ffXy9AMD1g8fDSwgAK1vjPCZwa4A8DtNkAEAAADzStxtEor3AI\\n    uwH1tTsFYDgvLFYx+X7AAysL/NHtseAkehVLifHyMCQHo6ogw4sQGz4sMPAAAAAHNyYy9ibHMxMjM4MS9wYWlyLnJzqAA\\n    QABQAAAAHAQAACQAAAKgAEAAUAAAADAEAAA0AAACoABAAFAAAABEBAAANAAAAAAAAAAEAAAD///8Dv/+W/78AaQM7VYAd\\n    moCAAefMIPV1pkwBp+1zAEGogsAACyz+//7///8BAosAgILYBPYB4Y1oiW++kwLOdqvfPagdAMZpulHOdt8Dy1nGFwBB4\\n    ILAAAuRAZABEAATAAAA0AEAABgAAACQARAAEwAAANQBAAARAAAAkAEQABMAAADWAQAAHAAAAHNyYy9ibHMxMjM4MS9lY3\\n    AucnMAkAEQABMAAAAZBQAADQAAAJABEAATAAAAGwUAAAkAAACQARAAEwAAABwFAAARAAAAkAEQABMAAAAfBQAAHAAAAAA\\n    AAAABAAEAAAABAjQAQaCEwAALuSCQARAAEwAAAGcEAAARAAAAkAEQABMAAABsBAAADQAAAJABEAATAAAAbgQAABUAAACQ\\n    ARAAEwAAAHAEAAAgAAAAHUxYLQgo9ADXXz44aOPbAInJGoj9roEBomOjmrkPTgGY6rCCSW3JAoBOWs9QOu4AimlEAQAAA\\n    ADgKxeO6UjMAXSpOluMVsgAolXvNe/8FADngsIBPcnDA8EWIDvuPnUAusRiAAwgWgDRCCkuAQAAALgh6L1iEMUA3/4Vlz\\n    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\\n    GZYzb76G2KA7ycH+3PFk8AK2qmngEAAABhdHRlbXB0IHRvIGRpdmlkZSBieSB6ZXJvAAAAbxEQABIAAAB8AQAAFAAAAAA\\n    AAABhdHRlbXB0IHRvIGRpdmlkZSB3aXRoIG92ZXJmbG93c3JjL2JsczEyMzgxL2ZwLnJzAAAAbxEQABIAAAASAgAADQAA\\n    AG8REAASAAAAHgIAACYAAABvERAAEgAAAB4CAAAjAAAAbxEQABIAAAAkAgAAFwAAAG8REAASAAAAJAIAABQAAAAAAAAAq\\n    qr//////gHu//9UrP//AupBYg9rDyoBw5z9ShTOEwJLd2TXrEtDAu3pxpKm+V8Cox4RoAEAAABAEhAAFAAAABUBAAATAA\\n    AAQBIQABQAAAAeAQAAGAAAAEASEAAUAAAAJAEAABwAAABzcmMvYmxzMTIzODEvZWNwMi5ycwAAAAAEAEGQpcAAC7wGQBI\\n    QABQAAADmAgAACQAAAEASEAAUAAAA7gIAAA0AAABAEhAAFAAAAP4CAAAhAAAAuL0hwchWgAD1+24BqskAA7pwFz2uR7YA\\n    RNEK7ADpUwN65MZREMUtA0kBgkmkwiMALyuqJAAAAAB+KwRdBX2sAflVF+WERDwDNJME9ce9GwJp12rYgmRCA9BrWWVPJ\\n    4gA6DRrH9hnnAAFtgI+AQAAAAEouAiGVJMBeKIo6w5zsgIjyRINFpWmAQq1nU73MqoCm/2tGjUu2gJxczJjhFufAHdSXc\\n    4AAAAAvnlf8F8HqQJqaAc710nDAfOzmulytSoB0pm8jp0W+gEoPsuZi8IrAKw0qwwzzakDAkpsYAAAAACrqv/////+Ae7\\n    //1Ss//8C6kFiD2sPKgHDnP1KFM4TAkt3ZNesS0MC7enGkqb5XwKjHhGgAQAAAAgUEAALAAAAjwEAAA8AAAAIFBAACwAA\\n    AKcBAAATAAAACBQQAAsAAACqAQAADQAAAHNyYy9obWFjLnJzADQUEAAgAAAAVBQQABIAAAADAAAAAAAAAAEAAAAEAAAAa\\n    W5kZXggb3V0IG9mIGJvdW5kczogdGhlIGxlbiBpcyAgYnV0IHRoZSBpbmRleCBpcyAwMDAxMDIwMzA0MDUwNjA3MDgwOT\\n    EwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ\\n    0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5\\n    ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OQAAQBUQABAAAABQFRAAIgAAAHJhbmdlIGVuZCBpb\\n    mRleCAgb3V0IG9mIHJhbmdlIGZvciBzbGljZSBvZiBsZW5ndGggAABjYWxsZWQgYE9wdGlvbjo6dW53cmFwKClgIG9uIG\\n    EgYE5vbmVgIHZhbHVlALAVEAAcAAAA7gEAAB4AAABsaWJyYXJ5L3N0ZC9zcmMvcGFuaWNraW5nLnJzAEGIrMAACwEBAEH\\n    IrMAACwEBAEGIrcAACwEBAEHIrcAACwEBAEGIrsAACwEBAEHIrsAACwEBAEGIr8AACwEBAEHIr8AACwEBAEGIsMAACwEB\\n    AEHIsMAACwEBAEGIscAACwEBAEHIscAACwEBAEGIssAACwEBAEHIssAACwEBAEGIs8AACwEBAEHIs8AACwEBAEGItMAAC\\n    wEBAEHItMAACwEBAEGItcAACwEBAEHItcAACwEBAEGItsAACwEBAEHItsAACwEBAEGIt8AACwEBAEHIt8AACwEBAEGIuM\\n    AACwEBAEHIuMAACwEBAEGIucAACwEBAEHIucAACwEBAEGIusAACwEBAEHIusAACwEBAEGIu8AACwEBAEHIu8AACwEBAEG\\n    IvMAACwEBAEHIvMAACwEBAEGIvcAACwEBAEHIvcAACwEBAEGIvsAACwEBAEHIvsAACwEBAEGIv8AACwEBAEHIv8AACwEB\\n    AEGIwMAACwEBAEHIwMAACwEBAEGIwcAACwEBAEHIwcAACwEBAEGIwsAACwEBAEHIwsAACwEBAEGIw8AACwEBAEHIw8AAC\\n    wEBAEGIxMAACwEBAEHIxMAACwEBAEGIxcAACwEBAEHIxcAACwEBAEGIxsAACwEBAEHIxsAACwEBAEGIx8AACwEBAEHIx8\\n    AACwEBAEGIyMAACwEBAEHIyMAACwEBAEGIycAACwEBAEHIycAACwEBAEGIysAACwEBAEHIysAACwEBAEGIy8AACwEBAEH\\n    Iy8AACwEBAEGIzMAACwEBAEHIzMAACwEBAEGIzcAACwEBAEHIzcAACwEBAEGIzsAACwEBAEHIzsAACwEBAEGIz8AACwEB\\n    AEHIz8AACwEBAEGI0MAACwEBAEHI0MAACwEBAEGI0cAACwEBAEHI0cAACwEBAEGI0sAACwEBAEHI0sAACwEBAEGI08AAC\\n    wEBAEHI08AACwEBAEGI1MAACwEBAEHI1MAACwEBAEGI1cAACwEBAEHI1cAACwEBAEGI1sAACwEBAEHI1sAACwEBAEGI18\\n    AACwEBAEHI18AACwEBAEGI2MAACwEBAEHI2MAACwEBAEGI2cAACwEBAEHI2cAACwEBAEGI2sAACwEBAEHI2sAACwEBAEG\\n    I28AACwEBAEHI28AACwEBAEGI3MAACwEBAEHI3MAACwEBAEGI3cAACwEBAEHI3cAACwEBAEGI3sAACwEBAEHI3sAACwEB\\n    AEGI38AACwEBAEHI38AACwEBAEGI4MAACwEBAEHI4MAACwEBAEGI4cAACwEBAEHI4cAACwEBAEGI4sAACwEBAEHI4sAAC\\n    wEBAEGI48AACwEBAEHI48AACwEBAEGI5MAACwEBAEHI5MAACwEBAEGI5cAACwEBAEHI5cAACwEBAEGI5sAACwEBAEHI5s\\n    AACwEBAEGI58AACwEBAEHI58AACwEBAEGI6MAACwEBAEHI6MAACwEBAEGI6cAACwEBAEHI6cAACwEBAEGI6sAACwEBAEH\\n    I6sAACwEBAEGI68AACwEBAEHI68AACwEBAEGI7MAACwEBAEHI7MAACwEBAEGI7cAACwEBAEHI7cAACwEBAEGI7sAACwEB\\n    AEHI7sAACwEBAEGI78AACwEBAEHI78AACwEBAEGI8MAACwEBAEHI8MAACwEBAEGI8cAACwEBAEHI8cAACwEBAEGI8sAAC\\n    wEBAEHI8sAACwEBAEGI88AACwEBAEHI88AACwEBAEGI9MAACwEBAEHI9MAACwEBAEGI9cAACwEBAEHI9cAACwEBAEGI9s\\n    AACwEBAEHI9sAACwEBAEGI98AACwEBAEHI98AACwEBAEGI+MAACwEBAEHI+MAACwEBAEGI+cAACwEBAEHI+cAACwEBAEG\\n    I+sAACwEBAEHI+sAACwEBAEGI+8AACwEBAEHI+8AACwEBAEGI/MAACwEBAEHI/MAACwEBAEGI/cAACwEBAEHI/cAACwEB\\n    AEGI/sAACwEBAEHI/sAACwEBAEGI/8AACwEBAEHI/8AACwEBAEGIgMEACwEBAEHIgMEACwEBAEGIgcEACwEBAEHIgcEAC\\n    wEBAEGIgsEACwEBAEHIgsEACwEBAEGIg8EACwEBAEHIg8EACwEBAEGIhMEACwEBAEHIhMEACwEBAEGIhcEACwEBAEHIhc\\n    EACwEBAEGIhsEACwEBAEHIhsEACwEBAEGIh8EACwEBAEHIh8EACwEBAEGIiMEACwEBAEHIiMEACwEBAEGIicEACwEBAEH\\n    IicEACwEBAEGIisEACwEBAEHIisEACwEBAEGIi8EACwEBAEHIi8EACwEBAEGIjMEACwEBAEHIjMEACwEBAEGIjcEACwEB\\n    AEHIjcEACwEBAEGIjsEACwEBAEHIjsEACwEBAEGIj8EACwEBAEHIj8EACwEBAEGIkMEACwEBAEHIkMEACwEBAEGIkcEAC\\n    wEBAEHIkcEACwEBAEGIksEACwEBAEHIksEACwEBAEGIk8EACwEBAEHIk8EACwEBAEGIlMEACwEBAEHIlMEACwEBAEGIlc\\n    EACwEBAEHIlcEACwEBAEGIlsEACwEBAEHIlsEACwEBAEGIl8EACwEBAEHIl8EACwEBAEGImMEACwEBAEHImMEACwEBAEG\\n    ImcEACwEBAEHImcEACwEBAEGImsEACwEBAEHImsEACwEBAEGIm8EACwEBAEHIm8EACwEBAEGInMEACwEBAEHInMEACwEB\\n    AEGIncEACwEBAEHIncEACwEBAEGInsEACwEBAEHInsEACwEBAEGIn8EACwEBAEHIn8EACwEBAEGIoMEACwEBAEHIoMEAC\\n    wEBAEGIocEACwEBAEHIocEACwEBAEGIosEACwEBAEHIosEACwEBAEGIo8EACwEBAEHIo8EACwEBAEGIpMEACwEBAEHIpM\\n    EACwEBAEGIpcEACwEBAEHIpcEACwEBAEGIpsEACwEBAEHIpsEACwEBAEGIp8EACwEBAEHIp8EACwEBAEGIqMEACwEBAEH\\n    IqMEACwEBAEGIqcEACwEBAEHIqcEACwEBAEGIqsEACwEBAEHIqsEACwEBAEGIq8EACwEBAEHIq8EACwEBAEGIrMEACwEB\\n    AEHIrMEACwEBAEGIrcEACwEBAEHIrcEACwEBAEGIrsEACwEBAEHIrsEACwEBAEGIr8EACwEBAEHIr8EACwEBAEGIsMEAC\\n    wEBAEHIsMEACwEBAEGIscEACwEBAEHIscEACwEBAEGIssEACwEBAEHIssEACwEBAEGIs8EACwEBAEHIs8EACwEBAEGItM\\n    EACwEBAEHItMEACwEBAEGItcEACwEBAEHItcEACwEBAHsJcHJvZHVjZXJzAghsYW5ndWFnZQEEUnVzdAAMcHJvY2Vzc2V\\n    kLWJ5AwVydXN0Yx0xLjQ5LjAgKGUxODg0YThlMyAyMDIwLTEyLTI5KQZ3YWxydXMGMC4xOC4wDHdhc20tYmluZGdlbhIw\\n    LjIuNzAgKGI2MzU1YzI3MCk=\\n\".replace(/[^0-9a-zA-Z/+]/g,\"\"),I=h.decode(B);let d=null;function p(e,t){const r=t(1*e.length);return(null!==d&&d.buffer===f.memory.buffer||(d=new Uint8Array(f.memory.buffer)),d).set(e,r/1),[r,e.length]}var E=async function e(){const{instance:t,module:r}=await async function(e,t){if(\"function\"==typeof Response&&e instanceof Response){const r=await e.arrayBuffer();return await WebAssembly.instantiate(r,t)}{const r=await WebAssembly.instantiate(e,t);return r instanceof WebAssembly.Instance?{instance:r,module:e}:r}}(I,{});return f=t.exports,e.__wbindgen_wasm_module=r,f};let Q;async function m(e,t,r){if(!Q){if(await E(),0!==f.bls_init())throw new Error(\"Cannot initialize BLS\");Q=(e,t,r)=>0===function(e,t,r){const[n,A]=p(e,f.__wbindgen_malloc),[i,s]=p(t,f.__wbindgen_malloc),[o,a]=p(r,f.__wbindgen_malloc);return f.bls_verify(n,A,i,s,o,a)}(t,r,e)}return Q(e,t,r)}class C extends c{constructor(){super(\"Cannot lookup unverified certificate. Call 'verify()' first.\")}}function y(e,t){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}class w{constructor(e,t=Object(i.d)()){this._agent=t,this.verified=!1,this._rootKey=null,this.cert=l.a(e.certificate)}lookupEx(e){return this.checkState(),function(e,t){const r=G(e.map((e=>\"string\"==typeof e?Object(u.d)(e):Object(u.e)(new Uint8Array(e)))),t);return r&&Object(u.g)(Object(u.b)(r))}(e,this.cert.tree)}lookup(e){return this.checkState(),G(e,this.cert.tree)}async verify(){const e=await v(this.cert.tree),t=await this._checkDelegation(this.cert.delegation),r=this.cert.signature,n=function(e){const t=b.length+96;if(e.length!==t)throw new TypeError(`BLS DER-encoded public key must be ${t} bytes long`);const r=e.slice(0,b.length);if(!y(r,b))throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${b}, but get ${r}`);return e.slice(b.length)}(t),i=A.Buffer.concat([_(\"ic-state-root\"),e]),s=await m(n,r,i);return this.verified=s,s}checkState(){if(!this.verified)throw new C}async _checkDelegation(e){if(!e){if(!this._rootKey){if(this._agent.rootKey)return this._rootKey=this._agent.rootKey,this._rootKey;throw new Error(\"Agent does not have a rootKey. Do you need to call 'fetchRootKey'?\")}return this._rootKey}const t=new w(e,this._agent);if(!await t.verify())throw new Error(\"fail to verify delegation certificate\");const r=t.lookupEx([\"subnet\",e.subnet_id,\"public_key\"]);if(!r)throw new Error(`Could not find subnet key for subnet 0x${e.subnet_id.toString(\"hex\")}`);return A.Buffer.from(r)}}const b=A.Buffer.from(\"308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100\",\"hex\");async function v(e){switch(e[0]){case 0:return Object(g.a)(_(\"ic-hashtree-empty\"));case 4:return A.Buffer.from(e[1]);case 3:return Object(g.a)(A.Buffer.concat([_(\"ic-hashtree-leaf\"),A.Buffer.from(e[1])]));case 2:return Object(g.a)(A.Buffer.concat([_(\"ic-hashtree-labeled\"),A.Buffer.from(e[1]),A.Buffer.from(await v(e[2]))]));case 1:return Object(g.a)(A.Buffer.concat([_(\"ic-hashtree-fork\"),A.Buffer.from(await v(e[1])),A.Buffer.from(await v(e[2]))]));default:throw new Error(\"unreachable\")}}function _(e){const t=A.Buffer.alloc(1);return t.writeUInt8(e.length,0),A.Buffer.concat([t,A.Buffer.from(e)])}function G(e,t){if(0===e.length)return 3===t[0]?A.Buffer.from(t[1]):void 0;const r=function(e,t){if(0===t.length)return;for(const r of t)if(2===r[0]){if(y(e,A.Buffer.from(r[1])))return r[2]}}(e[0],k(t));return r?G(e.slice(1),r):void 0}function k(e){switch(e[0]){case 0:return[];case 1:return k(e[1]).concat(k(e[2]));default:return[e]}}function S(){return M(q(D(),1e3),N(1e3,1.2),H(3e5))}function D(){let e=!0;return async()=>!!e&&(e=!1,!0)}function q(e,t){return async(r,n,A)=>{if(await e(r,n,A))return new Promise((e=>setTimeout(e,t)))}}function R(e){let t=e;return async(r,n,A)=>{if(--t<=0)throw new Error(`Failed to retrieve a reply for request after ${e} attempts:\\n  Request ID: ${Object(g.c)(n)}\\n  Request status: ${A}\\n`)}}function F(e){return()=>new Promise((t=>setTimeout(t,e)))}function H(e){const t=Date.now()+e;return async(r,n,A)=>{if(Date.now()>t)throw new Error(`Request timed out after ${e} msec:\\n  Request ID: ${Object(g.c)(n)}\\n  Request status: ${A}\\n`)}}function N(e,t){let r=e;return()=>new Promise((e=>setTimeout((()=>{r*=t,e()}),r)))}function M(...e){return async(t,r,n)=>{for(const A of e)await A(t,r,n)}}async function x(e,t,r,n){const A=[Object(u.d)(\"request_status\"),r],s=await e.readState(t,{paths:[A]}),o=new w(s,e);if(!await o.verify())throw new Error(\"Fail to verify certificate\");const a=o.lookup([...A,Object(u.d)(\"status\")]);let c;switch(c=void 0===a?i.c.Unknown:a.toString(),c){case i.c.Replied:return o.lookup([...A,Object(u.d)(\"reply\")]);case i.c.Received:case i.c.Unknown:case i.c.Processing:return await n(t,r,c),x(e,t,r,n);case i.c.Rejected:{const e=o.lookup([...A,Object(u.d)(\"reject_code\")]).toString(),t=o.lookup([...A,Object(u.d)(\"reject_message\")]).toString();throw new Error(`Call was rejected:\\n  Request ID: ${Object(g.c)(r)}\\n  Reject code: ${e}\\n  Reject text: ${t}\\n`)}case i.c.Done:throw new Error(`Call was marked as done but we never saw the reply:\\n  Request ID: ${Object(g.c)(r)}\\n`)}throw new Error(\"unreachable\")}class j extends c{constructor(e,t,r,n){super([\"Call failed:\",`  Canister: ${e.toText()}`,`  Method: ${t} (${r})`,...Object.getOwnPropertyNames(n).map((e=>`  \"${e}\": ${JSON.stringify(n[e])}`))].join(\"\\n\")),this.canisterId=e,this.methodName=t,this.type=r,this.props=n}}class O extends j{constructor(e,t,r){var n;super(e,t,\"query\",{Status:r.status,Code:null!==(n=i.b[r.reject_code])&&void 0!==n?n:`Unknown Code \"${r.reject_code}\"`,Message:r.reject_message}),this.result=r}}class U extends j{constructor(e,t,r,n){super(e,t,\"update\",{\"Request ID\":Object(g.c)(r),\"HTTP status code\":n.status.toString(),\"HTTP status text\":n.statusText}),this.requestId=r,this.response=n}}var Y;!function(e){e.Install=\"install\",e.Reinstall=\"reinstall\",e.Upgrade=\"upgrade\"}(Y||(Y={}));const T=Symbol.for(\"ic-agent-metadata\");class J{constructor(e){this[T]=Object.freeze(e)}static agentOf(e){return e[T].config.agent}static interfaceOf(e){return e[T].service}static canisterIdOf(e){return s.a.from(e[T].config.canisterId)}static async install(e,t){const r=void 0===e.mode?Y.Install:e.mode,n=e.arg?[...e.arg]:[],A=[...e.module],i=\"string\"==typeof t.canisterId?s.a.fromText(t.canisterId):t.canisterId;await a(t).install_code({mode:{[r]:null},arg:n,wasm_module:A,canister_id:i})}static async createCanister(e){const{canister_id:t}=await a(e||{}).provisional_create_canister_with_cycles({amount:[],settings:[]});return t}static async createAndInstallCanister(e,t,r){const n=await this.createCanister(r);return await this.install(Object.assign({},t),Object.assign(Object.assign({},r),{canisterId:n})),this.createActor(e,Object.assign(Object.assign({},r),{canisterId:n}))}static createActorClass(e){const t=e({IDL:u.a});return class extends J{constructor(e){const r=\"string\"==typeof e.canisterId?s.a.fromText(e.canisterId):e.canisterId;super({config:Object.assign(Object.assign(Object.assign({},Z),e),{canisterId:r}),service:t});for(const[e,r]of t._fields)this[e]=P(this,e,r)}}}static createActor(e,t){return new(this.createActorClass(e))(t)}}function L(e,t){const r=u.a.decode(e,A.Buffer.from(t));switch(r.length){case 0:return;case 1:return r[0];default:return r}}const Z={pollingStrategyFactory:n.defaultStrategy};function P(e,t,r){let n;n=r.annotations.includes(\"query\")?async(n,...A)=>{var o,a;const c=(n=Object.assign(Object.assign({},n),null===(a=(o=e[T].config).queryTransform)||void 0===a?void 0:a.call(o,t,A,Object.assign(Object.assign({},e[T].config),n)))).agent||e[T].config.agent||Object(i.d)(),l=s.a.from(n.canisterId||e[T].config.canisterId),g=u.a.encode(r.argTypes,A),h=await c.query(l,{methodName:t,arg:g});switch(h.status){case\"rejected\":throw new O(l,t,h);case\"replied\":return L(r.retTypes,h.reply.arg)}}:async(n,...A)=>{var o,a;const c=(n=Object.assign(Object.assign({},n),null===(a=(o=e[T].config).callTransform)||void 0===a?void 0:a.call(o,t,A,Object.assign(Object.assign({},e[T].config),n)))).agent||e[T].config.agent||Object(i.d)(),{canisterId:l,effectiveCanisterId:g,pollingStrategyFactory:h}=Object.assign(Object.assign(Object.assign({},Z),e[T].config),n),f=s.a.from(l),B=void 0!==g?s.a.from(g):f,I=u.a.encode(r.argTypes,A),{requestId:d,response:p}=await c.call(f,{methodName:t,arg:I,effectiveCanisterId:B});if(!p.ok)throw new U(f,t,d,p);const E=h(),Q=await x(c,B,d,E);if(void 0!==Q)return L(r.retTypes,Q);if(0!==r.retTypes.length)throw new Error(`Call was returned undefined, but type [${r.retTypes.join(\",\")}].`)};const A=(...e)=>n({},...e);return A.withOptions=e=>(...t)=>n(e,...t),A}var K=r(27);r(13),r(28)},function(e,t){var r;r=function(){return this}();try{r=r||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(r=window)}e.exports=r},function(e,t,r){var n;e.exports=(n=r(3),function(){var e=n,t=e.lib.WordArray;function r(e,r,n){for(var A=[],i=0,s=0;s<r;s++)if(s%4){var o=n[e.charCodeAt(s-1)]<<s%4*2|n[e.charCodeAt(s)]>>>6-s%4*2;A[i>>>2]|=o<<24-i%4*8,i++}return t.create(A,i)}e.enc.Base64={stringify:function(e){var t=e.words,r=e.sigBytes,n=this._map;e.clamp();for(var A=[],i=0;i<r;i+=3)for(var s=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,o=0;o<4&&i+.75*o<r;o++)A.push(n.charAt(s>>>6*(3-o)&63));var a=n.charAt(64);if(a)for(;A.length%4;)A.push(a);return A.join(\"\")},parse:function(e){var t=e.length,n=this._map,A=this._reverseMap;if(!A){A=this._reverseMap=[];for(var i=0;i<n.length;i++)A[n.charCodeAt(i)]=i}var s=n.charAt(64);if(s){var o=e.indexOf(s);-1!==o&&(t=o)}return r(e,t,A)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"}}(),n.enc.Base64)},function(e,t,r){var n;e.exports=(n=r(3),function(e){var t=n,r=t.lib,A=r.WordArray,i=r.Hasher,s=t.algo,o=[];!function(){for(var t=0;t<64;t++)o[t]=4294967296*e.abs(e.sin(t+1))|0}();var a=s.MD5=i.extend({_doReset:function(){this._hash=new A.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var r=0;r<16;r++){var n=t+r,A=e[n];e[n]=16711935&(A<<8|A>>>24)|4278255360&(A<<24|A>>>8)}var i=this._hash.words,s=e[t+0],a=e[t+1],h=e[t+2],f=e[t+3],B=e[t+4],I=e[t+5],d=e[t+6],p=e[t+7],E=e[t+8],Q=e[t+9],m=e[t+10],C=e[t+11],y=e[t+12],w=e[t+13],b=e[t+14],v=e[t+15],_=i[0],G=i[1],k=i[2],S=i[3];_=c(_,G,k,S,s,7,o[0]),S=c(S,_,G,k,a,12,o[1]),k=c(k,S,_,G,h,17,o[2]),G=c(G,k,S,_,f,22,o[3]),_=c(_,G,k,S,B,7,o[4]),S=c(S,_,G,k,I,12,o[5]),k=c(k,S,_,G,d,17,o[6]),G=c(G,k,S,_,p,22,o[7]),_=c(_,G,k,S,E,7,o[8]),S=c(S,_,G,k,Q,12,o[9]),k=c(k,S,_,G,m,17,o[10]),G=c(G,k,S,_,C,22,o[11]),_=c(_,G,k,S,y,7,o[12]),S=c(S,_,G,k,w,12,o[13]),k=c(k,S,_,G,b,17,o[14]),_=u(_,G=c(G,k,S,_,v,22,o[15]),k,S,a,5,o[16]),S=u(S,_,G,k,d,9,o[17]),k=u(k,S,_,G,C,14,o[18]),G=u(G,k,S,_,s,20,o[19]),_=u(_,G,k,S,I,5,o[20]),S=u(S,_,G,k,m,9,o[21]),k=u(k,S,_,G,v,14,o[22]),G=u(G,k,S,_,B,20,o[23]),_=u(_,G,k,S,Q,5,o[24]),S=u(S,_,G,k,b,9,o[25]),k=u(k,S,_,G,f,14,o[26]),G=u(G,k,S,_,E,20,o[27]),_=u(_,G,k,S,w,5,o[28]),S=u(S,_,G,k,h,9,o[29]),k=u(k,S,_,G,p,14,o[30]),_=l(_,G=u(G,k,S,_,y,20,o[31]),k,S,I,4,o[32]),S=l(S,_,G,k,E,11,o[33]),k=l(k,S,_,G,C,16,o[34]),G=l(G,k,S,_,b,23,o[35]),_=l(_,G,k,S,a,4,o[36]),S=l(S,_,G,k,B,11,o[37]),k=l(k,S,_,G,p,16,o[38]),G=l(G,k,S,_,m,23,o[39]),_=l(_,G,k,S,w,4,o[40]),S=l(S,_,G,k,s,11,o[41]),k=l(k,S,_,G,f,16,o[42]),G=l(G,k,S,_,d,23,o[43]),_=l(_,G,k,S,Q,4,o[44]),S=l(S,_,G,k,y,11,o[45]),k=l(k,S,_,G,v,16,o[46]),_=g(_,G=l(G,k,S,_,h,23,o[47]),k,S,s,6,o[48]),S=g(S,_,G,k,p,10,o[49]),k=g(k,S,_,G,b,15,o[50]),G=g(G,k,S,_,I,21,o[51]),_=g(_,G,k,S,y,6,o[52]),S=g(S,_,G,k,f,10,o[53]),k=g(k,S,_,G,m,15,o[54]),G=g(G,k,S,_,a,21,o[55]),_=g(_,G,k,S,E,6,o[56]),S=g(S,_,G,k,v,10,o[57]),k=g(k,S,_,G,d,15,o[58]),G=g(G,k,S,_,w,21,o[59]),_=g(_,G,k,S,B,6,o[60]),S=g(S,_,G,k,C,10,o[61]),k=g(k,S,_,G,h,15,o[62]),G=g(G,k,S,_,Q,21,o[63]),i[0]=i[0]+_|0,i[1]=i[1]+G|0,i[2]=i[2]+k|0,i[3]=i[3]+S|0},_doFinalize:function(){var t=this._data,r=t.words,n=8*this._nDataBytes,A=8*t.sigBytes;r[A>>>5]|=128<<24-A%32;var i=e.floor(n/4294967296),s=n;r[15+(A+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),r[14+(A+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),t.sigBytes=4*(r.length+1),this._process();for(var o=this._hash,a=o.words,c=0;c<4;c++){var u=a[c];a[c]=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8)}return o},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function c(e,t,r,n,A,i,s){var o=e+(t&r|~t&n)+A+s;return(o<<i|o>>>32-i)+t}function u(e,t,r,n,A,i,s){var o=e+(t&n|r&~n)+A+s;return(o<<i|o>>>32-i)+t}function l(e,t,r,n,A,i,s){var o=e+(t^r^n)+A+s;return(o<<i|o>>>32-i)+t}function g(e,t,r,n,A,i,s){var o=e+(r^(t|~n))+A+s;return(o<<i|o>>>32-i)+t}t.MD5=i._createHelper(a),t.HmacMD5=i._createHmacHelper(a)}(Math),n.MD5)},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return n}));const n=e=>e instanceof Object?Array.isArray(e)?e.map((e=>n(e))):Object.entries(e).reduce(((e,[t,r])=>Object.assign(Object.assign({},e),{[t]:n(r)})),{}):\"bigint\"==typeof e?parseInt(e.toString(),10):e},function(e,t,r){\"use strict\";const n=r(66).Buffer;e.exports=class{constructor(e=n.from([])){this.buffer=e,this._bytesRead=0,this._bytesWrote=0}read(e){this._bytesRead+=e;const t=this.buffer.slice(0,e);return this.buffer=this.buffer.slice(e),t}write(e){e=n.from(e),this._bytesWrote+=e.length,this.buffer=n.concat([this.buffer,e])}get end(){return!this.buffer.length}get bytesRead(){return this._bytesRead}get bytesWrote(){return this._bytesWrote}}},function(e,t,r){\"use strict\";(function(e){r.d(t,\"a\",(function(){return o})),r.d(t,\"c\",(function(){return c})),r.d(t,\"b\",(function(){return u}));var n=r(57),A=r.n(n),i=r(32),s=r.n(i);const o=e=>{const t=[];let r;for(r=0;r<e.length;r+=1)t[r/4|0]|=e[r]<<24-8*r;return s.a.lib.WordArray.create(t,e.length)},a=(e,t)=>{const r=[];return t>0&&r.push(e>>>24),t>1&&r.push(e>>>16&255),t>2&&r.push(e>>>8&255),t>3&&r.push(255&e),r},c=(e,t)=>{e.hasOwnProperty(\"sigBytes\")&&e.hasOwnProperty(\"words\")&&(t=e.sigBytes,e=e.words);let r,n=[],A=0;for(;t>0;)r=a(e[A],Math.min(4,t)),t-=r.length,n=[...n,r],A++;return[].concat.apply([],n)},u=t=>{const r=A.a.unsigned(e.from(t));var n;return((n=r)<0?(Number(n)>>>0).toString(16):Number(n).toString(16)).padStart(8,\"0\")}}).call(this,r(0).Buffer)},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return A})),r.d(t,\"b\",(function(){return i})),r.d(t,\"c\",(function(){return s}));var n=r(2);const A=({IDL:e})=>{const t=e.Principal,r=e.Record({freezing_threshold:e.Nat,controllers:e.Vec(e.Principal),memory_allocation:e.Nat,compute_allocation:e.Nat}),n=e.Record({freezing_threshold:e.Opt(e.Nat),controllers:e.Opt(e.Vec(e.Principal)),memory_allocation:e.Opt(e.Nat),compute_allocation:e.Opt(e.Nat)}),A=e.Vec(e.Nat8);return e.Service({canister_status:e.Func([e.Record({canister_id:t})],[e.Record({status:e.Variant({stopped:e.Null,stopping:e.Null,running:e.Null}),memory_size:e.Nat,cycles:e.Nat,settings:r,module_hash:e.Opt(e.Vec(e.Nat8))})],[]),create_canister:e.Func([e.Record({settings:e.Opt(n)})],[e.Record({canister_id:t})],[]),delete_canister:e.Func([e.Record({canister_id:t})],[],[]),deposit_cycles:e.Func([e.Record({canister_id:t})],[],[]),install_code:e.Func([e.Record({arg:e.Vec(e.Nat8),wasm_module:A,mode:e.Variant({reinstall:e.Null,upgrade:e.Null,install:e.Null}),canister_id:t})],[],[]),provisional_create_canister_with_cycles:e.Func([e.Record({settings:e.Opt(n),amount:e.Opt(e.Nat)})],[e.Record({canister_id:t})],[]),provisional_top_up_canister:e.Func([e.Record({canister_id:t,amount:e.Nat})],[],[]),raw_rand:e.Func([],[e.Vec(e.Nat8)],[]),start_canister:e.Func([e.Record({canister_id:t})],[],[]),stop_canister:e.Func([e.Record({canister_id:t})],[],[]),uninstall_code:e.Func([e.Record({canister_id:t})],[],[]),update_settings:e.Func([e.Record({canister_id:e.Principal,settings:n})],[],[])})},i=n.a.fromHex(\"\"),s=(e,t,r)=>{let A={effectiveCanisterId:i};return Array.isArray(t)&&t.length?(t[0].hasOwnProperty(\"canister_id\")&&t[0].canister_id&&(A={effectiveCanisterId:n.a.from(t[0].canister_id)}),A):A}},function(e,t,r){var n;!function(A){\"use strict\";var i,s=/^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,o=Math.ceil,a=Math.floor,c=\"[BigNumber Error] \",u=c+\"Number primitive has more than 15 significant digits: \",l=1e14,g=14,h=9007199254740991,f=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],B=1e7,I=1e9;function d(e){var t=0|e;return e>0||e===t?t:t-1}function p(e){for(var t,r,n=1,A=e.length,i=e[0]+\"\";n<A;){for(t=e[n++]+\"\",r=g-t.length;r--;t=\"0\"+t);i+=t}for(A=i.length;48===i.charCodeAt(--A););return i.slice(0,A+1||1)}function E(e,t){var r,n,A=e.c,i=t.c,s=e.s,o=t.s,a=e.e,c=t.e;if(!s||!o)return null;if(r=A&&!A[0],n=i&&!i[0],r||n)return r?n?0:-o:s;if(s!=o)return s;if(r=s<0,n=a==c,!A||!i)return n?0:!A^r?1:-1;if(!n)return a>c^r?1:-1;for(o=(a=A.length)<(c=i.length)?a:c,s=0;s<o;s++)if(A[s]!=i[s])return A[s]>i[s]^r?1:-1;return a==c?0:a>c^r?1:-1}function Q(e,t,r,n){if(e<t||e>r||e!==a(e))throw Error(c+(n||\"Argument\")+(\"number\"==typeof e?e<t||e>r?\" out of range: \":\" not an integer: \":\" not a primitive number: \")+String(e))}function m(e){var t=e.c.length-1;return d(e.e/g)==t&&e.c[t]%2!=0}function C(e,t){return(e.length>1?e.charAt(0)+\".\"+e.slice(1):e)+(t<0?\"e\":\"e+\")+t}function y(e,t,r){var n,A;if(t<0){for(A=r+\".\";++t;A+=r);e=A+e}else if(++t>(n=e.length)){for(A=r,t-=n;--t;A+=r);e+=A}else t<n&&(e=e.slice(0,t)+\".\"+e.slice(t));return e}i=function e(t){var r,n,A,i,w,b,v,_,G,k,S=J.prototype={constructor:J,toString:null,valueOf:null},D=new J(1),q=20,R=4,F=-7,H=21,N=-1e7,M=1e7,x=!1,j=1,O=0,U={prefix:\"\",groupSize:3,secondaryGroupSize:0,groupSeparator:\",\",decimalSeparator:\".\",fractionGroupSize:0,fractionGroupSeparator:\" \",suffix:\"\"},Y=\"0123456789abcdefghijklmnopqrstuvwxyz\",T=!0;function J(e,t){var r,i,o,c,l,f,B,I,d=this;if(!(d instanceof J))return new J(e,t);if(null==t){if(e&&!0===e._isBigNumber)return d.s=e.s,void(!e.c||e.e>M?d.c=d.e=null:e.e<N?d.c=[d.e=0]:(d.e=e.e,d.c=e.c.slice()));if((f=\"number\"==typeof e)&&0*e==0){if(d.s=1/e<0?(e=-e,-1):1,e===~~e){for(c=0,l=e;l>=10;l/=10,c++);return void(c>M?d.c=d.e=null:(d.e=c,d.c=[e]))}I=String(e)}else{if(!s.test(I=String(e)))return A(d,I,f);d.s=45==I.charCodeAt(0)?(I=I.slice(1),-1):1}(c=I.indexOf(\".\"))>-1&&(I=I.replace(\".\",\"\")),(l=I.search(/e/i))>0?(c<0&&(c=l),c+=+I.slice(l+1),I=I.substring(0,l)):c<0&&(c=I.length)}else{if(Q(t,2,Y.length,\"Base\"),10==t&&T)return K(d=new J(e),q+d.e+1,R);if(I=String(e),f=\"number\"==typeof e){if(0*e!=0)return A(d,I,f,t);if(d.s=1/e<0?(I=I.slice(1),-1):1,J.DEBUG&&I.replace(/^0\\.0*|\\./,\"\").length>15)throw Error(u+e)}else d.s=45===I.charCodeAt(0)?(I=I.slice(1),-1):1;for(r=Y.slice(0,t),c=l=0,B=I.length;l<B;l++)if(r.indexOf(i=I.charAt(l))<0){if(\".\"==i){if(l>c){c=B;continue}}else if(!o&&(I==I.toUpperCase()&&(I=I.toLowerCase())||I==I.toLowerCase()&&(I=I.toUpperCase()))){o=!0,l=-1,c=0;continue}return A(d,String(e),f,t)}f=!1,(c=(I=n(I,t,10,d.s)).indexOf(\".\"))>-1?I=I.replace(\".\",\"\"):c=I.length}for(l=0;48===I.charCodeAt(l);l++);for(B=I.length;48===I.charCodeAt(--B););if(I=I.slice(l,++B)){if(B-=l,f&&J.DEBUG&&B>15&&(e>h||e!==a(e)))throw Error(u+d.s*e);if((c=c-l-1)>M)d.c=d.e=null;else if(c<N)d.c=[d.e=0];else{if(d.e=c,d.c=[],l=(c+1)%g,c<0&&(l+=g),l<B){for(l&&d.c.push(+I.slice(0,l)),B-=g;l<B;)d.c.push(+I.slice(l,l+=g));l=g-(I=I.slice(l)).length}else l-=B;for(;l--;I+=\"0\");d.c.push(+I)}}else d.c=[d.e=0]}function L(e,t,r,n){var A,i,s,o,a;if(null==r?r=R:Q(r,0,8),!e.c)return e.toString();if(A=e.c[0],s=e.e,null==t)a=p(e.c),a=1==n||2==n&&(s<=F||s>=H)?C(a,s):y(a,s,\"0\");else if(i=(e=K(new J(e),t,r)).e,o=(a=p(e.c)).length,1==n||2==n&&(t<=i||i<=F)){for(;o<t;a+=\"0\",o++);a=C(a,i)}else if(t-=s,a=y(a,i,\"0\"),i+1>o){if(--t>0)for(a+=\".\";t--;a+=\"0\");}else if((t+=i-o)>0)for(i+1==o&&(a+=\".\");t--;a+=\"0\");return e.s<0&&A?\"-\"+a:a}function Z(e,t){for(var r,n=1,A=new J(e[0]);n<e.length;n++){if(!(r=new J(e[n])).s){A=r;break}t.call(A,r)&&(A=r)}return A}function P(e,t,r){for(var n=1,A=t.length;!t[--A];t.pop());for(A=t[0];A>=10;A/=10,n++);return(r=n+r*g-1)>M?e.c=e.e=null:r<N?e.c=[e.e=0]:(e.e=r,e.c=t),e}function K(e,t,r,n){var A,i,s,c,u,h,B,I=e.c,d=f;if(I){e:{for(A=1,c=I[0];c>=10;c/=10,A++);if((i=t-A)<0)i+=g,s=t,B=(u=I[h=0])/d[A-s-1]%10|0;else if((h=o((i+1)/g))>=I.length){if(!n)break e;for(;I.length<=h;I.push(0));u=B=0,A=1,s=(i%=g)-g+1}else{for(u=c=I[h],A=1;c>=10;c/=10,A++);B=(s=(i%=g)-g+A)<0?0:u/d[A-s-1]%10|0}if(n=n||t<0||null!=I[h+1]||(s<0?u:u%d[A-s-1]),n=r<4?(B||n)&&(0==r||r==(e.s<0?3:2)):B>5||5==B&&(4==r||n||6==r&&(i>0?s>0?u/d[A-s]:0:I[h-1])%10&1||r==(e.s<0?8:7)),t<1||!I[0])return I.length=0,n?(t-=e.e+1,I[0]=d[(g-t%g)%g],e.e=-t||0):I[0]=e.e=0,e;if(0==i?(I.length=h,c=1,h--):(I.length=h+1,c=d[g-i],I[h]=s>0?a(u/d[A-s]%d[s])*c:0),n)for(;;){if(0==h){for(i=1,s=I[0];s>=10;s/=10,i++);for(s=I[0]+=c,c=1;s>=10;s/=10,c++);i!=c&&(e.e++,I[0]==l&&(I[0]=1));break}if(I[h]+=c,I[h]!=l)break;I[h--]=0,c=1}for(i=I.length;0===I[--i];I.pop());}e.e>M?e.c=e.e=null:e.e<N&&(e.c=[e.e=0])}return e}function $(e){var t,r=e.e;return null===r?e.toString():(t=p(e.c),t=r<=F||r>=H?C(t,r):y(t,r,\"0\"),e.s<0?\"-\"+t:t)}return J.clone=e,J.ROUND_UP=0,J.ROUND_DOWN=1,J.ROUND_CEIL=2,J.ROUND_FLOOR=3,J.ROUND_HALF_UP=4,J.ROUND_HALF_DOWN=5,J.ROUND_HALF_EVEN=6,J.ROUND_HALF_CEIL=7,J.ROUND_HALF_FLOOR=8,J.EUCLID=9,J.config=J.set=function(e){var t,r;if(null!=e){if(\"object\"!=typeof e)throw Error(c+\"Object expected: \"+e);if(e.hasOwnProperty(t=\"DECIMAL_PLACES\")&&(Q(r=e[t],0,I,t),q=r),e.hasOwnProperty(t=\"ROUNDING_MODE\")&&(Q(r=e[t],0,8,t),R=r),e.hasOwnProperty(t=\"EXPONENTIAL_AT\")&&((r=e[t])&&r.pop?(Q(r[0],-I,0,t),Q(r[1],0,I,t),F=r[0],H=r[1]):(Q(r,-I,I,t),F=-(H=r<0?-r:r))),e.hasOwnProperty(t=\"RANGE\"))if((r=e[t])&&r.pop)Q(r[0],-I,-1,t),Q(r[1],1,I,t),N=r[0],M=r[1];else{if(Q(r,-I,I,t),!r)throw Error(c+t+\" cannot be zero: \"+r);N=-(M=r<0?-r:r)}if(e.hasOwnProperty(t=\"CRYPTO\")){if((r=e[t])!==!!r)throw Error(c+t+\" not true or false: \"+r);if(r){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw x=!r,Error(c+\"crypto unavailable\");x=r}else x=r}if(e.hasOwnProperty(t=\"MODULO_MODE\")&&(Q(r=e[t],0,9,t),j=r),e.hasOwnProperty(t=\"POW_PRECISION\")&&(Q(r=e[t],0,I,t),O=r),e.hasOwnProperty(t=\"FORMAT\")){if(\"object\"!=typeof(r=e[t]))throw Error(c+t+\" not an object: \"+r);U=r}if(e.hasOwnProperty(t=\"ALPHABET\")){if(\"string\"!=typeof(r=e[t])||/^.?$|[+\\-.\\s]|(.).*\\1/.test(r))throw Error(c+t+\" invalid: \"+r);T=\"0123456789\"==r.slice(0,10),Y=r}}return{DECIMAL_PLACES:q,ROUNDING_MODE:R,EXPONENTIAL_AT:[F,H],RANGE:[N,M],CRYPTO:x,MODULO_MODE:j,POW_PRECISION:O,FORMAT:U,ALPHABET:Y}},J.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!J.DEBUG)return!0;var t,r,n=e.c,A=e.e,i=e.s;e:if(\"[object Array]\"=={}.toString.call(n)){if((1===i||-1===i)&&A>=-I&&A<=I&&A===a(A)){if(0===n[0]){if(0===A&&1===n.length)return!0;break e}if((t=(A+1)%g)<1&&(t+=g),String(n[0]).length==t){for(t=0;t<n.length;t++)if((r=n[t])<0||r>=l||r!==a(r))break e;if(0!==r)return!0}}}else if(null===n&&null===A&&(null===i||1===i||-1===i))return!0;throw Error(c+\"Invalid BigNumber: \"+e)},J.maximum=J.max=function(){return Z(arguments,S.lt)},J.minimum=J.min=function(){return Z(arguments,S.gt)},J.random=(i=9007199254740992,w=Math.random()*i&2097151?function(){return a(Math.random()*i)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,A,i,s=0,u=[],l=new J(D);if(null==e?e=q:Q(e,0,I),A=o(e/g),x)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(A*=2));s<A;)(i=131072*t[s]+(t[s+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),t[s]=r[0],t[s+1]=r[1]):(u.push(i%1e14),s+=2);s=A/2}else{if(!crypto.randomBytes)throw x=!1,Error(c+\"crypto unavailable\");for(t=crypto.randomBytes(A*=7);s<A;)(i=281474976710656*(31&t[s])+1099511627776*t[s+1]+4294967296*t[s+2]+16777216*t[s+3]+(t[s+4]<<16)+(t[s+5]<<8)+t[s+6])>=9e15?crypto.randomBytes(7).copy(t,s):(u.push(i%1e14),s+=7);s=A/7}if(!x)for(;s<A;)(i=w())<9e15&&(u[s++]=i%1e14);for(A=u[--s],e%=g,A&&e&&(i=f[g-e],u[s]=a(A/i)*i);0===u[s];u.pop(),s--);if(s<0)u=[n=0];else{for(n=-1;0===u[0];u.splice(0,1),n-=g);for(s=1,i=u[0];i>=10;i/=10,s++);s<g&&(n-=g-s)}return l.e=n,l.c=u,l}),J.sum=function(){for(var e=1,t=arguments,r=new J(t[0]);e<t.length;)r=r.plus(t[e++]);return r},n=function(){var e=\"0123456789\";function t(e,t,r,n){for(var A,i,s=[0],o=0,a=e.length;o<a;){for(i=s.length;i--;s[i]*=t);for(s[0]+=n.indexOf(e.charAt(o++)),A=0;A<s.length;A++)s[A]>r-1&&(null==s[A+1]&&(s[A+1]=0),s[A+1]+=s[A]/r|0,s[A]%=r)}return s.reverse()}return function(n,A,i,s,o){var a,c,u,l,g,h,f,B,I=n.indexOf(\".\"),d=q,E=R;for(I>=0&&(l=O,O=0,n=n.replace(\".\",\"\"),h=(B=new J(A)).pow(n.length-I),O=l,B.c=t(y(p(h.c),h.e,\"0\"),10,i,e),B.e=B.c.length),u=l=(f=t(n,A,i,o?(a=Y,e):(a=e,Y))).length;0==f[--l];f.pop());if(!f[0])return a.charAt(0);if(I<0?--u:(h.c=f,h.e=u,h.s=s,f=(h=r(h,B,d,E,i)).c,g=h.r,u=h.e),I=f[c=u+d+1],l=i/2,g=g||c<0||null!=f[c+1],g=E<4?(null!=I||g)&&(0==E||E==(h.s<0?3:2)):I>l||I==l&&(4==E||g||6==E&&1&f[c-1]||E==(h.s<0?8:7)),c<1||!f[0])n=g?y(a.charAt(1),-d,a.charAt(0)):a.charAt(0);else{if(f.length=c,g)for(--i;++f[--c]>i;)f[c]=0,c||(++u,f=[1].concat(f));for(l=f.length;!f[--l];);for(I=0,n=\"\";I<=l;n+=a.charAt(f[I++]));n=y(n,u,a.charAt(0))}return n}}(),r=function(){function e(e,t,r){var n,A,i,s,o=0,a=e.length,c=t%B,u=t/B|0;for(e=e.slice();a--;)o=((A=c*(i=e[a]%B)+(n=u*i+(s=e[a]/B|0)*c)%B*B+o)/r|0)+(n/B|0)+u*s,e[a]=A%r;return o&&(e=[o].concat(e)),e}function t(e,t,r,n){var A,i;if(r!=n)i=r>n?1:-1;else for(A=i=0;A<r;A++)if(e[A]!=t[A]){i=e[A]>t[A]?1:-1;break}return i}function r(e,t,r,n){for(var A=0;r--;)e[r]-=A,A=e[r]<t[r]?1:0,e[r]=A*n+e[r]-t[r];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(n,A,i,s,o){var c,u,h,f,B,I,p,E,Q,m,C,y,w,b,v,_,G,k=n.s==A.s?1:-1,S=n.c,D=A.c;if(!(S&&S[0]&&D&&D[0]))return new J(n.s&&A.s&&(S?!D||S[0]!=D[0]:D)?S&&0==S[0]||!D?0*k:k/0:NaN);for(Q=(E=new J(k)).c=[],k=i+(u=n.e-A.e)+1,o||(o=l,u=d(n.e/g)-d(A.e/g),k=k/g|0),h=0;D[h]==(S[h]||0);h++);if(D[h]>(S[h]||0)&&u--,k<0)Q.push(1),f=!0;else{for(b=S.length,_=D.length,h=0,k+=2,(B=a(o/(D[0]+1)))>1&&(D=e(D,B,o),S=e(S,B,o),_=D.length,b=S.length),w=_,C=(m=S.slice(0,_)).length;C<_;m[C++]=0);G=D.slice(),G=[0].concat(G),v=D[0],D[1]>=o/2&&v++;do{if(B=0,(c=t(D,m,_,C))<0){if(y=m[0],_!=C&&(y=y*o+(m[1]||0)),(B=a(y/v))>1)for(B>=o&&(B=o-1),p=(I=e(D,B,o)).length,C=m.length;1==t(I,m,p,C);)B--,r(I,_<p?G:D,p,o),p=I.length,c=1;else 0==B&&(c=B=1),p=(I=D.slice()).length;if(p<C&&(I=[0].concat(I)),r(m,I,C,o),C=m.length,-1==c)for(;t(D,m,_,C)<1;)B++,r(m,_<C?G:D,C,o),C=m.length}else 0===c&&(B++,m=[0]);Q[h++]=B,m[0]?m[C++]=S[w]||0:(m=[S[w]],C=1)}while((w++<b||null!=m[0])&&k--);f=null!=m[0],Q[0]||Q.splice(0,1)}if(o==l){for(h=1,k=Q[0];k>=10;k/=10,h++);K(E,i+(E.e=h+u*g-1)+1,s,f)}else E.e=u,E.r=+f;return E}}(),b=/^(-?)0([xbo])(?=\\w[\\w.]*$)/i,v=/^([^.]+)\\.$/,_=/^\\.([^.]+)$/,G=/^-?(Infinity|NaN)$/,k=/^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g,A=function(e,t,r,n){var A,i=r?t:t.replace(k,\"\");if(G.test(i))e.s=isNaN(i)?null:i<0?-1:1;else{if(!r&&(i=i.replace(b,(function(e,t,r){return A=\"x\"==(r=r.toLowerCase())?16:\"b\"==r?2:8,n&&n!=A?e:t})),n&&(A=n,i=i.replace(v,\"$1\").replace(_,\"0.$1\")),t!=i))return new J(i,A);if(J.DEBUG)throw Error(c+\"Not a\"+(n?\" base \"+n:\"\")+\" number: \"+t);e.s=null}e.c=e.e=null},S.absoluteValue=S.abs=function(){var e=new J(this);return e.s<0&&(e.s=1),e},S.comparedTo=function(e,t){return E(this,new J(e,t))},S.decimalPlaces=S.dp=function(e,t){var r,n,A,i=this;if(null!=e)return Q(e,0,I),null==t?t=R:Q(t,0,8),K(new J(i),e+i.e+1,t);if(!(r=i.c))return null;if(n=((A=r.length-1)-d(this.e/g))*g,A=r[A])for(;A%10==0;A/=10,n--);return n<0&&(n=0),n},S.dividedBy=S.div=function(e,t){return r(this,new J(e,t),q,R)},S.dividedToIntegerBy=S.idiv=function(e,t){return r(this,new J(e,t),0,1)},S.exponentiatedBy=S.pow=function(e,t){var r,n,A,i,s,u,l,h,f=this;if((e=new J(e)).c&&!e.isInteger())throw Error(c+\"Exponent not an integer: \"+$(e));if(null!=t&&(t=new J(t)),s=e.e>14,!f.c||!f.c[0]||1==f.c[0]&&!f.e&&1==f.c.length||!e.c||!e.c[0])return h=new J(Math.pow(+$(f),s?2-m(e):+$(e))),t?h.mod(t):h;if(u=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new J(NaN);(n=!u&&f.isInteger()&&t.isInteger())&&(f=f.mod(t))}else{if(e.e>9&&(f.e>0||f.e<-1||(0==f.e?f.c[0]>1||s&&f.c[1]>=24e7:f.c[0]<8e13||s&&f.c[0]<=9999975e7)))return i=f.s<0&&m(e)?-0:0,f.e>-1&&(i=1/i),new J(u?1/i:i);O&&(i=o(O/g+2))}for(s?(r=new J(.5),u&&(e.s=1),l=m(e)):l=(A=Math.abs(+$(e)))%2,h=new J(D);;){if(l){if(!(h=h.times(f)).c)break;i?h.c.length>i&&(h.c.length=i):n&&(h=h.mod(t))}if(A){if(0===(A=a(A/2)))break;l=A%2}else if(K(e=e.times(r),e.e+1,1),e.e>14)l=m(e);else{if(0===(A=+$(e)))break;l=A%2}f=f.times(f),i?f.c&&f.c.length>i&&(f.c.length=i):n&&(f=f.mod(t))}return n?h:(u&&(h=D.div(h)),t?h.mod(t):i?K(h,O,R,undefined):h)},S.integerValue=function(e){var t=new J(this);return null==e?e=R:Q(e,0,8),K(t,t.e+1,e)},S.isEqualTo=S.eq=function(e,t){return 0===E(this,new J(e,t))},S.isFinite=function(){return!!this.c},S.isGreaterThan=S.gt=function(e,t){return E(this,new J(e,t))>0},S.isGreaterThanOrEqualTo=S.gte=function(e,t){return 1===(t=E(this,new J(e,t)))||0===t},S.isInteger=function(){return!!this.c&&d(this.e/g)>this.c.length-2},S.isLessThan=S.lt=function(e,t){return E(this,new J(e,t))<0},S.isLessThanOrEqualTo=S.lte=function(e,t){return-1===(t=E(this,new J(e,t)))||0===t},S.isNaN=function(){return!this.s},S.isNegative=function(){return this.s<0},S.isPositive=function(){return this.s>0},S.isZero=function(){return!!this.c&&0==this.c[0]},S.minus=function(e,t){var r,n,A,i,s=this,o=s.s;if(t=(e=new J(e,t)).s,!o||!t)return new J(NaN);if(o!=t)return e.s=-t,s.plus(e);var a=s.e/g,c=e.e/g,u=s.c,h=e.c;if(!a||!c){if(!u||!h)return u?(e.s=-t,e):new J(h?s:NaN);if(!u[0]||!h[0])return h[0]?(e.s=-t,e):new J(u[0]?s:3==R?-0:0)}if(a=d(a),c=d(c),u=u.slice(),o=a-c){for((i=o<0)?(o=-o,A=u):(c=a,A=h),A.reverse(),t=o;t--;A.push(0));A.reverse()}else for(n=(i=(o=u.length)<(t=h.length))?o:t,o=t=0;t<n;t++)if(u[t]!=h[t]){i=u[t]<h[t];break}if(i&&(A=u,u=h,h=A,e.s=-e.s),(t=(n=h.length)-(r=u.length))>0)for(;t--;u[r++]=0);for(t=l-1;n>o;){if(u[--n]<h[n]){for(r=n;r&&!u[--r];u[r]=t);--u[r],u[n]+=l}u[n]-=h[n]}for(;0==u[0];u.splice(0,1),--c);return u[0]?P(e,u,c):(e.s=3==R?-1:1,e.c=[e.e=0],e)},S.modulo=S.mod=function(e,t){var n,A,i=this;return e=new J(e,t),!i.c||!e.s||e.c&&!e.c[0]?new J(NaN):!e.c||i.c&&!i.c[0]?new J(i):(9==j?(A=e.s,e.s=1,n=r(i,e,0,3),e.s=A,n.s*=A):n=r(i,e,0,j),(e=i.minus(n.times(e))).c[0]||1!=j||(e.s=i.s),e)},S.multipliedBy=S.times=function(e,t){var r,n,A,i,s,o,a,c,u,h,f,I,p,E,Q,m=this,C=m.c,y=(e=new J(e,t)).c;if(!(C&&y&&C[0]&&y[0]))return!m.s||!e.s||C&&!C[0]&&!y||y&&!y[0]&&!C?e.c=e.e=e.s=null:(e.s*=m.s,C&&y?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=d(m.e/g)+d(e.e/g),e.s*=m.s,(a=C.length)<(h=y.length)&&(p=C,C=y,y=p,A=a,a=h,h=A),A=a+h,p=[];A--;p.push(0));for(E=l,Q=B,A=h;--A>=0;){for(r=0,f=y[A]%Q,I=y[A]/Q|0,i=A+(s=a);i>A;)r=((c=f*(c=C[--s]%Q)+(o=I*c+(u=C[s]/Q|0)*f)%Q*Q+p[i]+r)/E|0)+(o/Q|0)+I*u,p[i--]=c%E;p[i]=r}return r?++n:p.splice(0,1),P(e,p,n)},S.negated=function(){var e=new J(this);return e.s=-e.s||null,e},S.plus=function(e,t){var r,n=this,A=n.s;if(t=(e=new J(e,t)).s,!A||!t)return new J(NaN);if(A!=t)return e.s=-t,n.minus(e);var i=n.e/g,s=e.e/g,o=n.c,a=e.c;if(!i||!s){if(!o||!a)return new J(A/0);if(!o[0]||!a[0])return a[0]?e:new J(o[0]?n:0*A)}if(i=d(i),s=d(s),o=o.slice(),A=i-s){for(A>0?(s=i,r=a):(A=-A,r=o),r.reverse();A--;r.push(0));r.reverse()}for((A=o.length)-(t=a.length)<0&&(r=a,a=o,o=r,t=A),A=0;t;)A=(o[--t]=o[t]+a[t]+A)/l|0,o[t]=l===o[t]?0:o[t]%l;return A&&(o=[A].concat(o),++s),P(e,o,s)},S.precision=S.sd=function(e,t){var r,n,A,i=this;if(null!=e&&e!==!!e)return Q(e,1,I),null==t?t=R:Q(t,0,8),K(new J(i),e,t);if(!(r=i.c))return null;if(n=(A=r.length-1)*g+1,A=r[A]){for(;A%10==0;A/=10,n--);for(A=r[0];A>=10;A/=10,n++);}return e&&i.e+1>n&&(n=i.e+1),n},S.shiftedBy=function(e){return Q(e,-9007199254740991,h),this.times(\"1e\"+e)},S.squareRoot=S.sqrt=function(){var e,t,n,A,i,s=this,o=s.c,a=s.s,c=s.e,u=q+4,l=new J(\"0.5\");if(1!==a||!o||!o[0])return new J(!a||a<0&&(!o||o[0])?NaN:o?s:1/0);if(0==(a=Math.sqrt(+$(s)))||a==1/0?(((t=p(o)).length+c)%2==0&&(t+=\"0\"),a=Math.sqrt(+t),c=d((c+1)/2)-(c<0||c%2),n=new J(t=a==1/0?\"5e\"+c:(t=a.toExponential()).slice(0,t.indexOf(\"e\")+1)+c)):n=new J(a+\"\"),n.c[0])for((a=(c=n.e)+u)<3&&(a=0);;)if(i=n,n=l.times(i.plus(r(s,i,u,1))),p(i.c).slice(0,a)===(t=p(n.c)).slice(0,a)){if(n.e<c&&--a,\"9999\"!=(t=t.slice(a-3,a+1))&&(A||\"4999\"!=t)){+t&&(+t.slice(1)||\"5\"!=t.charAt(0))||(K(n,n.e+q+2,1),e=!n.times(n).eq(s));break}if(!A&&(K(i,i.e+q+2,0),i.times(i).eq(s))){n=i;break}u+=4,a+=4,A=1}return K(n,n.e+q+1,R,e)},S.toExponential=function(e,t){return null!=e&&(Q(e,0,I),e++),L(this,e,t,1)},S.toFixed=function(e,t){return null!=e&&(Q(e,0,I),e=e+this.e+1),L(this,e,t)},S.toFormat=function(e,t,r){var n,A=this;if(null==r)null!=e&&t&&\"object\"==typeof t?(r=t,t=null):e&&\"object\"==typeof e?(r=e,e=t=null):r=U;else if(\"object\"!=typeof r)throw Error(c+\"Argument not an object: \"+r);if(n=A.toFixed(e,t),A.c){var i,s=n.split(\".\"),o=+r.groupSize,a=+r.secondaryGroupSize,u=r.groupSeparator||\"\",l=s[0],g=s[1],h=A.s<0,f=h?l.slice(1):l,B=f.length;if(a&&(i=o,o=a,a=i,B-=i),o>0&&B>0){for(i=B%o||o,l=f.substr(0,i);i<B;i+=o)l+=u+f.substr(i,o);a>0&&(l+=u+f.slice(i)),h&&(l=\"-\"+l)}n=g?l+(r.decimalSeparator||\"\")+((a=+r.fractionGroupSize)?g.replace(new RegExp(\"\\\\d{\"+a+\"}\\\\B\",\"g\"),\"$&\"+(r.fractionGroupSeparator||\"\")):g):l}return(r.prefix||\"\")+n+(r.suffix||\"\")},S.toFraction=function(e){var t,n,A,i,s,o,a,u,l,h,B,I,d=this,E=d.c;if(null!=e&&(!(a=new J(e)).isInteger()&&(a.c||1!==a.s)||a.lt(D)))throw Error(c+\"Argument \"+(a.isInteger()?\"out of range: \":\"not an integer: \")+$(a));if(!E)return new J(d);for(t=new J(D),l=n=new J(D),A=u=new J(D),I=p(E),s=t.e=I.length-d.e-1,t.c[0]=f[(o=s%g)<0?g+o:o],e=!e||a.comparedTo(t)>0?s>0?t:l:a,o=M,M=1/0,a=new J(I),u.c[0]=0;h=r(a,t,0,1),1!=(i=n.plus(h.times(A))).comparedTo(e);)n=A,A=i,l=u.plus(h.times(i=l)),u=i,t=a.minus(h.times(i=t)),a=i;return i=r(e.minus(n),A,0,1),u=u.plus(i.times(l)),n=n.plus(i.times(A)),u.s=l.s=d.s,B=r(l,A,s*=2,R).minus(d).abs().comparedTo(r(u,n,s,R).minus(d).abs())<1?[l,A]:[u,n],M=o,B},S.toNumber=function(){return+$(this)},S.toPrecision=function(e,t){return null!=e&&Q(e,1,I),L(this,e,t,2)},S.toString=function(e){var t,r=this,A=r.s,i=r.e;return null===i?A?(t=\"Infinity\",A<0&&(t=\"-\"+t)):t=\"NaN\":(null==e?t=i<=F||i>=H?C(p(r.c),i):y(p(r.c),i,\"0\"):10===e&&T?t=y(p((r=K(new J(r),q+i+1,R)).c),r.e,\"0\"):(Q(e,2,Y.length,\"Base\"),t=n(y(p(r.c),i,\"0\"),10,e,A,!0)),A<0&&r.c[0]&&(t=\"-\"+t)),t},S.valueOf=S.toJSON=function(){return $(this)},S._isBigNumber=!0,null!=t&&J.set(t),J}(),i.default=i.BigNumber=i,void 0===(n=function(){return i}.call(t,r,t,e))||(e.exports=n)}()},function(e,t,r){\"use strict\";const n=r(24).BigNumber;t.MT={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7},t.TAG={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,REGEXP:35,MIME:36},t.NUMBYTES={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31},t.SIMPLE={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23},t.SYMS={NULL:Symbol(\"null\"),UNDEFINED:Symbol(\"undef\"),PARENT:Symbol(\"parent\"),BREAK:Symbol(\"break\"),STREAM:Symbol(\"stream\")},t.SHIFT32=Math.pow(2,32),t.SHIFT16=Math.pow(2,16),t.MAX_SAFE_HIGH=2097151,t.NEG_ONE=new n(-1),t.TEN=new n(10),t.TWO=new n(2),t.PARENT={ARRAY:0,OBJECT:1,MAP:2,TAG:3,BYTE_STRING:4,UTF8_STRING:5}},function(e,t,r){var n;e.exports=(n=r(3),function(e){var t=n,r=t.lib,A=r.Base,i=r.WordArray,s=t.x64={};s.Word=A.extend({init:function(e,t){this.high=e,this.low=t}}),s.WordArray=A.extend({init:function(t,r){t=this.words=t||[],this.sigBytes=r!=e?r:8*t.length},toX32:function(){for(var e=this.words,t=e.length,r=[],n=0;n<t;n++){var A=e[n];r.push(A.high),r.push(A.low)}return i.create(r,this.sigBytes)},clone:function(){for(var e=A.clone.call(this),t=e.words=this.words.slice(0),r=t.length,n=0;n<r;n++)t[n]=t[n].clone();return e}})}(),n)},function(e,t,r){\"use strict\";r.d(t,\"b\",(function(){return c})),r.d(t,\"a\",(function(){return u}));var n=r(0),A=r(2),i=r(7),s=r(1),o=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var A=0;for(n=Object.getOwnPropertySymbols(e);A<n.length;A++)t.indexOf(n[A])<0&&Object.prototype.propertyIsEnumerable.call(e,n[A])&&(r[n[A]]=e[n[A]])}return r};const a=n.Buffer.from((new TextEncoder).encode(\"\\nic-request\"));class c{getPrincipal(){return this._principal||(this._principal=A.a.selfAuthenticating(this.getPublicKey().toDer())),this._principal}async transformRequest(e){const{body:t}=e,r=o(e,[\"body\"]),A=await Object(i.b)(t);return Object.assign(Object.assign({},r),{body:{content:t,sender_pubkey:this.getPublicKey().toDer(),sender_sig:await this.sign(Object(s.b)(n.Buffer.concat([a,A])))}})}}class u{getPrincipal(){return A.a.anonymous()}async transformRequest(e){return Object.assign(Object.assign({},e),{body:{content:e.body}})}}},function(e,t,r){\"use strict\";var n;r.d(t,\"a\",(function(){return n})),function(e){e.Call=\"call\"}(n||(n={}))},function(module,exports,__webpack_require__){(function(process,global){var __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */(function(){\"use strict\";var ERROR=\"input is invalid type\",WINDOW=\"object\"==typeof window,root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&\"object\"==typeof self,NODE_JS=!root.JS_SHA256_NO_NODE_JS&&\"object\"==typeof process&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&\"object\"==typeof module&&module.exports,AMD=__webpack_require__(61),ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&\"undefined\"!=typeof ArrayBuffer,HEX_CHARS=\"0123456789abcdef\".split(\"\"),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=[\"hex\",\"array\",\"digest\",\"arrayBuffer\"],blocks=[];!root.JS_SHA256_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return\"[object Array]\"===Object.prototype.toString.call(e)}),!ARRAY_BUFFER||!root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return\"object\"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});var createOutputMethod=function(e,t){return function(r){return new Sha256(t,!0).update(r)[e]()}},createMethod=function(e){var t=createOutputMethod(\"hex\",e);NODE_JS&&(t=nodeWrap(t,e)),t.create=function(){return new Sha256(e)},t.update=function(e){return t.create().update(e)};for(var r=0;r<OUTPUT_TYPES.length;++r){var n=OUTPUT_TYPES[r];t[n]=createOutputMethod(n,e)}return t},nodeWrap=function(method,is224){var crypto=eval(\"require('crypto')\"),Buffer=eval(\"require('buffer').Buffer\"),algorithm=is224?\"sha224\":\"sha256\",nodeMethod=function(e){if(\"string\"==typeof e)return crypto.createHash(algorithm).update(e,\"utf8\").digest(\"hex\");if(null==e)throw new Error(ERROR);return e.constructor===ArrayBuffer&&(e=new Uint8Array(e)),Array.isArray(e)||ArrayBuffer.isView(e)||e.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(e)).digest(\"hex\"):method(e)};return nodeMethod},createHmacOutputMethod=function(e,t){return function(r,n){return new HmacSha256(r,t,!0).update(n)[e]()}},createHmacMethod=function(e){var t=createHmacOutputMethod(\"hex\",e);t.create=function(t){return new HmacSha256(t,e)},t.update=function(e,r){return t.create(e).update(r)};for(var r=0;r<OUTPUT_TYPES.length;++r){var n=OUTPUT_TYPES[r];t[n]=createHmacOutputMethod(n,e)}return t};function Sha256(e,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],e?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=e}function HmacSha256(e,t,r){var n,A=typeof e;if(\"string\"===A){var i,s=[],o=e.length,a=0;for(n=0;n<o;++n)(i=e.charCodeAt(n))<128?s[a++]=i:i<2048?(s[a++]=192|i>>6,s[a++]=128|63&i):i<55296||i>=57344?(s[a++]=224|i>>12,s[a++]=128|i>>6&63,s[a++]=128|63&i):(i=65536+((1023&i)<<10|1023&e.charCodeAt(++n)),s[a++]=240|i>>18,s[a++]=128|i>>12&63,s[a++]=128|i>>6&63,s[a++]=128|63&i);e=s}else{if(\"object\"!==A)throw new Error(ERROR);if(null===e)throw new Error(ERROR);if(ARRAY_BUFFER&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||ARRAY_BUFFER&&ArrayBuffer.isView(e)))throw new Error(ERROR)}e.length>64&&(e=new Sha256(t,!0).update(e).array());var c=[],u=[];for(n=0;n<64;++n){var l=e[n]||0;c[n]=92^l,u[n]=54^l}Sha256.call(this,t,r),this.update(u),this.oKeyPad=c,this.inner=!0,this.sharedMemory=r}Sha256.prototype.update=function(e){if(!this.finalized){var t,r=typeof e;if(\"string\"!==r){if(\"object\"!==r)throw new Error(ERROR);if(null===e)throw new Error(ERROR);if(ARRAY_BUFFER&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||ARRAY_BUFFER&&ArrayBuffer.isView(e)))throw new Error(ERROR);t=!0}for(var n,A,i=0,s=e.length,o=this.blocks;i<s;){if(this.hashed&&(this.hashed=!1,o[0]=this.block,o[16]=o[1]=o[2]=o[3]=o[4]=o[5]=o[6]=o[7]=o[8]=o[9]=o[10]=o[11]=o[12]=o[13]=o[14]=o[15]=0),t)for(A=this.start;i<s&&A<64;++i)o[A>>2]|=e[i]<<SHIFT[3&A++];else for(A=this.start;i<s&&A<64;++i)(n=e.charCodeAt(i))<128?o[A>>2]|=n<<SHIFT[3&A++]:n<2048?(o[A>>2]|=(192|n>>6)<<SHIFT[3&A++],o[A>>2]|=(128|63&n)<<SHIFT[3&A++]):n<55296||n>=57344?(o[A>>2]|=(224|n>>12)<<SHIFT[3&A++],o[A>>2]|=(128|n>>6&63)<<SHIFT[3&A++],o[A>>2]|=(128|63&n)<<SHIFT[3&A++]):(n=65536+((1023&n)<<10|1023&e.charCodeAt(++i)),o[A>>2]|=(240|n>>18)<<SHIFT[3&A++],o[A>>2]|=(128|n>>12&63)<<SHIFT[3&A++],o[A>>2]|=(128|n>>6&63)<<SHIFT[3&A++],o[A>>2]|=(128|63&n)<<SHIFT[3&A++]);this.lastByteIndex=A,this.bytes+=A-this.start,A>=64?(this.block=o[16],this.start=A-64,this.hash(),this.hashed=!0):this.start=A}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex;e[16]=this.block,e[t>>2]|=EXTRA[3&t],this.block=e[16],t>=56&&(this.hashed||this.hash(),e[0]=this.block,e[16]=e[1]=e[2]=e[3]=e[4]=e[5]=e[6]=e[7]=e[8]=e[9]=e[10]=e[11]=e[12]=e[13]=e[14]=e[15]=0),e[14]=this.hBytes<<3|this.bytes>>>29,e[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var e,t,r,n,A,i,s,o,a,c=this.h0,u=this.h1,l=this.h2,g=this.h3,h=this.h4,f=this.h5,B=this.h6,I=this.h7,d=this.blocks;for(e=16;e<64;++e)t=((A=d[e-15])>>>7|A<<25)^(A>>>18|A<<14)^A>>>3,r=((A=d[e-2])>>>17|A<<15)^(A>>>19|A<<13)^A>>>10,d[e]=d[e-16]+t+d[e-7]+r<<0;for(a=u&l,e=0;e<64;e+=4)this.first?(this.is224?(i=300032,I=(A=d[0]-1413257819)-150054599<<0,g=A+24177077<<0):(i=704751109,I=(A=d[0]-210244248)-1521486534<<0,g=A+143694565<<0),this.first=!1):(t=(c>>>2|c<<30)^(c>>>13|c<<19)^(c>>>22|c<<10),n=(i=c&u)^c&l^a,I=g+(A=I+(r=(h>>>6|h<<26)^(h>>>11|h<<21)^(h>>>25|h<<7))+(h&f^~h&B)+K[e]+d[e])<<0,g=A+(t+n)<<0),t=(g>>>2|g<<30)^(g>>>13|g<<19)^(g>>>22|g<<10),n=(s=g&c)^g&u^i,B=l+(A=B+(r=(I>>>6|I<<26)^(I>>>11|I<<21)^(I>>>25|I<<7))+(I&h^~I&f)+K[e+1]+d[e+1])<<0,t=((l=A+(t+n)<<0)>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10),n=(o=l&g)^l&c^s,f=u+(A=f+(r=(B>>>6|B<<26)^(B>>>11|B<<21)^(B>>>25|B<<7))+(B&I^~B&h)+K[e+2]+d[e+2])<<0,t=((u=A+(t+n)<<0)>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10),n=(a=u&l)^u&g^o,h=c+(A=h+(r=(f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7))+(f&B^~f&I)+K[e+3]+d[e+3])<<0,c=A+(t+n)<<0;this.h0=this.h0+c<<0,this.h1=this.h1+u<<0,this.h2=this.h2+l<<0,this.h3=this.h3+g<<0,this.h4=this.h4+h<<0,this.h5=this.h5+f<<0,this.h6=this.h6+B<<0,this.h7=this.h7+I<<0},Sha256.prototype.hex=function(){this.finalize();var e=this.h0,t=this.h1,r=this.h2,n=this.h3,A=this.h4,i=this.h5,s=this.h6,o=this.h7,a=HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[15&e]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[15&t]+HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[15&r]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[15&n]+HEX_CHARS[A>>28&15]+HEX_CHARS[A>>24&15]+HEX_CHARS[A>>20&15]+HEX_CHARS[A>>16&15]+HEX_CHARS[A>>12&15]+HEX_CHARS[A>>8&15]+HEX_CHARS[A>>4&15]+HEX_CHARS[15&A]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[15&i]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[15&s];return this.is224||(a+=HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[15&o]),a},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var e=this.h0,t=this.h1,r=this.h2,n=this.h3,A=this.h4,i=this.h5,s=this.h6,o=this.h7,a=[e>>24&255,e>>16&255,e>>8&255,255&e,t>>24&255,t>>16&255,t>>8&255,255&t,r>>24&255,r>>16&255,r>>8&255,255&r,n>>24&255,n>>16&255,n>>8&255,255&n,A>>24&255,A>>16&255,A>>8&255,255&A,i>>24&255,i>>16&255,i>>8&255,255&i,s>>24&255,s>>16&255,s>>8&255,255&s];return this.is224||a.push(o>>24&255,o>>16&255,o>>8&255,255&o),a},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var e=new ArrayBuffer(this.is224?28:32),t=new DataView(e);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),e},HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var e=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(e),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&(__WEBPACK_AMD_DEFINE_RESULT__=function(){return exports}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)))})()}).call(this,__webpack_require__(60),__webpack_require__(17))},function(e,t,r){\"use strict\";t.Diagnose=r(62),t.Decoder=r(42),t.Encoder=r(65),t.Simple=r(43),t.Tagged=r(44),t.decodeAll=t.Decoder.decodeAll,t.decodeFirst=t.Decoder.decodeFirst,t.diagnose=t.Diagnose.diagnose,t.encode=t.Encoder.encode,t.decode=t.Decoder.decode,t.leveldb={decode:t.Decoder.decodeAll,encode:t.Encoder.encode,buffer:!0,name:\"cbor\"}},function(e,t,r){\"use strict\";(function(e){r.d(t,\"a\",(function(){return a})),r.d(t,\"b\",(function(){return u}));var n=r(32),A=r.n(n),i=r(2),s=r(22);const o=e.alloc(32),a=(t,r)=>{const n=A.a.algo.SHA224.create();n.update(\"\\naccount-id\"),n.update(Object(s.a)(t.toUint8Array()));const i=e.from(o);r&&i.writeUInt32BE(r),n.update(Object(s.a)(i));const a=n.finalize(),c=Object(s.c)(a,28);return Object(s.b)(new Uint8Array(c))+a.toString()},c=e=>i.a.fromText(e).toText()===e,u=e=>{try{return Boolean(e.length<=27&&c(e))}catch(e){return!1}}}).call(this,r(0).Buffer)},function(e,t,r){var n;e.exports=(n=r(3),r(26),r(69),r(70),r(18),r(71),r(19),r(36),r(49),r(72),r(50),r(73),r(74),r(75),r(37),r(76),r(15),r(6),r(77),r(78),r(79),r(80),r(81),r(82),r(83),r(84),r(85),r(86),r(87),r(88),r(89),r(90),r(91),r(92),n)},function(e,t,r){\"use strict\";(function(e){r.d(t,\"a\",(function(){return a})),r.d(t,\"b\",(function(){return c})),r.d(t,\"c\",(function(){return u}));var n=r(1),A=r(20),i=r(12),s=r(4),o=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))};const a=(t,r=\"\",a)=>(c,u,l)=>o(void 0,void 0,void 0,(function*(){var o;const l=Object(s.a)();let g=null;a&&(g=Object(A.a)(n.a.decode(a[u.methodName],u.arg)));const h=Object(i.b)(e.from(Object(n.g)(u.arg).buffer)),f=yield t.call({handler:\"requestCall\",args:[l,{canisterId:c.toString(),methodName:u.methodName,arg:h,effectiveCanisterId:null===(o=u.effectiveCanisterId)||void 0===o?void 0:o.toString()},r,g]});if(f.error)throw f.error.message;return Object.assign(Object.assign({},f),{requestId:Object(n.e)(new Uint8Array(Object(i.a)(f.requestId)))})})),c=t=>(r,A,a)=>o(void 0,void 0,void 0,(function*(){const o=yield t.call({handler:\"requestQuery\",args:[{canisterId:r.toString(),methodName:A.methodName,arg:Object(i.b)(e.from(Object(n.g)(A.arg).buffer)),url:Object(s.a)().url}]});if(o.error)throw o.error.message;return\"replied\"===o.status?Object.assign(Object.assign({},o),{reply:{arg:Object(n.e)(new Uint8Array(Object(i.a)(o.reply.arg)))}}):Object.assign({},o)})),u=t=>(r,A,a)=>o(void 0,void 0,void 0,(function*(){const o=A.paths[0].map((t=>Object(i.b)(e.from(Object(n.g)(t).buffer))));try{const e=yield t.call({handler:\"requestReadState\",args:[{canisterId:r.toString(),paths:o,url:Object(s.a)().url}]});if(e.error)throw e.error.message;return{certificate:Object(n.e)(new Uint8Array(Object(i.a)(e.certificate)))}}catch(e){throw e}}))}).call(this,r(0).Buffer)},function(e,t,r){\"use strict\";r.d(t,\"b\",(function(){return i})),r.d(t,\"a\",(function(){return s}));var n=r(1),A=r(0);r(20),r(4);const i=(e,t)=>{var r;const i=e.idl({IDL:n.a}),[s,o]=(null===(r=null==i?void 0:i._fields)||void 0===r?void 0:r.find((([t,r])=>t===e.methodName)))||[void 0,void 0],a=Array.isArray(e.args)?e.args:void 0;return{methodName:s||e.methodName,canisterId:e.canisterId,sender:t,arguments:a&&Array.isArray(e.args)&&o?n.a.encode(o.argTypes,e.args):A.Buffer.from([]),decodedArguments:a,preApprove:!1,requestType:\"unknown\"}},s=e=>{const t=e({IDL:n.a}),r={};return t._fields.forEach((([e,t])=>r[e]=t.argTypes)),r}},function(e,t,r){\"use strict\";const{Buffer:n}=r(0),A=r(24).BigNumber,i=r(25),s=i.SHIFT32,o=i.SHIFT16;t.parseHalf=function(e){var t,r,n;return n=128&e[0]?-1:1,t=(124&e[0])>>2,r=(3&e[0])<<8|e[1],t?31===t?n*(r?NaN:Infinity):n*Math.pow(2,t-25)*(1024+r):5.960464477539063e-8*n*r},t.arrayBufferToBignumber=function(e){const t=e.byteLength;let r=\"\";for(let A=0;A<t;A++)r+=(n=e[A])<16?\"0\"+n.toString(16):n.toString(16);var n;return new A(r,16)},t.buildMap=e=>{const t=new Map,r=Object.keys(e),n=r.length;for(let A=0;A<n;A++)t.set(r[A],e[r[A]]);return t},t.buildInt32=(e,t)=>e*o+t,t.buildInt64=(e,r,n,i)=>{const o=t.buildInt32(e,r),a=t.buildInt32(n,i);return o>2097151?new A(o).times(s).plus(a):o*s+a},t.writeHalf=function(e,t){const r=n.allocUnsafe(4);r.writeFloatBE(t,0);const A=r.readUInt32BE(0);if(0!=(8191&A))return!1;var i=A>>16&32768;const s=A>>23&255,o=8388607&A;if(s>=113&&s<=142)i+=(s-112<<10)+(o>>13);else{if(!(s>=103&&s<113))return!1;if(o&(1<<126-s)-1)return!1;i+=o+8388608>>126-s}return e.writeUInt16BE(i,0),!0},t.keySorter=function(e,t){var r=e[0].byteLength,n=t[0].byteLength;return r>n?1:n>r?-1:e[0].compare(t[0])},t.isNegativeZero=e=>0===e&&1/e<0,t.nextPowerOf2=e=>{let t=0;if(e&&!(e&e-1))return e;for(;0!==e;)e>>=1,t+=1;return 1<<t}},function(e,t,r){var n,A,i,s,o,a,c,u;e.exports=(u=r(3),A=(n=u).lib,i=A.WordArray,s=A.Hasher,o=n.algo,a=[],c=o.SHA1=s.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],A=r[1],i=r[2],s=r[3],o=r[4],c=0;c<80;c++){if(c<16)a[c]=0|e[t+c];else{var u=a[c-3]^a[c-8]^a[c-14]^a[c-16];a[c]=u<<1|u>>>31}var l=(n<<5|n>>>27)+o+a[c];l+=c<20?1518500249+(A&i|~A&s):c<40?1859775393+(A^i^s):c<60?(A&i|A&s|i&s)-1894007588:(A^i^s)-899497514,o=s,s=i,i=A<<30|A>>>2,A=n,n=l}r[0]=r[0]+n|0,r[1]=r[1]+A|0,r[2]=r[2]+i|0,r[3]=r[3]+s|0,r[4]=r[4]+o|0},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return t[n>>>5]|=128<<24-n%32,t[14+(n+64>>>9<<4)]=Math.floor(r/4294967296),t[15+(n+64>>>9<<4)]=r,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=s.clone.call(this);return e._hash=this._hash.clone(),e}}),n.SHA1=s._createHelper(c),n.HmacSHA1=s._createHmacHelper(c),u.SHA1)},function(e,t,r){var n,A,i,s;e.exports=(n=r(3),i=(A=n).lib.Base,s=A.enc.Utf8,void(A.algo.HMAC=i.extend({init:function(e,t){e=this._hasher=new e.init,\"string\"==typeof t&&(t=s.parse(t));var r=e.blockSize,n=4*r;t.sigBytes>n&&(t=e.finalize(t)),t.clamp();for(var A=this._oKey=t.clone(),i=this._iKey=t.clone(),o=A.words,a=i.words,c=0;c<r;c++)o[c]^=1549556828,a[c]^=909522486;A.sigBytes=i.sigBytes=n,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,r=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(r))}})))},function(e,t,r){\"use strict\";r.d(t,\"b\",(function(){return i})),r.d(t,\"a\",(function(){return s}));const n=\"abcdefghijklmnopqrstuvwxyz234567\",A=Object.create(null);for(let e=0;e<n.length;e++)A[n[e]]=e;function i(e){let t=0,r=0,A=\"\";for(let s=0;s<e.length;)s+=(i=e[s],t<0?r|=i>>-t:r=i<<t&248,t>3?(t-=8,1):(t<4&&(A+=n[r>>3],t+=5),0));var i;return A+(t<0?n[r>>3]:\"\")}function s(e){let t=0,r=0;const n=new Uint8Array(4*e.length/3|0);let i=0;function s(e){let s=A[e.toLowerCase()];if(void 0===s)throw new Error(`Invalid character: ${JSON.stringify(e)}`);s<<=3,r|=s>>>t,t+=5,t>=8&&(n[i++]=r,t-=8,r=t>0?s<<5-t&255:0)}for(const t of e)s(t);return n.slice(0,i)}A[0]=A.o,A[1]=A.i},function(e,t){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nt.read=function(e,t,r,n,A){var i,s,o=8*A-n-1,a=(1<<o)-1,c=a>>1,u=-7,l=r?A-1:0,g=r?-1:1,h=e[t+l];for(l+=g,i=h&(1<<-u)-1,h>>=-u,u+=o;u>0;i=256*i+e[t+l],l+=g,u-=8);for(s=i&(1<<-u)-1,i>>=-u,u+=n;u>0;s=256*s+e[t+l],l+=g,u-=8);if(0===i)i=1-c;else{if(i===a)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,n),i-=c}return(h?-1:1)*s*Math.pow(2,i-n)},t.write=function(e,t,r,n,A,i){var s,o,a,c=8*i-A-1,u=(1<<c)-1,l=u>>1,g=23===A?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:i-1,f=n?1:-1,B=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,s=u):(s=Math.floor(Math.log(t)/Math.LN2),t*(a=Math.pow(2,-s))<1&&(s--,a*=2),(t+=s+l>=1?g/a:g*Math.pow(2,1-l))*a>=2&&(s++,a/=2),s+l>=u?(o=0,s=u):s+l>=1?(o=(t*a-1)*Math.pow(2,A),s+=l):(o=t*Math.pow(2,l-1)*Math.pow(2,A),s=0));A>=8;e[r+h]=255&o,h+=f,o/=256,A-=8);for(s=s<<A|o,c+=A;c>0;e[r+h]=255&s,h+=f,s/=256,c-=8);e[r+h-f]|=128*B}},function(e,t,r){\"use strict\";var n;r.d(t,\"a\",(function(){return n})),function(e){e[e.SysFatal=1]=\"SysFatal\",e[e.SysTransient=2]=\"SysTransient\",e[e.DestinationInvalid=3]=\"DestinationInvalid\",e[e.CanisterReject=4]=\"CanisterReject\",e[e.CanisterError=5]=\"CanisterError\"}(n||(n={}))},function(e,t,r){\"use strict\";(function(e){r.d(t,\"b\",(function(){return n})),r.d(t,\"a\",(function(){return h}));var n,A=r(0),i=r(27),s=r(9),o=r(2),a=r(7),c=r(1),u=r(13),l=r(28);!function(e){e.Received=\"received\",e.Processing=\"processing\",e.Replied=\"replied\",e.Rejected=\"rejected\",e.Unknown=\"unknown\",e.Done=\"done\"}(n||(n={}));const g=3e5;class h{constructor(t={}){if(this._pipeline=[],this._rootKeyFetched=!1,this.rootKey=Object(c.c)(\"308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d9685f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484b01291091c5f87b98883463f98091a0baaae\"),t.source){if(!(t.source instanceof h))throw new Error(\"An Agent's source can only be another HttpAgent\");this._pipeline=[...t.source._pipeline],this._identity=t.source._identity,this._fetch=t.source._fetch,this._host=t.source._host,this._credentials=t.source._credentials}else this._fetch=t.fetch||function(){const t=\"undefined\"==typeof window?void 0===e?\"undefined\"==typeof self?void 0:self.fetch.bind(self):e.fetch.bind(e):window.fetch.bind(window);if(!t)throw new Error(\"Could not find default `fetch` implementation.\");return t}()||fetch.bind(e);if(void 0!==t.host)t.host.match(/^[a-z]+:/)||\"undefined\"==typeof window?this._host=new URL(t.host):this._host=new URL(window.location.protocol+\"//\"+t.host);else if(void 0!==t.source)this._host=t.source._host;else{const e=\"undefined\"!=typeof window?window.location:void 0;if(!e)throw new Error(\"Must specify a host to connect to.\");this._host=new URL(e+\"\")}if(t.credentials){const{name:e,password:r}=t.credentials;this._credentials=`${e}${r?\":\"+r:\"\"}`}this._identity=Promise.resolve(t.identity||new i.a)}addTransform(e,t=e.priority||0){const r=this._pipeline.findIndex((e=>(e.priority||0)<t));this._pipeline.splice(r>=0?r:this._pipeline.length,0,Object.assign(e,{priority:t}))}async getPrincipal(){return(await this._identity).getPrincipal()}async call(e,t,r){const n=await(void 0!==r?await r:await this._identity),A=o.a.from(e),i=t.effectiveCanisterId?o.a.from(t.effectiveCanisterId):A,c=n.getPrincipal()||o.a.anonymous(),h={request_type:l.a.Call,canister_id:A,method_name:t.methodName,arg:t.arg,sender:c,ingress_expiry:new u.a(g)};let f=await this._transform({request:{body:null,method:\"POST\",headers:Object.assign({\"Content-Type\":\"application/cbor\"},this._credentials?{Authorization:\"Basic \"+btoa(this._credentials)}:{})},endpoint:\"call\",body:h});f=await n.transformRequest(f);const B=s.b(f.body),[I,d]=await Promise.all([this._fetch(\"\"+new URL(`/api/v2/canister/${i.toText()}/call`,this._host),Object.assign(Object.assign({},f.request),{body:B})),Object(a.b)(h)]);if(!I.ok)throw new Error(`Server returned an error:\\n  Code: ${I.status} (${I.statusText})\\n  Body: ${await I.text()}\\n`);return{requestId:d,response:{ok:I.ok,status:I.status,statusText:I.statusText}}}async query(e,t,r){const n=await(void 0!==r?await r:await this._identity),i=\"string\"==typeof e?o.a.fromText(e):e,a=(null==n?void 0:n.getPrincipal())||o.a.anonymous(),c={request_type:\"query\",canister_id:i,method_name:t.methodName,arg:t.arg,sender:a,ingress_expiry:new u.a(g)};let l=await this._transform({request:{method:\"POST\",headers:Object.assign({\"Content-Type\":\"application/cbor\"},this._credentials?{Authorization:\"Basic \"+btoa(this._credentials)}:{})},endpoint:\"read\",body:c});l=await n.transformRequest(l);const h=s.b(l.body),f=await this._fetch(\"\"+new URL(`/api/v2/canister/${i.toText()}/query`,this._host),Object.assign(Object.assign({},l.request),{body:h}));if(!f.ok)throw new Error(`Server returned an error:\\n  Code: ${f.status} (${f.statusText})\\n  Body: ${await f.text()}\\n`);return s.a(A.Buffer.from(await f.arrayBuffer()))}async readState(e,t,r){const n=\"string\"==typeof e?o.a.fromText(e):e,i=await(void 0!==r?await r:await this._identity),a=(null==i?void 0:i.getPrincipal())||o.a.anonymous();let c=await this._transform({request:{method:\"POST\",headers:Object.assign({\"Content-Type\":\"application/cbor\"},this._credentials?{Authorization:\"Basic \"+btoa(this._credentials)}:{})},endpoint:\"read_state\",body:{request_type:\"read_state\",paths:t.paths,sender:a,ingress_expiry:new u.a(g)}});c=await i.transformRequest(c);const l=s.b(c.body),h=await this._fetch(\"\"+new URL(`/api/v2/canister/${n}/read_state`,this._host),Object.assign(Object.assign({},c.request),{body:l}));if(!h.ok)throw new Error(`Server returned an error:\\n  Code: ${h.status} (${h.statusText})\\n  Body: ${await h.text()}\\n`);return s.a(A.Buffer.from(await h.arrayBuffer()))}async status(){const e=this._credentials?{Authorization:\"Basic \"+btoa(this._credentials)}:{},t=await this._fetch(\"\"+new URL(\"/api/v2/status\",this._host),{headers:e});if(!t.ok)throw new Error(`Server returned an error:\\n  Code: ${t.status} (${t.statusText})\\n  Body: ${await t.text()}\\n`);const r=await t.arrayBuffer();return s.a(new Uint8Array(r))}async fetchRootKey(){return this._rootKeyFetched||(this.rootKey=Object(c.e)((await this.status()).root_key),this._rootKeyFetched=!0),this.rootKey}_transform(e){let t=Promise.resolve(e);for(const e of this._pipeline)t=t.then((t=>e(t).then((e=>e||t))));return t}}}).call(this,r(17))},function(e,t,r){\"use strict\";(function(t){const{Buffer:n}=r(0),A=r(39),i=r(24).BigNumber,s=r(63),o=r(35),a=r(25),c=r(43),u=r(44),{URL:l}=r(45);class g{constructor(e){!(e=e||{}).size||e.size<65536?e.size=65536:e.size=o.nextPowerOf2(e.size),this._heap=new ArrayBuffer(e.size),this._heap8=new Uint8Array(this._heap),this._buffer=n.from(this._heap),this._reset(),this._knownTags=Object.assign({0:e=>new Date(e),1:e=>new Date(1e3*e),2:e=>o.arrayBufferToBignumber(e),3:e=>a.NEG_ONE.minus(o.arrayBufferToBignumber(e)),4:e=>a.TEN.pow(e[0]).times(e[1]),5:e=>a.TWO.pow(e[0]).times(e[1]),32:e=>new l(e),35:e=>new RegExp(e)},e.tags),this.parser=s(t,{log:console.log.bind(console),pushInt:this.pushInt.bind(this),pushInt32:this.pushInt32.bind(this),pushInt32Neg:this.pushInt32Neg.bind(this),pushInt64:this.pushInt64.bind(this),pushInt64Neg:this.pushInt64Neg.bind(this),pushFloat:this.pushFloat.bind(this),pushFloatSingle:this.pushFloatSingle.bind(this),pushFloatDouble:this.pushFloatDouble.bind(this),pushTrue:this.pushTrue.bind(this),pushFalse:this.pushFalse.bind(this),pushUndefined:this.pushUndefined.bind(this),pushNull:this.pushNull.bind(this),pushInfinity:this.pushInfinity.bind(this),pushInfinityNeg:this.pushInfinityNeg.bind(this),pushNaN:this.pushNaN.bind(this),pushNaNNeg:this.pushNaNNeg.bind(this),pushArrayStart:this.pushArrayStart.bind(this),pushArrayStartFixed:this.pushArrayStartFixed.bind(this),pushArrayStartFixed32:this.pushArrayStartFixed32.bind(this),pushArrayStartFixed64:this.pushArrayStartFixed64.bind(this),pushObjectStart:this.pushObjectStart.bind(this),pushObjectStartFixed:this.pushObjectStartFixed.bind(this),pushObjectStartFixed32:this.pushObjectStartFixed32.bind(this),pushObjectStartFixed64:this.pushObjectStartFixed64.bind(this),pushByteString:this.pushByteString.bind(this),pushByteStringStart:this.pushByteStringStart.bind(this),pushUtf8String:this.pushUtf8String.bind(this),pushUtf8StringStart:this.pushUtf8StringStart.bind(this),pushSimpleUnassigned:this.pushSimpleUnassigned.bind(this),pushTagUnassigned:this.pushTagUnassigned.bind(this),pushTagStart:this.pushTagStart.bind(this),pushTagStart4:this.pushTagStart4.bind(this),pushTagStart8:this.pushTagStart8.bind(this),pushBreak:this.pushBreak.bind(this)},this._heap)}get _depth(){return this._parents.length}get _currentParent(){return this._parents[this._depth-1]}get _ref(){return this._currentParent.ref}_closeParent(){var e=this._parents.pop();if(e.length>0)throw new Error(`Missing ${e.length} elements`);switch(e.type){case a.PARENT.TAG:this._push(this.createTag(e.ref[0],e.ref[1]));break;case a.PARENT.BYTE_STRING:this._push(this.createByteString(e.ref,e.length));break;case a.PARENT.UTF8_STRING:this._push(this.createUtf8String(e.ref,e.length));break;case a.PARENT.MAP:if(e.values%2>0)throw new Error(\"Odd number of elements in the map\");this._push(this.createMap(e.ref,e.length));break;case a.PARENT.OBJECT:if(e.values%2>0)throw new Error(\"Odd number of elements in the map\");this._push(this.createObject(e.ref,e.length));break;case a.PARENT.ARRAY:this._push(this.createArray(e.ref,e.length))}this._currentParent&&this._currentParent.type===a.PARENT.TAG&&this._dec()}_dec(){const e=this._currentParent;e.length<0||(e.length--,0===e.length&&this._closeParent())}_push(e,t){const r=this._currentParent;switch(r.values++,r.type){case a.PARENT.ARRAY:case a.PARENT.BYTE_STRING:case a.PARENT.UTF8_STRING:r.length>-1?this._ref[this._ref.length-r.length]=e:this._ref.push(e),this._dec();break;case a.PARENT.OBJECT:null!=r.tmpKey?(this._ref[r.tmpKey]=e,r.tmpKey=null,this._dec()):(r.tmpKey=e,\"string\"!=typeof r.tmpKey&&(r.type=a.PARENT.MAP,r.ref=o.buildMap(r.ref)));break;case a.PARENT.MAP:null!=r.tmpKey?(this._ref.set(r.tmpKey,e),r.tmpKey=null,this._dec()):r.tmpKey=e;break;case a.PARENT.TAG:this._ref.push(e),t||this._dec();break;default:throw new Error(\"Unknown parent type\")}}_createParent(e,t,r){this._parents[this._depth]={type:t,length:r,ref:e,values:0,tmpKey:null}}_reset(){this._res=[],this._parents=[{type:a.PARENT.ARRAY,length:-1,ref:this._res,values:0,tmpKey:null}]}createTag(e,t){const r=this._knownTags[e];return r?r(t):new u(e,t)}createMap(e,t){return e}createObject(e,t){return e}createArray(e,t){return e}createByteString(e,t){return n.concat(e)}createByteStringFromHeap(e,t){return e===t?n.alloc(0):n.from(this._heap.slice(e,t))}createInt(e){return e}createInt32(e,t){return o.buildInt32(e,t)}createInt64(e,t,r,n){return o.buildInt64(e,t,r,n)}createFloat(e){return e}createFloatSingle(e,t,r,n){return A.read([e,t,r,n],0,!1,23,4)}createFloatDouble(e,t,r,n,i,s,o,a){return A.read([e,t,r,n,i,s,o,a],0,!1,52,8)}createInt32Neg(e,t){return-1-o.buildInt32(e,t)}createInt64Neg(e,t,r,n){const A=o.buildInt32(e,t),s=o.buildInt32(r,n);return A>a.MAX_SAFE_HIGH?a.NEG_ONE.minus(new i(A).times(a.SHIFT32).plus(s)):-1-(A*a.SHIFT32+s)}createTrue(){return!0}createFalse(){return!1}createNull(){return null}createUndefined(){}createInfinity(){return 1/0}createInfinityNeg(){return-1/0}createNaN(){return NaN}createNaNNeg(){return NaN}createUtf8String(e,t){return e.join(\"\")}createUtf8StringFromHeap(e,t){return e===t?\"\":this._buffer.toString(\"utf8\",e,t)}createSimpleUnassigned(e){return new c(e)}pushInt(e){this._push(this.createInt(e))}pushInt32(e,t){this._push(this.createInt32(e,t))}pushInt64(e,t,r,n){this._push(this.createInt64(e,t,r,n))}pushFloat(e){this._push(this.createFloat(e))}pushFloatSingle(e,t,r,n){this._push(this.createFloatSingle(e,t,r,n))}pushFloatDouble(e,t,r,n,A,i,s,o){this._push(this.createFloatDouble(e,t,r,n,A,i,s,o))}pushInt32Neg(e,t){this._push(this.createInt32Neg(e,t))}pushInt64Neg(e,t,r,n){this._push(this.createInt64Neg(e,t,r,n))}pushTrue(){this._push(this.createTrue())}pushFalse(){this._push(this.createFalse())}pushNull(){this._push(this.createNull())}pushUndefined(){this._push(this.createUndefined())}pushInfinity(){this._push(this.createInfinity())}pushInfinityNeg(){this._push(this.createInfinityNeg())}pushNaN(){this._push(this.createNaN())}pushNaNNeg(){this._push(this.createNaNNeg())}pushArrayStart(){this._createParent([],a.PARENT.ARRAY,-1)}pushArrayStartFixed(e){this._createArrayStartFixed(e)}pushArrayStartFixed32(e,t){const r=o.buildInt32(e,t);this._createArrayStartFixed(r)}pushArrayStartFixed64(e,t,r,n){const A=o.buildInt64(e,t,r,n);this._createArrayStartFixed(A)}pushObjectStart(){this._createObjectStartFixed(-1)}pushObjectStartFixed(e){this._createObjectStartFixed(e)}pushObjectStartFixed32(e,t){const r=o.buildInt32(e,t);this._createObjectStartFixed(r)}pushObjectStartFixed64(e,t,r,n){const A=o.buildInt64(e,t,r,n);this._createObjectStartFixed(A)}pushByteStringStart(){this._parents[this._depth]={type:a.PARENT.BYTE_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushByteString(e,t){this._push(this.createByteStringFromHeap(e,t))}pushUtf8StringStart(){this._parents[this._depth]={type:a.PARENT.UTF8_STRING,length:-1,ref:[],values:0,tmpKey:null}}pushUtf8String(e,t){this._push(this.createUtf8StringFromHeap(e,t))}pushSimpleUnassigned(e){this._push(this.createSimpleUnassigned(e))}pushTagStart(e){this._parents[this._depth]={type:a.PARENT.TAG,length:1,ref:[e]}}pushTagStart4(e,t){this.pushTagStart(o.buildInt32(e,t))}pushTagStart8(e,t,r,n){this.pushTagStart(o.buildInt64(e,t,r,n))}pushTagUnassigned(e){this._push(this.createTag(e))}pushBreak(){if(this._currentParent.length>-1)throw new Error(\"Unexpected break\");this._closeParent()}_createObjectStartFixed(e){0!==e?this._createParent({},a.PARENT.OBJECT,e):this._push(this.createObject({}))}_createArrayStartFixed(e){0!==e?this._createParent(new Array(e),a.PARENT.ARRAY,e):this._push(this.createArray([]))}_decode(e){if(0===e.byteLength)throw new Error(\"Input too short\");this._reset(),this._heap8.set(e);const t=this.parser.parse(e.byteLength);if(this._depth>1){for(;0===this._currentParent.length;)this._closeParent();if(this._depth>1)throw new Error(\"Undeterminated nesting\")}if(t>0)throw new Error(\"Failed to parse\");if(0===this._res.length)throw new Error(\"No valid result\")}decodeFirst(e){return this._decode(e),this._res[0]}decodeAll(e){return this._decode(e),this._res}static decode(e,t){\"string\"==typeof e&&(e=n.from(e,t||\"hex\"));return new g({size:e.length}).decodeFirst(e)}static decodeAll(e,t){\"string\"==typeof e&&(e=n.from(e,t||\"hex\"));return new g({size:e.length}).decodeAll(e)}}g.decodeFirst=g.decode,e.exports=g}).call(this,r(17))},function(e,t,r){\"use strict\";const n=r(25),A=n.MT,i=n.SIMPLE,s=n.SYMS;class o{constructor(e){if(\"number\"!=typeof e)throw new Error(\"Invalid Simple type: \"+typeof e);if(e<0||e>255||(0|e)!==e)throw new Error(\"value must be a small positive integer: \"+e);this.value=e}toString(){return\"simple(\"+this.value+\")\"}inspect(){return\"simple(\"+this.value+\")\"}encodeCBOR(e){return e._pushInt(this.value,A.SIMPLE_FLOAT)}static isSimple(e){return e instanceof o}static decode(e,t){switch(null==t&&(t=!0),e){case i.FALSE:return!1;case i.TRUE:return!0;case i.NULL:return t?null:s.NULL;case i.UNDEFINED:return t?void 0:s.UNDEFINED;case-1:if(!t)throw new Error(\"Invalid BREAK\");return s.BREAK;default:return new o(e)}}}e.exports=o},function(e,t,r){\"use strict\";class n{constructor(e,t,r){if(this.tag=e,this.value=t,this.err=r,\"number\"!=typeof this.tag)throw new Error(\"Invalid tag type (\"+typeof this.tag+\")\");if(this.tag<0||(0|this.tag)!==this.tag)throw new Error(\"Tag must be a positive integer: \"+this.tag)}toString(){return`${this.tag}(${JSON.stringify(this.value)})`}encodeCBOR(e){return e._pushTag(this.tag),e.pushAny(this.value)}convert(e){var t,r;if(\"function\"!=typeof(r=null!=e?e[this.tag]:void 0)&&\"function\"!=typeof(r=n[\"_tag\"+this.tag]))return this;try{return r.call(n,this.value)}catch(e){return t=e,this.err=t,this}}}e.exports=n},function(e,t,r){\"use strict\";const{URLWithLegacySupport:n,format:A,URLSearchParams:i,defaultBase:s}=r(46),o=r(64);e.exports={URL:n,URLSearchParams:i,format:A,relative:o,defaultBase:s}},function(e,t,r){\"use strict\";const n=self.location?self.location.protocol+\"//\"+self.location.host:\"\",A=self.URL;e.exports={URLWithLegacySupport:class{constructor(e=\"\",t=n){this.super=new A(e,t),this.path=this.pathname+this.search,this.auth=this.username&&this.password?this.username+\":\"+this.password:null,this.query=this.search&&this.search.startsWith(\"?\")?this.search.slice(1):null}get hash(){return this.super.hash}get host(){return this.super.host}get hostname(){return this.super.hostname}get href(){return this.super.href}get origin(){return this.super.origin}get password(){return this.super.password}get pathname(){return this.super.pathname}get port(){return this.super.port}get protocol(){return this.super.protocol}get search(){return this.super.search}get searchParams(){return this.super.searchParams}get username(){return this.super.username}set hash(e){this.super.hash=e}set host(e){this.super.host=e}set hostname(e){this.super.hostname=e}set href(e){this.super.href=e}set origin(e){this.super.origin=e}set password(e){this.super.password=e}set pathname(e){this.super.pathname=e}set port(e){this.super.port=e}set protocol(e){this.super.protocol=e}set search(e){this.super.search=e}set searchParams(e){this.super.searchParams=e}set username(e){this.super.username=e}createObjectURL(e){return this.super.createObjectURL(e)}revokeObjectURL(e){this.super.revokeObjectURL(e)}toJSON(){return this.super.toJSON()}toString(){return this.super.toString()}format(){return this.toString()}},URLSearchParams:self.URLSearchParams,defaultBase:n,format:function(e){if(\"string\"==typeof e){return new A(e).toString()}if(!(e instanceof A)){const t=e.username&&e.password?`${e.username}:${e.password}@`:\"\",r=e.auth?e.auth+\"@\":\"\",n=e.port?\":\"+e.port:\"\",A=e.protocol?e.protocol+\"//\":\"\",i=e.host||\"\",s=e.hostname||\"\",o=e.search||(e.query?\"?\"+e.query:\"\"),a=e.hash||\"\",c=e.pathname||\"\";return`${A}${t||r}${i||s+n}${e.path||c+o}${a}`}}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});function n(e,...t){const r=new Uint8Array(e.byteLength+t.reduce(((e,t)=>e+t.byteLength),0));r.set(new Uint8Array(e),0);let n=e.byteLength;for(const e of t)r.set(new Uint8Array(e),n),n+=e.byteLength;return r.buffer}function A(e,t,r){const n=2**(t-24);r=(r=r.replace(/[^0-9a-fA-F]/g,\"\")).slice(2*-n).padStart(2*n,\"0\");const A=[(e<<5)+t].concat(r.match(/../g).map((e=>parseInt(e,16))));return new Uint8Array(A).buffer}function i(e,t){if(t<24)return new Uint8Array([(e<<5)+t]).buffer;return A(e,t<=255?24:t<=65535?25:t<=4294967295?26:27,t.toString(16))}function s(e){const t=[];for(let r=0;r<e.length;r++){let n=e.charCodeAt(r);n<128?t.push(n):n<2048?t.push(192|n>>6,128|63&n):n<55296||n>=57344?t.push(224|n>>12,128|n>>6&63,128|63&n):(r++,n=(1023&n)<<10|1023&e.charCodeAt(r),t.push(240|n>>18,128|n>>12&63,128|n>>6&63,128|63&n))}return n(new Uint8Array(i(3,e.length)),new Uint8Array(t))}function o(e){return new Uint8Array(e).buffer}function a(e){if(isNaN(e))throw new RangeError(\"Invalid number.\");e=Math.min(Math.max(0,e),23);return new Uint8Array([0+e]).buffer}function c(e,t){if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(0,24,e=(e=Math.min(Math.max(0,e),255)).toString(16))}function u(e,t){if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(0,25,e=(e=Math.min(Math.max(0,e),65535)).toString(16))}function l(e,t){if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(0,26,e=(e=Math.min(Math.max(0,e),4294967295)).toString(16))}function g(e,t){if(\"string\"==typeof e&&16==t){if(e.match(/[^0-9a-fA-F]/))throw new RangeError(\"Invalid number.\");return A(0,27,e)}if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(0,27,e=(e=Math.min(Math.max(0,e),9007199254740992)).toString(16))}function h(e){if(isNaN(e))throw new RangeError(\"Invalid number.\");if(0===e)return a(0);e=Math.min(Math.max(0,-e),24)-1;return new Uint8Array([32+e]).buffer}function f(e,t){if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(1,24,e=(e=Math.min(Math.max(0,-e-1),255)).toString(16))}function B(e,t){if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(1,25,e=(e=Math.min(Math.max(0,-e-1),65535)).toString(16))}function I(e,t){if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(1,26,e=(e=Math.min(Math.max(0,-e-1),4294967295)).toString(16))}function d(e,t){if(\"string\"==typeof e&&16==t){if((e=e.startsWith(\"-\")?e.slice(1):\"0\").match(/[^0-9a-fA-F]/)||e.length>16)throw new RangeError(\"Invalid number.\");let t=!1,r=e.split(\"\").reduceRight(((e,r)=>{if(t)return r+e;let n=parseInt(r,16)-1;return n>=0?(t=!0,n.toString(16)+e):\"f\"+e}),\"\");return t?A(1,27,r):g(0)}if(e=parseInt(\"\"+e,t),isNaN(e))throw new RangeError(\"Invalid number.\");return A(1,27,e=(e=Math.min(Math.max(0,-e-1),9007199254740992)).toString(16))}function p(){return o(new Uint8Array([245]))}function E(){return o(new Uint8Array([244]))}t.tagged=function(e,t){if(14277111==e)return n(new Uint8Array([217,217,247]),t);if(e<24)return n(new Uint8Array([192+e]),t);{const t=e<=255?24:e<=65535?25:e<=4294967295?26:27,r=2**(t-24),n=e.toString(16).slice(2*-r).padStart(2*r,\"0\"),A=[192+t].concat(n.match(/../g).map((e=>parseInt(e,16))));return new Uint8Array(A).buffer}},t.raw=o,t.uSmall=a,t.u8=c,t.u16=u,t.u32=l,t.u64=g,t.iSmall=h,t.i8=f,t.i16=B,t.i32=I,t.i64=d,t.number=function(e){return e>=0?e<24?a(e):e<=255?c(e):e<=65535?u(e):e<=4294967295?l(e):g(e):e>=-24?h(e):e>=-255?f(e):e>=-65535?B(e):e>=-4294967295?I(e):d(e)},t.bytes=function(e){return n(i(2,e.byteLength),e)},t.string=function(e){return s(e)},t.array=function(e){return n(i(4,e.length),...e)},t.map=function(e,t=!1){e instanceof Map||(e=new Map(Object.entries(e)));let r=Array.from(e.entries());return t&&(r=r.sort((([e],[t])=>e.localeCompare(t)))),n(i(5,e.size),...r.map((([e,t])=>n(s(e),t))))},t.singleFloat=function(e){const t=new Float32Array([e]);return n(new Uint8Array([250]),new Uint8Array(t.buffer))},t.doubleFloat=function(e){const t=new Float64Array([e]);return n(new Uint8Array([251]),new Uint8Array(t.buffer))},t.bool=function(e){return e?p():E()},t.true_=p,t.false_=E,t.null_=function(){return o(new Uint8Array([246]))},t.undefined_=function(){return o(new Uint8Array([247]))}},function(e,t,r){\"use strict\";var n;r(2);!function(e){e.Error=\"err\",e.GetPrincipal=\"gp\",e.GetPrincipalResponse=\"gpr\",e.Query=\"q\",e.QueryResponse=\"qr\",e.Call=\"c\",e.CallResponse=\"cr\",e.ReadState=\"rs\",e.ReadStateResponse=\"rsr\",e.Status=\"s\",e.StatusResponse=\"sr\"}(n||(n={}))},function(e,t,r){var n;e.exports=(n=r(3),function(e){var t=n,r=t.lib,A=r.WordArray,i=r.Hasher,s=t.algo,o=[],a=[];!function(){function t(t){for(var r=e.sqrt(t),n=2;n<=r;n++)if(!(t%n))return!1;return!0}function r(e){return 4294967296*(e-(0|e))|0}for(var n=2,A=0;A<64;)t(n)&&(A<8&&(o[A]=r(e.pow(n,.5))),a[A]=r(e.pow(n,1/3)),A++),n++}();var c=[],u=s.SHA256=i.extend({_doReset:function(){this._hash=new A.init(o.slice(0))},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],A=r[1],i=r[2],s=r[3],o=r[4],u=r[5],l=r[6],g=r[7],h=0;h<64;h++){if(h<16)c[h]=0|e[t+h];else{var f=c[h-15],B=(f<<25|f>>>7)^(f<<14|f>>>18)^f>>>3,I=c[h-2],d=(I<<15|I>>>17)^(I<<13|I>>>19)^I>>>10;c[h]=B+c[h-7]+d+c[h-16]}var p=n&A^n&i^A&i,E=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),Q=g+((o<<26|o>>>6)^(o<<21|o>>>11)^(o<<7|o>>>25))+(o&u^~o&l)+a[h]+c[h];g=l,l=u,u=o,o=s+Q|0,s=i,i=A,A=n,n=Q+(E+p)|0}r[0]=r[0]+n|0,r[1]=r[1]+A|0,r[2]=r[2]+i|0,r[3]=r[3]+s|0,r[4]=r[4]+o|0,r[5]=r[5]+u|0,r[6]=r[6]+l|0,r[7]=r[7]+g|0},_doFinalize:function(){var t=this._data,r=t.words,n=8*this._nDataBytes,A=8*t.sigBytes;return r[A>>>5]|=128<<24-A%32,r[14+(A+64>>>9<<4)]=e.floor(n/4294967296),r[15+(A+64>>>9<<4)]=n,t.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=i._createHelper(u),t.HmacSHA256=i._createHmacHelper(u)}(Math),n.SHA256)},function(e,t,r){var n;e.exports=(n=r(3),r(26),function(){var e=n,t=e.lib.Hasher,r=e.x64,A=r.Word,i=r.WordArray,s=e.algo;function o(){return A.create.apply(A,arguments)}var a=[o(1116352408,3609767458),o(1899447441,602891725),o(3049323471,3964484399),o(3921009573,2173295548),o(961987163,4081628472),o(1508970993,3053834265),o(2453635748,2937671579),o(2870763221,3664609560),o(3624381080,2734883394),o(310598401,1164996542),o(607225278,1323610764),o(1426881987,3590304994),o(1925078388,4068182383),o(2162078206,991336113),o(2614888103,633803317),o(3248222580,3479774868),o(3835390401,2666613458),o(4022224774,944711139),o(264347078,2341262773),o(604807628,2007800933),o(770255983,1495990901),o(1249150122,1856431235),o(1555081692,3175218132),o(1996064986,2198950837),o(2554220882,3999719339),o(2821834349,766784016),o(2952996808,2566594879),o(3210313671,3203337956),o(3336571891,1034457026),o(3584528711,2466948901),o(113926993,3758326383),o(338241895,168717936),o(666307205,1188179964),o(773529912,1546045734),o(1294757372,1522805485),o(1396182291,2643833823),o(1695183700,2343527390),o(1986661051,1014477480),o(2177026350,1206759142),o(2456956037,344077627),o(2730485921,1290863460),o(2820302411,3158454273),o(3259730800,3505952657),o(3345764771,106217008),o(3516065817,3606008344),o(3600352804,1432725776),o(4094571909,1467031594),o(275423344,851169720),o(430227734,3100823752),o(506948616,1363258195),o(659060556,3750685593),o(883997877,3785050280),o(958139571,3318307427),o(1322822218,3812723403),o(1537002063,2003034995),o(1747873779,3602036899),o(1955562222,1575990012),o(2024104815,1125592928),o(2227730452,2716904306),o(2361852424,442776044),o(2428436474,593698344),o(2756734187,3733110249),o(3204031479,2999351573),o(3329325298,3815920427),o(3391569614,3928383900),o(3515267271,566280711),o(3940187606,3454069534),o(4118630271,4000239992),o(116418474,1914138554),o(174292421,2731055270),o(289380356,3203993006),o(460393269,320620315),o(685471733,587496836),o(852142971,1086792851),o(1017036298,365543100),o(1126000580,2618297676),o(1288033470,3409855158),o(1501505948,4234509866),o(1607167915,987167468),o(1816402316,1246189591)],c=[];!function(){for(var e=0;e<80;e++)c[e]=o()}();var u=s.SHA512=t.extend({_doReset:function(){this._hash=new i.init([new A.init(1779033703,4089235720),new A.init(3144134277,2227873595),new A.init(1013904242,4271175723),new A.init(2773480762,1595750129),new A.init(1359893119,2917565137),new A.init(2600822924,725511199),new A.init(528734635,4215389547),new A.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],A=r[1],i=r[2],s=r[3],o=r[4],u=r[5],l=r[6],g=r[7],h=n.high,f=n.low,B=A.high,I=A.low,d=i.high,p=i.low,E=s.high,Q=s.low,m=o.high,C=o.low,y=u.high,w=u.low,b=l.high,v=l.low,_=g.high,G=g.low,k=h,S=f,D=B,q=I,R=d,F=p,H=E,N=Q,M=m,x=C,j=y,O=w,U=b,Y=v,T=_,J=G,L=0;L<80;L++){var Z,P,K=c[L];if(L<16)P=K.high=0|e[t+2*L],Z=K.low=0|e[t+2*L+1];else{var $=c[L-15],V=$.high,W=$.low,z=(V>>>1|W<<31)^(V>>>8|W<<24)^V>>>7,X=(W>>>1|V<<31)^(W>>>8|V<<24)^(W>>>7|V<<25),ee=c[L-2],te=ee.high,re=ee.low,ne=(te>>>19|re<<13)^(te<<3|re>>>29)^te>>>6,Ae=(re>>>19|te<<13)^(re<<3|te>>>29)^(re>>>6|te<<26),ie=c[L-7],se=ie.high,oe=ie.low,ae=c[L-16],ce=ae.high,ue=ae.low;P=(P=(P=z+se+((Z=X+oe)>>>0<X>>>0?1:0))+ne+((Z+=Ae)>>>0<Ae>>>0?1:0))+ce+((Z+=ue)>>>0<ue>>>0?1:0),K.high=P,K.low=Z}var le,ge=M&j^~M&U,he=x&O^~x&Y,fe=k&D^k&R^D&R,Be=S&q^S&F^q&F,Ie=(k>>>28|S<<4)^(k<<30|S>>>2)^(k<<25|S>>>7),de=(S>>>28|k<<4)^(S<<30|k>>>2)^(S<<25|k>>>7),pe=(M>>>14|x<<18)^(M>>>18|x<<14)^(M<<23|x>>>9),Ee=(x>>>14|M<<18)^(x>>>18|M<<14)^(x<<23|M>>>9),Qe=a[L],me=Qe.high,Ce=Qe.low,ye=T+pe+((le=J+Ee)>>>0<J>>>0?1:0),we=de+Be;T=U,J=Y,U=j,Y=O,j=M,O=x,M=H+(ye=(ye=(ye=ye+ge+((le+=he)>>>0<he>>>0?1:0))+me+((le+=Ce)>>>0<Ce>>>0?1:0))+P+((le+=Z)>>>0<Z>>>0?1:0))+((x=N+le|0)>>>0<N>>>0?1:0)|0,H=R,N=F,R=D,F=q,D=k,q=S,k=ye+(Ie+fe+(we>>>0<de>>>0?1:0))+((S=le+we|0)>>>0<le>>>0?1:0)|0}f=n.low=f+S,n.high=h+k+(f>>>0<S>>>0?1:0),I=A.low=I+q,A.high=B+D+(I>>>0<q>>>0?1:0),p=i.low=p+F,i.high=d+R+(p>>>0<F>>>0?1:0),Q=s.low=Q+N,s.high=E+H+(Q>>>0<N>>>0?1:0),C=o.low=C+x,o.high=m+M+(C>>>0<x>>>0?1:0),w=u.low=w+O,u.high=y+j+(w>>>0<O>>>0?1:0),v=l.low=v+Y,l.high=b+U+(v>>>0<Y>>>0?1:0),G=g.low=G+J,g.high=_+T+(G>>>0<J>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return t[n>>>5]|=128<<24-n%32,t[30+(n+128>>>10<<5)]=Math.floor(r/4294967296),t[31+(n+128>>>10<<5)]=r,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(u),e.HmacSHA512=t._createHmacHelper(u)}(),n.SHA512)},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return A}));const n=new Uint32Array([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117]);function A(e){const t=new Uint8Array(e);let r=-1;for(let e=0;e<t.length;e++){const A=t[e];r=n[255&(A^r)]^r>>>8}return(-1^r)>>>0}},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return A}));var n=r(29);function A(e){const t=n.sha224.create();return t.update(e),new Uint8Array(t.array())}},function(e,t){!function(){\"use strict\";for(var e=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",r=new Uint8Array(256),n=0;n<e.length;n++)r[e.charCodeAt(n)]=n;t.encode=function(t){var r,n=new Uint8Array(t),A=n.length,i=\"\";for(r=0;r<A;r+=3)i+=e[n[r]>>2],i+=e[(3&n[r])<<4|n[r+1]>>4],i+=e[(15&n[r+1])<<2|n[r+2]>>6],i+=e[63&n[r+2]];return A%3==2?i=i.substring(0,i.length-1)+\"=\":A%3==1&&(i=i.substring(0,i.length-2)+\"==\"),i},t.decode=function(e){var t,n,A,i,s,o=.75*e.length,a=e.length,c=0;\"=\"===e[e.length-1]&&(o--,\"=\"===e[e.length-2]&&o--);var u=new ArrayBuffer(o),l=new Uint8Array(u);for(t=0;t<a;t+=4)n=r[e.charCodeAt(t)],A=r[e.charCodeAt(t+1)],i=r[e.charCodeAt(t+2)],s=r[e.charCodeAt(t+3)],l[c++]=n<<2|A>>4,l[c++]=(15&A)<<4|i>>2,l[c++]=(3&i)<<6|63&s;return u}}()},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return s}));var n=r(4),A=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))};const i={timeout:0,target:\"\"};class s{constructor({instance:e}){this.instance=e,this.instance.start()}call({handler:e,args:t,config:r=i}){return A(this,void 0,void 0,(function*(){const s=Object(n.a)();return this.instance.call(e,t,r).then((e=>e),(e=>A(this,void 0,void 0,(function*(){const{message:t}=e||{},r=\"Request Timeout\"===t?\"handleTimeout\":\"handleError\";return yield this.instance.call(r,[s,t],i)}))))}))}}},function(e,t,r){\"use strict\";r.d(t,\"a\",(function(){return a}));var n=r(11),A=r(4),i=r(31),s=r(14),o=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))};class a{constructor({host:e,whitelist:t,timeout:r,rpc:A}){this.sessionData=null,this.initialized=!1,this.host=e||n.a[0],this.whitelist=t||[],this.timeout=r||12e4,this.rpc=A}getSession(){return this.sessionData}createSession(e){return o(this,void 0,void 0,(function*(){const t=yield Object(s.c)({publicKey:e,clientRPC:this.rpc,whitelist:this.whitelist||[],host:this.host||n.b}),r=yield t.getPrincipal(),A=r.toString(),o=yield Object(i.a)(r);return this.sessionData={agent:t,principalId:A,accountId:o},this.sessionData}))}init(){return o(this,void 0,void 0,(function*(){let e=null;return this.initialized||(e=yield this.getConnectionData(),this.initialized=!0),e}))}getConnectionData(){return o(this,void 0,void 0,(function*(){if(!this.initialized)return null;const e=Object(A.a)(),t=yield this.rpc.call({handler:\"getConnectionData\",args:[e.url]});let r=null;return t&&(this.host=t.host,this.whitelist=t.whitelist,this.timeout=t.timeout,r=yield this.createSession(t.publicKey)),{sessionData:r,connection:t}}))}requestConnect(e={}){return o(this,void 0,void 0,(function*(){const{whitelist:t=[],host:r=n.b,timeout:i=12e4}=e,s=Object(A.a)(),o=yield this.rpc.call({handler:\"requestConnect\",args:[s,t,i,r]});this.host=r,this.whitelist=t,this.timeout=i,this.onConnectionUpdate=null==e?void 0:e.onConnectionUpdate;return{sessionData:yield this.createSession(o),connection:{host:r,whitelist:t,timeout:i,publicKey:o}}}))}disconnect(){return o(this,void 0,void 0,(function*(){const e=Object(A.a)();yield this.rpc.call({handler:\"disconnect\",args:[e.url]}),this.sessionData=null}))}updateConnection(){var e;return o(this,void 0,void 0,(function*(){const t=yield this.getConnectionData();return t&&(null===(e=this.onConnectionUpdate)||void 0===e||e.call(this,t)),t}))}}},function(e){e.exports=JSON.parse('{\"name\":\"@psychedelic/plug-inpage-provider\",\"version\":\"2.3.0\",\"main\":\"dist/src/index.js\",\"module\":\"dist/esm/src/index.js\",\"jsnext:main\":\"dist/esm/src/index.js\",\"types\":\"dist/src/index.d.ts\",\"license\":\"MIT\",\"sideEffects\":false,\"scripts\":{\"build\":\"npm run clean && npm-run-all --parallel build:** && node ./scripts/add-package.js\",\"build:cjs\":\"tsc --module commonjs --target es6 --outDir ./dist\",\"build:esm\":\"tsc --module es2015 --target es6 --outDir ./dist/esm -d false\",\"prepublishOnly\":\"npm run build\",\"clean\":\"rimraf ./dist\",\"lint\":\"eslint --ext .js,.ts ./src/**\",\"lint:fix\":\"npm run lint -- --fix\",\"test\":\"jest\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/psychedelic/plug-inpage-provider.git\"},\"publishConfig\":{\"registry\":\"https://npm.pkg.github.com/@psychedelic\"},\"keywords\":[\"package\",\"typescript\"],\"author\":\"Psychedelic\",\"bugs\":{\"url\":\"https://github.com/Psychedelic/plug-inpage-provider/issues\"},\"homepage\":\"https://github.com/Psychedelic/plug-inpage-provider#readme\",\"devDependencies\":{\"@babel/core\":\"^7.13.16\",\"@types/jest\":\"^26.0.22\",\"@types/react-test-renderer\":\"^17.0.1\",\"@types/uuid\":\"^8.3.0\",\"@typescript-eslint/eslint-plugin\":\"^4.22.0\",\"@typescript-eslint/parser\":\"^4.22.0\",\"babel-loader\":\"^8.2.2\",\"eslint\":\"^7.24.0\",\"eslint-config-airbnb\":\"^18.2.1\",\"eslint-plugin-import\":\"^2.22.1\",\"husky\":\"^3.1.0\",\"jest\":\"^26.6.3\",\"lint-staged\":\"^9.5.0\",\"npm-run-all\":\"^4.1.5\",\"react-test-renderer\":\"^17.0.2\",\"rimraf\":\"^3.0.0\",\"ts-jest\":\"^26.5.5\",\"typescript\":\"^4.2.4\"},\"peerDependencies\":{},\"dependencies\":{\"@dfinity/agent\":\"0.9.3\",\"@dfinity/candid\":\"0.9.3\",\"@dfinity/principal\":\"0.9.3\",\"@psychedelic/browser-rpc\":\"2.1.0\",\"@types/chrome\":\"^0.0.180\",\"buffer-crc32\":\"^0.2.13\",\"crypto-js\":\"^4.1.1\",\"json-bigint\":\"^1.0.0\"}}')},function(e,t,r){var n=r(0).Buffer,A=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];function i(e){if(n.isBuffer(e))return e;var t=\"function\"==typeof n.alloc&&\"function\"==typeof n.from;if(\"number\"==typeof e)return t?n.alloc(e):new n(e);if(\"string\"==typeof e)return t?n.from(e):new n(e);throw new Error(\"input must be buffer, number, or string, received \"+typeof e)}function s(e){var t=i(4);return t.writeInt32BE(e,0),t}function o(e,t){e=i(e),n.isBuffer(t)&&(t=t.readUInt32BE(0));for(var r=-1^~~t,s=0;s<e.length;s++)r=A[255&(r^e[s])]^r>>>8;return-1^r}function a(){return s(o.apply(null,arguments))}\"undefined\"!=typeof Int32Array&&(A=new Int32Array(A)),a.signed=function(){return o.apply(null,arguments)},a.unsigned=function(){return o.apply(null,arguments)>>>0},e.exports=a},function(e,t,r){\"use strict\";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),s=n[0],o=n[1],a=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,o)),u=0,l=o>0?s-4:s;for(r=0;r<l;r+=4)t=A[e.charCodeAt(r)]<<18|A[e.charCodeAt(r+1)]<<12|A[e.charCodeAt(r+2)]<<6|A[e.charCodeAt(r+3)],a[u++]=t>>16&255,a[u++]=t>>8&255,a[u++]=255&t;2===o&&(t=A[e.charCodeAt(r)]<<2|A[e.charCodeAt(r+1)]>>4,a[u++]=255&t);1===o&&(t=A[e.charCodeAt(r)]<<10|A[e.charCodeAt(r+1)]<<4|A[e.charCodeAt(r+2)]>>2,a[u++]=t>>8&255,a[u++]=255&t);return a},t.fromByteArray=function(e){for(var t,r=e.length,A=r%3,i=[],s=16383,o=0,a=r-A;o<a;o+=s)i.push(u(e,o,o+s>a?a:o+s));1===A?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+\"==\")):2===A&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+\"=\"));return i.join(\"\")};for(var n=[],A=[],i=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",o=0,a=s.length;o<a;++o)n[o]=s[o],A[s.charCodeAt(o)]=o;function c(e){var t=e.length;if(t%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var r=e.indexOf(\"=\");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,r){for(var A,i,s=[],o=t;o<r;o+=3)A=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),s.push(n[(i=A)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join(\"\")}A[\"-\".charCodeAt(0)]=62,A[\"_\".charCodeAt(0)]=63},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return\"[object Array]\"==r.call(e)}},function(e,t){var r,n,A=e.exports={};function i(){throw new Error(\"setTimeout has not been defined\")}function s(){throw new Error(\"clearTimeout has not been defined\")}function o(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r=\"function\"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n=\"function\"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var a,c=[],u=!1,l=-1;function g(){u&&a&&(u=!1,a.length?c=a.concat(c):l=-1,c.length&&h())}function h(){if(!u){var e=o(g);u=!0;for(var t=c.length;t;){for(a=c,c=[];++l<t;)a&&a[l].run();l=-1,t=c.length}a=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function B(){}A.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new f(e,t)),1!==c.length||u||o(h)},f.prototype.run=function(){this.fun.apply(null,this.array)},A.title=\"browser\",A.browser=!0,A.env={},A.argv=[],A.version=\"\",A.versions={},A.on=B,A.addListener=B,A.once=B,A.off=B,A.removeListener=B,A.removeAllListeners=B,A.emit=B,A.prependListener=B,A.prependOnceListener=B,A.listeners=function(e){return[]},A.binding=function(e){throw new Error(\"process.binding is not supported\")},A.cwd=function(){return\"/\"},A.chdir=function(e){throw new Error(\"process.chdir is not supported\")},A.umask=function(){return 0}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,r){\"use strict\";const{Buffer:n}=r(0),A=r(42),i=r(35);class s extends A{createTag(e,t){return`${e}(${t})`}createInt(e){return super.createInt(e).toString()}createInt32(e,t){return super.createInt32(e,t).toString()}createInt64(e,t,r,n){return super.createInt64(e,t,r,n).toString()}createInt32Neg(e,t){return super.createInt32Neg(e,t).toString()}createInt64Neg(e,t,r,n){return super.createInt64Neg(e,t,r,n).toString()}createTrue(){return\"true\"}createFalse(){return\"false\"}createFloat(e){const t=super.createFloat(e);return i.isNegativeZero(e)?\"-0_1\":`${t}_1`}createFloatSingle(e,t,r,n){return`${super.createFloatSingle(e,t,r,n)}_2`}createFloatDouble(e,t,r,n,A,i,s,o){return`${super.createFloatDouble(e,t,r,n,A,i,s,o)}_3`}createByteString(e,t){const r=e.join(\", \");return-1===t?`(_ ${r})`:`h'${r}`}createByteStringFromHeap(e,t){return`h'${n.from(super.createByteStringFromHeap(e,t)).toString(\"hex\")}'`}createInfinity(){return\"Infinity_1\"}createInfinityNeg(){return\"-Infinity_1\"}createNaN(){return\"NaN_1\"}createNaNNeg(){return\"-NaN_1\"}createNull(){return\"null\"}createUndefined(){return\"undefined\"}createSimpleUnassigned(e){return`simple(${e})`}createArray(e,t){const r=super.createArray(e,t);return-1===t?`[_ ${r.join(\", \")}]`:`[${r.join(\", \")}]`}createMap(e,t){const r=super.createMap(e),n=Array.from(r.keys()).reduce(o(r),\"\");return-1===t?`{_ ${n}}`:`{${n}}`}createObject(e,t){const r=super.createObject(e),n=Object.keys(r).reduce(o(r),\"\");return-1===t?`{_ ${n}}`:`{${n}}`}createUtf8String(e,t){const r=e.join(\", \");return-1===t?`(_ ${r})`:`\"${r}\"`}createUtf8StringFromHeap(e,t){return`\"${n.from(super.createUtf8StringFromHeap(e,t)).toString(\"utf8\")}\"`}static diagnose(e,t){\"string\"==typeof e&&(e=n.from(e,t||\"hex\"));return(new s).decodeFirst(e)}}function o(e){return(t,r)=>t?`${t}, ${r}: ${e[r]}`:`${r}: ${e[r]}`}e.exports=s},function(e,t){e.exports=function(e,t,r){\"use asm\";var n=new e.Uint8Array(r);var A=t.pushInt;var i=t.pushInt32;var s=t.pushInt32Neg;var o=t.pushInt64;var a=t.pushInt64Neg;var c=t.pushFloat;var u=t.pushFloatSingle;var l=t.pushFloatDouble;var g=t.pushTrue;var h=t.pushFalse;var f=t.pushUndefined;var B=t.pushNull;var I=t.pushInfinity;var d=t.pushInfinityNeg;var p=t.pushNaN;var E=t.pushNaNNeg;var Q=t.pushArrayStart;var m=t.pushArrayStartFixed;var C=t.pushArrayStartFixed32;var y=t.pushArrayStartFixed64;var w=t.pushObjectStart;var b=t.pushObjectStartFixed;var v=t.pushObjectStartFixed32;var _=t.pushObjectStartFixed64;var G=t.pushByteString;var k=t.pushByteStringStart;var S=t.pushUtf8String;var D=t.pushUtf8StringStart;var q=t.pushSimpleUnassigned;var R=t.pushTagStart;var F=t.pushTagStart4;var H=t.pushTagStart8;var N=t.pushTagUnassigned;var M=t.pushBreak;var x=e.Math.pow;var j=0;var O=0;var U=0;function Y(e){e=e|0;j=0;O=e;while((j|0)<(O|0)){U=Ve[n[j]&255](n[j]|0)|0;if((U|0)>0){break}}return U|0}function T(e){e=e|0;if(((j|0)+(e|0)|0)<(O|0)){return 0}return 1}function J(e){e=e|0;return n[e|0]<<8|n[e+1|0]|0}function L(e){e=e|0;return n[e|0]<<24|n[e+1|0]<<16|n[e+2|0]<<8|n[e+3|0]|0}function Z(e){e=e|0;A(e|0);j=j+1|0;return 0}function P(e){e=e|0;if(T(1)|0){return 1}A(n[j+1|0]|0);j=j+2|0;return 0}function K(e){e=e|0;if(T(2)|0){return 1}A(J(j+1|0)|0);j=j+3|0;return 0}function $(e){e=e|0;if(T(4)|0){return 1}i(J(j+1|0)|0,J(j+3|0)|0);j=j+5|0;return 0}function V(e){e=e|0;if(T(8)|0){return 1}o(J(j+1|0)|0,J(j+3|0)|0,J(j+5|0)|0,J(j+7|0)|0);j=j+9|0;return 0}function W(e){e=e|0;A(-1-(e-32|0)|0);j=j+1|0;return 0}function z(e){e=e|0;if(T(1)|0){return 1}A(-1-(n[j+1|0]|0)|0);j=j+2|0;return 0}function X(e){e=e|0;var t=0;if(T(2)|0){return 1}t=J(j+1|0)|0;A(-1-(t|0)|0);j=j+3|0;return 0}function ee(e){e=e|0;if(T(4)|0){return 1}s(J(j+1|0)|0,J(j+3|0)|0);j=j+5|0;return 0}function te(e){e=e|0;if(T(8)|0){return 1}a(J(j+1|0)|0,J(j+3|0)|0,J(j+5|0)|0,J(j+7|0)|0);j=j+9|0;return 0}function re(e){e=e|0;var t=0;var r=0;var n=0;n=e-64|0;if(T(n|0)|0){return 1}t=j+1|0;r=(j+1|0)+(n|0)|0;G(t|0,r|0);j=r|0;return 0}function ne(e){e=e|0;var t=0;var r=0;var A=0;if(T(1)|0){return 1}A=n[j+1|0]|0;t=j+2|0;r=(j+2|0)+(A|0)|0;if(T(A+1|0)|0){return 1}G(t|0,r|0);j=r|0;return 0}function Ae(e){e=e|0;var t=0;var r=0;var n=0;if(T(2)|0){return 1}n=J(j+1|0)|0;t=j+3|0;r=(j+3|0)+(n|0)|0;if(T(n+2|0)|0){return 1}G(t|0,r|0);j=r|0;return 0}function ie(e){e=e|0;var t=0;var r=0;var n=0;if(T(4)|0){return 1}n=L(j+1|0)|0;t=j+5|0;r=(j+5|0)+(n|0)|0;if(T(n+4|0)|0){return 1}G(t|0,r|0);j=r|0;return 0}function se(e){e=e|0;return 1}function oe(e){e=e|0;k();j=j+1|0;return 0}function ae(e){e=e|0;var t=0;var r=0;var n=0;n=e-96|0;if(T(n|0)|0){return 1}t=j+1|0;r=(j+1|0)+(n|0)|0;S(t|0,r|0);j=r|0;return 0}function ce(e){e=e|0;var t=0;var r=0;var A=0;if(T(1)|0){return 1}A=n[j+1|0]|0;t=j+2|0;r=(j+2|0)+(A|0)|0;if(T(A+1|0)|0){return 1}S(t|0,r|0);j=r|0;return 0}function ue(e){e=e|0;var t=0;var r=0;var n=0;if(T(2)|0){return 1}n=J(j+1|0)|0;t=j+3|0;r=(j+3|0)+(n|0)|0;if(T(n+2|0)|0){return 1}S(t|0,r|0);j=r|0;return 0}function le(e){e=e|0;var t=0;var r=0;var n=0;if(T(4)|0){return 1}n=L(j+1|0)|0;t=j+5|0;r=(j+5|0)+(n|0)|0;if(T(n+4|0)|0){return 1}S(t|0,r|0);j=r|0;return 0}function ge(e){e=e|0;return 1}function he(e){e=e|0;D();j=j+1|0;return 0}function fe(e){e=e|0;m(e-128|0);j=j+1|0;return 0}function Be(e){e=e|0;if(T(1)|0){return 1}m(n[j+1|0]|0);j=j+2|0;return 0}function Ie(e){e=e|0;if(T(2)|0){return 1}m(J(j+1|0)|0);j=j+3|0;return 0}function de(e){e=e|0;if(T(4)|0){return 1}C(J(j+1|0)|0,J(j+3|0)|0);j=j+5|0;return 0}function pe(e){e=e|0;if(T(8)|0){return 1}y(J(j+1|0)|0,J(j+3|0)|0,J(j+5|0)|0,J(j+7|0)|0);j=j+9|0;return 0}function Ee(e){e=e|0;Q();j=j+1|0;return 0}function Qe(e){e=e|0;var t=0;t=e-160|0;if(T(t|0)|0){return 1}b(t|0);j=j+1|0;return 0}function me(e){e=e|0;if(T(1)|0){return 1}b(n[j+1|0]|0);j=j+2|0;return 0}function Ce(e){e=e|0;if(T(2)|0){return 1}b(J(j+1|0)|0);j=j+3|0;return 0}function ye(e){e=e|0;if(T(4)|0){return 1}v(J(j+1|0)|0,J(j+3|0)|0);j=j+5|0;return 0}function we(e){e=e|0;if(T(8)|0){return 1}_(J(j+1|0)|0,J(j+3|0)|0,J(j+5|0)|0,J(j+7|0)|0);j=j+9|0;return 0}function be(e){e=e|0;w();j=j+1|0;return 0}function ve(e){e=e|0;R(e-192|0|0);j=j+1|0;return 0}function _e(e){e|0;R(e|0);j=j+1|0;return 0}function Ge(e){e|0;R(e|0);j=j+1|0;return 0}function ke(e){e|0;R(e|0);j=j+1|0;return 0}function Se(e){e|0;R(e|0);j=j+1|0;return 0}function De(e){e=e|0;R(e-192|0|0);j=j+1|0;return 0}function qe(e){e|0;R(e|0);j=j+1|0;return 0}function Re(e){e|0;R(e|0);j=j+1|0;return 0}function Fe(e){e|0;R(e|0);j=j+1|0;return 0}function He(e){e=e|0;if(T(1)|0){return 1}R(n[j+1|0]|0);j=j+2|0;return 0}function Ne(e){e=e|0;if(T(2)|0){return 1}R(J(j+1|0)|0);j=j+3|0;return 0}function Me(e){e=e|0;if(T(4)|0){return 1}F(J(j+1|0)|0,J(j+3|0)|0);j=j+5|0;return 0}function xe(e){e=e|0;if(T(8)|0){return 1}H(J(j+1|0)|0,J(j+3|0)|0,J(j+5|0)|0,J(j+7|0)|0);j=j+9|0;return 0}function je(e){e=e|0;q((e|0)-224|0);j=j+1|0;return 0}function Oe(e){e=e|0;h();j=j+1|0;return 0}function Ue(e){e=e|0;g();j=j+1|0;return 0}function Ye(e){e=e|0;B();j=j+1|0;return 0}function Te(e){e=e|0;f();j=j+1|0;return 0}function Je(e){e=e|0;if(T(1)|0){return 1}q(n[j+1|0]|0);j=j+2|0;return 0}function Le(e){e=e|0;var t=0;var r=0;var A=1.0;var i=0.0;var s=0.0;var o=0.0;if(T(2)|0){return 1}t=n[j+1|0]|0;r=n[j+2|0]|0;if((t|0)&0x80){A=-1.0}i=+(((t|0)&0x7C)>>2);s=+(((t|0)&0x03)<<8|r);if(+i==0.0){c(+(+A*+5.9604644775390625e-8*+s))}else if(+i==31.0){if(+A==1.0){if(+s>0.0){p()}else{I()}}else{if(+s>0.0){E()}else{d()}}}else{c(+(+A*x(+2,+(+i-25.0))*+(1024.0+s)))}j=j+3|0;return 0}function Ze(e){e=e|0;if(T(4)|0){return 1}u(n[j+1|0]|0,n[j+2|0]|0,n[j+3|0]|0,n[j+4|0]|0);j=j+5|0;return 0}function Pe(e){e=e|0;if(T(8)|0){return 1}l(n[j+1|0]|0,n[j+2|0]|0,n[j+3|0]|0,n[j+4|0]|0,n[j+5|0]|0,n[j+6|0]|0,n[j+7|0]|0,n[j+8|0]|0);j=j+9|0;return 0}function Ke(e){e=e|0;return 1}function $e(e){e=e|0;M();j=j+1|0;return 0}var Ve=[Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,Z,P,K,$,V,Ke,Ke,Ke,Ke,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,W,z,X,ee,te,Ke,Ke,Ke,Ke,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,re,ne,Ae,ie,se,Ke,Ke,Ke,oe,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ae,ce,ue,le,ge,Ke,Ke,Ke,he,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,fe,Be,Ie,de,pe,Ke,Ke,Ke,Ee,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,Qe,me,Ce,ye,we,Ke,Ke,Ke,be,ve,ve,ve,ve,ve,ve,De,De,De,De,De,De,De,De,De,De,De,De,De,De,De,De,De,De,He,Ne,Me,xe,Ke,Ke,Ke,Ke,je,je,je,je,je,je,je,je,je,je,je,je,je,je,je,je,je,je,je,je,Oe,Ue,Ye,Te,Je,Le,Ze,Pe,Ke,Ke,Ke,$e];return{parse:Y}}},function(e,t,r){\"use strict\";const{URLWithLegacySupport:n,format:A}=r(46);e.exports=(e,t={},r={},i)=>{let s,o=t.protocol?t.protocol.replace(\":\",\"\"):\"http\";o=(r[o]||i||o)+\":\";try{s=new n(e)}catch(e){s={}}const a=Object.assign({},t,{protocol:o||s.protocol,host:t.host||s.host});return new n(e,A(a)).toString()}},function(e,t,r){\"use strict\";const{Buffer:n}=r(0),{URL:A}=r(45),i=r(24).BigNumber,s=r(35),o=r(25),a=o.MT,c=o.NUMBYTES,u=o.SHIFT32,l=o.SYMS,g=o.TAG,h=o.MT.SIMPLE_FLOAT<<5|o.NUMBYTES.TWO,f=o.MT.SIMPLE_FLOAT<<5|o.NUMBYTES.FOUR,B=o.MT.SIMPLE_FLOAT<<5|o.NUMBYTES.EIGHT,I=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.TRUE,d=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.FALSE,p=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.UNDEFINED,E=o.MT.SIMPLE_FLOAT<<5|o.SIMPLE.NULL,Q=new i(\"0x20000000000000\"),m=n.from(\"f97e00\",\"hex\"),C=n.from(\"f9fc00\",\"hex\"),y=n.from(\"f97c00\",\"hex\");class w{constructor(e){e=e||{},this.streaming=\"function\"==typeof e.stream,this.onData=e.stream,this.semanticTypes=[[A,this._pushUrl],[i,this._pushBigNumber]];const t=e.genTypes||[],r=t.length;for(let e=0;e<r;e++)this.addSemanticType(t[e][0],t[e][1]);this._reset()}addSemanticType(e,t){const r=this.semanticTypes.length;for(let n=0;n<r;n++){if(this.semanticTypes[n][0]===e){const e=this.semanticTypes[n][1];return this.semanticTypes[n][1]=t,e}}return this.semanticTypes.push([e,t]),null}push(e){return!e||(this.result[this.offset]=e,this.resultMethod[this.offset]=0,this.resultLength[this.offset]=e.length,this.offset++,this.streaming&&this.onData(this.finalize()),!0)}pushWrite(e,t,r){return this.result[this.offset]=e,this.resultMethod[this.offset]=t,this.resultLength[this.offset]=r,this.offset++,this.streaming&&this.onData(this.finalize()),!0}_pushUInt8(e){return this.pushWrite(e,1,1)}_pushUInt16BE(e){return this.pushWrite(e,2,2)}_pushUInt32BE(e){return this.pushWrite(e,3,4)}_pushDoubleBE(e){return this.pushWrite(e,4,8)}_pushNaN(){return this.push(m)}_pushInfinity(e){const t=e<0?C:y;return this.push(t)}_pushFloat(e){const t=n.allocUnsafe(2);if(s.writeHalf(t,e)&&s.parseHalf(t)===e)return this._pushUInt8(h)&&this.push(t);const r=n.allocUnsafe(4);return r.writeFloatBE(e,0),r.readFloatBE(0)===e?this._pushUInt8(f)&&this.push(r):this._pushUInt8(B)&&this._pushDoubleBE(e)}_pushInt(e,t,r){const n=t<<5;return e<24?this._pushUInt8(n|e):e<=255?this._pushUInt8(n|c.ONE)&&this._pushUInt8(e):e<=65535?this._pushUInt8(n|c.TWO)&&this._pushUInt16BE(e):e<=4294967295?this._pushUInt8(n|c.FOUR)&&this._pushUInt32BE(e):e<=Number.MAX_SAFE_INTEGER?this._pushUInt8(n|c.EIGHT)&&this._pushUInt32BE(Math.floor(e/u))&&this._pushUInt32BE(e%u):t===a.NEG_INT?this._pushFloat(r):this._pushFloat(e)}_pushIntNum(e){return e<0?this._pushInt(-e-1,a.NEG_INT,e):this._pushInt(e,a.POS_INT)}_pushNumber(e){switch(!1){case e==e:return this._pushNaN(e);case isFinite(e):return this._pushInfinity(e);case e%1!=0:return this._pushIntNum(e);default:return this._pushFloat(e)}}_pushString(e){const t=n.byteLength(e,\"utf8\");return this._pushInt(t,a.UTF8_STRING)&&this.pushWrite(e,5,t)}_pushBoolean(e){return this._pushUInt8(e?I:d)}_pushUndefined(e){return this._pushUInt8(p)}_pushArray(e,t){const r=t.length;if(!e._pushInt(r,a.ARRAY))return!1;for(let n=0;n<r;n++)if(!e.pushAny(t[n]))return!1;return!0}_pushTag(e){return this._pushInt(e,a.TAG)}_pushDate(e,t){return e._pushTag(g.DATE_EPOCH)&&e.pushAny(Math.round(t/1e3))}_pushBuffer(e,t){return e._pushInt(t.length,a.BYTE_STRING)&&e.push(t)}_pushNoFilter(e,t){return e._pushBuffer(e,t.slice())}_pushRegexp(e,t){return e._pushTag(g.REGEXP)&&e.pushAny(t.source)}_pushSet(e,t){if(!e._pushInt(t.size,a.ARRAY))return!1;for(const r of t)if(!e.pushAny(r))return!1;return!0}_pushUrl(e,t){return e._pushTag(g.URI)&&e.pushAny(t.format())}_pushBigint(e){let t=g.POS_BIGINT;e.isNegative()&&(e=e.negated().minus(1),t=g.NEG_BIGINT);let r=e.toString(16);r.length%2&&(r=\"0\"+r);const A=n.from(r,\"hex\");return this._pushTag(t)&&this._pushBuffer(this,A)}_pushBigNumber(e,t){if(t.isNaN())return e._pushNaN();if(!t.isFinite())return e._pushInfinity(t.isNegative()?-1/0:1/0);if(t.isInteger())return e._pushBigint(t);if(!e._pushTag(g.DECIMAL_FRAC)||!e._pushInt(2,a.ARRAY))return!1;const r=t.decimalPlaces(),n=t.multipliedBy(new i(10).pow(r));return!!e._pushIntNum(-r)&&(n.abs().isLessThan(Q)?e._pushIntNum(n.toNumber()):e._pushBigint(n))}_pushMap(e,t){return!!e._pushInt(t.size,a.MAP)&&this._pushRawMap(t.size,Array.from(t))}_pushObject(e){if(!e)return this._pushUInt8(E);for(var t=this.semanticTypes.length,r=0;r<t;r++)if(e instanceof this.semanticTypes[r][0])return this.semanticTypes[r][1].call(e,this,e);var n=e.encodeCBOR;if(\"function\"==typeof n)return n.call(e,this);var A=Object.keys(e),i=A.length;return!!this._pushInt(i,a.MAP)&&this._pushRawMap(i,A.map((t=>[t,e[t]])))}_pushRawMap(e,t){t=t.map((function(e){return e[0]=w.encode(e[0]),e})).sort(s.keySorter);for(var r=0;r<e;r++){if(!this.push(t[r][0]))return!1;if(!this.pushAny(t[r][1]))return!1}return!0}write(e){return this.pushAny(e)}pushAny(e){var t=function(e){return{}.toString.call(e).slice(8,-1)}(e);switch(t){case\"Number\":return this._pushNumber(e);case\"String\":return this._pushString(e);case\"Boolean\":return this._pushBoolean(e);case\"Object\":return this._pushObject(e);case\"Array\":return this._pushArray(this,e);case\"Uint8Array\":return this._pushBuffer(this,n.isBuffer(e)?e:n.from(e));case\"Null\":return this._pushUInt8(E);case\"Undefined\":return this._pushUndefined(e);case\"Map\":return this._pushMap(this,e);case\"Set\":return this._pushSet(this,e);case\"URL\":return this._pushUrl(this,e);case\"BigNumber\":return this._pushBigNumber(this,e);case\"Date\":return this._pushDate(this,e);case\"RegExp\":return this._pushRegexp(this,e);case\"Symbol\":switch(e){case l.NULL:return this._pushObject(null);case l.UNDEFINED:return this._pushUndefined(void 0);default:throw new Error(\"Unknown symbol: \"+e.toString())}default:throw new Error(\"Unknown type: \"+typeof e+\", \"+(e?e.toString():\"\"))}}finalize(){if(0===this.offset)return null;for(var e=this.result,t=this.resultLength,r=this.resultMethod,A=this.offset,i=0,s=0;s<A;s++)i+=t[s];var o=n.allocUnsafe(i),a=0,c=0;for(s=0;s<A;s++){switch(c=t[s],r[s]){case 0:e[s].copy(o,a);break;case 1:o.writeUInt8(e[s],a,!0);break;case 2:o.writeUInt16BE(e[s],a,!0);break;case 3:o.writeUInt32BE(e[s],a,!0);break;case 4:o.writeDoubleBE(e[s],a,!0);break;case 5:o.write(e[s],a,c,\"utf8\");break;default:throw new Error(\"unkown method\")}a+=c}var u=o;return this._reset(),u}_reset(){this.result=[],this.resultMethod=[],this.resultLength=[],this.offset=0}static encode(e){const t=new w;if(!t.pushAny(e))throw new Error(\"Failed to encode input\");return t.finalize()}}e.exports=w},function(e,t,r){\n/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nvar n=r(0),A=n.Buffer;function i(e,t){for(var r in e)t[r]=e[r]}function s(e,t,r){return A(e,t,r)}A.from&&A.alloc&&A.allocUnsafe&&A.allocUnsafeSlow?e.exports=n:(i(n,t),t.Buffer=s),s.prototype=Object.create(A.prototype),i(A,s),s.from=function(e,t,r){if(\"number\"==typeof e)throw new TypeError(\"Argument must not be a number\");return A(e,t,r)},s.alloc=function(e,t,r){if(\"number\"!=typeof e)throw new TypeError(\"Argument must be a number\");var n=A(e);return void 0!==t?\"string\"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},s.allocUnsafe=function(e){if(\"number\"!=typeof e)throw new TypeError(\"Argument must be a number\");return A(e)},s.allocUnsafeSlow=function(e){if(\"number\"!=typeof e)throw new TypeError(\"Argument must be a number\");return n.SlowBuffer(e)}},function(e,t,r){\"use strict\";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,\"__esModule\",{value:!0});const A=n(r(47)),i=[ArrayBuffer,Uint8Array,Uint16Array,Uint32Array,Int8Array,Int16Array,Int32Array,Float32Array,Float64Array];class s{constructor(e,t=!1){this._serializer=e,this._stable=t,this.name=\"jsonDefault\",this.priority=-100}match(e){return-1!=[\"undefined\",\"boolean\",\"number\",\"string\",\"object\"].indexOf(typeof e)}encode(e){switch(typeof e){case\"undefined\":return A.undefined_();case\"boolean\":return A.bool(e);case\"number\":return Math.floor(e)===e?A.number(e):A.doubleFloat(e);case\"string\":return A.string(e);case\"object\":if(null===e)return A.null_();if(Array.isArray(e))return A.array(e.map((e=>this._serializer.serializeValue(e))));if(i.find((t=>e instanceof t)))return A.bytes(e.buffer);if(-1!==Object.getOwnPropertyNames(e).indexOf(\"toJSON\"))return this.encode(e.toJSON());if(e instanceof Map){const t=new Map;for(const[r,n]of e.entries())t.set(r,this._serializer.serializeValue(n));return A.map(t,this._stable)}{const t=new Map;for(const[r,n]of Object.entries(e))t.set(r,this._serializer.serializeValue(n));return A.map(t,this._stable)}default:throw new Error(\"Invalid value.\")}}}t.JsonDefaultCborEncoder=s;class o{constructor(){this.name=\"cborEncoder\",this.priority=-90}match(e){return\"object\"==typeof e&&\"function\"==typeof e.toCBOR}encode(e){return e.toCBOR()}}t.ToCborEncoder=o;class a{constructor(){this._encoders=new Set}static withDefaultEncoders(e=!1){const t=new this;return t.addEncoder(new s(t,e)),t.addEncoder(new o),t}removeEncoder(e){for(const t of this._encoders.values())t.name==e&&this._encoders.delete(t)}addEncoder(e){this._encoders.add(e)}getEncoderFor(e){let t=null;for(const r of this._encoders)(!t||r.priority>t.priority)&&r.match(e)&&(t=r);if(null===t)throw new Error(\"Could not find an encoder for value.\");return t}serializeValue(e){return this.getEncoderFor(e).encode(e)}serialize(e){return this.serializeValue(e)}}t.CborSerializer=a;t.SelfDescribeCborSerializer=class extends a{serialize(e){return A.raw(new Uint8Array([...new Uint8Array([217,217,247]),...new Uint8Array(super.serializeValue(e))]))}}},function(e,t){},function(e,t,r){var n;e.exports=(n=r(3),function(){if(\"function\"==typeof ArrayBuffer){var e=n.lib.WordArray,t=e.init,r=e.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||\"undefined\"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var r=e.byteLength,n=[],A=0;A<r;A++)n[A>>>2]|=e[A]<<24-A%4*8;t.call(this,n,r)}else t.apply(this,arguments)};r.prototype=e}}(),n.lib.WordArray)},function(e,t,r){var n;e.exports=(n=r(3),function(){var e=n,t=e.lib.WordArray,r=e.enc;function A(e){return e<<8&4278255360|e>>>8&16711935}r.Utf16=r.Utf16BE={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],A=0;A<r;A+=2){var i=t[A>>>2]>>>16-A%4*8&65535;n.push(String.fromCharCode(i))}return n.join(\"\")},parse:function(e){for(var r=e.length,n=[],A=0;A<r;A++)n[A>>>1]|=e.charCodeAt(A)<<16-A%2*16;return t.create(n,2*r)}},r.Utf16LE={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],i=0;i<r;i+=2){var s=A(t[i>>>2]>>>16-i%4*8&65535);n.push(String.fromCharCode(s))}return n.join(\"\")},parse:function(e){for(var r=e.length,n=[],i=0;i<r;i++)n[i>>>1]|=A(e.charCodeAt(i)<<16-i%2*16);return t.create(n,2*r)}}}(),n.enc.Utf16)},function(e,t,r){var n;e.exports=(n=r(3),function(){var e=n,t=e.lib.WordArray;function r(e,r,n){for(var A=[],i=0,s=0;s<r;s++)if(s%4){var o=n[e.charCodeAt(s-1)]<<s%4*2|n[e.charCodeAt(s)]>>>6-s%4*2;A[i>>>2]|=o<<24-i%4*8,i++}return t.create(A,i)}e.enc.Base64url={stringify:function(e,t=!0){var r=e.words,n=e.sigBytes,A=t?this._safe_map:this._map;e.clamp();for(var i=[],s=0;s<n;s+=3)for(var o=(r[s>>>2]>>>24-s%4*8&255)<<16|(r[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|r[s+2>>>2]>>>24-(s+2)%4*8&255,a=0;a<4&&s+.75*a<n;a++)i.push(A.charAt(o>>>6*(3-a)&63));var c=A.charAt(64);if(c)for(;i.length%4;)i.push(c);return i.join(\"\")},parse:function(e,t=!0){var n=e.length,A=t?this._safe_map:this._map,i=this._reverseMap;if(!i){i=this._reverseMap=[];for(var s=0;s<A.length;s++)i[A.charCodeAt(s)]=s}var o=A.charAt(64);if(o){var a=e.indexOf(o);-1!==a&&(n=a)}return r(e,n,i)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",_safe_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"}}(),n.enc.Base64url)},function(e,t,r){var n,A,i,s,o,a;e.exports=(a=r(3),r(49),A=(n=a).lib.WordArray,i=n.algo,s=i.SHA256,o=i.SHA224=s.extend({_doReset:function(){this._hash=new A.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var e=s._doFinalize.call(this);return e.sigBytes-=4,e}}),n.SHA224=s._createHelper(o),n.HmacSHA224=s._createHmacHelper(o),a.SHA224)},function(e,t,r){var n,A,i,s,o,a,c,u;e.exports=(u=r(3),r(26),r(50),A=(n=u).x64,i=A.Word,s=A.WordArray,o=n.algo,a=o.SHA512,c=o.SHA384=a.extend({_doReset:function(){this._hash=new s.init([new i.init(3418070365,3238371032),new i.init(1654270250,914150663),new i.init(2438529370,812702999),new i.init(355462360,4144912697),new i.init(1731405415,4290775857),new i.init(2394180231,1750603025),new i.init(3675008525,1694076839),new i.init(1203062813,3204075428)])},_doFinalize:function(){var e=a._doFinalize.call(this);return e.sigBytes-=16,e}}),n.SHA384=a._createHelper(c),n.HmacSHA384=a._createHmacHelper(c),u.SHA384)},function(e,t,r){var n;e.exports=(n=r(3),r(26),function(e){var t=n,r=t.lib,A=r.WordArray,i=r.Hasher,s=t.x64.Word,o=t.algo,a=[],c=[],u=[];!function(){for(var e=1,t=0,r=0;r<24;r++){a[e+5*t]=(r+1)*(r+2)/2%64;var n=(2*e+3*t)%5;e=t%5,t=n}for(e=0;e<5;e++)for(t=0;t<5;t++)c[e+5*t]=t+(2*e+3*t)%5*5;for(var A=1,i=0;i<24;i++){for(var o=0,l=0,g=0;g<7;g++){if(1&A){var h=(1<<g)-1;h<32?l^=1<<h:o^=1<<h-32}128&A?A=A<<1^113:A<<=1}u[i]=s.create(o,l)}}();var l=[];!function(){for(var e=0;e<25;e++)l[e]=s.create()}();var g=o.SHA3=i.extend({cfg:i.cfg.extend({outputLength:512}),_doReset:function(){for(var e=this._state=[],t=0;t<25;t++)e[t]=new s.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(e,t){for(var r=this._state,n=this.blockSize/2,A=0;A<n;A++){var i=e[t+2*A],s=e[t+2*A+1];i=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),(G=r[A]).high^=s,G.low^=i}for(var o=0;o<24;o++){for(var g=0;g<5;g++){for(var h=0,f=0,B=0;B<5;B++)h^=(G=r[g+5*B]).high,f^=G.low;var I=l[g];I.high=h,I.low=f}for(g=0;g<5;g++){var d=l[(g+4)%5],p=l[(g+1)%5],E=p.high,Q=p.low;for(h=d.high^(E<<1|Q>>>31),f=d.low^(Q<<1|E>>>31),B=0;B<5;B++)(G=r[g+5*B]).high^=h,G.low^=f}for(var m=1;m<25;m++){var C=(G=r[m]).high,y=G.low,w=a[m];w<32?(h=C<<w|y>>>32-w,f=y<<w|C>>>32-w):(h=y<<w-32|C>>>64-w,f=C<<w-32|y>>>64-w);var b=l[c[m]];b.high=h,b.low=f}var v=l[0],_=r[0];for(v.high=_.high,v.low=_.low,g=0;g<5;g++)for(B=0;B<5;B++){var G=r[m=g+5*B],k=l[m],S=l[(g+1)%5+5*B],D=l[(g+2)%5+5*B];G.high=k.high^~S.high&D.high,G.low=k.low^~S.low&D.low}G=r[0];var q=u[o];G.high^=q.high,G.low^=q.low}},_doFinalize:function(){var t=this._data,r=t.words,n=(this._nDataBytes,8*t.sigBytes),i=32*this.blockSize;r[n>>>5]|=1<<24-n%32,r[(e.ceil((n+1)/i)*i>>>5)-1]|=128,t.sigBytes=4*r.length,this._process();for(var s=this._state,o=this.cfg.outputLength/8,a=o/8,c=[],u=0;u<a;u++){var l=s[u],g=l.high,h=l.low;g=16711935&(g<<8|g>>>24)|4278255360&(g<<24|g>>>8),h=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),c.push(h),c.push(g)}return new A.init(c,o)},clone:function(){for(var e=i.clone.call(this),t=e._state=this._state.slice(0),r=0;r<25;r++)t[r]=t[r].clone();return e}});t.SHA3=i._createHelper(g),t.HmacSHA3=i._createHmacHelper(g)}(Math),n.SHA3)},function(e,t,r){var n;e.exports=(n=r(3),\n/** @preserve\n  (c) 2012 by Cédric Mesnil. All rights reserved.\n  \tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n  \t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\nfunction(e){var t=n,r=t.lib,A=r.WordArray,i=r.Hasher,s=t.algo,o=A.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),a=A.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),c=A.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),u=A.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),l=A.create([0,1518500249,1859775393,2400959708,2840853838]),g=A.create([1352829926,1548603684,1836072691,2053994217,0]),h=s.RIPEMD160=i.extend({_doReset:function(){this._hash=A.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var r=0;r<16;r++){var n=t+r,A=e[n];e[n]=16711935&(A<<8|A>>>24)|4278255360&(A<<24|A>>>8)}var i,s,h,Q,m,C,y,w,b,v,_,G=this._hash.words,k=l.words,S=g.words,D=o.words,q=a.words,R=c.words,F=u.words;for(C=i=G[0],y=s=G[1],w=h=G[2],b=Q=G[3],v=m=G[4],r=0;r<80;r+=1)_=i+e[t+D[r]]|0,_+=r<16?f(s,h,Q)+k[0]:r<32?B(s,h,Q)+k[1]:r<48?I(s,h,Q)+k[2]:r<64?d(s,h,Q)+k[3]:p(s,h,Q)+k[4],_=(_=E(_|=0,R[r]))+m|0,i=m,m=Q,Q=E(h,10),h=s,s=_,_=C+e[t+q[r]]|0,_+=r<16?p(y,w,b)+S[0]:r<32?d(y,w,b)+S[1]:r<48?I(y,w,b)+S[2]:r<64?B(y,w,b)+S[3]:f(y,w,b)+S[4],_=(_=E(_|=0,F[r]))+v|0,C=v,v=b,b=E(w,10),w=y,y=_;_=G[1]+h+b|0,G[1]=G[2]+Q+v|0,G[2]=G[3]+m+C|0,G[3]=G[4]+i+y|0,G[4]=G[0]+s+w|0,G[0]=_},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;t[n>>>5]|=128<<24-n%32,t[14+(n+64>>>9<<4)]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8),e.sigBytes=4*(t.length+1),this._process();for(var A=this._hash,i=A.words,s=0;s<5;s++){var o=i[s];i[s]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}return A},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});function f(e,t,r){return e^t^r}function B(e,t,r){return e&t|~e&r}function I(e,t,r){return(e|~t)^r}function d(e,t,r){return e&r|t&~r}function p(e,t,r){return e^(t|~r)}function E(e,t){return e<<t|e>>>32-t}t.RIPEMD160=i._createHelper(h),t.HmacRIPEMD160=i._createHmacHelper(h)}(Math),n.RIPEMD160)},function(e,t,r){var n,A,i,s,o,a,c,u,l;e.exports=(l=r(3),r(36),r(37),A=(n=l).lib,i=A.Base,s=A.WordArray,o=n.algo,a=o.SHA1,c=o.HMAC,u=o.PBKDF2=i.extend({cfg:i.extend({keySize:4,hasher:a,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var r=this.cfg,n=c.create(r.hasher,e),A=s.create(),i=s.create([1]),o=A.words,a=i.words,u=r.keySize,l=r.iterations;o.length<u;){var g=n.update(t).finalize(i);n.reset();for(var h=g.words,f=h.length,B=g,I=1;I<l;I++){B=n.finalize(B),n.reset();for(var d=B.words,p=0;p<f;p++)h[p]^=d[p]}A.concat(g),a[0]++}return A.sigBytes=4*u,A}}),n.PBKDF2=function(e,t,r){return u.create(r).compute(e,t)},l.PBKDF2)},function(e,t,r){var n;e.exports=(n=r(3),r(6),n.mode.CFB=function(){var e=n.lib.BlockCipherMode.extend();function t(e,t,r,n){var A,i=this._iv;i?(A=i.slice(0),this._iv=void 0):A=this._prevBlock,n.encryptBlock(A,0);for(var s=0;s<r;s++)e[t+s]^=A[s]}return e.Encryptor=e.extend({processBlock:function(e,r){var n=this._cipher,A=n.blockSize;t.call(this,e,r,A,n),this._prevBlock=e.slice(r,r+A)}}),e.Decryptor=e.extend({processBlock:function(e,r){var n=this._cipher,A=n.blockSize,i=e.slice(r,r+A);t.call(this,e,r,A,n),this._prevBlock=i}}),e}(),n.mode.CFB)},function(e,t,r){var n,A,i;e.exports=(i=r(3),r(6),i.mode.CTR=(n=i.lib.BlockCipherMode.extend(),A=n.Encryptor=n.extend({processBlock:function(e,t){var r=this._cipher,n=r.blockSize,A=this._iv,i=this._counter;A&&(i=this._counter=A.slice(0),this._iv=void 0);var s=i.slice(0);r.encryptBlock(s,0),i[n-1]=i[n-1]+1|0;for(var o=0;o<n;o++)e[t+o]^=s[o]}}),n.Decryptor=A,n),i.mode.CTR)},function(e,t,r){var n;e.exports=(n=r(3),r(6),\n/** @preserve\n   * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n   * derived from CryptoJS.mode.CTR\n   * Jan Hruby jhruby.web@gmail.com\n   */\nn.mode.CTRGladman=function(){var e=n.lib.BlockCipherMode.extend();function t(e){if(255==(e>>24&255)){var t=e>>16&255,r=e>>8&255,n=255&e;255===t?(t=0,255===r?(r=0,255===n?n=0:++n):++r):++t,e=0,e+=t<<16,e+=r<<8,e+=n}else e+=1<<24;return e}function r(e){return 0===(e[0]=t(e[0]))&&(e[1]=t(e[1])),e}var A=e.Encryptor=e.extend({processBlock:function(e,t){var n=this._cipher,A=n.blockSize,i=this._iv,s=this._counter;i&&(s=this._counter=i.slice(0),this._iv=void 0),r(s);var o=s.slice(0);n.encryptBlock(o,0);for(var a=0;a<A;a++)e[t+a]^=o[a]}});return e.Decryptor=A,e}(),n.mode.CTRGladman)},function(e,t,r){var n,A,i;e.exports=(i=r(3),r(6),i.mode.OFB=(n=i.lib.BlockCipherMode.extend(),A=n.Encryptor=n.extend({processBlock:function(e,t){var r=this._cipher,n=r.blockSize,A=this._iv,i=this._keystream;A&&(i=this._keystream=A.slice(0),this._iv=void 0),r.encryptBlock(i,0);for(var s=0;s<n;s++)e[t+s]^=i[s]}}),n.Decryptor=A,n),i.mode.OFB)},function(e,t,r){var n,A;e.exports=(A=r(3),r(6),A.mode.ECB=((n=A.lib.BlockCipherMode.extend()).Encryptor=n.extend({processBlock:function(e,t){this._cipher.encryptBlock(e,t)}}),n.Decryptor=n.extend({processBlock:function(e,t){this._cipher.decryptBlock(e,t)}}),n),A.mode.ECB)},function(e,t,r){var n;e.exports=(n=r(3),r(6),n.pad.AnsiX923={pad:function(e,t){var r=e.sigBytes,n=4*t,A=n-r%n,i=r+A-1;e.clamp(),e.words[i>>>2]|=A<<24-i%4*8,e.sigBytes+=A},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},n.pad.Ansix923)},function(e,t,r){var n;e.exports=(n=r(3),r(6),n.pad.Iso10126={pad:function(e,t){var r=4*t,A=r-e.sigBytes%r;e.concat(n.lib.WordArray.random(A-1)).concat(n.lib.WordArray.create([A<<24],1))},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},n.pad.Iso10126)},function(e,t,r){var n;e.exports=(n=r(3),r(6),n.pad.Iso97971={pad:function(e,t){e.concat(n.lib.WordArray.create([2147483648],1)),n.pad.ZeroPadding.pad(e,t)},unpad:function(e){n.pad.ZeroPadding.unpad(e),e.sigBytes--}},n.pad.Iso97971)},function(e,t,r){var n;e.exports=(n=r(3),r(6),n.pad.ZeroPadding={pad:function(e,t){var r=4*t;e.clamp(),e.sigBytes+=r-(e.sigBytes%r||r)},unpad:function(e){var t=e.words,r=e.sigBytes-1;for(r=e.sigBytes-1;r>=0;r--)if(t[r>>>2]>>>24-r%4*8&255){e.sigBytes=r+1;break}}},n.pad.ZeroPadding)},function(e,t,r){var n;e.exports=(n=r(3),r(6),n.pad.NoPadding={pad:function(){},unpad:function(){}},n.pad.NoPadding)},function(e,t,r){var n,A,i,s;e.exports=(s=r(3),r(6),A=(n=s).lib.CipherParams,i=n.enc.Hex,n.format.Hex={stringify:function(e){return e.ciphertext.toString(i)},parse:function(e){var t=i.parse(e);return A.create({ciphertext:t})}},s.format.Hex)},function(e,t,r){var n;e.exports=(n=r(3),r(18),r(19),r(15),r(6),function(){var e=n,t=e.lib.BlockCipher,r=e.algo,A=[],i=[],s=[],o=[],a=[],c=[],u=[],l=[],g=[],h=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var r=0,n=0;for(t=0;t<256;t++){var f=n^n<<1^n<<2^n<<3^n<<4;f=f>>>8^255&f^99,A[r]=f,i[f]=r;var B=e[r],I=e[B],d=e[I],p=257*e[f]^16843008*f;s[r]=p<<24|p>>>8,o[r]=p<<16|p>>>16,a[r]=p<<8|p>>>24,c[r]=p,p=16843009*d^65537*I^257*B^16843008*r,u[f]=p<<24|p>>>8,l[f]=p<<16|p>>>16,g[f]=p<<8|p>>>24,h[f]=p,r?(r=B^e[e[e[d^B]]],n^=e[e[n]]):r=n=1}}();var f=[0,1,2,4,8,16,32,64,128,27,54],B=r.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,r=e.sigBytes/4,n=4*((this._nRounds=r+6)+1),i=this._keySchedule=[],s=0;s<n;s++)s<r?i[s]=t[s]:(c=i[s-1],s%r?r>6&&s%r==4&&(c=A[c>>>24]<<24|A[c>>>16&255]<<16|A[c>>>8&255]<<8|A[255&c]):(c=A[(c=c<<8|c>>>24)>>>24]<<24|A[c>>>16&255]<<16|A[c>>>8&255]<<8|A[255&c],c^=f[s/r|0]<<24),i[s]=i[s-r]^c);for(var o=this._invKeySchedule=[],a=0;a<n;a++){if(s=n-a,a%4)var c=i[s];else c=i[s-4];o[a]=a<4||s<=4?c:u[A[c>>>24]]^l[A[c>>>16&255]]^g[A[c>>>8&255]]^h[A[255&c]]}}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,s,o,a,c,A)},decryptBlock:function(e,t){var r=e[t+1];e[t+1]=e[t+3],e[t+3]=r,this._doCryptBlock(e,t,this._invKeySchedule,u,l,g,h,i),r=e[t+1],e[t+1]=e[t+3],e[t+3]=r},_doCryptBlock:function(e,t,r,n,A,i,s,o){for(var a=this._nRounds,c=e[t]^r[0],u=e[t+1]^r[1],l=e[t+2]^r[2],g=e[t+3]^r[3],h=4,f=1;f<a;f++){var B=n[c>>>24]^A[u>>>16&255]^i[l>>>8&255]^s[255&g]^r[h++],I=n[u>>>24]^A[l>>>16&255]^i[g>>>8&255]^s[255&c]^r[h++],d=n[l>>>24]^A[g>>>16&255]^i[c>>>8&255]^s[255&u]^r[h++],p=n[g>>>24]^A[c>>>16&255]^i[u>>>8&255]^s[255&l]^r[h++];c=B,u=I,l=d,g=p}B=(o[c>>>24]<<24|o[u>>>16&255]<<16|o[l>>>8&255]<<8|o[255&g])^r[h++],I=(o[u>>>24]<<24|o[l>>>16&255]<<16|o[g>>>8&255]<<8|o[255&c])^r[h++],d=(o[l>>>24]<<24|o[g>>>16&255]<<16|o[c>>>8&255]<<8|o[255&u])^r[h++],p=(o[g>>>24]<<24|o[c>>>16&255]<<16|o[u>>>8&255]<<8|o[255&l])^r[h++],e[t]=B,e[t+1]=I,e[t+2]=d,e[t+3]=p},keySize:8});e.AES=t._createHelper(B)}(),n.AES)},function(e,t,r){var n;e.exports=(n=r(3),r(18),r(19),r(15),r(6),function(){var e=n,t=e.lib,r=t.WordArray,A=t.BlockCipher,i=e.algo,s=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],o=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],a=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],c=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],u=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],l=i.DES=A.extend({_doReset:function(){for(var e=this._key.words,t=[],r=0;r<56;r++){var n=s[r]-1;t[r]=e[n>>>5]>>>31-n%32&1}for(var A=this._subKeys=[],i=0;i<16;i++){var c=A[i]=[],u=a[i];for(r=0;r<24;r++)c[r/6|0]|=t[(o[r]-1+u)%28]<<31-r%6,c[4+(r/6|0)]|=t[28+(o[r+24]-1+u)%28]<<31-r%6;for(c[0]=c[0]<<1|c[0]>>>31,r=1;r<7;r++)c[r]=c[r]>>>4*(r-1)+3;c[7]=c[7]<<5|c[7]>>>27}var l=this._invSubKeys=[];for(r=0;r<16;r++)l[r]=A[15-r]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._subKeys)},decryptBlock:function(e,t){this._doCryptBlock(e,t,this._invSubKeys)},_doCryptBlock:function(e,t,r){this._lBlock=e[t],this._rBlock=e[t+1],g.call(this,4,252645135),g.call(this,16,65535),h.call(this,2,858993459),h.call(this,8,16711935),g.call(this,1,1431655765);for(var n=0;n<16;n++){for(var A=r[n],i=this._lBlock,s=this._rBlock,o=0,a=0;a<8;a++)o|=c[a][((s^A[a])&u[a])>>>0];this._lBlock=s,this._rBlock=i^o}var l=this._lBlock;this._lBlock=this._rBlock,this._rBlock=l,g.call(this,1,1431655765),h.call(this,8,16711935),h.call(this,2,858993459),g.call(this,16,65535),g.call(this,4,252645135),e[t]=this._lBlock,e[t+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function g(e,t){var r=(this._lBlock>>>e^this._rBlock)&t;this._rBlock^=r,this._lBlock^=r<<e}function h(e,t){var r=(this._rBlock>>>e^this._lBlock)&t;this._lBlock^=r,this._rBlock^=r<<e}e.DES=A._createHelper(l);var f=i.TripleDES=A.extend({_doReset:function(){var e=this._key.words;if(2!==e.length&&4!==e.length&&e.length<6)throw new Error(\"Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.\");var t=e.slice(0,2),n=e.length<4?e.slice(0,2):e.slice(2,4),A=e.length<6?e.slice(0,2):e.slice(4,6);this._des1=l.createEncryptor(r.create(t)),this._des2=l.createEncryptor(r.create(n)),this._des3=l.createEncryptor(r.create(A))},encryptBlock:function(e,t){this._des1.encryptBlock(e,t),this._des2.decryptBlock(e,t),this._des3.encryptBlock(e,t)},decryptBlock:function(e,t){this._des3.decryptBlock(e,t),this._des2.encryptBlock(e,t),this._des1.decryptBlock(e,t)},keySize:6,ivSize:2,blockSize:2});e.TripleDES=A._createHelper(f)}(),n.TripleDES)},function(e,t,r){var n;e.exports=(n=r(3),r(18),r(19),r(15),r(6),function(){var e=n,t=e.lib.StreamCipher,r=e.algo,A=r.RC4=t.extend({_doReset:function(){for(var e=this._key,t=e.words,r=e.sigBytes,n=this._S=[],A=0;A<256;A++)n[A]=A;A=0;for(var i=0;A<256;A++){var s=A%r,o=t[s>>>2]>>>24-s%4*8&255;i=(i+n[A]+o)%256;var a=n[A];n[A]=n[i],n[i]=a}this._i=this._j=0},_doProcessBlock:function(e,t){e[t]^=i.call(this)},keySize:8,ivSize:0});function i(){for(var e=this._S,t=this._i,r=this._j,n=0,A=0;A<4;A++){r=(r+e[t=(t+1)%256])%256;var i=e[t];e[t]=e[r],e[r]=i,n|=e[(e[t]+e[r])%256]<<24-8*A}return this._i=t,this._j=r,n}e.RC4=t._createHelper(A);var s=r.RC4Drop=A.extend({cfg:A.cfg.extend({drop:192}),_doReset:function(){A._doReset.call(this);for(var e=this.cfg.drop;e>0;e--)i.call(this)}});e.RC4Drop=t._createHelper(s)}(),n.RC4)},function(e,t,r){var n;e.exports=(n=r(3),r(18),r(19),r(15),r(6),function(){var e=n,t=e.lib.StreamCipher,r=e.algo,A=[],i=[],s=[],o=r.Rabbit=t.extend({_doReset:function(){for(var e=this._key.words,t=this.cfg.iv,r=0;r<4;r++)e[r]=16711935&(e[r]<<8|e[r]>>>24)|4278255360&(e[r]<<24|e[r]>>>8);var n=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],A=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];for(this._b=0,r=0;r<4;r++)a.call(this);for(r=0;r<8;r++)A[r]^=n[r+4&7];if(t){var i=t.words,s=i[0],o=i[1],c=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),l=c>>>16|4294901760&u,g=u<<16|65535&c;for(A[0]^=c,A[1]^=l,A[2]^=u,A[3]^=g,A[4]^=c,A[5]^=l,A[6]^=u,A[7]^=g,r=0;r<4;r++)a.call(this)}},_doProcessBlock:function(e,t){var r=this._X;a.call(this),A[0]=r[0]^r[5]>>>16^r[3]<<16,A[1]=r[2]^r[7]>>>16^r[5]<<16,A[2]=r[4]^r[1]>>>16^r[7]<<16,A[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)A[n]=16711935&(A[n]<<8|A[n]>>>24)|4278255360&(A[n]<<24|A[n]>>>8),e[t+n]^=A[n]},blockSize:4,ivSize:2});function a(){for(var e=this._X,t=this._C,r=0;r<8;r++)i[r]=t[r];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<i[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<i[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<i[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<i[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<i[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<i[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<i[6]>>>0?1:0)|0,this._b=t[7]>>>0<i[7]>>>0?1:0,r=0;r<8;r++){var n=e[r]+t[r],A=65535&n,o=n>>>16,a=((A*A>>>17)+A*o>>>15)+o*o,c=((4294901760&n)*n|0)+((65535&n)*n|0);s[r]=a^c}e[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,e[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,e[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,e[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,e[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,e[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,e[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,e[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}e.Rabbit=t._createHelper(o)}(),n.Rabbit)},function(e,t,r){var n;e.exports=(n=r(3),r(18),r(19),r(15),r(6),function(){var e=n,t=e.lib.StreamCipher,r=e.algo,A=[],i=[],s=[],o=r.RabbitLegacy=t.extend({_doReset:function(){var e=this._key.words,t=this.cfg.iv,r=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],n=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];this._b=0;for(var A=0;A<4;A++)a.call(this);for(A=0;A<8;A++)n[A]^=r[A+4&7];if(t){var i=t.words,s=i[0],o=i[1],c=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),l=c>>>16|4294901760&u,g=u<<16|65535&c;for(n[0]^=c,n[1]^=l,n[2]^=u,n[3]^=g,n[4]^=c,n[5]^=l,n[6]^=u,n[7]^=g,A=0;A<4;A++)a.call(this)}},_doProcessBlock:function(e,t){var r=this._X;a.call(this),A[0]=r[0]^r[5]>>>16^r[3]<<16,A[1]=r[2]^r[7]>>>16^r[5]<<16,A[2]=r[4]^r[1]>>>16^r[7]<<16,A[3]=r[6]^r[3]>>>16^r[1]<<16;for(var n=0;n<4;n++)A[n]=16711935&(A[n]<<8|A[n]>>>24)|4278255360&(A[n]<<24|A[n]>>>8),e[t+n]^=A[n]},blockSize:4,ivSize:2});function a(){for(var e=this._X,t=this._C,r=0;r<8;r++)i[r]=t[r];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<i[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<i[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<i[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<i[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<i[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<i[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<i[6]>>>0?1:0)|0,this._b=t[7]>>>0<i[7]>>>0?1:0,r=0;r<8;r++){var n=e[r]+t[r],A=65535&n,o=n>>>16,a=((A*A>>>17)+A*o>>>15)+o*o,c=((4294901760&n)*n|0)+((65535&n)*n|0);s[r]=a^c}e[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,e[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,e[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,e[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,e[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,e[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,e[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,e[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}e.RabbitLegacy=t._createHelper(o)}(),n.RabbitLegacy)},function(e,t,r){\"use strict\";var n;r.r(t);var A=new Uint8Array(16);function i(){if(!n&&!(n=\"undefined\"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||\"undefined\"!=typeof msCrypto&&\"function\"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");return n(A)}var s=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var o=function(e){return\"string\"==typeof e&&s.test(e)},a=[],c=0;c<256;++c)a.push((c+256).toString(16).substr(1));var u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+\"-\"+a[e[t+4]]+a[e[t+5]]+\"-\"+a[e[t+6]]+a[e[t+7]]+\"-\"+a[e[t+8]]+a[e[t+9]]+\"-\"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]).toLowerCase();if(!o(r))throw TypeError(\"Stringified UUID is invalid\");return r};var l,g=function(e,t,r){var n=(e=e||{}).random||(e.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(var A=0;A<16;++A)t[r+A]=n[A];return t}return u(n)},h=r(5),f=r.n(h),B=f.a.object({target:f.a.string().required(),data:f.a.object({name:f.a.string().required(),data:f.a.object({id:f.a.alternatives().try(f.a.number(),f.a.string()).required(),jsonrpc:f.a.string().valid(\"2.0\").required(),result:f.a.any(),method:f.a.string(),params:f.a.array().items(f.a.any()),error:f.a.object({code:f.a.number().required(),message:f.a.string().required(),data:f.a.any()})}).required()}).required()}),I=-32601,d=-32603,p=-32604,E=-32e3,Q=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))},m=function(e,t){var r,n,A,i,s={label:0,sent:function(){if(1&A[0])throw A[1];return A[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(r)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(r=1,n&&(A=2&i[0]?n.return:i[0]?n.throw||((A=n.return)&&A.call(n),0):n.next)&&!(A=A.call(n,i[1])).done)return A;switch(n=0,A&&(i=[2&i[0],A.value]),i[0]){case 0:case 1:A=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(A=s.trys,(A=A.length>0&&A[A.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!A||i[1]>A[0]&&i[1]<A[3])){s.label=i[1];break}if(6===i[0]&&s.label<A[1]){s.label=A[1],A=i;break}if(A&&s.label<A[2]){s.label=A[2],s.ops.push(i);break}A[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=A=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},C=function(e,t){for(var r=0,n=t.length,A=e.length;r<n;r++,A++)e[A]=t[r];return e},y=function(){function e(e){if(this.timeout=5e3,this.handlers=new Map,this.calls=new Map,this.name=e.name,this.target=e.target,e.timeout&&(this.timeout=e.timeout),e.handlers)for(var t=0,r=Object.entries(e.handlers);t<r.length;t++){var n=r[t],A=n[0],i=n[1];this.handlers.set(A,i)}}return e.prototype.exposeHandler=function(e,t){this.handlers.set(e,t)},e.prototype.removeHandler=function(e){return this.handlers.delete(e)},e.prototype._call=function(e,t,r,n){return Q(this,void 0,void 0,(function(){var A,i,s=this;return m(this,(function(o){return A=g(),i={target:t,data:{name:this.name,data:{id:A,jsonrpc:\"2.0\",method:e,params:n}}},[2,new Promise((function(e,t){var n,o=function(r,n){r?t(new Error(r.message)):e(n)};r>0&&(n=setTimeout((function(){s.calls.has(A)&&(s.calls.delete(A),o({code:p,message:\"Request Timeout\"}))}),r)),s.calls.set(A,{resolver:o,timer:n}),s.sendMessage(i)}))]}))}))},e.prototype.call=function(e,t,r){return Q(this,void 0,void 0,(function(){var n;return m(this,(function(A){return n=this.timeout,r&&\"number\"==typeof r.timeout&&(n=r.timeout),[2,this._call(e,(null==r?void 0:r.target)||this.target,n,t||[])]}))}))},e.prototype.onMessage=function(e){var t=function(e){if(B.validate(e).error)return{isValid:!1,type:null};var t=null;return e.data.data.hasOwnProperty(\"method\")&&e.data.data.hasOwnProperty(\"params\")?t=\"req\":(e.data.data.hasOwnProperty(\"result\")||e.data.data.hasOwnProperty(\"error\"))&&(t=\"res\"),{type:t,isValid:\"req\"===t||\"res\"===t}}(e),r=t.type;if(t.isValid){var n=e;if(n.target===this.name&&this.target===n.data.name)switch(r){case\"req\":this.onRequestMessage(n);break;case\"res\":this.onResponseMessage(n)}}},e.prototype.onRequestMessage=function(e){var t=this,r={target:this.target,data:{name:this.name,data:{id:e.data.data.id,jsonrpc:\"2.0\"}}};try{var n=this.handlers.get(e.data.data.method);if(!n)return r.data.data.error={code:I,message:\"Method \"+e.data.data.method+\" does not exist\"},void this.sendMessage(r);n.apply(void 0,C([{callback:function(e,n){if(e)return r.data.data.error=e,void t.sendMessage(r);r.data.data.result=n,t.sendMessage(r)},message:e}],e.data.data.params))}catch(e){if(r.data.data.hasOwnProperty(\"error\"))return;if(r.data.data.hasOwnProperty(\"result\"))return;r.data.data.error={code:E,message:e.toString()},this.sendMessage(r)}},e.prototype.onResponseMessage=function(e){var t=e.data.data,r=t.id,n=t.error,A=t.result,i=this.calls.get(r);i&&(i.timer&&clearTimeout(i.timer),i.resolver(n,A),this.calls.delete(r))},e.prototype.stop=function(){this.calls.forEach((function(e){e.timer&&clearTimeout(e.timer),e.resolver({message:\"RPC stopped\",code:d})})),this.calls.clear()},e}(),w=(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},l(e,t)},function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),b=function(e){function t(t,r){var n=e.call(this,r)||this;return n.win=t,n.receiveMessage=n.receiveMessage.bind(n),n}return w(t,e),t.prototype.sendMessage=function(e){this.win.postMessage(e,\"*\")},t.prototype.receiveMessage=function(t){e.prototype.onMessage.call(this,t.data)},t.prototype.start=function(){this.win.addEventListener(\"message\",this.receiveMessage)},t.prototype.stop=function(){e.prototype.stop.call(this),this.win.removeEventListener(\"message\",this.receiveMessage)},t}(y),v=r(97);function _(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function G(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?_(Object(r),!0).forEach((function(t){k(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function k(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const S=new b(window,{name:\"plug-inpage-provider\",target:\"plug-content-script\",timeout:2e4});S.start();const D=new v.a(S,window),q=window.ic||{};D.init(),window.ic=G(G({},q),{},{plug:D});t.default=D},,,,function(e,t,r){\"use strict\";(function(e){r.d(t,\"a\",(function(){return p}));var n=r(16),A=r(2),i=r(4),s=r(23),o=r(11),a=r(34),c=r(14),u=r(20),l=r(54),g=r(55),h=r(31),f=r(12),B=function(e,t,r,n){return new(r||(r=Promise))((function(A,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?A(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}a((n=n.apply(e,t||[])).next())}))},I=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var A=0;for(n=Object.getOwnPropertySymbols(e);A<n.length;A++)t.indexOf(n[A])<0&&Object.prototype.propertyIsEnumerable.call(e,n[A])&&(r[n[A]]=e[n[A]])}return r},d=function(e){if(!Symbol.asyncIterator)throw new TypeError(\"Symbol.asyncIterator is not defined.\");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=\"function\"==typeof __values?__values(e):e[Symbol.iterator](),t={},n(\"next\"),n(\"throw\"),n(\"return\"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,A){(function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)})(n,A,(t=e[r](t)).done,t.value)}))}}};class p{constructor(e){this.idls={},this.hookToWindowEvents=()=>{window.addEventListener(\"updateConnection\",(()=>B(this,void 0,void 0,(function*(){const e=yield this.sessionManager.updateConnection(),{sessionData:t}=e||{};t&&(this.agent=null==t?void 0:t.agent,this.principalId=null==t?void 0:t.principalId,this.accountId=null==t?void 0:t.accountId)}))),!1)},this.clientRPC=new l.a({instance:e}),this.sessionManager=new g.a({rpc:this.clientRPC}),this.versions=o.c}init(){return B(this,void 0,void 0,(function*(){const e=yield this.sessionManager.init(),{sessionData:t}=e||{};t&&(this.agent=null==t?void 0:t.agent,this.principalId=null==t?void 0:t.principalId,this.accountId=null==t?void 0:t.accountId),this.hookToWindowEvents()}))}createActor({canisterId:e,interfaceFactory:t}){var r;return B(this,void 0,void 0,(function*(){if(!e||!Object(h.b)(e))throw Error(\"a canisterId valid is a required argument\");if(!t)throw Error(\"interfaceFactory is a required argument\");const n=Object(i.a)();this.idls[e]=Object(a.a)(t);const A=yield this.sessionManager.getConnectionData(),s=yield Object(c.b)(this.clientRPC,n,{whitelist:[e],host:null===(r=null==A?void 0:A.connection)||void 0===r?void 0:r.host},Object(a.a)(t));return Object(c.a)(s,e,t)}))}getPrincipal({asString:e}={asString:!1}){return B(this,void 0,void 0,(function*(){const t=Object(i.a)(),r=this.principalId;if(r)return e?r.toString():A.a.from(r);{const r=yield this.clientRPC.call({handler:\"getPrincipal\",args:[t.url]});return r&&e?r.toString():A.a.from(r)}}))}isConnected(){return B(this,void 0,void 0,(function*(){const e=yield this.sessionManager.getConnectionData(),{connection:t}=e||{};return!!t}))}disconnect(){return B(this,void 0,void 0,(function*(){yield this.sessionManager.disconnect()}))}requestConnect(e={}){return B(this,void 0,void 0,(function*(){const{sessionData:t,connection:r}=yield this.sessionManager.requestConnect(e);return t&&(this.agent=null==t?void 0:t.agent,this.principalId=null==t?void 0:t.principalId,this.accountId=null==t?void 0:t.accountId),null==r?void 0:r.publicKey}))}createAgent({whitelist:e,host:t}={}){return B(this,void 0,void 0,(function*(){const r=Object(i.a)();return this.agent=yield Object(c.b)(this.clientRPC,r,{whitelist:e,host:t},null),!!this.agent}))}requestBalance(e=null){return B(this,void 0,void 0,(function*(){const t=Object(i.a)();return(yield this.clientRPC.call({handler:\"requestBalance\",args:[t,e]})).map((e=>{const{value:t}=e;return I(e,[\"value\"])}))}))}requestTransfer(e){return B(this,void 0,void 0,(function*(){const t=Object(i.a)();return yield this.clientRPC.call({handler:\"requestTransfer\",args:[t,e]})}))}batchTransactions(t){var r,n,A,s,o;return B(this,void 0,void 0,(function*(){const l=Object(i.a)(),g=t.map((e=>e.canisterId)),h=yield this.sessionManager.getConnectionData(),B=yield this.getPrincipal({asString:!0}),I=t.map((e=>Object(a.b)(e,B))).map((t=>Object(u.a)(Object.assign(Object.assign({},t),{arguments:Object(f.b)(e.from(t.arguments))})))),p=yield this.clientRPC.call({handler:\"batchTransactions\",args:[l,I]});if(!p.status)return!1;const E=yield Object(c.b)(this.clientRPC,l,{whitelist:g,host:null===(o=null==h?void 0:h.connection)||void 0===o?void 0:o.host},null,p.txId);let Q=0,m=[];try{for(r=d(t);!(n=yield r.next()).done;){const e=n.value,t=(yield Object(c.a)(E,e.canisterId,e.idl))[e.methodName];try{let r;if(\"function\"==typeof e.args)m&&(r=yield t(...e.args(m))),m||(r=yield t(...e.args()));else{if(!Array.isArray(e.args)){yield null==e?void 0:e.onFail(\"Invalid transaction arguments, must be function or array\",m);break}r=yield t(...e.args)}if(null==e?void 0:e.onSuccess){const t=yield null==e?void 0:e.onSuccess(r);t&&(m=[...m,{transactionIndex:Q,response:t}])}}catch(t){(null==e?void 0:e.onFail)&&(yield e.onFail(t,m));break}Q++}}catch(e){A={error:e}}finally{try{n&&!n.done&&(s=r.return)&&(yield s.call(r))}finally{if(A)throw A.error}}return!0}))}getICNSInfo(){return B(this,void 0,void 0,(function*(){const e=Object(i.a)();return yield this.clientRPC.call({handler:\"getICNSInfo\",args:[e]})}))}requestBurnXTC(e){return B(this,void 0,void 0,(function*(){const t=Object(i.a)();return yield this.clientRPC.call({handler:\"requestBurnXTC\",args:[t,e]})}))}getManagementCanister(){return B(this,void 0,void 0,(function*(){if(!this.agent)throw Error(\"Oops! Agent initialization required.\");return n.a.createActor(s.a,Object.assign({agent:this.agent,canisterId:s.b},{callTransform:s.c,queryTransform:s.c}))}))}requestImportToken(e){return B(this,void 0,void 0,(function*(){const t=Object(i.a)();return yield this.clientRPC.call({handler:\"requestImportToken\",args:[t,e]})}))}}}).call(this,r(0).Buffer)}]);");


/***/ }),

/***/ "./source/scripts/ContentScript/utils/index.js":
/*!*****************************************************!*\
  !*** ./source/scripts/ContentScript/utils/index.js ***!
  \*****************************************************/
/*! exports provided: injectScript */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _inject_script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inject-script */ "./source/scripts/ContentScript/utils/inject-script.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "injectScript", function() { return _inject_script__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* eslint-disable import/prefer-default-export */


/***/ }),

/***/ "./source/scripts/ContentScript/utils/inject-script.js":
/*!*************************************************************!*\
  !*** ./source/scripts/ContentScript/utils/inject-script.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const injectScript = (filePath, content) => {
  const container = document.head || document.documentElement;
  const script = document.createElement('script');
  script.setAttribute('async', 'false');
  script.setAttribute('type', 'text/javascript');

  if (content) {
    script.textContent = content;
  }

  if (filePath) {
    script.setAttribute('src', filePath);
  }

  container.insertBefore(script, container.children[0]);
  container.removeChild(script);
};

/* harmony default export */ __webpack_exports__["default"] = (injectScript);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,