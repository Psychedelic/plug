/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./source/scripts/Inpage/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@dfinity/agent/lib/esm/actor.js":
/*!******************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/actor.js ***!
  \******************************************************/
/*! exports provided: ActorCallError, QueryCallRejectedError, UpdateCallRejectedError, CanisterInstallMode, Actor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorCallError", function() { return ActorCallError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryCallRejectedError", function() { return QueryCallRejectedError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateCallRejectedError", function() { return UpdateCallRejectedError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanisterInstallMode", function() { return CanisterInstallMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Actor", function() { return Actor; });
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ "./node_modules/@dfinity/agent/lib/esm/agent/index.js");
/* harmony import */ var _canisters_management__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canisters/management */ "./node_modules/@dfinity/agent/lib/esm/canisters/management.js");
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ "./node_modules/@dfinity/agent/lib/esm/errors.js");
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var _polling__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./polling */ "./node_modules/@dfinity/agent/lib/esm/polling/index.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./request_id */ "./node_modules/@dfinity/agent/lib/esm/request_id.js");








class ActorCallError extends _errors__WEBPACK_IMPORTED_MODULE_3__["AgentError"] {
  constructor(canisterId, methodName, type, props) {
    super([`Call failed:`, `  Canister: ${canisterId.toText()}`, `  Method: ${methodName} (${type})`, ...Object.getOwnPropertyNames(props).map(n => `  "${n}": ${JSON.stringify(props[n])}`)].join('\n'));
    this.canisterId = canisterId;
    this.methodName = methodName;
    this.type = type;
    this.props = props;
  }

}
class QueryCallRejectedError extends ActorCallError {
  constructor(canisterId, methodName, result) {
    var _a;

    super(canisterId, methodName, 'query', {
      Status: result.status,
      Code: (_a = _agent__WEBPACK_IMPORTED_MODULE_1__["ReplicaRejectCode"][result.reject_code]) !== null && _a !== void 0 ? _a : `Unknown Code "${result.reject_code}"`,
      Message: result.reject_message
    });
    this.result = result;
  }

}
class UpdateCallRejectedError extends ActorCallError {
  constructor(canisterId, methodName, requestId, response) {
    super(canisterId, methodName, 'update', {
      'Request ID': Object(_request_id__WEBPACK_IMPORTED_MODULE_7__["toHex"])(requestId),
      'HTTP status code': response.status.toString(),
      'HTTP status text': response.statusText
    });
    this.requestId = requestId;
    this.response = response;
  }

}
/**
 * The mode used when installing a canister.
 */

var CanisterInstallMode;

(function (CanisterInstallMode) {
  CanisterInstallMode["Install"] = "install";
  CanisterInstallMode["Reinstall"] = "reinstall";
  CanisterInstallMode["Upgrade"] = "upgrade";
})(CanisterInstallMode || (CanisterInstallMode = {}));

const metadataSymbol = Symbol.for('ic-agent-metadata');
/**
 * An actor base class. An actor is an object containing only functions that will
 * return a promise. These functions are derived from the IDL definition.
 */

class Actor {
  constructor(metadata) {
    this[metadataSymbol] = Object.freeze(metadata);
  }
  /**
   * Get the Agent class this Actor would call, or undefined if the Actor would use
   * the default agent (global.ic.agent).
   * @param actor The actor to get the agent of.
   */


  static agentOf(actor) {
    return actor[metadataSymbol].config.agent;
  }
  /**
   * Get the interface of an actor, in the form of an instance of a Service.
   * @param actor The actor to get the interface of.
   */


  static interfaceOf(actor) {
    return actor[metadataSymbol].service;
  }

  static canisterIdOf(actor) {
    return _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__["Principal"].from(actor[metadataSymbol].config.canisterId);
  }

  static async install(fields, config) {
    const mode = fields.mode === undefined ? CanisterInstallMode.Install : fields.mode; // Need to transform the arg into a number array.

    const arg = fields.arg ? [...fields.arg] : []; // Same for module.

    const wasmModule = [...fields.module];
    const canisterId = typeof config.canisterId === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__["Principal"].fromText(config.canisterId) : config.canisterId;
    await Object(_canisters_management__WEBPACK_IMPORTED_MODULE_2__["getManagementCanister"])(config).install_code({
      mode: {
        [mode]: null
      },
      arg,
      wasm_module: wasmModule,
      canister_id: canisterId
    });
  }

  static async createCanister(config) {
    const {
      canister_id: canisterId
    } = await Object(_canisters_management__WEBPACK_IMPORTED_MODULE_2__["getManagementCanister"])(config || {}).provisional_create_canister_with_cycles({
      amount: [],
      settings: []
    });
    return canisterId;
  }

  static async createAndInstallCanister(interfaceFactory, fields, config) {
    const canisterId = await this.createCanister(config);
    await this.install(Object.assign({}, fields), Object.assign(Object.assign({}, config), {
      canisterId
    }));
    return this.createActor(interfaceFactory, Object.assign(Object.assign({}, config), {
      canisterId
    }));
  }

  static createActorClass(interfaceFactory) {
    const service = interfaceFactory({
      IDL: _dfinity_candid__WEBPACK_IMPORTED_MODULE_4__["IDL"]
    });

    class CanisterActor extends Actor {
      constructor(config) {
        const canisterId = typeof config.canisterId === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__["Principal"].fromText(config.canisterId) : config.canisterId;
        super({
          config: Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), config), {
            canisterId
          }),
          service
        });

        for (const [methodName, func] of service._fields) {
          this[methodName] = _createActorMethod(this, methodName, func);
        }
      }

    }

    return CanisterActor;
  }

  static createActor(interfaceFactory, configuration) {
    return new (this.createActorClass(interfaceFactory))(configuration);
  }

} // IDL functions can have multiple return values, so decoding always
// produces an array. Ensure that functions with single or zero return
// values behave as expected.

function decodeReturnValue(types, msg) {
  const returnValues = _dfinity_candid__WEBPACK_IMPORTED_MODULE_4__["IDL"].decode(types, buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(msg));

  switch (returnValues.length) {
    case 0:
      return undefined;

    case 1:
      return returnValues[0];

    default:
      return returnValues;
  }
}

const DEFAULT_ACTOR_CONFIG = {
  pollingStrategyFactory: _polling__WEBPACK_IMPORTED_MODULE_5__["strategy"].defaultStrategy
};

function _createActorMethod(actor, methodName, func) {
  let caller;

  if (func.annotations.includes('query')) {
    caller = async (options, ...args) => {
      var _a, _b; // First, if there's a config transformation, call it.


      options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).queryTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
      const agent = options.agent || actor[metadataSymbol].config.agent || Object(_agent__WEBPACK_IMPORTED_MODULE_1__["getDefaultAgent"])();
      const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__["Principal"].from(options.canisterId || actor[metadataSymbol].config.canisterId);
      const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_4__["IDL"].encode(func.argTypes, args);
      const result = await agent.query(cid, {
        methodName,
        arg
      });

      switch (result.status) {
        case "rejected"
        /* Rejected */
        :
          throw new QueryCallRejectedError(cid, methodName, result);

        case "replied"
        /* Replied */
        :
          return decodeReturnValue(func.retTypes, result.reply.arg);
      }
    };
  } else {
    caller = async (options, ...args) => {
      var _a, _b; // First, if there's a config transformation, call it.


      options = Object.assign(Object.assign({}, options), (_b = (_a = actor[metadataSymbol].config).callTransform) === null || _b === void 0 ? void 0 : _b.call(_a, methodName, args, Object.assign(Object.assign({}, actor[metadataSymbol].config), options)));
      const agent = options.agent || actor[metadataSymbol].config.agent || Object(_agent__WEBPACK_IMPORTED_MODULE_1__["getDefaultAgent"])();
      const {
        canisterId,
        effectiveCanisterId,
        pollingStrategyFactory
      } = Object.assign(Object.assign(Object.assign({}, DEFAULT_ACTOR_CONFIG), actor[metadataSymbol].config), options);
      const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__["Principal"].from(canisterId);
      const ecid = effectiveCanisterId !== undefined ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_6__["Principal"].from(effectiveCanisterId) : cid;
      const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_4__["IDL"].encode(func.argTypes, args);
      const {
        requestId,
        response
      } = await agent.call(cid, {
        methodName,
        arg,
        effectiveCanisterId: ecid
      });

      if (!response.ok) {
        throw new UpdateCallRejectedError(cid, methodName, requestId, response);
      }

      const pollStrategy = pollingStrategyFactory();
      const responseBytes = await Object(_polling__WEBPACK_IMPORTED_MODULE_5__["pollForResponse"])(agent, ecid, requestId, pollStrategy);

      if (responseBytes !== undefined) {
        return decodeReturnValue(func.retTypes, responseBytes);
      } else if (func.retTypes.length === 0) {
        return undefined;
      } else {
        throw new Error(`Call was returned undefined, but type [${func.retTypes.join(',')}].`);
      }
    };
  }

  const handler = (...args) => caller({}, ...args);

  handler.withOptions = options => (...args) => caller(options, ...args);

  return handler;
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/api.js":
/*!**********************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/api.js ***!
  \**********************************************************/
/*! exports provided: ReplicaRejectCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplicaRejectCode", function() { return ReplicaRejectCode; });
/**
 * Codes used by the replica for rejecting a message.
 * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.
 */
var ReplicaRejectCode;

(function (ReplicaRejectCode) {
  ReplicaRejectCode[ReplicaRejectCode["SysFatal"] = 1] = "SysFatal";
  ReplicaRejectCode[ReplicaRejectCode["SysTransient"] = 2] = "SysTransient";
  ReplicaRejectCode[ReplicaRejectCode["DestinationInvalid"] = 3] = "DestinationInvalid";
  ReplicaRejectCode[ReplicaRejectCode["CanisterReject"] = 4] = "CanisterReject";
  ReplicaRejectCode[ReplicaRejectCode["CanisterError"] = 5] = "CanisterError";
})(ReplicaRejectCode || (ReplicaRejectCode = {}));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/http/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/http/index.js ***!
  \*****************************************************************/
/*! exports provided: Expiry, makeNonceTransform, makeExpiryTransform, RequestStatusResponseStatus, HttpAgent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequestStatusResponseStatus", function() { return RequestStatusResponseStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpAgent", function() { return HttpAgent; });
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../auth */ "./node_modules/@dfinity/agent/lib/esm/auth.js");
/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../cbor */ "./node_modules/@dfinity/agent/lib/esm/cbor.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../request_id */ "./node_modules/@dfinity/agent/lib/esm/request_id.js");
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var _transforms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transforms */ "./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types */ "./node_modules/@dfinity/agent/lib/esm/agent/http/types.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Expiry", function() { return _transforms__WEBPACK_IMPORTED_MODULE_6__["Expiry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeNonceTransform", function() { return _transforms__WEBPACK_IMPORTED_MODULE_6__["makeNonceTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeExpiryTransform", function() { return _transforms__WEBPACK_IMPORTED_MODULE_6__["makeExpiryTransform"]; });










var RequestStatusResponseStatus;

(function (RequestStatusResponseStatus) {
  RequestStatusResponseStatus["Received"] = "received";
  RequestStatusResponseStatus["Processing"] = "processing";
  RequestStatusResponseStatus["Replied"] = "replied";
  RequestStatusResponseStatus["Rejected"] = "rejected";
  RequestStatusResponseStatus["Unknown"] = "unknown";
  RequestStatusResponseStatus["Done"] = "done";
})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {})); // Default delta for ingress expiry is 5 minutes.


const DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000; // Root public key for the IC, encoded as hex

const IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' + 'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' + '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' + 'b01291091c5f87b98883463f98091a0baaae';

function getDefaultFetch() {
  const result = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.fetch.bind(self) : global.fetch.bind(global) : window.fetch.bind(window);

  if (!result) {
    throw new Error('Could not find default `fetch` implementation.');
  }

  return result;
} // A HTTP agent allows users to interact with a client of the internet computer
// using the available methods. It exposes an API that closely follows the
// public view of the internet computer, and is not intended to be exposed
// directly to the majority of users due to its low-level interface.
//
// There is a pipeline to apply transformations to the request before sending
// it to the client. This is to decouple signature, nonce generation and
// other computations so that this class can stay as simple as possible while
// allowing extensions.


class HttpAgent {
  constructor(options = {}) {
    this._pipeline = [];
    this._rootKeyFetched = false;
    this.rootKey = Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobFromHex"])(IC_ROOT_KEY);

    if (options.source) {
      if (!(options.source instanceof HttpAgent)) {
        throw new Error("An Agent's source can only be another HttpAgent");
      }

      this._pipeline = [...options.source._pipeline];
      this._identity = options.source._identity;
      this._fetch = options.source._fetch;
      this._host = options.source._host;
      this._credentials = options.source._credentials;
    } else {
      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);
    }

    if (options.host !== undefined) {
      if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {
        this._host = new URL(window.location.protocol + '//' + options.host);
      } else {
        this._host = new URL(options.host);
      }
    } else if (options.source !== undefined) {
      // Safe to ignore here.
      this._host = options.source._host;
    } else {
      const location = typeof window !== 'undefined' ? window.location : undefined;

      if (!location) {
        throw new Error('Must specify a host to connect to.');
      }

      this._host = new URL(location + '');
    }

    if (options.credentials) {
      const {
        name,
        password
      } = options.credentials;
      this._credentials = `${name}${password ? ':' + password : ''}`;
    }

    this._identity = Promise.resolve(options.identity || new _auth__WEBPACK_IMPORTED_MODULE_1__["AnonymousIdentity"]());
  }

  addTransform(fn, priority = fn.priority || 0) {
    // Keep the pipeline sorted at all time, by priority.
    const i = this._pipeline.findIndex(x => (x.priority || 0) < priority);

    this._pipeline.splice(i >= 0 ? i : this._pipeline.length, 0, Object.assign(fn, {
      priority
    }));
  }

  async getPrincipal() {
    return (await this._identity).getPrincipal();
  }

  async call(canisterId, options, identity) {
    const id = await (identity !== undefined ? await identity : await this._identity);
    const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].from(canisterId);
    const ecid = options.effectiveCanisterId ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].from(options.effectiveCanisterId) : canister;
    const sender = id.getPrincipal() || _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].anonymous();
    const submit = {
      request_type: _types__WEBPACK_IMPORTED_MODULE_7__["SubmitRequestType"].Call,
      canister_id: canister,
      method_name: options.methodName,
      arg: options.arg,
      sender: sender,
      ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__["Expiry"](DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any

    let transformedRequest = await this._transform({
      request: {
        body: null,
        method: 'POST',
        headers: Object.assign({
          'Content-Type': 'application/cbor'
        }, this._credentials ? {
          Authorization: 'Basic ' + btoa(this._credentials)
        } : {})
      },
      endpoint: "call"
      /* Call */
      ,
      body: submit
    }); // Apply transform for identity.

    transformedRequest = await id.transformRequest(transformedRequest);
    const body = _cbor__WEBPACK_IMPORTED_MODULE_2__["encode"](transformedRequest.body); // Run both in parallel. The fetch is quite expensive, so we have plenty of time to
    // calculate the requestId locally.

    const [response, requestId] = await Promise.all([this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), Object.assign(Object.assign({}, transformedRequest.request), {
      body
    })), Object(_request_id__WEBPACK_IMPORTED_MODULE_4__["requestIdOf"])(submit)]);

    if (!response.ok) {
      throw new Error(`Server returned an error:\n` + `  Code: ${response.status} (${response.statusText})\n` + `  Body: ${await response.text()}\n`);
    }

    return {
      requestId,
      response: {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText
      }
    };
  }

  async query(canisterId, fields, identity) {
    const id = await (identity !== undefined ? await identity : await this._identity);
    const canister = typeof canisterId === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].fromText(canisterId) : canisterId;
    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].anonymous();
    const request = {
      request_type: "query"
      /* Query */
      ,
      canister_id: canister,
      method_name: fields.methodName,
      arg: fields.arg,
      sender: sender,
      ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__["Expiry"](DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
    }; // TODO: remove this any. This can be a Signed or UnSigned request.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    let transformedRequest = await this._transform({
      request: {
        method: 'POST',
        headers: Object.assign({
          'Content-Type': 'application/cbor'
        }, this._credentials ? {
          Authorization: 'Basic ' + btoa(this._credentials)
        } : {})
      },
      endpoint: "read"
      /* Query */
      ,
      body: request
    }); // Apply transform for identity.

    transformedRequest = await id.transformRequest(transformedRequest);
    const body = _cbor__WEBPACK_IMPORTED_MODULE_2__["encode"](transformedRequest.body);
    const response = await this._fetch('' + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), Object.assign(Object.assign({}, transformedRequest.request), {
      body
    }));

    if (!response.ok) {
      throw new Error(`Server returned an error:\n` + `  Code: ${response.status} (${response.statusText})\n` + `  Body: ${await response.text()}\n`);
    }

    return _cbor__WEBPACK_IMPORTED_MODULE_2__["decode"](buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(await response.arrayBuffer()));
  }

  async readState(canisterId, fields, identity) {
    const canister = typeof canisterId === 'string' ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].fromText(canisterId) : canisterId;
    const id = await (identity !== undefined ? await identity : await this._identity);
    const sender = (id === null || id === void 0 ? void 0 : id.getPrincipal()) || _dfinity_principal__WEBPACK_IMPORTED_MODULE_3__["Principal"].anonymous(); // TODO: remove this any. This can be a Signed or UnSigned request.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any

    let transformedRequest = await this._transform({
      request: {
        method: 'POST',
        headers: Object.assign({
          'Content-Type': 'application/cbor'
        }, this._credentials ? {
          Authorization: 'Basic ' + btoa(this._credentials)
        } : {})
      },
      endpoint: "read_state"
      /* ReadState */
      ,
      body: {
        request_type: "read_state"
        /* ReadState */
        ,
        paths: fields.paths,
        sender: sender,
        ingress_expiry: new _transforms__WEBPACK_IMPORTED_MODULE_6__["Expiry"](DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS)
      }
    }); // Apply transform for identity.

    transformedRequest = await id.transformRequest(transformedRequest);
    const body = _cbor__WEBPACK_IMPORTED_MODULE_2__["encode"](transformedRequest.body);
    const response = await this._fetch('' + new URL(`/api/v2/canister/${canister}/read_state`, this._host), Object.assign(Object.assign({}, transformedRequest.request), {
      body
    }));

    if (!response.ok) {
      throw new Error(`Server returned an error:\n` + `  Code: ${response.status} (${response.statusText})\n` + `  Body: ${await response.text()}\n`);
    }

    return _cbor__WEBPACK_IMPORTED_MODULE_2__["decode"](buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(await response.arrayBuffer()));
  }

  async status() {
    const headers = this._credentials ? {
      Authorization: 'Basic ' + btoa(this._credentials)
    } : {};
    const response = await this._fetch('' + new URL(`/api/v2/status`, this._host), {
      headers
    });

    if (!response.ok) {
      throw new Error(`Server returned an error:\n` + `  Code: ${response.status} (${response.statusText})\n` + `  Body: ${await response.text()}\n`);
    }

    const buffer = await response.arrayBuffer();
    return _cbor__WEBPACK_IMPORTED_MODULE_2__["decode"](new Uint8Array(buffer));
  }

  async fetchRootKey() {
    if (!this._rootKeyFetched) {
      // Hex-encoded version of the replica root key
      this.rootKey = Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobFromUint8Array"])((await this.status()).root_key);
      this._rootKeyFetched = true;
    }

    return this.rootKey;
  }

  _transform(request) {
    let p = Promise.resolve(request);

    for (const fn of this._pipeline) {
      p = p.then(r => fn(r).then(r2 => r2 || r));
    }

    return p;
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js ***!
  \**********************************************************************/
/*! exports provided: Expiry, makeNonceTransform, makeExpiryTransform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Expiry", function() { return Expiry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeNonceTransform", function() { return makeNonceTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeExpiryTransform", function() { return makeExpiryTransform; });
/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! simple-cbor */ "./node_modules/simple-cbor/src/index.js");
/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(simple_cbor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");


const NANOSECONDS_PER_MILLISECONDS = BigInt(1000000);
const REPLICA_PERMITTED_DRIFT_MILLISECONDS = BigInt(60 * 1000);
class Expiry {
  constructor(deltaInMSec) {
    // Use bigint because it can overflow the maximum number allowed in a double float.
    this._value = (BigInt(Date.now()) + BigInt(deltaInMSec) - REPLICA_PERMITTED_DRIFT_MILLISECONDS) * NANOSECONDS_PER_MILLISECONDS;
  }

  toCBOR() {
    // TODO: change this to take the minimum amount of space (it always takes 8 bytes now).
    return simple_cbor__WEBPACK_IMPORTED_MODULE_0__["value"].u64(this._value.toString(16), 16);
  }

  toHash() {
    return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_1__["lebEncode"])(this._value);
  }

}
/**
 * Create a Nonce transform, which takes a function that returns a Buffer, and adds it
 * as the nonce to every call requests.
 * @param nonceFn A function that returns a buffer. By default uses a semi-random method.
 */

function makeNonceTransform(nonceFn = _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__["makeNonce"]) {
  return async request => {
    // Nonce are only useful for async calls, to prevent replay attacks. Other types of
    // calls don't need Nonce so we just skip creating one.
    if (request.endpoint === "call"
    /* Call */
    ) {
      request.body.nonce = nonceFn();
    }
  };
}
/**
 * Create a transform that adds a delay (by default 5 minutes) to the expiry.
 *
 * @param delayInMilliseconds The delay to add to the call time, in milliseconds.
 */

function makeExpiryTransform(delayInMilliseconds) {
  return async request => {
    request.body.ingress_expiry = new Expiry(delayInMilliseconds);
  };
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/http/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/http/types.js ***!
  \*****************************************************************/
/*! exports provided: SubmitRequestType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmitRequestType", function() { return SubmitRequestType; });
// tslint:enable:camel-case
// The types of values allowed in the `request_type` field for submit requests.
var SubmitRequestType;

(function (SubmitRequestType) {
  SubmitRequestType["Call"] = "call";
})(SubmitRequestType || (SubmitRequestType = {}));

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/index.js ***!
  \************************************************************/
/*! exports provided: ReplicaRejectCode, Expiry, makeNonceTransform, makeExpiryTransform, RequestStatusResponseStatus, HttpAgent, ProxyMessageKind, ProxyStubAgent, ProxyAgent, getDefaultAgent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultAgent", function() { return getDefaultAgent; });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@dfinity/agent/lib/esm/agent/api.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReplicaRejectCode", function() { return _api__WEBPACK_IMPORTED_MODULE_0__["ReplicaRejectCode"]; });

/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ "./node_modules/@dfinity/agent/lib/esm/agent/http/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Expiry", function() { return _http__WEBPACK_IMPORTED_MODULE_1__["Expiry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeNonceTransform", function() { return _http__WEBPACK_IMPORTED_MODULE_1__["makeNonceTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeExpiryTransform", function() { return _http__WEBPACK_IMPORTED_MODULE_1__["makeExpiryTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestStatusResponseStatus", function() { return _http__WEBPACK_IMPORTED_MODULE_1__["RequestStatusResponseStatus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpAgent", function() { return _http__WEBPACK_IMPORTED_MODULE_1__["HttpAgent"]; });

/* harmony import */ var _proxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proxy */ "./node_modules/@dfinity/agent/lib/esm/agent/proxy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyMessageKind", function() { return _proxy__WEBPACK_IMPORTED_MODULE_2__["ProxyMessageKind"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyStubAgent", function() { return _proxy__WEBPACK_IMPORTED_MODULE_2__["ProxyStubAgent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyAgent", function() { return _proxy__WEBPACK_IMPORTED_MODULE_2__["ProxyAgent"]; });




function getDefaultAgent() {
  const agent = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.ic.agent : global.ic.agent : window.ic.agent;

  if (!agent) {
    throw new Error('No Agent could be found.');
  }

  return agent;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/agent/proxy.js":
/*!************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/agent/proxy.js ***!
  \************************************************************/
/*! exports provided: ProxyMessageKind, ProxyStubAgent, ProxyAgent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProxyMessageKind", function() { return ProxyMessageKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProxyStubAgent", function() { return ProxyStubAgent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProxyAgent", function() { return ProxyAgent; });
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");

var ProxyMessageKind;

(function (ProxyMessageKind) {
  ProxyMessageKind["Error"] = "err";
  ProxyMessageKind["GetPrincipal"] = "gp";
  ProxyMessageKind["GetPrincipalResponse"] = "gpr";
  ProxyMessageKind["Query"] = "q";
  ProxyMessageKind["QueryResponse"] = "qr";
  ProxyMessageKind["Call"] = "c";
  ProxyMessageKind["CallResponse"] = "cr";
  ProxyMessageKind["ReadState"] = "rs";
  ProxyMessageKind["ReadStateResponse"] = "rsr";
  ProxyMessageKind["Status"] = "s";
  ProxyMessageKind["StatusResponse"] = "sr";
})(ProxyMessageKind || (ProxyMessageKind = {})); // A Stub Agent that forwards calls to another Agent implementation.


class ProxyStubAgent {
  constructor(_frontend, _agent) {
    this._frontend = _frontend;
    this._agent = _agent;
  }

  onmessage(msg) {
    switch (msg.type) {
      case ProxyMessageKind.GetPrincipal:
        this._agent.getPrincipal().then(response => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind.GetPrincipalResponse,
            response: response.toText()
          });
        });

        break;

      case ProxyMessageKind.Query:
        this._agent.query(...msg.args).then(response => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind.QueryResponse,
            response
          });
        });

        break;

      case ProxyMessageKind.Call:
        this._agent.call(...msg.args).then(response => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind.CallResponse,
            response
          });
        });

        break;

      case ProxyMessageKind.ReadState:
        this._agent.readState(...msg.args).then(response => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind.ReadStateResponse,
            response
          });
        });

        break;

      case ProxyMessageKind.Status:
        this._agent.status().then(response => {
          this._frontend({
            id: msg.id,
            type: ProxyMessageKind.StatusResponse,
            response
          });
        });

        break;

      default:
        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);
    }
  }

} // An Agent that forwards calls to a backend. The calls are serialized

class ProxyAgent {
  constructor(_backend) {
    this._backend = _backend;
    this._nextId = 0;
    this._pendingCalls = new Map();
    this.rootKey = null;
  }

  onmessage(msg) {
    const id = msg.id;

    const maybePromise = this._pendingCalls.get(id);

    if (!maybePromise) {
      throw new Error('A proxy get the same message twice...');
    }

    this._pendingCalls.delete(id);

    const [resolve, reject] = maybePromise;

    switch (msg.type) {
      case ProxyMessageKind.Error:
        return reject(msg.error);

      case ProxyMessageKind.GetPrincipalResponse:
      case ProxyMessageKind.CallResponse:
      case ProxyMessageKind.QueryResponse:
      case ProxyMessageKind.ReadStateResponse:
      case ProxyMessageKind.StatusResponse:
        return resolve(msg.response);

      default:
        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);
    }
  }

  async getPrincipal() {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind.GetPrincipal
    }).then(principal => {
      if (typeof principal !== 'string') {
        throw new Error('Invalid principal received.');
      }

      return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__["Principal"].fromText(principal);
    });
  }

  readState(canisterId, fields) {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind.ReadState,
      args: [canisterId.toString(), fields]
    });
  }

  call(canisterId, fields) {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind.Call,
      args: [canisterId.toString(), fields]
    });
  }

  status() {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind.Status
    });
  }

  query(canisterId, fields) {
    return this._sendAndWait({
      id: this._nextId++,
      type: ProxyMessageKind.Query,
      args: [canisterId.toString(), fields]
    });
  }

  async _sendAndWait(msg) {
    return new Promise((resolve, reject) => {
      this._pendingCalls.set(msg.id, [resolve, reject]);

      this._backend(msg);
    });
  }

  async fetchRootKey() {
    // Hex-encoded version of the replica root key
    const rootKey = (await this.status()).root_key;
    this.rootKey = rootKey;
    return rootKey;
  }

}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/auth.js":
/*!*****************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/auth.js ***!
  \*****************************************************/
/*! exports provided: SignIdentity, AnonymousIdentity, createIdentityDescriptor, isIdentityDescriptor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignIdentity", function() { return SignIdentity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnonymousIdentity", function() { return AnonymousIdentity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createIdentityDescriptor", function() { return createIdentityDescriptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIdentityDescriptor", function() { return isIdentityDescriptor; });
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request_id */ "./node_modules/@dfinity/agent/lib/esm/request_id.js");
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};





const domainSeparator = buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(new TextEncoder().encode('\x0Aic-request'));
/**
 * An Identity that can sign blobs.
 */

class SignIdentity {
  /**
   * Get the principal represented by this identity. Normally should be a
   * `Principal.selfAuthenticating()`.
   */
  getPrincipal() {
    if (!this._principal) {
      this._principal = _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].selfAuthenticating(this.getPublicKey().toDer());
    }

    return this._principal;
  }
  /**
   * Transform a request into a signed version of the request. This is done last
   * after the transforms on the body of a request. The returned object can be
   * anything, but must be serializable to CBOR.
   * @param request - internet computer request to transform
   */


  async transformRequest(request) {
    const {
      body
    } = request,
          fields = __rest(request, ["body"]);

    const requestId = await Object(_request_id__WEBPACK_IMPORTED_MODULE_2__["requestIdOf"])(body);
    return Object.assign(Object.assign({}, fields), {
      body: {
        content: body,
        sender_pubkey: this.getPublicKey().toDer(),
        sender_sig: await this.sign(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromBuffer"])(buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].concat([domainSeparator, requestId])))
      }
    });
  }

}
class AnonymousIdentity {
  getPrincipal() {
    return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].anonymous();
  }

  async transformRequest(request) {
    return Object.assign(Object.assign({}, request), {
      body: {
        content: request.body
      }
    });
  }

}
/**
 * Create an IdentityDescriptor from a @dfinity/authentication Identity
 * @param identity - identity describe in returned descriptor
 */

function createIdentityDescriptor(identity) {
  const identityIndicator = 'getPublicKey' in identity ? {
    type: 'PublicKeyIdentity',
    publicKey: identity.getPublicKey().toDer().toString('hex')
  } : {
    type: 'AnonymousIdentity'
  };
  return identityIndicator;
}
/**
 * Type Guard for whether the unknown value is an IdentityDescriptor or not.
 * @param value - value to type guard
 */

function isIdentityDescriptor(value) {
  var _a, _b;

  switch ((_a = value) === null || _a === void 0 ? void 0 : _a.type) {
    case 'AnonymousIdentity':
      return true;

    case 'PublicKeyIdentity':
      if (typeof ((_b = value) === null || _b === void 0 ? void 0 : _b.publicKey) !== 'string') {
        return false;
      }

      return true;
  }

  return false;
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/canisters/asset.js":
/*!****************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/canisters/asset.js ***!
  \****************************************************************/
/*! exports provided: createAssetCanisterActor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAssetCanisterActor", function() { return createAssetCanisterActor; });
/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../actor */ "./node_modules/@dfinity/agent/lib/esm/actor.js");
/* harmony import */ var _asset_idl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./asset_idl */ "./node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js");


/* tslint:enable */

/**
 * Create a management canister actor.
 * @param config
 */

function createAssetCanisterActor(config) {
  return _actor__WEBPACK_IMPORTED_MODULE_0__["Actor"].createActor(_asset_idl__WEBPACK_IMPORTED_MODULE_1__["default"], config);
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js":
/*!********************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/canisters/asset_idl.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * This file is generated from the candid for asset management.
 */

/* tslint:disable */
// @ts-ignore
/* harmony default export */ __webpack_exports__["default"] = (({
  IDL
}) => {
  return IDL.Service({
    retrieve: IDL.Func([IDL.Text], [IDL.Vec(IDL.Nat8)], ['query']),
    store: IDL.Func([IDL.Text, IDL.Vec(IDL.Nat8)], [], [])
  });
});

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/canisters/management.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/canisters/management.js ***!
  \*********************************************************************/
/*! exports provided: getManagementCanister */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getManagementCanister", function() { return getManagementCanister; });
/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../actor */ "./node_modules/@dfinity/agent/lib/esm/actor.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _management_idl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./management_idl */ "./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js");



/* tslint:enable */

/**
 * Create a management canister actor.
 * @param config
 */

function getManagementCanister(config) {
  function transform(methodName, args, callConfig) {
    const first = args[0];
    let effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].fromHex('');

    if (first && typeof first === 'object' && first.canister_id) {
      effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].from(first.canister_id);
    }

    return {
      effectiveCanisterId
    };
  }

  return _actor__WEBPACK_IMPORTED_MODULE_0__["Actor"].createActor(_management_idl__WEBPACK_IMPORTED_MODULE_2__["default"], Object.assign(Object.assign(Object.assign({}, config), {
    canisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].fromHex('')
  }), {
    callTransform: transform,
    queryTransform: transform
  }));
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/canisters/management_idl.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * This file is generated from the candid for asset management.
 */

/* tslint:disable */
// @ts-ignore
/* harmony default export */ __webpack_exports__["default"] = (({
  IDL
}) => {
  const canister_id = IDL.Principal;
  const wasm_module = IDL.Vec(IDL.Nat8);
  const CanisterSettings = IDL.Record({
    compute_allocation: IDL.Opt(IDL.Nat),
    memory_allocation: IDL.Opt(IDL.Nat)
  });
  return IDL.Service({
    provisional_create_canister_with_cycles: IDL.Func([IDL.Record({
      amount: IDL.Opt(IDL.Nat),
      settings: IDL.Opt(CanisterSettings)
    })], [IDL.Record({
      canister_id: canister_id
    })], []),
    create_canister: IDL.Func([], [IDL.Record({
      canister_id: canister_id
    })], []),
    install_code: IDL.Func([IDL.Record({
      mode: IDL.Variant({
        install: IDL.Null,
        reinstall: IDL.Null,
        upgrade: IDL.Null
      }),
      canister_id: canister_id,
      wasm_module: wasm_module,
      arg: IDL.Vec(IDL.Nat8)
    })], [], []),
    set_controller: IDL.Func([IDL.Record({
      canister_id: canister_id,
      new_controller: IDL.Principal
    })], [], [])
  });
});

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/cbor.js":
/*!*****************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/cbor.js ***!
  \*****************************************************/
/*! exports provided: CborTag, encode, decode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CborTag", function() { return CborTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encode", function() { return encode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decode", function() { return decode; });
/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! borc */ "./node_modules/borc/src/index.js");
/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(borc__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! simple-cbor */ "./node_modules/simple-cbor/src/index.js");
/* harmony import */ var simple_cbor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(simple_cbor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
// tslint:disable:max-classes-per-file
// This file is based on:
// tslint:disable-next-line: max-line-length
// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses




 // We are using hansl/simple-cbor for CBOR serialization, to avoid issues with
// encoding the uint64 values that the HTTP handler of the client expects for
// canister IDs. However, simple-cbor does not yet provide deserialization so
// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR
// decoder.

class PrincipalEncoder {
  get name() {
    return 'Principal';
  }

  get priority() {
    return 0;
  }

  match(value) {
    return value && value._isPrincipal === true;
  }

  encode(v) {
    return simple_cbor__WEBPACK_IMPORTED_MODULE_2__["value"].bytes(v.toUint8Array().buffer);
  }

}

class BufferEncoder {
  get name() {
    return 'Buffer';
  }

  get priority() {
    return 1;
  }

  match(value) {
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].isBuffer(value);
  }

  encode(v) {
    return simple_cbor__WEBPACK_IMPORTED_MODULE_2__["value"].bytes(new Uint8Array(v));
  }

}

class BigIntEncoder {
  get name() {
    return 'BigInt';
  }

  get priority() {
    return 1;
  }

  match(value) {
    return typeof value === `bigint`;
  }

  encode(v) {
    // Always use a bigint encoding.
    if (v > BigInt(0)) {
      return simple_cbor__WEBPACK_IMPORTED_MODULE_2__["value"].tagged(2, simple_cbor__WEBPACK_IMPORTED_MODULE_2__["value"].bytes(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromHex"])(v.toString(16))));
    } else {
      return simple_cbor__WEBPACK_IMPORTED_MODULE_2__["value"].tagged(3, simple_cbor__WEBPACK_IMPORTED_MODULE_2__["value"].bytes(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromHex"])((BigInt('-1') * v).toString(16))));
    }
  }

}

const serializer = simple_cbor__WEBPACK_IMPORTED_MODULE_2__["SelfDescribeCborSerializer"].withDefaultEncoders(true);
serializer.addEncoder(new PrincipalEncoder());
serializer.addEncoder(new BufferEncoder());
serializer.addEncoder(new BigIntEncoder());
var CborTag;

(function (CborTag) {
  CborTag[CborTag["Uint64LittleEndian"] = 71] = "Uint64LittleEndian";
  CborTag[CborTag["Semantic"] = 55799] = "Semantic";
})(CborTag || (CborTag = {}));

const encode = value => {
  return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromBuffer"])(buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(serializer.serialize(value)));
};

function decodePositiveBigInt(buf) {
  const len = buf.byteLength;
  let res = BigInt(0);

  for (let i = 0; i < len; i++) {
    // tslint:disable-next-line:no-bitwise
    res = res * BigInt(0x100) + BigInt(buf[i]);
  }

  return res;
}

function decode(input) {
  const decoder = new borc__WEBPACK_IMPORTED_MODULE_0___default.a.Decoder({
    size: input.byteLength,
    tags: {
      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).
      2: val => decodePositiveBigInt(val),
      3: val => -decodePositiveBigInt(val),
      [CborTag.Semantic]: value => value
    }
  });
  const result = decoder.decodeFirst(input);
  return result;
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/certificate.js":
/*!************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/certificate.js ***!
  \************************************************************/
/*! exports provided: UnverifiedCertificateError, hashTreeToString, Certificate, reconstruct, lookupPathEx, lookup_path */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnverifiedCertificateError", function() { return UnverifiedCertificateError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hashTreeToString", function() { return hashTreeToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Certificate", function() { return Certificate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reconstruct", function() { return reconstruct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookupPathEx", function() { return lookupPathEx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookup_path", function() { return lookup_path; });
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ "./node_modules/@dfinity/agent/lib/esm/agent/index.js");
/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cbor */ "./node_modules/@dfinity/agent/lib/esm/cbor.js");
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ "./node_modules/@dfinity/agent/lib/esm/errors.js");
/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request_id */ "./node_modules/@dfinity/agent/lib/esm/request_id.js");
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var _utils_bls__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/bls */ "./node_modules/@dfinity/agent/lib/esm/utils/bls.js");







/**
 * A certificate needs to be verified (using {@link Certificate.prototype.verify})
 * before it can be used.
 */

class UnverifiedCertificateError extends _errors__WEBPACK_IMPORTED_MODULE_3__["AgentError"] {
  constructor() {
    super(`Cannot lookup unverified certificate. Call 'verify()' first.`);
  }

}
/**
 * Make a human readable string out of a hash tree.
 * @param tree
 */

function hashTreeToString(tree) {
  const indent = s => s.split('\n').map(x => '  ' + x).join('\n');

  function labelToString(label) {
    const decoder = new TextDecoder(undefined, {
      fatal: true
    });

    try {
      return JSON.stringify(decoder.decode(label));
    } catch (e) {
      return `data(...${label.byteLength} bytes)`;
    }
  }

  switch (tree[0]) {
    case 0:
      return '()';

    case 1:
      {
        const left = hashTreeToString(tree[1]);
        const right = hashTreeToString(tree[2]);
        return `sub(\n left:\n${indent(left)}\n---\n right:\n${indent(right)}\n)`;
      }

    case 2:
      {
        const label = labelToString(tree[1]);
        const sub = hashTreeToString(tree[2]);
        return `label(\n label:\n${indent(label)}\n sub:\n${indent(sub)}\n)`;
      }

    case 3:
      {
        return `leaf(...${tree[1].byteLength} bytes)`;
      }

    case 4:
      {
        return `pruned(${Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobToHex"])(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobFromUint8Array"])(new Uint8Array(tree[1])))}`;
      }

    default:
      {
        return `unknown(${JSON.stringify(tree[0])})`;
      }
  }
}

function isBufferEqual(a, b) {
  if (a.length !== b.length) {
    return false;
  }

  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
}

class Certificate {
  constructor(response, _agent = Object(_agent__WEBPACK_IMPORTED_MODULE_1__["getDefaultAgent"])()) {
    this._agent = _agent;
    this.verified = false;
    this._rootKey = null;
    this.cert = _cbor__WEBPACK_IMPORTED_MODULE_2__["decode"](response.certificate);
  }

  lookupEx(path) {
    this.checkState();
    return lookupPathEx(path, this.cert.tree);
  }

  lookup(path) {
    this.checkState();
    return lookup_path(path, this.cert.tree);
  }

  async verify() {
    const rootHash = await reconstruct(this.cert.tree);
    const derKey = await this._checkDelegation(this.cert.delegation);
    const sig = this.cert.signature;
    const key = extractDER(derKey);
    const msg = buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].concat([domain_sep('ic-state-root'), rootHash]);
    const res = await Object(_utils_bls__WEBPACK_IMPORTED_MODULE_6__["blsVerify"])(key, sig, msg);
    this.verified = res;
    return res;
  }

  checkState() {
    if (!this.verified) {
      throw new UnverifiedCertificateError();
    }
  }

  async _checkDelegation(d) {
    if (!d) {
      if (!this._rootKey) {
        if (this._agent.rootKey) {
          this._rootKey = this._agent.rootKey;
          return this._rootKey;
        }

        throw new Error(`Agent does not have a rootKey. Do you need to call 'fetchRootKey'?`);
      }

      return this._rootKey;
    }

    const cert = new Certificate(d, this._agent);

    if (!(await cert.verify())) {
      throw new Error('fail to verify delegation certificate');
    }

    const lookup = cert.lookupEx(['subnet', d.subnet_id, 'public_key']);

    if (!lookup) {
      throw new Error(`Could not find subnet key for subnet 0x${d.subnet_id.toString('hex')}`);
    }

    return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(lookup);
  }

}
const DER_PREFIX = buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from('308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100', 'hex');
const KEY_LENGTH = 96;

function extractDER(buf) {
  const expectedLength = DER_PREFIX.length + KEY_LENGTH;

  if (buf.length !== expectedLength) {
    throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);
  }

  const prefix = buf.slice(0, DER_PREFIX.length);

  if (!isBufferEqual(prefix, DER_PREFIX)) {
    throw new TypeError(`BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`);
  }

  return buf.slice(DER_PREFIX.length);
}
/**
 * @param t
 */


async function reconstruct(t) {
  switch (t[0]) {
    case 0
    /* Empty */
    :
      return Object(_request_id__WEBPACK_IMPORTED_MODULE_4__["hash"])(domain_sep('ic-hashtree-empty'));

    case 4
    /* Pruned */
    :
      return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(t[1]);

    case 3
    /* Leaf */
    :
      return Object(_request_id__WEBPACK_IMPORTED_MODULE_4__["hash"])(buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].concat([domain_sep('ic-hashtree-leaf'), buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(t[1])]));

    case 2
    /* Labeled */
    :
      return Object(_request_id__WEBPACK_IMPORTED_MODULE_4__["hash"])(buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].concat([domain_sep('ic-hashtree-labeled'), buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(t[1]), buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(await reconstruct(t[2]))]));

    case 1
    /* Fork */
    :
      return Object(_request_id__WEBPACK_IMPORTED_MODULE_4__["hash"])(buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].concat([domain_sep('ic-hashtree-fork'), buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(await reconstruct(t[1])), buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(await reconstruct(t[2]))]));

    default:
      throw new Error('unreachable');
  }
}

function domain_sep(s) {
  const buf = buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].alloc(1);
  buf.writeUInt8(s.length, 0);
  return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].concat([buf, buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(s)]);
}
/**
 *
 * @param path
 * @param tree
 */


function lookupPathEx(path, tree) {
  const maybeReturn = lookup_path(path.map(p => {
    if (typeof p === 'string') {
      return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobFromText"])(p);
    } else {
      return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobFromUint8Array"])(new Uint8Array(p));
    }
  }), tree);
  return maybeReturn && Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobToUint8Array"])(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__["blobFromBuffer"])(maybeReturn));
}
/**
 * @param path
 * @param tree
 */

function lookup_path(path, tree) {
  if (path.length === 0) {
    switch (tree[0]) {
      case 3
      /* Leaf */
      :
        {
          return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(tree[1]);
        }

      default:
        {
          return undefined;
        }
    }
  }

  const t = find_label(path[0], flatten_forks(tree));

  if (t) {
    return lookup_path(path.slice(1), t);
  }
}

function flatten_forks(t) {
  switch (t[0]) {
    case 0
    /* Empty */
    :
      return [];

    case 1
    /* Fork */
    :
      return flatten_forks(t[1]).concat(flatten_forks(t[2]));

    default:
      return [t];
  }
}

function find_label(l, trees) {
  if (trees.length === 0) {
    return undefined;
  }

  for (const t of trees) {
    if (t[0] === 2
    /* Labeled */
    ) {
      const p = buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(t[1]);

      if (isBufferEqual(l, p)) {
        return t[2];
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/errors.js ***!
  \*******************************************************/
/*! exports provided: AgentError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentError", function() { return AgentError; });
/**
 * An error that happens in the Agent. This is the root of all errors and should be used
 * everywhere in the Agent code (this package).
 *
 * @todo https://github.com/dfinity/agent-js/issues/420
 */
class AgentError extends Error {}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/index.js ***!
  \******************************************************/
/*! exports provided: ActorCallError, QueryCallRejectedError, UpdateCallRejectedError, CanisterInstallMode, Actor, ReplicaRejectCode, Expiry, makeNonceTransform, makeExpiryTransform, RequestStatusResponseStatus, HttpAgent, ProxyMessageKind, ProxyStubAgent, ProxyAgent, getDefaultAgent, SignIdentity, AnonymousIdentity, createIdentityDescriptor, isIdentityDescriptor, UnverifiedCertificateError, hashTreeToString, Certificate, reconstruct, lookupPathEx, lookup_path, SubmitRequestType, createAssetCanisterActor, getManagementCanister, toHex, hash, requestIdOf, verify, blsVerify, polling, Cbor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actor */ "./node_modules/@dfinity/agent/lib/esm/actor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActorCallError", function() { return _actor__WEBPACK_IMPORTED_MODULE_0__["ActorCallError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCallRejectedError", function() { return _actor__WEBPACK_IMPORTED_MODULE_0__["QueryCallRejectedError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdateCallRejectedError", function() { return _actor__WEBPACK_IMPORTED_MODULE_0__["UpdateCallRejectedError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CanisterInstallMode", function() { return _actor__WEBPACK_IMPORTED_MODULE_0__["CanisterInstallMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Actor", function() { return _actor__WEBPACK_IMPORTED_MODULE_0__["Actor"]; });

/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./agent */ "./node_modules/@dfinity/agent/lib/esm/agent/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReplicaRejectCode", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["ReplicaRejectCode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Expiry", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["Expiry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeNonceTransform", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["makeNonceTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeExpiryTransform", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["makeExpiryTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestStatusResponseStatus", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["RequestStatusResponseStatus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpAgent", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["HttpAgent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyMessageKind", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["ProxyMessageKind"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyStubAgent", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["ProxyStubAgent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyAgent", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["ProxyAgent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDefaultAgent", function() { return _agent__WEBPACK_IMPORTED_MODULE_1__["getDefaultAgent"]; });

/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth */ "./node_modules/@dfinity/agent/lib/esm/auth.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignIdentity", function() { return _auth__WEBPACK_IMPORTED_MODULE_2__["SignIdentity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnonymousIdentity", function() { return _auth__WEBPACK_IMPORTED_MODULE_2__["AnonymousIdentity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createIdentityDescriptor", function() { return _auth__WEBPACK_IMPORTED_MODULE_2__["createIdentityDescriptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isIdentityDescriptor", function() { return _auth__WEBPACK_IMPORTED_MODULE_2__["isIdentityDescriptor"]; });

/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./certificate */ "./node_modules/@dfinity/agent/lib/esm/certificate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnverifiedCertificateError", function() { return _certificate__WEBPACK_IMPORTED_MODULE_3__["UnverifiedCertificateError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hashTreeToString", function() { return _certificate__WEBPACK_IMPORTED_MODULE_3__["hashTreeToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Certificate", function() { return _certificate__WEBPACK_IMPORTED_MODULE_3__["Certificate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reconstruct", function() { return _certificate__WEBPACK_IMPORTED_MODULE_3__["reconstruct"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lookupPathEx", function() { return _certificate__WEBPACK_IMPORTED_MODULE_3__["lookupPathEx"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lookup_path", function() { return _certificate__WEBPACK_IMPORTED_MODULE_3__["lookup_path"]; });

/* harmony import */ var _agent_http_transforms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./agent/http/transforms */ "./node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js");
/* empty/unused harmony star reexport *//* harmony import */ var _agent_http_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./agent/http/types */ "./node_modules/@dfinity/agent/lib/esm/agent/http/types.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SubmitRequestType", function() { return _agent_http_types__WEBPACK_IMPORTED_MODULE_5__["SubmitRequestType"]; });

/* harmony import */ var _canisters_asset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./canisters/asset */ "./node_modules/@dfinity/agent/lib/esm/canisters/asset.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createAssetCanisterActor", function() { return _canisters_asset__WEBPACK_IMPORTED_MODULE_6__["createAssetCanisterActor"]; });

/* harmony import */ var _canisters_management__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./canisters/management */ "./node_modules/@dfinity/agent/lib/esm/canisters/management.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getManagementCanister", function() { return _canisters_management__WEBPACK_IMPORTED_MODULE_7__["getManagementCanister"]; });

/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./request_id */ "./node_modules/@dfinity/agent/lib/esm/request_id.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toHex", function() { return _request_id__WEBPACK_IMPORTED_MODULE_8__["toHex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hash", function() { return _request_id__WEBPACK_IMPORTED_MODULE_8__["hash"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "requestIdOf", function() { return _request_id__WEBPACK_IMPORTED_MODULE_8__["requestIdOf"]; });

/* harmony import */ var _utils_bls__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/bls */ "./node_modules/@dfinity/agent/lib/esm/utils/bls.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "verify", function() { return _utils_bls__WEBPACK_IMPORTED_MODULE_9__["verify"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blsVerify", function() { return _utils_bls__WEBPACK_IMPORTED_MODULE_9__["blsVerify"]; });

/* harmony import */ var _polling__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./polling */ "./node_modules/@dfinity/agent/lib/esm/polling/index.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "polling", function() { return _polling__WEBPACK_IMPORTED_MODULE_10__; });
/* harmony import */ var _cbor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cbor */ "./node_modules/@dfinity/agent/lib/esm/cbor.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "Cbor", function() { return _cbor__WEBPACK_IMPORTED_MODULE_11__; });















/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/polling/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/polling/index.js ***!
  \**************************************************************/
/*! exports provided: strategy, defaultStrategy, pollForResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pollForResponse", function() { return pollForResponse; });
/* harmony import */ var _agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../agent */ "./node_modules/@dfinity/agent/lib/esm/agent/index.js");
/* harmony import */ var _certificate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../certificate */ "./node_modules/@dfinity/agent/lib/esm/certificate.js");
/* harmony import */ var _request_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../request_id */ "./node_modules/@dfinity/agent/lib/esm/request_id.js");
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var _strategy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./strategy */ "./node_modules/@dfinity/agent/lib/esm/polling/strategy.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "strategy", function() { return _strategy__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultStrategy", function() { return _strategy__WEBPACK_IMPORTED_MODULE_4__["defaultStrategy"]; });








/**
 * Polls the IC to check the status of the given request then
 * returns the response bytes once the request has been processed.
 * @param agent The agent to use to poll read_state.
 * @param canisterId The effective canister ID.
 * @param requestId The Request ID to poll status for.
 * @param strategy A polling strategy.
 */

async function pollForResponse(agent, canisterId, requestId, strategy) {
  const path = [Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromText"])('request_status'), requestId];
  const state = await agent.readState(canisterId, {
    paths: [path]
  });
  const cert = new _certificate__WEBPACK_IMPORTED_MODULE_1__["Certificate"](state, agent);
  const verified = await cert.verify();

  if (!verified) {
    throw new Error('Fail to verify certificate');
  }

  const maybeBuf = cert.lookup([...path, Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromText"])('status')]);
  let status;

  if (typeof maybeBuf === 'undefined') {
    // Missing requestId means we need to wait
    status = _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Unknown;
  } else {
    status = maybeBuf.toString();
  }

  switch (status) {
    case _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Replied:
      {
        return cert.lookup([...path, Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromText"])('reply')]);
      }

    case _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Received:
    case _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Unknown:
    case _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Processing:
      // Execute the polling strategy, then retry.
      await strategy(canisterId, requestId, status);
      return pollForResponse(agent, canisterId, requestId, strategy);

    case _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Rejected:
      {
        const rejectCode = cert.lookup([...path, Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromText"])('reject_code')]).toString();
        const rejectMessage = cert.lookup([...path, Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromText"])('reject_message')]).toString();
        throw new Error(`Call was rejected:\n` + `  Request ID: ${Object(_request_id__WEBPACK_IMPORTED_MODULE_2__["toHex"])(requestId)}\n` + `  Reject code: ${rejectCode}\n` + `  Reject text: ${rejectMessage}\n`);
      }

    case _agent__WEBPACK_IMPORTED_MODULE_0__["RequestStatusResponseStatus"].Done:
      // This is _technically_ not an error, but we still didn't see the `Replied` status so
      // we don't know the result and cannot decode it.
      throw new Error(`Call was marked as done but we never saw the reply:\n` + `  Request ID: ${Object(_request_id__WEBPACK_IMPORTED_MODULE_2__["toHex"])(requestId)}\n`);
  }

  throw new Error('unreachable');
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/polling/strategy.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/polling/strategy.js ***!
  \*****************************************************************/
/*! exports provided: defaultStrategy, once, conditionalDelay, maxAttempts, throttle, timeout, backoff, chain */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultStrategy", function() { return defaultStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "once", function() { return once; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conditionalDelay", function() { return conditionalDelay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxAttempts", function() { return maxAttempts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeout", function() { return timeout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "backoff", function() { return backoff; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function() { return chain; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ "./node_modules/@dfinity/agent/lib/esm/index.js");

const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;
/**
 * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second
 * with an exponential backoff factor of 1.2. Timeout after 5 minutes.
 */

function defaultStrategy() {
  return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));
}
/**
 * Predicate that returns true once.
 */

function once() {
  let first = true;
  return async () => {
    if (first) {
      first = false;
      return true;
    }

    return false;
  };
}
/**
 * Delay the polling once.
 * @param condition A predicate that indicates when to delay.
 * @param timeInMsec The amount of time to delay.
 */

function conditionalDelay(condition, timeInMsec) {
  return async (canisterId, requestId, status) => {
    if (await condition(canisterId, requestId, status)) {
      return new Promise(resolve => setTimeout(resolve, timeInMsec));
    }
  };
}
/**
 * Error out after a maximum number of polling has been done.
 * @param count The maximum attempts to poll.
 */

function maxAttempts(count) {
  let attempts = count;
  return async (canisterId, requestId, status) => {
    if (--attempts <= 0) {
      throw new Error(`Failed to retrieve a reply for request after ${count} attempts:\n` + `  Request ID: ${Object(___WEBPACK_IMPORTED_MODULE_0__["toHex"])(requestId)}\n` + `  Request status: ${status}\n`);
    }
  };
}
/**
 * Throttle polling.
 * @param throttleInMsec Amount in millisecond to wait between each polling.
 */

function throttle(throttleInMsec) {
  return () => new Promise(resolve => setTimeout(resolve, throttleInMsec));
}
/**
 * Reject a call after a certain amount of time.
 * @param timeInMsec Time in milliseconds before the polling should be rejected.
 */

function timeout(timeInMsec) {
  const end = Date.now() + timeInMsec;
  return async (canisterId, requestId, status) => {
    if (Date.now() > end) {
      throw new Error(`Request timed out after ${timeInMsec} msec:\n` + `  Request ID: ${Object(___WEBPACK_IMPORTED_MODULE_0__["toHex"])(requestId)}\n` + `  Request status: ${status}\n`);
    }
  };
}
/**
 * A strategy that throttle, but using an exponential backoff strategy.
 * @param startingThrottleInMsec The throttle in milliseconds to start with.
 * @param backoffFactor The factor to multiple the throttle time between every poll. For
 *   example if using 2, the throttle will double between every run.
 */

function backoff(startingThrottleInMsec, backoffFactor) {
  let currentThrottling = startingThrottleInMsec;
  return () => new Promise(resolve => setTimeout(() => {
    currentThrottling *= backoffFactor;
    resolve();
  }, currentThrottling));
}
/**
 * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,
 * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.
 * @param strategies A strategy list to chain.
 */

function chain(...strategies) {
  return async (canisterId, requestId, status) => {
    for (const a of strategies) {
      await a(canisterId, requestId, status);
    }
  };
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/request_id.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/request_id.js ***!
  \***********************************************************/
/*! exports provided: toHex, hash, requestIdOf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toHex", function() { return toHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hash", function() { return hash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestIdOf", function() { return requestIdOf; });
/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ "./node_modules/js-sha256/src/sha256.js");
/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! borc */ "./node_modules/borc/src/index.js");
/* harmony import */ var borc__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(borc__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");





/**
 * get RequestId as hex-encoded blob.
 * @param requestId - RequestId to hex
 */

function toHex(requestId) {
  return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobToHex"])(requestId);
}
/**
 * sha256 hash the provided Buffer
 * @param data - input to hash function
 */

function hash(data) {
  const hashed = js_sha256__WEBPACK_IMPORTED_MODULE_0__["sha256"].create().update(data).arrayBuffer();
  return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromUint8Array"])(new Uint8Array(hashed));
}

function hashValue(value) {
  if (value instanceof borc__WEBPACK_IMPORTED_MODULE_1___default.a.Tagged) {
    return hashValue(value.value);
  } else if (typeof value === 'string') {
    return hashString(value);
  } else if (typeof value === 'number') {
    return hash(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["lebEncode"])(value));
  } else if (buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].isBuffer(value)) {
    return hash(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromUint8Array"])(new Uint8Array(value)));
  } else if (value instanceof Uint8Array || value instanceof ArrayBuffer) {
    return hash(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromUint8Array"])(new Uint8Array(value)));
  } else if (Array.isArray(value)) {
    const vals = value.map(hashValue);
    return hash(buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].concat(vals));
  } else if (value instanceof _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__["Principal"]) {
    return hash(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromUint8Array"])(value.toUint8Array()));
  } else if (typeof value === 'object' && value !== null && typeof value.toHash === 'function') {
    return hashValue(value.toHash()); // TODO This should be move to a specific async method as the webauthn flow required
    // the flow to be synchronous to ensure Safari touch id works.
    // } else if (value instanceof Promise) {
    //   return value.then(x => hashValue(x));
  } else if (typeof value === 'bigint') {
    // Do this check much later than the other bigint check because this one is much less
    // type-safe.
    // So we want to try all the high-assurance type guards before this 'probable' one.
    return hash(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["lebEncode"])(value));
  }

  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {
    // include so logs/callers can understand the confusing value.
    // (when stringified in error message, prototype info is lost)
    value
  });
}

const hashString = value => {
  const encoder = new TextEncoder();
  const encoded = encoder.encode(value);
  return hash(buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].from(encoded));
};
/**
 * Concatenate many blobs.
 * @param bs - blobs to concatenate
 */


function concat(bs) {
  return Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_3__["blobFromBuffer"])(buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].concat(bs));
}
/**
 * Get the RequestId of the provided ic-ref request.
 * RequestId is the result of the representation-independent-hash function.
 * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map
 * @param request - ic-ref request to hash into RequestId
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function requestIdOf(request) {
  const hashed = Object.entries(request).filter(([, value]) => value !== undefined).map(([key, value]) => {
    const hashedKey = hashString(key);
    const hashedValue = hashValue(value);
    return [hashedKey, hashedValue];
  });
  const traversed = hashed;
  const sorted = traversed.sort(([k1], [k2]) => {
    return buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].compare(buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].from(k1), buffer___WEBPACK_IMPORTED_MODULE_2__["Buffer"].from(k2));
  });
  const concatenated = concat(sorted.map(concat));
  const requestId = hash(concatenated);
  return requestId;
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/utils/bls.js":
/*!**********************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/utils/bls.js ***!
  \**********************************************************/
/*! exports provided: verify, blsVerify */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verify", function() { return verify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blsVerify", function() { return blsVerify; });
/* harmony import */ var _vendor_bls_bls__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/bls/bls */ "./node_modules/@dfinity/agent/lib/esm/vendor/bls/bls.js");

let verify;
/**
 *
 * @param pk primary key: Uint8Array
 * @param sig signature: Uint8Array
 * @param msg message: Uint8Array
 * @returns Promise resolving a boolean
 */

async function blsVerify(pk, sig, msg) {
  if (!verify) {
    await Object(_vendor_bls_bls__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (Object(_vendor_bls_bls__WEBPACK_IMPORTED_MODULE_0__["bls_init"])() !== 0) {
      throw new Error('Cannot initialize BLS');
    }

    verify = (pk1, sig1, msg1) => {
      // Reorder things from what the WASM expects (sig, m, w).
      return Object(_vendor_bls_bls__WEBPACK_IMPORTED_MODULE_0__["bls_verify"])(sig1, msg1, pk1) === 0;
    };
  }

  return verify(pk, sig, msg);
}

/***/ }),

/***/ "./node_modules/@dfinity/agent/lib/esm/vendor/bls/bls.js":
/*!***************************************************************!*\
  !*** ./node_modules/@dfinity/agent/lib/esm/vendor/bls/bls.js ***!
  \***************************************************************/
/*! exports provided: bls_init, bls_verify, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bls_init", function() { return bls_init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bls_verify", function() { return bls_verify; });
/* harmony import */ var base64_arraybuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64-arraybuffer */ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js");
/* harmony import */ var base64_arraybuffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(base64_arraybuffer__WEBPACK_IMPORTED_MODULE_0__);

/* tslint:disable */

/* eslint-disable */

let wasm; // This WASM is generated from the BLS Rust code of the Agent RS (see
// http://github.com/dfinity/agent-rs/)
// Once the WASM is compiled, simply base64 encode it and include it in this string.

const wasmBytesBase64 = `
    AGFzbQEAAAABXg9gAn9/AGABfwBgA39/fwBgAn9/AX9gAX8Bf2ADf39/AX9gBH9/f38AYAV/f39/fwBgBn9/f39/fwF/
    YAAAYAZ/f39/f38AYAV/fn5+fgBgAAF/YAF/AX5gAn9/AX4DvAG6AQgEAAEAAAABAgEDAAAMAAACAQEKAQAHBgEAAQEA
    AgcCAgABAgAGAAgOBAEBBAAAAQALAQkAAwMAAQQBAAICAAIBAQEBAQEGAQACAQEEAAECAQEABQMBAQMEAwQCAwAAAAEA
    AAAAAAEFAQEAAAACAQIAAQMAAQAGBAACAgMEAAAAAAAGAAQABAQEBAAAAwIAAgACAAEBAAAAAQEBAAEAAAAAAgAAAQAB
    AQEBAQEBAQEBAQIBAAAAAQ0AAQQFAXABBQUFAwEAEQYJAX8BQYCAwAALBzYEBm1lbW9yeQIACGJsc19pbml0AA0KYmxz
    X3ZlcmlmeQAnEV9fd2JpbmRnZW5fbWFsbG9jAHwJDQEAQQELBLgBCrkBtwEKiO8CugGXVQIQfwV+IwBB4OEAayIGJABB
    KxABIgkEQCAJQfSgwABBKxBnIQwDQCAHQStHBEAgByAMaiIJQV9BfyAJLQAAIglBn39qQf8BcUEaSRsgCXE6AAAgB0EB
    aiEHDAELC0EAIQcgBkGoA2pBOBByGiAGQQE2AuADIAZB6ANqQTgQciEPIAZBoARqQQE2AgAgBkGoBmpBoKfAABBfIAZB
    qAZqECkhCSAGQbgVakGAAhByGiAGQdjbAGpBgAEQchogBkGbI2pBgQIQciENIAZBsAxqQcAAEHIaIAZByM8AakHAABBy
    GiAGQdDVAGpBwAAQchogBkEAOgCaIyAGIAlB/wBqIhBBA3ZBAWoiCkEBdCILOgCZIyAGIApBB3Y6AJgjIAtBf2pBBXYi
    CEEBaiERA0AgB0ErRwRAIAcgDWogByAMai0AADoAACAHQQFqIQcMAQsLIAZBKzoAxiMgBkEgaiAGQZgjakEvQdinwAAQ
    ggEgBkGwDGpBwAAgAiADIAYoAiAgBigCJBATQQAhDUEAIAtrIRIgBkGZI2ohE0EBIQNBACEJA0ACQCANIAMgEUtyRQRA
    IAMgCEshDSADIAMgCE1qIQJBACEHA0AgB0EgRgRAIAYgAzoAmCNBACEHA0AgB0ErRwRAIAcgE2ogByAMai0AADoAACAH
    QQFqIQcMAQsLIAZBKzoAxCMgBkEYaiAGQZgjakEtQeinwAAQggFBACEHIAZByM8AakEAIAZB0NUAakEgIAYoAhggBigC
    HBATIAkgEmohAyAJIAlBgAIgCUGAAksbIg5rIRQgBkG4FWogCWohFQJAA0AgB0EgRg0FIAcgFGpFDQEgByAVaiAGQcjP
    AGogB2otAAA6AAAgAyAHQQFqIgdqDQALIAIhAyALIQkMBQsgDkGAAkH4p8AAEDwABSAGQcjPAGogB2oiDiAOLQAAIAZB
    sAxqIAdqLQAAcyIOOgAAIAZB0NUAaiAHaiAOOgAAIAdBAWohBwwBCwALAAsgEEGACEkhDUEAIQNBACEJA0ACQCAJQQJH
    BEAgCUEBaiELIAZBuBVqIANqIQJBACEHAkADQCAHIApGBEAgDQRAIAZByM8AakHwABByGiAGQdjbAGohCCAKIQcDQCAH
    BEAgBkHIzwBqQQgQLiAGIAYpA8hPIAgxAAB8NwPITyAHQX9qIQcgCEEBaiEIDAELCyAGQcjPAGoQRSAGQdDVAGogBkGo
    BmoQMCAGQZgjakHwABByGiAGQcjPAGogBkHQ1QBqEDZBAEgNBUEAIQIDQCAGQdDVAGpBARAuIAJBAWohAiAGQcjPAGog
    BkHQ1QBqEDZBf0oNAAsDQCACQQFIDQZBACEHA0AgB0HoAEYEQCAGIAYpA7hWQgGHNwO4VkEAIQcDQCAHQfAARwRAIAZB
    mCNqIAdqIAZByM8AaiAHaikDADcDACAHQQhqIQcMAQsLIAZBmCNqIAZB0NUAahBkIAZBmCNqEEUgBikDgCRCP4chF0EA
    IQcDQCAHQfAARwRAIAZByM8AaiAHaiIIIAZBmCNqIAdqKQMAIhYgCCkDAIUgF4MgFoU3AwAgB0EIaiEHDAELCyACQX9q
    IQIMAgUgBkHQ1QBqIAdqIgggCEEIaikDAEI5hkKAgICAgICAgAKDIAgpAwBCAYeENwMAIAdBCGohBwwBCwALAAsACyAK
    QYABQaChwAAQPQALIAMgB2oiCEH/AU0EQCAHQYABRg0CIAZB2NsAaiAHaiACIAdqLQAAOgAAIAdBAWohBwwBCwsgCEGA
    AkGwocAAEDwAC0GAAUGAAUHAocAAEDwACyAGQShqIAZBqANqEAIgBkG4EmogDxACIAZBKGogBkG4EmoQDCAGQegBakHo
    g8AAEF8CQAJAIAZB6AFqEFoNACAGQShqEIQBDQAgBkGIPWoQS0EAIQcgBkGIwwBqQTgQchogBkG4IWpBOBByGiAGQYjA
    AGoQSyAGQcjEAGoQSyAGQcjJAGoQSyAGQcjMAGoQSyAGQagGahBLIAZBsAxqEEsgBkHIzwBqEEsgBkHQ1QBqEEsgBkHY
    2wBqEEsgBkG4FWoQSyAGQZgjaiAGQcjJAGpBwAEQZxogBkHYJGogBkHIzABqQcABEGcaIAZBmCZqIAZBqAZqQcABEGca
    IAZB2CdqIAZBsAxqQcABEGcaIAZBmClqIAZByM8AakHAARBnGiAGQdgqaiAGQdDVAGpBwAEQZxogBkGYLGogBkHY2wBq
    QcABEGcaIAZB2C1qIAZBuBVqQcABEGcaIAZBuBVqQecAEHIaIAZBiMAAaiAGQShqEH8gBkGIwABqEBggBkGYI2ogBkEo
    ahB/A0AgB0HACkYEQCAGQbghaiAGQegBahBrIAYpA7ghIRcgBkG4IWpBARCdASAGQbghahBEIAYpA7ghIRYgBkGIwwBq
    IAZBuCFqEGsgBkGIwwBqQQEQnQEgBkGIwwBqEEQgBkG4IWogBkGIwwBqIBdCAoGnEE8gBkGIwABqIAZBKGogFkICgacQ
    bSAGQcjEAGogBkGIwABqEH8gBkG4IWoQKUEDaiIJQQJ2IgdBAWohAkEAIQgCQAJAAkADQAJAIAZBuCFqQQUQjAEhAyAC
    IAhGBEAgCUGYA0kNASACQecAQbCEwAAQPAALIAhB5wBGDQIgBkG4FWogCGogA0FwaiIDOgAAIAZBuCFqIANBGHRBGHUQ
    ngEgBkG4IWoQRCAGQbghakEEEDsgCEEBaiEIDAELCyAGQbgVaiACaiADOgAAIANBGHRBGHVBf2oiA0EBdiECIANBD0sN
    ASAGQYg9aiAGQZgjaiACQcABbGoQfwNAIAdBf0YEQCAGQYg9aiAGQcjEAGoQcyAGQZgjaiAGQYg9akHAARBnGgwICyAH
    QeYASw0DIAZBiMAAaiAGQZgjaiAGQbgVaiAHaiwAABAfIAdBf2ohByAGQYg9ahAYIAZBiD1qEBggBkGIPWoQGCAGQYg9
    ahAYIAZBiD1qIAZBiMAAahAMDAALAAtB5wBB5wBBoITAABA8AAsgAkEIQcCEwAAQPAALIAdB5wBB0ITAABA8AAUgBkHI
    xABqIAZBmCNqIAdqIgIQfyACQcABaiICIAZByMQAahB/IAIgBkGIwABqEAwgB0HAAWohBwwBCwALAAsgBkGYI2oQSwsgB
    kEoaiAGQZgjahB/IAZBKGoQRyAMEAlBACEHIAZBqAZqQTAQchogBkGwDGpBoKfAABBfAkACQAJAAkACQANAAkAgB0EwRg
    RAIAYgBi0AqAZBH3E6AKgGIAZByM8AaiAGQagGahBdIAENAUEAQQBB8ILAABA8AAsgASAHRg0CIAZBqAZqIAdqIAAgB2o
    tAAA6AAAgB0EBaiEHDAELC0EAIQcCQCAALAAAIgJBAE4EQCAAQTBqIQAgAUEwIAFBMEsbQVBqIQIDQCAHQTBGBEAgBkHY
    2wBqIAZBqAZqEF0gBkHoAWoQSyAGQegBaiAGQcjPAGoQtAEgBkGoAmoiACAGQdjbAGoQtAEgBkHoAmoQaSAGQegBahBEI
    AZBuBVqIAZB6AFqEE0gBkGYI2ogABCFASAGQZgjahADIAZBmCNqIAZBuBVqEFkNAyAGQegBahCUAQwDCyACIAdGDQQgBk
    GoBmogB2ogACAHai0AADoAACAHQQFqIQcMAAsACyAGQZgjahBLIAZB0NUAakE4EHIaIAZBATYCiFYgBkGYI2ogBkHIzwB
    qELQBIAZBmCNqEEQgBkGYJGoQaSAGQdjbAGogBkGYI2oQTQJAIAZB2NsAaiAGQdDVAGoQXEEBRwRAIAZBmCNqEJQBDAEL
    IAZBuBVqIAZB2NsAaiAGQdDVAGoQIyAGQbgVahBYBEAgBkG4FWoQQSAGQbgVahBECyAGQdgjaiAGQbgVahClAQsgAkEgc
    UEFdiAGQdgjahBMQQFGRwRAIAZBmCNqEKYBCyAGQegBaiAGQZgjakHAARBnGgsgBkHQPGpB8IHAABBfIAZB6AFqEIQBRQ
    0CDAMLIAEgAUHggsAAEDwACyAHQTBqIAFBgIPAABA8AAsgBkGoA2oQSyAGQagDaiAGQegBahB/IAZBuBJqEEsgBkG4Emo
    gBkHoAWoQfyAGQbgSahBHIAZByMcAakHwgcAAEF8gBkGYI2pBqILAABBfIAZBiMMAaiAGQZgjahCLAUEAIQAgBkG4IWpB
    OBByGiAGQfAhakE4EHIhCSAGQdjbAGpB8IHAABBfIAZBuBVqQYCAwAAQXyAGQZgjakE4EHIaIAZBkCNqIQsgBkGwFWohC
    gJAAkADQCAAQQdGDQIgAEEBaiEBIAZBuBVqIABBA3RqIQxCACEXQQAhAwNAIANBf2ohByAKIANBA3RqIQIgCyAAIANqQQ
    N0aiEIA0AgB0EGRgRAIAEhAAwDCyAIQQhqIQggAkEIaiECIAAgB0EBaiIHakEGSw0ACyAAQQZNBEAgB0EGSw0DIAdBAWo
    hAyAGQQhqIAIpAwAiFiAWQj+HIAwpAwAiFiAWQj+HEDEgCCAGKQMIIhkgF3wiFiAIKQMAIhp8IhhC//////////8DgzcD
    ACAYIBZUrSAWIBlUrSAGQRBqKQMAIBdCP4d8fCAaQj+HfHxCBoYgGEI6iIQhFwwBCwsLIABBB0G0ncAAEDwACyAHQQdBx
    J3AABA8AAsgBkG4IWogBkHQPGoQayAGQbghaiAGQZgjahAkIAkgBkHQPGoQayAJIAZBmCNqEBwgCSAGQdjbAGoQYyAGQb
    gSaiAGQYjDAGoQSCAGQbghahApIQAgBkGIyABqIAZBuCFqIAZByMcAahCNASAGQYjIAGoQKSAASQRAIAZBuCFqIAZBiMg
    AahBrIAZBqANqEKYBCyAJECkhACAGQYjIAGogCSAGQcjHAGoQjQEgBkGIyABqECkgAEkEQCAJIAZBiMgAahBrIAZBuBJq
    EKYBCyAGQbghahBEIAkQREEAIQcgBkHIyABqQTgQchogBkGIyQBqQTgQchogBkGYO2pBOBByGiAGQYg9ahBLIAZBiMAAa
    hBLIAZByMQAahBLIAZByMkAahBLIAZByMwAahBLIAZBqAZqEEsgBkGwDGoQSyAGQcjPAGoQSyAGQdDVAGoQSyAGQdjbAG
    oQSyAGQbgVahBLIAZBmCNqIAZByMkAakHAARBnGiAGQdgkaiAGQcjMAGpBwAEQZyEAIAZBmCZqIAZBqAZqQcABEGchASA
    GQdgnaiAGQbAMakHAARBnIQsgBkGYKWogBkHIzwBqQcABEGchCiAGQdgqaiAGQdDVAGpBwAEQZyECIAZBmCxqIAZB2NsA
    akHAARBnIQMgBkHYLWogBkG4FWpBwAEQZyEIIAZBuBVqQcwBEHIaIAZByMgAaiAGQbghahBrIAZBiMkAaiAJEGsgACAGQ
    agDahB/IAAgBkG4EmoQcyABIAZBqANqEH8gASAGQbgSahAMIAZBiD1qIAZBuBJqEH8gBkGIPWoQGCAGQcjEAGogABB/IA
    ZBmCNqIAZByMQAahB/IAZBmCNqIAZBiD1qEHMgBkHIxABqIAEQfyALIAZByMQAahB/IAsgBkGIPWoQDCAGQYjAAGogBkG
    oA2oQfyAGQYjAAGoQGCAGQcjEAGogABB/IAIgBkHIxABqEH8gAiAGQYjAAGoQDCAGQcjEAGogARB/IAMgBkHIxABqEH8g
    AyAGQYjAAGoQDCAGQcjEAGogAhB/IAogBkHIxABqEH8gCiAGQYg9ahBzIAZByMQAaiADEH8gCCAGQcjEAGoQfyAIIAZBi
    D1qEAwgBikDyEghFyAGQcjIAGpBARCdASAGQcjIAGoQRCAGKQPISCEWIAZBmDtqIAZByMgAahBrIAZBmDtqQQEQnQEgBk
    GYO2oQRCAGQcjIAGogBkGYO2ogF0ICgacQTyAGQYjAAGogBkGoA2ogFkICgacQbSAGQcjEAGogBkGIwABqEH8gBikDiEk
    hFyAGQYjJAGpBARCdASAGQYjJAGoQRCAGKQOISSEWIAZBmDtqIAZBiMkAahBrIAZBmDtqQQEQnQEgBkGYO2oQRCAGQYjJ
    AGogBkGYO2ogF0ICgacQTyAGQYg9aiAGQbgSaiAWQgKBpxBtIAZByMQAaiAGQYg9ahAMIAZBmDtqIAZByMgAahBrIAZBm
    DtqIAZBiMkAahBhIAZBmDtqEEQgBkGYO2oQKUEBaiICQQF2IghBAWohAAJAAkACQAJAA0ACQCAGQcjIAGpBAxCMASEBIA
    AgB0YEQCAGQYjJAGpBAxCMASEDIAJBlgNJDQEgAEHMAUG0g8AAEDwACyAGQcjIAGogAUF8aiIBEJ4BIAZByMgAahBEIAZ
    ByMgAakECEDsgBkGIyQBqIAZBiMkAakEDEIwBQXxqIgMQngEgBkGIyQBqEEQgBkGIyQBqQQIQOyAHQcwBRg0CIAZBuBVq
    IAdqIAMgAUECdGo6AAAgB0EBaiEHDAELCyAGQbgVaiAAaiADIAFBAnRqIgA6AAAgAEEYdEEYdUF/aiIBQQF2IQAgAUEPS
    w0BIAZBiD1qIAZBmCNqIABBwAFsahB/A0AgCEF/Rg0EIAhBywFLDQMgBkGIwABqIAZBmCNqIAZBuBVqIAhqLAAAEB8gCE
    F/aiEIIAZBiD1qEBggBkGIPWoQGCAGQYg9aiAGQYjAAGoQDAwACwALQcwBQcwBQaSDwAAQPAALIABBCEHEg8AAEDwACyA
    IQcwBQdSDwAAQPAALIAZBiD1qIAZByMQAahBzIAZBqANqIAZBiD1qQcABEGcaQX8hByAGQagDahCEAUUNASAGQegBahCm
    AUEAIQcgBkHIzwBqQeAAEHIaIAUEQANAIAdB4ABGBEAgBiAGLQDIT0EfcToAyE8gBkHQ1QBqIAZByM8AahAhAkACQAJAI
    AQsAAAiA0F/SgRAIARB4ABqIQAgBUHgACAFQeAASxtBoH9qIQFBACEHA0AgB0HgAEYEQCAGQZgjaiAGQcjPAGoQISAGQa
    gDaiAGQdDVAGogBkGYI2oQPwwDCyABIAdGDQMgBkHIzwBqIAdqIAAgB2otAAA6AAAgB0EBaiEHDAALAAsgBkGYI2oQKiA
    GQYjAAGpBOBByGiAGQQE2AsBAIAZBmCNqIAZB0NUAahCQASAGQZgkaiIBELABIAZBmCVqELABIAZBmCNqEKgBIAZB2NsA
    aiAGQZgjahAmIAZBuBVqIAZB2NsAahBeIAZBuBVqEKYBIAZBuBVqIAZB2NsAahAPIAZBsAxqIAZBuBVqQcAAEGcaAkAgB
    kGwDGogBkGIwABqEFxBAUcEQCAGQZgjahCYAQwBCyAGQdjbAGoQhwFFBEAgBkHIxABqIAZBmNwAaiIAEIUBIAZByMkAai
    AGQdjbAGoQhQEgBkHIzABqIAZB2NsAahCFASAGQagGakE4EHIaIAZBATYC4AYgBkGwDGpBOBByGiAGQQE2AugMIAZByMQ
    AahADIAZByMkAahADIAZByMQAaiAGQcjJAGoQeCAGQcjEAGoQRCAGQbgVaiAGQcjEAGogBkGIwABqECMgBkHIyQBqIAZB
    uBVqEKUBIAZByMQAaiAGQcjJAGoQpQEgBkHIyQBqIAZB2NsAahClASAGQcjJAGogBkHIxABqEHggBkHIyQBqEEQgBkHIy
    QBqEEIgBkHIxABqIAAQpQEgBkHIxABqEEIgBkHIyQBqIAZBsAxqEFwhAiAGQcjMAGogBkGwDGoQpQEgBkHIzABqEEEgBk
    HIzABqEEQgBkGoBmogBkHIyQBqEKUBIAZBqAZqEEEgBkGoBmoQRCAGQcjJAGogBkGoBmpBASACayICEHkgBkGwDGogBkH
    IzABqIAIQeSAGQbgVaiAGQcjJAGogBkGwDGoQIyAGQdjbAGogBkG4FWoQpQEgBkHIzABqIAZByMkAahClASAGQcjMAGog
    BkGwDGoQNCAGQcjMAGogBkHY2wBqEEggACAGQcjMAGoQpQEgACAGQcjEAGoQSCAGQagGaiAGQdjbAGoQpQEgBkHY2wBqI
    AAgAhB5IAAgBkGoBmogAhB5IAZB2NsAahCJASEAIAZBuBVqIAZB2NsAahBeIAZBuBVqEDogBkG4FWoQqAEgBkHY2wBqIA
    ZBuBVqIAAQjwELIAZB2NsAahCJAQRAIAZB2NsAahA6CyAGQdjbAGoQqwEgASAGQdjbAGoQkAELQQAhAgJAIAEQhwENACA
    GQdgkahBMIgINACABEEwhAgsgA0EgcUEFdiACQQFGRwRAIAZBmCNqEJwBCyAGQagDaiAGQZgjakGAAxBnGgsgBkHIyABq
    QfCBwAAQXyAGQagDahCIAQ0FIAZBuBJqECogBkG4FWoQKiAGQdDVAGoQKiAGQdjbAGoQKiAGQZgjahAqIAZBuBhqIAZB0
    NUAakGAAxBnIQ0gBkG4G2ogBkHY2wBqQYADEGchCSAGQbgeaiAGQZgjakGAAxBnIQAgBkHY2wBqQbiAwAAQXyAGQZgjak
    HwgMAAEF8gBkGIwwBqIAZB2NsAaiAGQZgjahBJIAZBiMkAakHwgcAAEF9BACEHIAZBuCFqQTgQchogBkHwIWpBqAEQciE
    DIAZBsAxqQfCBwAAQXyAGQcjPAGpBgIDAABBfIAZB4CJqIQEgBkGoImohDyAGQdDVAGogBkHIyABqEF8DQCAHQagBRg0C
    IAZBuCFqIAdqIgIgBkHQ1QBqEGsgAiAGQcjPAGoQJCAHQThqIQcgBkHQ1QBqIAZByM8AahAcDAALAAsgB0HgAGogBUGwp
    MAAEDwACyABIAZB0NUAahBrQQAhByAGQdjbAGpBOBByGiAGQZgjaiADIAZBsAxqEI0BIAZB2NsAaiAGQZgjahBrIAMgBk
    HY2wBqEGsgBkGYI2ogASAGQbAMahCNASAGQdjbAGogBkGYI2oQayABIAZB2NsAahBrIAZBiD1qECogBkGIwwBqEEAgBkG
    IwwBqEKgBIAZBmDtqQTgQchogBkG4FWogBkGoA2oQfgNAIAdBgAlGBEACQCAGQbgVaiECQQAhBwNAIAdB4AFHBEAgBkG4
    IWogB2oiBBApIQUgBkGYI2ogBCAGQYjJAGoQjQEgBkGYO2ogBkGYI2oQayAGQZg7ahApIAVJBEAgBCAGQZg7ahBrIAIQn
    AELIAQQRCAHQThqIQcgAkGAA2ohAgwBCwsgBkHIxABqECogBkGIwABqECogBkGYI2oQKiAGQcjJAGoQKiAGQcjMAGoQKi
    AGQagGahAqIAZBsAxqECogBkHIzwBqECogBkHQ1QBqECogBkHY2wBqECogBkGYJmogBkHIyQBqQYADEGchAiAGQZgpaiA
    GQcjMAGpBgAMQZyEEIAZBmCxqIAZBqAZqQYADEGchBSAGQZgvaiAGQbAMakGAAxBnIQsgBkGYMmogBkHIzwBqQYADEGch
    CiAGQZg1aiAGQdDVAGpBgAMQZyEIIAZBmDhqIAZB2NsAakGAAxBnIQxBACEHIAZBqAZqQTgQchogBkGwDGogBkG4IWoQX
    yAGQcjPAGogAxBfIAZB0NUAaiAPEF8gBkHY2wBqIAEQXyAGQegMaiAGQcjPAGpBOBBnGiAGQaANaiAGQdDVAGpBOBBnGi
    AGQdgNaiAGQdjbAGpBOBBnGiAGQdDVAGpBlwMQchogBkHY2wBqQZcDEHIaA0AgB0HgAUYEQAJAIAZBmCNqIAZBuBVqEH4
    gBkHIxABqIAZBmCNqEH4gAiAGQcjEAGoQfiACIA0QCyAEIAZByMQAahB+IAQgCRALIAZByMQAaiACEH4gBSAGQcjEAGoQ
    fiAFIAkQCyAGQcjEAGogBkGYI2oQfiALIAZByMQAahB+IAsgABALIAZByMQAaiACEH4gCiAGQcjEAGoQfiAKIAAQCyAGQ
    cjEAGogBBB+IAggBkHIxABqEH4gCCAAEAsgBkHIxABqIAUQfiAMIAZByMQAahB+IAwgABALIAZBsAxqQQEgBikDsAxCAo
    GnayIFEJ0BIAZBsAxqEEQgBkGoBmoQdEEAIQAgBkGwDGohAgJAAkACQAJAA38gAEEERgR/IAZBqAZqECkiA0GXA08NAiA
    DQQFqIQkgBkHY2wBqIANqQQE6AAAgBkHY2wBqIQggAwVBACEHA0AgB0E4RwRAIAZBqAZqIAdqIgEgASkDACACIAdqKQMA
    hDcDACAHQQhqIQcMAQsLIAJBOGohAiAAQQFqIQAMAQsLIQcDQCAHBEAgBkGwDGpBARA7IAggBikDsAxCAoGnQQF0QX9qO
    gAAIAdBf2ohByAIQQFqIQgMAQsLQQAhBwNAIAcgCUYEQCAGQYjAAGogBkGYI2ogBkHQ1QBqIANqLQAAQRl0QRh1QQFyEC
    AgA0F/aiEHA0AgB0F/Rg0GIAZBiMAAahAUIAdBlgNLDQUgBkHIxABqIAZBmCNqIAZB2NsAaiAHai0AACAGQdDVAGogB2o
    tAABBAXRqQRh0QRh1ECAgB0F/aiEHIAZBiMAAaiAGQcjEAGoQCwwACwALIAdBlwNGDQIgB0EBaiEBQQAhACAGQdDVAGog
    B2oiC0EAOgAAIAZB2NsAaiAHai0AACEKQQEhAkE4IQcDQCAHQeABRgRAIAEhBwwCBSAGQbAMaiAHaiIEKQMAIRcgBEEBE
    DsgBCAKIBdCAoGnbCIIQRh0QRl1EJ4BIAQQRCALIAAgAiAIbGoiADoAACAHQThqIQcgAkEBdCECDAELAAsACwALIANBlw
    NBkKXAABA8AAtBlwNBlwNBoKXAABA8AAsgB0GXA0GwpcAAEDwACyAGQcjEAGogBkGIwABqEH4gBkHIzwBqECogBkHIzwB
    qIAZBuBVqEH4gBkHIzwBqEJwBIAZByMQAaiAGQcjPAGoQCyAGQYjAAGogBkHIxABqIAUQbyAGQbgSaiAGQYjAAGoQfkF/
    IQcgBkG4EmoQiAFFDQogBkG4EmoQOCAGQbgVakG4gMAAEF8gBkGYI2pB8IDAABBfIAZBmDtqIAZBuBVqIAZBmCNqEEkgB
    kGYPGpBOBByGiAGQdA8akE4EHIaIAZBiD1qECogBkHoAWoQhAFFBEAgBkEoahCEAQ0BIAZBiMAAahAqIAZBiMAAaiAGQb
    gSahB+IAZBiMAAahBKIAZBiMMAahBLIAZBiMMAaiAGQegBahB/IAZBiMMAahBHIAZByMQAahAqIAZByMQAaiAGQagDahB
    +IAZByMQAahBKIAZBuCFqEEsgBkG4IWogBkEoahB/IAZBuCFqEEcgBkGYI2ogBkGIwwBqEIUBIAZByMcAaiAGQZgjahCF
    ASAGQZgjaiAGQcjDAGoQhQEgBkGIyABqIAZBmCNqEIUBIAZBmCNqIAZBuCFqEIUBIAZByMgAaiAGQZgjahCFASAGQZgja
    iAGQfghahCFASAGQYjJAGogBkGYI2oQhQEgBkHIyQBqECogBkHIzABqECogBkHQ1QBqEGAgBkHIyQBqIAZBiMAAahB+IA
    ZByMwAaiAGQcjEAGoQfiAGQbAMahAqIAZBsAxqIAZBiMAAahB+IAZBsAxqEJwBIAZByM8AahAqIAZByM8AaiAGQcjEAGo
    QfiAGQcjPAGoQnAEgBkHQPGogBkGYPGoQVEF/aiEHA0AgB0EBTQRAIAZB0NUAahCTASAGQagGaiAGQdDVAGpBiAYQZxoM
    BgsgBkHQ1QBqEBsgBkHY2wBqIAZByMkAaiAGQcjHAGogBkGIyABqEBcgBkG4FWogBkHIzABqIAZByMgAaiAGQYjJAGoQF
    yAGQdjbAGogBkG4FWoQBiAGQdDVAGogBkHY2wBqEAQCQAJAIAZB0DxqIAdBf2oiBxBXIAZBmDxqIAcQV2tBAWoOAwECAA
    ILIAZB2NsAaiAGQcjJAGogBkGIwABqIAZByMcAaiAGQYjIAGoQFiAGQZgjaiAGQcjMAGogBkHIxABqIAZByMgAaiAGQYj
    JAGoQFiAGQdjbAGogBkGYI2oQBiAGQdDVAGogBkHY2wBqEAQMAQsgBkHY2wBqIAZByMkAaiAGQbAMaiAGQcjHAGogBkGI
    yABqEBYgBkGYI2ogBkHIzABqIAZByM8AaiAGQcjIAGogBkGIyQBqEBYgBkHY2wBqIAZBmCNqEAYgBkHQ1QBqIAZB2NsAa
    hAEDAALAAsgBkGoBmogBkGoA2ogBkEoahAQDAMLBSAGQbAMaiAHahBEIAdBOGohBwwBCwsgBkGoBmogBkG4EmogBkHoAW
    oQEAsFIAZBiD1qIAZBuBVqIAdqIgIQfiACQYADaiIEIAZBiD1qEH4gBkGYI2ogBkGIwwBqEF4gBkGYI2oQMiAEEKYBIAJ
    BgARqIgUQpgEgAkGABWoiAhCmASACEKsBIAQgBkGYI2oQDyAFIAZBmCNqEA8gBSAGQYjDAGoQDyAHQYADaiEHDAELCyAG
    QbgVakG4gMAAEF8gBkGYI2pB8IDAABBfIAZByMQAaiAGQbgVaiAGQZgjahBJIAZBiMAAakGAgMAAEF8gBkGwDGogBkGoB
    moQaiAGQcjPAGogBkGwDGoQaiAGQdDVAGogBkHIzwBqEI4BIAZB2NsAaiAGQcjRAGoiARCOASAGQbgVaiAGQcjPAGoQjg
    EgBkGYI2oQLyAGQcjPAGoQmQEgBkHQ1QBqECIgBkHY2wBqIAZByNMAaiIAEBkgBkHY2wBqEGYgBkHQ1QBqIAZB2NsAahC
    BASAGQdDVAGoQrAEgBkHY2wBqIAAQkgEgBkHY2wBqECIgBkHY2wBqEGYgBkG4FWogARAZIAZB2NsAaiAGQbgVahCBASAG
    QdjbAGoQrAEgBkG4FWogARCSASAGQbgVahAiIAZBmCNqIAZByM8AahCSASAGQZgjaiAAEBkgBkG4FWogBkGYI2oQgQEgB
    kG4FWoQrAEgBkGYI2ogARCSASAGQZgjaiAGQbgVahAZIAZBmCNqEGYgBkHIzwBqIAZB0NUAahAZIAZBmCNqIAZByM8Aah
    CWASAAIAZB2NsAahAZIAAQZiAGQZgjaiAAEJYBIAZBmCNqEKwBIAZByMkAaiAGQZgjahBeIAZByMwAaiAGQZgkaiICEF4
    gBkHIyQBqEDIgBkHIzABqEDIgBkHIzABqEFUgBkHIzABqEKgBIAZByMkAaiAGQcjMAGoQfSAGQcjJAGoQQCAGQZgjaiAG
    QcjJAGoQDyAGQcjJAGoQOiAGQcjJAGoQqAEgAiAGQcjJAGoQDyAGQcjPAGogBkHQ1QBqEJIBIAZByM8AaiAGQZgjahAZI
    AEgBkHY2wBqEJIBIAEgBkGYI2oQGSAAIAZBuBVqEJIBIAAgBkGYI2oQGSAGQQU2AshVIAZBsAxqEJMBIAZBsAxqIAZByM
    8AahAOIAZByM8AaiAGQbAMahBsIAZBsAxqIAZByMQAahA3IAZBsAxqIAZByMQAahA3IAZBsAxqIAZByM8AahAOIAZB0NU
    AaiAGQbAMahBqIAZB0NUAahAaIAZB0NUAaiAGQbAMahAOIAZBmCNqIAZBsAxqIAZBiMAAahAdIAZB2NsAaiAGQZgjahBq
    IAZB2NsAahCTASAGQbgVaiAGQbAMahBqIAZBuBVqEJMBIAZBsAxqIAZB2NsAahBsIAZBsAxqIAZBuBVqEA4gBkGYI2ogB
    kGwDGogBkGIwABqEB0gBkHY2wBqIAZBmCNqEGwgBkHY2wBqEJMBIAZBuBVqIAZBsAxqEGwgBkG4FWoQkwEgBkGwDGogBk
    HY2wBqEGwgBkGwDGogBkG4FWoQDiAGQZgjaiAGQbAMaiAGQYjAAGoQHSAGQdjbAGogBkGYI2oQbCAGQdjbAGoQkwEgBkG
    4FWogBkGwDGoQbCAGQbgVaiAGQcjEAGoQNyAGQbAMaiAGQdjbAGoQbCAGQbAMaiAGQbgVahAOIAZBmCNqIAZBsAxqIAZB
    iMAAahAdIAZB2NsAaiAGQZgjahBsIAZBmCNqIAZB2NsAaiAGQYjAAGoQHSAGQdjbAGogBkGYI2oQbCAGQbgVaiAGQbAMa
    hBsIAZBuBVqIAZByMQAahA3IAZBuBVqIAZByMQAahA3IAZB2NsAaiAGQbgVahAOIAZBuBVqIAZBsAxqEGwgBkG4FWoQkw
    EgBkGwDGogBkHY2wBqEGwgBkGwDGogBkG4FWoQDiAGQbAMaiAGQdDVAGoQDiAGQbAMahCaASAGQagGaiAGQbAMakGIBhB
    nGiAGQZgjahBuIAZBqAZqIAZBmCNqEHtFDQMgBkGoB2ogAhB7RQ0DIAZBqAhqEIYBRQ0DQQAhByAGQagKahCGAUUNAwwE
    CyAFIAdHBEAgBkHIzwBqIAdqIAQgB2otAAA6AAAgB0EBaiEHDAELCyAFIAVBoKTAABA8AAtBAEEAQZCkwAAQPAALQX8hB
    wsgBkHg4QBqJAAgBw8LQQAhByAGQbAMakE4EHIaA0AgB0E4RwRAIAZBsAxqIAdqIAZByM8AaiAHaikDADcDACAHQQhqIQ
    cMAQsLIAZBmCNqIAZBsAxqEIsBIAZBqANqIAlBBnRqIAZBmCNqQcAAEGcaIAMgCmohAyALIQkMAAsACyAHIAlqIQkgAiE
    DDAALAAtBK0EBQaS5wQAoAgAiAEEBIAAbEQAAAAvBKgIIfwF+AkACQAJAAkAgAEH1AU8EQCAAQc3/e08NAiAAQQtqIgBB
    eHEhBkHYtcEAKAIAIgdFDQFBHyEIQQAgBmshBQJAAkAgBkH///8HTQRAIAZBBiAAQQh2ZyIAa0EfcXZBAXEgAEEBdGtBP
    mohCAsgCEECdEHkt8EAaigCACIABEAgBkEAQRkgCEEBdmtBH3EgCEEfRht0IQMDQAJAIABBBGooAgBBeHEiBCAGSQ0AIA
    QgBmsiBCAFTw0AIAAhAiAEIgUNAEEAIQUMAwsgAEEUaigCACIEIAEgBCAAIANBHXZBBHFqQRBqKAIAIgBHGyABIAQbIQE
    gA0EBdCEDIAANAAsgAQRAIAEhAAwCCyACDQILQQAhAkECIAhBH3F0IgBBACAAa3IgB3EiAEUNAyAAQQAgAGtxaEECdEHk
    t8EAaigCACIARQ0DCwNAIAAgAiAAQQRqKAIAQXhxIgEgBk8gASAGayIDIAVJcSIEGyECIAMgBSAEGyEFIAAoAhAiAQR/I
    AEFIABBFGooAgALIgANAAsgAkUNAgtB5LjBACgCACIAIAZPQQAgBSAAIAZrTxsNASACKAIYIQcCQAJAIAIgAigCDCIBRg
    RAIAJBFEEQIAJBFGoiAygCACIBG2ooAgAiAA0BQQAhAQwCCyACKAIIIgAgATYCDCABIAA2AggMAQsgAyACQRBqIAEbIQM
    DQCADIQQgACIBQRRqIgMoAgAiAEUEQCABQRBqIQMgASgCECEACyAADQALIARBADYCAAsCQCAHRQ0AAkAgAiACKAIcQQJ0
    QeS3wQBqIgAoAgBHBEAgB0EQQRQgBygCECACRhtqIAE2AgAgAUUNAgwBCyAAIAE2AgAgAQ0AQdi1wQBB2LXBACgCAEF+I
    AIoAhx3cTYCAAwBCyABIAc2AhggAigCECIABEAgASAANgIQIAAgATYCGAsgAkEUaigCACIARQ0AIAFBFGogADYCACAAIA
    E2AhgLAkAgBUEQTwRAIAIgBkEDcjYCBCACIAZqIgcgBUEBcjYCBCAFIAdqIAU2AgAgBUGAAk8EQEEfIQAgB0IANwIQIAV
    B////B00EQCAFQQYgBUEIdmciAGtBH3F2QQFxIABBAXRrQT5qIQALIAcgADYCHCAAQQJ0QeS3wQBqIQQCQAJAAkACQEHY
    tcEAKAIAIgNBASAAQR9xdCIBcQRAIAQoAgAiA0EEaigCAEF4cSAFRw0BIAMhAAwCC0HYtcEAIAEgA3I2AgAgBCAHNgIAI
    AcgBDYCGAwDCyAFQQBBGSAAQQF2a0EfcSAAQR9GG3QhAQNAIAMgAUEddkEEcWpBEGoiBCgCACIARQ0CIAFBAXQhASAAIQ
    MgAEEEaigCAEF4cSAFRw0ACwsgACgCCCIBIAc2AgwgACAHNgIIIAdBADYCGCAHIAA2AgwgByABNgIIDAQLIAQgBzYCACA
    HIAM2AhgLIAcgBzYCDCAHIAc2AggMAgsgBUEDdiIBQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgNBASABdCIBcQRAIAAoAggM
    AQtB1LXBACABIANyNgIAIAALIQUgACAHNgIIIAUgBzYCDCAHIAA2AgwgByAFNgIIDAELIAIgBSAGaiIAQQNyNgIEIAAgA
    moiACAAKAIEQQFyNgIECyACQQhqDwsCQAJAQdS1wQAoAgAiB0EQIABBC2pBeHEgAEELSRsiBkEDdiIBdiICQQNxRQRAIA
    ZB5LjBACgCAE0NAyACDQFB2LXBACgCACIARQ0DIABBACAAa3FoQQJ0QeS3wQBqKAIAIgFBBGooAgBBeHEgBmshBSABIQM
    DQCABKAIQIgBFBEAgAUEUaigCACIARQ0ECyAAQQRqKAIAQXhxIAZrIgIgBSACIAVJIgIbIQUgACADIAIbIQMgACEBDAAL
    AAsCQCACQX9zQQFxIAFqIgVBA3QiAEHktcEAaigCACIDQQhqIgIoAgAiASAAQdy1wQBqIgBHBEAgASAANgIMIAAgATYCC
    AwBC0HUtcEAIAdBfiAFd3E2AgALIAMgBUEDdCIAQQNyNgIEIAAgA2oiACAAKAIEQQFyNgIEIAIPCwJAQQIgAXQiAEEAIA
    BrciACIAF0cSIAQQAgAGtxaCIBQQN0IgBB5LXBAGooAgAiA0EIaiIEKAIAIgIgAEHctcEAaiIARwRAIAIgADYCDCAAIAI
    2AggMAQtB1LXBACAHQX4gAXdxNgIACyADIAZBA3I2AgQgAyAGaiIFIAFBA3QiACAGayIHQQFyNgIEIAAgA2ogBzYCAEHk
    uMEAKAIAIgAEQCAAQQN2IgJBA3RB3LXBAGohAEHsuMEAKAIAIQgCf0HUtcEAKAIAIgFBASACQR9xdCICcQRAIAAoAggMA
    QtB1LXBACABIAJyNgIAIAALIQMgACAINgIIIAMgCDYCDCAIIAA2AgwgCCADNgIIC0HsuMEAIAU2AgBB5LjBACAHNgIAIA
    QPCyADKAIYIQcCQAJAIAMgAygCDCIBRgRAIANBFEEQIANBFGoiASgCACICG2ooAgAiAA0BQQAhAQwCCyADKAIIIgAgATY
    CDCABIAA2AggMAQsgASADQRBqIAIbIQIDQCACIQQgACIBQRRqIgIoAgAiAEUEQCABQRBqIQIgASgCECEACyAADQALIARB
    ADYCAAsgB0UNAyADIAMoAhxBAnRB5LfBAGoiACgCAEcEQCAHQRBBFCAHKAIQIANGG2ogATYCACABRQ0EDAMLIAAgATYCA
    CABDQJB2LXBAEHYtcEAKAIAQX4gAygCHHdxNgIADAMLAkACQAJAAkACQEHkuMEAKAIAIgEgBkkEQEHouMEAKAIAIgAgBk
    sNA0EAIQUgBkGvgARqIgJBEHZAACIAQX9GDQYgAEEQdCIDRQ0GQfS4wQAgAkGAgHxxIgVB9LjBACgCAGoiAjYCAEH4uME
    AQfi4wQAoAgAiACACIAAgAksbNgIAQfC4wQAoAgAiBEUNAUH8uMEAIQADQCAAKAIAIgEgACgCBCICaiADRg0DIAAoAggi
    AA0ACwwEC0HsuMEAKAIAIQMCfyABIAZrIgJBD00EQEHsuMEAQQA2AgBB5LjBAEEANgIAIAMgAUEDcjYCBCABIANqIgJBB
    GohACACKAIEQQFyDAELQeS4wQAgAjYCAEHsuMEAIAMgBmoiADYCACAAIAJBAXI2AgQgASADaiACNgIAIANBBGohACAGQQ
    NyCyEGIAAgBjYCACADQQhqDwtBkLnBACgCACIAQQAgACADTRtFBEBBkLnBACADNgIAC0GUucEAQf8fNgIAQYC5wQAgBTY
    CAEH8uMEAIAM2AgBB6LXBAEHctcEANgIAQfC1wQBB5LXBADYCAEHktcEAQdy1wQA2AgBB+LXBAEHstcEANgIAQey1wQBB
    5LXBADYCAEGAtsEAQfS1wQA2AgBB9LXBAEHstcEANgIAQYi2wQBB/LXBADYCAEH8tcEAQfS1wQA2AgBBkLbBAEGEtsEAN
    gIAQYS2wQBB/LXBADYCAEGYtsEAQYy2wQA2AgBBjLbBAEGEtsEANgIAQaC2wQBBlLbBADYCAEGUtsEAQYy2wQA2AgBBiL
    nBAEEANgIAQai2wQBBnLbBADYCAEGctsEAQZS2wQA2AgBBpLbBAEGctsEANgIAQbC2wQBBpLbBADYCAEGstsEAQaS2wQA
    2AgBBuLbBAEGstsEANgIAQbS2wQBBrLbBADYCAEHAtsEAQbS2wQA2AgBBvLbBAEG0tsEANgIAQci2wQBBvLbBADYCAEHE
    tsEAQby2wQA2AgBB0LbBAEHEtsEANgIAQcy2wQBBxLbBADYCAEHYtsEAQcy2wQA2AgBB1LbBAEHMtsEANgIAQeC2wQBB1
    LbBADYCAEHctsEAQdS2wQA2AgBB6LbBAEHctsEANgIAQfC2wQBB5LbBADYCAEHktsEAQdy2wQA2AgBB+LbBAEHstsEANg
    IAQey2wQBB5LbBADYCAEGAt8EAQfS2wQA2AgBB9LbBAEHstsEANgIAQYi3wQBB/LbBADYCAEH8tsEAQfS2wQA2AgBBkLf
    BAEGEt8EANgIAQYS3wQBB/LbBADYCAEGYt8EAQYy3wQA2AgBBjLfBAEGEt8EANgIAQaC3wQBBlLfBADYCAEGUt8EAQYy3
    wQA2AgBBqLfBAEGct8EANgIAQZy3wQBBlLfBADYCAEGwt8EAQaS3wQA2AgBBpLfBAEGct8EANgIAQbi3wQBBrLfBADYCA
    EGst8EAQaS3wQA2AgBBwLfBAEG0t8EANgIAQbS3wQBBrLfBADYCAEHIt8EAQby3wQA2AgBBvLfBAEG0t8EANgIAQdC3wQ
    BBxLfBADYCAEHEt8EAQby3wQA2AgBB2LfBAEHMt8EANgIAQcy3wQBBxLfBADYCAEHgt8EAQdS3wQA2AgBB1LfBAEHMt8E
    ANgIAQfC4wQAgAzYCAEHct8EAQdS3wQA2AgBB6LjBACAFQVhqIgA2AgAgAyAAQQFyNgIEIAAgA2pBKDYCBEGMucEAQYCA
    gAE2AgAMAwsgAEEMaigCACADIARNciABIARLcg0BIAAgAiAFajYCBEHwuMEAQfC4wQAoAgAiA0EPakF4cSIBQXhqNgIAQ
    ei4wQBB6LjBACgCACAFaiICIAMgAWtqQQhqIgA2AgAgAUF8aiAAQQFyNgIAIAIgA2pBKDYCBEGMucEAQYCAgAE2AgAMAg
    tB6LjBACAAIAZrIgI2AgBB8LjBAEHwuMEAKAIAIgEgBmoiADYCACAAIAJBAXI2AgQgASAGQQNyNgIEIAFBCGohBQwCC0G
    QucEAQZC5wQAoAgAiACADIAAgA0kbNgIAIAMgBWohAUH8uMEAIQACQANAIAEgACgCAEcEQCAAKAIIIgANAQwCCwsgAEEM
    aigCAA0AIAAgAzYCACAAIAAoAgQgBWo2AgQgAyAGQQNyNgIEIAMgBmohBCABIANrIAZrIQYCQAJAIAFB8LjBACgCAEcEQ
    EHsuMEAKAIAIAFGDQEgAUEEaigCACIAQQNxQQFGBEAgASAAQXhxIgAQFSAAIAZqIQYgACABaiEBCyABIAEoAgRBfnE2Ag
    QgBCAGQQFyNgIEIAQgBmogBjYCACAGQYACTwRAQR8hBSAEQgA3AhAgBkH///8HTQRAIAZBBiAGQQh2ZyIAa0EfcXZBAXE
    gAEEBdGtBPmohBQsgBCAFNgIcIAVBAnRB5LfBAGohAQJAAkACQAJAQdi1wQAoAgAiAkEBIAVBH3F0IgBxBEAgASgCACIC
    QQRqKAIAQXhxIAZHDQEgAiEFDAILQdi1wQAgACACcjYCACABIAQ2AgAgBCABNgIYDAMLIAZBAEEZIAVBAXZrQR9xIAVBH
    0YbdCEBA0AgAiABQR12QQRxakEQaiIAKAIAIgVFDQIgAUEBdCEBIAUiAkEEaigCAEF4cSAGRw0ACwsgBSgCCCIAIAQ2Ag
    wgBSAENgIIIARBADYCGCAEIAU2AgwgBCAANgIIDAULIAAgBDYCACAEIAI2AhgLIAQgBDYCDCAEIAQ2AggMAwsgBkEDdiI
    CQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgFBASACdCICcQRAIAAoAggMAQtB1LXBACABIAJyNgIAIAALIQUgACAENgIIIAUg
    BDYCDCAEIAA2AgwgBCAFNgIIDAILQfC4wQAgBDYCAEHouMEAQei4wQAoAgAgBmoiADYCACAEIABBAXI2AgQMAQtB7LjBA
    CAENgIAQeS4wQBB5LjBACgCACAGaiIANgIAIAQgAEEBcjYCBCAAIARqIAA2AgALIANBCGoPC0H8uMEAIQADQAJAIAAoAg
    AiAiAETQRAIAIgACgCBGoiAiAESw0BCyAAKAIIIQAMAQsLQfC4wQAgAzYCAEHouMEAIAVBWGoiADYCACADIABBAXI2AgQ
    gACADakEoNgIEQYy5wQBBgICAATYCACAEIAJBYGpBeHFBeGoiACAAIARBEGpJGyIBQRs2AgRB/LjBACkCACEJIAFBEGpB
    hLnBACkCADcCACABIAk3AghBgLnBACAFNgIAQfy4wQAgAzYCAEGEucEAIAFBCGo2AgBBiLnBAEEANgIAIAFBHGohAANAI
    ABBBzYCACACIABBBGoiAEsNAAsgASAERg0AIAEgASgCBEF+cTYCBCAEIAEgBGsiBUEBcjYCBCABIAU2AgAgBUGAAk8EQE
    EfIQAgBEIANwIQIAVB////B00EQCAFQQYgBUEIdmciAGtBH3F2QQFxIABBAXRrQT5qIQALIARBHGogADYCACAAQQJ0QeS
    3wQBqIQMCQAJAAkACQEHYtcEAKAIAIgFBASAAQR9xdCICcQRAIAMoAgAiAkEEaigCAEF4cSAFRw0BIAIhAAwCC0HYtcEA
    IAEgAnI2AgAgAyAENgIAIARBGGogAzYCAAwDCyAFQQBBGSAAQQF2a0EfcSAAQR9GG3QhAQNAIAIgAUEddkEEcWpBEGoiA
    ygCACIARQ0CIAFBAXQhASAAIQIgAEEEaigCAEF4cSAFRw0ACwsgACgCCCICIAQ2AgwgACAENgIIIARBGGpBADYCACAEIA
    A2AgwgBCACNgIIDAMLIAMgBDYCACAEQRhqIAI2AgALIAQgBDYCDCAEIAQ2AggMAQsgBUEDdiICQQN0Qdy1wQBqIQACf0H
    UtcEAKAIAIgFBASACdCICcQRAIAAoAggMAQtB1LXBACABIAJyNgIAIAALIQEgACAENgIIIAEgBDYCDCAEIAA2AgwgBCAB
    NgIIC0EAIQVB6LjBACgCACIAIAZNDQBB6LjBACAAIAZrIgI2AgBB8LjBAEHwuMEAKAIAIgEgBmoiADYCACAAIAJBAXI2A
    gQgASAGQQNyNgIEIAFBCGoPCyAFDwsgASAHNgIYIAMoAhAiAARAIAEgADYCECAAIAE2AhgLIANBFGooAgAiAEUNACABQR
    RqIAA2AgAgACABNgIYCwJAIAVBEE8EQCADIAZBA3I2AgQgAyAGaiIEIAVBAXI2AgQgBCAFaiAFNgIAQeS4wQAoAgAiAAR
    AIABBA3YiAkEDdEHctcEAaiEAQey4wQAoAgAhBwJ/QdS1wQAoAgAiAUEBIAJBH3F0IgJxBEAgACgCCAwBC0HUtcEAIAEg
    AnI2AgAgAAshAiAAIAc2AgggAiAHNgIMIAcgADYCDCAHIAI2AggLQey4wQAgBDYCAEHkuMEAIAU2AgAMAQsgAyAFIAZqI
    gBBA3I2AgQgACADaiIAIAAoAgRBAXI2AgQLIANBCGoLtA8BA38jAEGAC2siAiQAIAJBCGoQSyACQcgBakE4EHIaIAJBAT
    YCgAIgAkGIAmpBOBByGiACQQE2AsACIAJByAJqQTgQchogAkEBNgKAAyACQYgDakE4EHIaIAJBATYCwAMgAkHIA2pBOBB
    yGiACQQE2AoAEIAJBiARqQQEQigEgAkHIBGpBOBByGiACQQE2AoAFIAJBiAVqQTgQchogAkEBNgLABSACQcgFaiABEIUB
    IAJBiAZqQTgQchogAkEBNgLABiACQcgGakE4EHIaIAJBATYCgAcgAkGIB2pBOBByGiACQQE2AsAHIAJByAdqQTgQchogA
    kEBNgKACCACQcgFahBYIQMgAkHICWpB4ITAABBfIAJBiApqIAJByAlqEIsBIAJByAFqIAJBiApqEKUBIAJByAlqQZiFwA
    AQXyACQYgKaiACQcgJahCLASACQYgCaiACQYgKahClASACQcgFahADIAJByAVqQQsQUiACQYgGaiACQcgFahClASACQYg
    GaiACQYgEahB4IAJBiAZqEEQgAkGIBmogAkHIBWoQSCACQYgFaiACQcgBahClASACQYgFaiACQYgGahBIIAJBiAZqIAJB
    iARqEHggAkGIBmoQRCACQYgGaiACQYgCahBIIAJBiAZqEEEgAkGIBmoQRCACQYgDaiACQYgGahClASACQcgDaiACQcgFa
    hClASACQcgDaiACQYgDahBIIAJByAdqIAJBiANqEKUBIAJByAdqEAMgAkHIBmogAkGIBWoQpQEgAkHIBmoQAyACQYgGai
    ACQcgBahClASACQYgGaiACQcgGahBIIAJByAdqIAJBiAZqEHggAkHIB2oQRCACQcgHaiACQYgDahBIIAJByAZqIAJBiAV
    qEEggAkGIBmogAkGIAmoQpQEgAkGIBmogAkHIBmoQSCACQcgHaiACQYgGahB4IAJByAdqEEQgAkGIBmogAkHIB2oQpQEg
    AkGIBmogAkGIBWoQSCACQYgGaiACQYgHahBcIQQgAkGIBWogAkGIBmoQpQEgAkGIBWogAkGIB2oQNCACQYgFaiACQcgHa
    hBIIAJBiANqIAJBiAVqEEggAkHIA2ogAkGIBWoQSCACQcgFaiABEEggAkHIBmogAkGIBWoQpQEgAkHIBmoQAyACQYgFai
    ACQcgGahClASACQYgFaiACQcgFahBIIAJByAVqIAJBiAZqEKUBIAJByAVqQQsQUiACQcgJakHQhcAAEF8gAkGICmogAkH
    ICWoQiwEgAkHIAmogAkGICmoQpQEgAkHIAmogAkGIB2oQSCACQYgDaiACQcgDakEBIARrIgEQeSACQcgGaiACQYgFaiAB
    EHkgAkGIBmogAkHIBWogARB5IAJBiAdqIAJByAJqIAEQeSACQYgKaiACQYgGaiACQYgHahAjIAJByARqIAJBiApqEKUBI
    AJByARqIAJByAZqEEggAkHIBGoQWCEBIAJBiAZqIAJByARqEKUBIAJBiAZqEEEgAkGIBmoQRCACQcgEaiACQYgGaiABIA
    NzEHkgAkGICmpBiIbAABBfIAJBiAhqIAJBiApqEIsBQTghAQNAIAFBoAVGRQRAIAJBiAhqIAJBiANqEEggAkHICWogAUG
    IhsAAahBfIAFBOGohASACQYgKaiACQcgJahCLASACQYgGaiACQYgKahClASACQYgIaiACQYgGahB4IAJBiAhqEEQMAQsL
    IAJByAhqIAJBiANqEIUBIAJByAlqQaiLwAAQXyACQYgKaiACQcgJahCLASACQYgGaiACQYgKahClASACQcgIaiACQYgGa
    hB4IAJByAhqEERBACEBA0AgAUH4A0ZFBEAgAkHICGogAkGIA2oQSCACQcgJaiABQeCLwABqEF8gAUE4aiEBIAJBiApqIA
    JByAlqEIsBIAJBiAZqIAJBiApqEKUBIAJByAhqIAJBiAZqEHggAkHICGoQRAwBCwsgAkGICmpB2I/AABBfIAJBiAlqIAJ
    BiApqEIsBQQAhAQNAIAFByAZGBEACQCACQcgJaiACQYgDahCFASACQcgKakHYlsAAEF8gAkGICmogAkHICmoQiwEgAkGI
    BmogAkGICmoQpQEgAkHICWogAkGIBmoQeCACQcgJahBEQQAhAQNAIAFBkAZGDQEgAkHICWogAkGIA2oQSCACQcgKaiABQ
    ZCXwABqEF8gAUE4aiEBIAJBiApqIAJByApqEIsBIAJBiAZqIAJBiApqEKUBIAJByAlqIAJBiAZqEHggAkHICWoQRAwACw
    ALBSACQYgJaiACQYgDahBIIAJByAlqIAFBkJDAAGoQXyABQThqIQEgAkGICmogAkHICWoQiwEgAkGIBmogAkGICmoQpQE
    gAkGICWogAkGIBmoQeCACQYgJahBEDAELCyACQYgJaiACQcgEahBIIAJBiAZqIAJBiAhqEKUBIAJBiAZqIAJByAlqEEgg
    AkEIaiACQYgGahClASACQYgGaiACQYgJahClASACQYgGaiACQcgIahBIIAJByABqIAJBiAZqEKUBIAJBiAZqIAJByAhqE
    KUBIAJBiAZqIAJByAlqEEggAkGIAWogAkGIBmoQpQEgACACQQhqQcABEGcaIAJBgAtqJAALzQ0CE38IfiMAQYADayIBJA
    AgADQCOCIUIBR+QoCAgBBaBEAgABASCyABQeABakHoABByGiABQcgBaiAAKQMAIhggGEI/hyIZIBggGRAxIAEgASkDyAE
    iFEL//////////wODNwPYASABQdABaikDACIXQgaGIBRCOoiEIRUgF0I6iCEaIABBCGoiCyEFIAAhBkEBIQcDQCAHQQZP
    BEAgAEEYaiEMIABBKGohCyAAQRBqIQcgACkDMCEYQQQhBkEAIQkgAUGgAWohDUEDIQpBAiEIQQchBQJAAkADQCAFQQpLD
    QIgBiAIIAYgCEsbIQ4gBiAKIAYgCksbQQN0QWhqIQ8gAUGYAWogBUEDdCIQIABqQVBqKQMAIhQgFEI/hyAYIBhCP4ciGR
    AxIAVBAWoiEUEBdiESIA0pAwAhFyABKQOYASEUIAshAyAHIQQgBUF7aiITIQICQANAIAIgDkcEQCACQQdGDQIgAUGIAWo
    gBCkDACIWIBZCP4cgAykDACIWIBZCP4cQMSABKQOIASIWIBR8IhQgFlStIAFBkAFqKQMAIBd8fCEXIANBeGohAyAEQQhq
    IQQgAkEBaiECDAELCyABQdgBaiAQaiAUQgGGIhYgFXwiFUL//////////wODNwMAIAFB+ABqIAAgE0EDdGopAwAiGyAbQ
    j+HIBggGRAxIBUgFlStIBdCAYYgFEI/iIQgGnx8IhRCOochGiAUQgaGIBVCOoiEIRkgBUECaiEFIAFBgAFqKQMAIRcgAS
    kDeCEUIAshAyAJIQIDQCACIA9GBEAgAUHYAGogACASQQN0aikDACIVIBVCP4ciFiAVIBYQMSABQdgBaiARQQN0aiAUQgG
    GIhYgGXwiFSABKQNYfCIZQv//////////A4M3AwAgGSAVVK0gAUHgAGopAwAgFSAWVK0gF0IBhiAUQj+IhCAafHx8fCIU
    QjqHIRogFEIGhiAZQjqIhCEVIApBAmohCiAJQRBqIQkgCEECaiEIIAZBAWohBiAHQRBqIQcMAwsgAkEgRg0DIAFB6ABqI
    AIgDGopAwAiFSAVQj+HIAMpAwAiFSAVQj+HEDEgASkDaCIVIBR8IhQgFVStIAFB8ABqKQMAIBd8fCEXIANBeGohAyACQQ
    hqIQIMAAsACwtBB0EHQbSewAAQPAALQQdBB0HEnsAAEDwACyABQagBaiAAKQMoIhQgFEI/hyAYIBhCP4ciFBAxIAEgFSA
    BKQOoASIVQgGGIhl8IhdC//////////8DgzcDsAIgAUG4AWogGCAUIBggFBAxIAEgFyAZVK0gAUGwAWopAwBCAYYgFUI/
    iIQgGnx8IhhCBoYgF0I6iIQiFyABKQO4AXwiFEL//////////wODNwO4AiABIBQgF1StIAFBwAFqKQMAIBhCOod8fEIGh
    iAUQjqIhDcDwAIgAUHIAmogAUHYAWoQBSAAIAFByAJqEGsgAEECNgI4IAFBgANqJAAPCyABQcgAaiAAIAdBA3QiDGopAw
    AiFCAUQj+HIBggGRAxIAdBAWoiDUEBdiEOIAFB0ABqKQMAIRcgASkDSCEUIAghAiAGIQMgCiEEIAshCQNAIAJFBEAgAUH
    YAWogDGogFEIBhiIWIBV8IhVC//////////8DgzcDACABQShqIAAgDUEDdCIMaikDACIbIBtCP4cgGCAZEDEgFSAWVK0g
    F0IBhiAUQj+IhCAafHwiFEI6hyEaIBRCBoYgFUI6iIQhFiAHQQJqIQkgAUEwaikDACEXQQAhAiABKQMoIRQgBSEDIAshB
    ANAIAIgCGpFBEAgAUEIaiAAIA5BA3RqKQMAIhUgFUI/hyIbIBUgGxAxIAFB2AFqIAxqIBRCAYYiGyAWfCIVIAEpAwh8Ih
    ZC//////////8DgzcDACAWIBVUrSABQRBqKQMAIBUgG1StIBdCAYYgFEI/iIQgGnx8fHwiFEI6hyEaIBRCBoYgFkI6iIQ
    hFSAFQRBqIQUgCEEBaiEIIAZBEGohBiAKQQJqIQogCSEHDAQLIAIgB2oiDUEGTQRAIAFBGGogBCkDACIVIBVCP4cgAykD
    ACIVIBVCP4cQMSABKQMYIhUgFHwiFCAVVK0gAUEgaikDACAXfHwhFyADQXhqIQMgAkF/aiECIARBCGohBAwBCwsgDUEHQ
    aSewAAQPAALIARBBk0EQCABQThqIAkpAwAiFiAWQj+HIAMpAwAiFiAWQj+HEDEgASkDOCIWIBR8IhQgFlStIAFBQGspAw
    AgF3x8IRcgAkF/aiECIANBeGohAyAEQX9qIQQgCUEIaiEJDAELCwsgBEEHQZSewAAQPAAL7wwBBH8jAEHADWsiAiQAAkA
    gACgCgAYiA0EBRwRAIAEoAoAGIgRBAUYNAQJAAkACQAJAIARBA00EQCADQX5xQQJGDQEgAiAAEI4BIAJBgAJqEC8gAkGA
    BGoQLyACQYAGahAvIAJBgAhqIAAQjgEgAkGACmoQLyACIAEQGSACQYAIaiAAQYACaiIFEJYBIAJBgAhqEKwBIAJBgAJqI
    AJBgAhqEJIBIAJBgAJqIAEQGSACQYAIaiAFEJIBIAJBgAhqIABBgARqIgMQlgEgAkGACGoQrAEgAkGABmogAkGACGoQkg
    EgBEECRg0CIAJBwAxqIAFBgAVqEF4gAkGABmogAkHADGoQogEMAwsgAiAAEI4BIAJBgAJqEC8gAkGABGoQLyACQYAGahA
    vIAIgARAZAkACQCAEQQRGIgQNACAAKAKABkEERg0AIAJBgARqIABBgAJqEJIBIAJBgARqIAFBgAJqEBkMAQsgAkHADGpB
    OBByGiACQQE2AvgMIAJBgA1qQTgQchogAkG4DWpBATYCACACQYAIakE4EHIaIAJBATYCuAggAkHACGpBOBByGiACQfgIa
    kEBNgIAIAJBgApqIABBgANqIgMQXiACQYAIaiACQYAKahCQASACQYAKaiABQYADaiIFEF4gAkGACGogAkGACmoQDyACQc
    AMahCpASAERQRAIAJBgApqIAMQXiACQcAMaiACQYAKahCQASACQYAKaiABQYACahBeIAJBwAxqIAJBgApqEA8LIAAoAoA
    GQQRHBEAgAkGACmogAEGAAmoQXiACQcAMaiACQYAKahCQASACQYAKaiAFEF4gAkHADGogAkGACmoQDwsgAkGABGogAkHA
    DGogAkGACGoQoQEgAkGABGoQZgsgAkGACGogABCOASACQYAKaiABEI4BIAJBgAhqIABBgAJqIgQQlgEgAkGACGoQrAEgA
    kGACmogAUGAAmoiBRCWASACQYAKahCsASACQYACaiACQYAIahCSASACQYACaiACQYAKahAZIAJBgAhqIAQQkgEgAkGACG
    ogAEGABGoiAxCWASACQYAIahCsASACQYAKaiAFEJIBIAJBgApqIAFBgARqIgUQlgEgAkGACmoQrAEgAkGABmogAkGACGo
    QkgEgAkGABmogAkGACmoQGSACQYAIaiACEJIBIAJBgAhqECsgAkGACmogAkGABGoQkgEgAkGACmoQKyACQYACaiACQYAI
    ahCWASAEIAJBgAJqEJIBIAQgAkGACmoQlgEgAkGABmogAkGACmoQlgEgAkGABGogAkGACGoQlgEgAkGACGogABCSASACQ
    YAIaiADEJYBIAJBgAhqEKwBIAJBgApqIAEQkgEgAkGACmogBRCWASACQYAKahCsASACQYAIaiACQYAKahAZIAJBgARqIA
    JBgAhqEJYBIAJBgAhqIAMQkgEgAkGACGogBRAZIAJBgApqIAJBgAhqEJIBIAJBgApqECsgAyACQYAEahCSASADIAJBgAp
    qEJYBIAJBgAZqIAJBgApqEJYBIAJBgAhqEGYgBCACQYAIahCWAQwDCyAAIAEQBgwECyACQcAMaiABQYAFahBeIAJBgAxq
    IAJBwAxqQcAAEGcaIAJBgAZqIAJBgAxqEKMBCyACQYAGahBmIAJBgAhqIAIQkgEgAkGACGoQKyACQYACaiACQYAIahCWA
    SAFIAJBgAJqEJIBIAJBgARqIAJBgAhqEJIBIAJBgAhqIAAQkgEgAkGACGogAxCWASACQYAIahCsASACQYAKaiABEJIBIA
    JBgApqIAFBgARqEJYBIAJBgApqEKwBIAJBgAhqIAJBgApqEBkgAkGABGogAkGACGoQlgEgAkGACGogAxCSAQJAIARBAkc
    EQCACQcAMaiABQYAFahBeIAJBgAhqIAJBwAxqEKIBDAELIAJBwAxqIAFBgAVqEF4gAkGADGogAkHADGpBwAAQZxogAkGA
    CGogAkGADGoQowELIAJBgAhqEGYgAkGACmogAkGACGoQkgEgAkGACmoQKyADIAJBgARqEJIBIAMgAkGACmoQlgEgAkGAB
    mogAkGACmoQlgEgAkGACGoQZiAFIAJBgAhqEJYBCyACQYAGahCsASACQYAGahBmIAAgAhCSASAAIAJBgAZqEJYBIABBBT
    YCgAYgABCZAQwBCyAAIAEQbAsgAkHADWokAAuaCQIPfwt+IwBBwAJrIgIkACACQeAAakGgp8AAEF8gAEE4EHIhDCACQZg
    BakHwABByGiACQZACakEwEHIaIAwQdCACIAEpAwAiFEL9//P/z///+QF+Qv//////////A4MiETcDiAIgAkHQAGogEUIA
    IAIpA2AiGCAYQj+HIhoQMSAUIAIpA1AiEXwiFiARVK0gAkHYAGopAwAgFEI/h3x8IhRCOocgASkDCCIRQj+HfCARIBRCB
    oYgFkI6iIQiEXwiEiARVK18IRNBASEDAkADQAJAIANBB0YEQCACQZACaiEJIAJB6ABqIQpBByEEIAJB4ABqIQ0gAkGIAm
    ohDkEGIQ8MAQsgA0EBdiIAQQFqIQUgCiAAayEGIAkgAEEDdCIHayEAIAdBCGohCCACQUBrIANBA3QiBCACQeAAamopAwA
    iFiAWQj+HIhQgAikDiAIiESARQj+HEDEgAkHIAGopAwAgEiAVfCIRIBJUrSATIBd8fHwgESACKQNAfCITIBFUrXwhEiAD
    QQFqIQcDQCADIAVNBEAgAkGIAmogBGogE0L9//P/z///+QF+Qv//////////A4MiETcDACACQTBqIBFCACAYIBoQMSACQ
    SBqIBFCACAWIBQQMSACQZgBaiADQQR0aiIAIAJBKGopAwAiGzcDCCAAIAIpAyAiGTcDACACKQMwIhEgE3wiFiARVK0gAk
    E4aikDACASfHwiFEI6hyABIAdBA3RqKQMAIhFCP4d8IBEgFEIGhiAWQjqIhCIRfCISIBFUrXwhEyAVIBl8IhUgGVStIBc
    gG3x8IRcgCUEIaiEJIApBAWohCiAHIQMMAwsgBkEGSw0DIAJBEGogAkHgAGogCGopAwAgAkHgAGogAGopAwB9IhEgEUI/
    hyACQYgCaiAAaikDACACQYgCaiAIaikDAH0iESARQj+HEDEgAikDECIRIBN8IhMgEVStIAJBGGopAwAgEnx8IRIgBUEBa
    iEFIABBeGohACAGQX9qIQYgCEEIaiEIDAALAAsLA0ACQCAEQQ1HBEAgDyAEQQF2IgBrIQUgDiAAQQN0IgtrIRAgDSALay
    EIIBMgF3wgEiAVfCITIBJUrXwhEiAEQQFqIQdBMCEAIAkhBiAKIQMDQCAAIAtGDQIgBUEGTQRAIAIgAyALaikDACAAIAh
    qKQMAfSIRIBFCP4cgACAQaikDACAGIAtqKQMAfSIRIBFCP4cQMSACKQMAIhEgE3wiEyARVK0gAkEIaikDACASfHwhEiAF
    QX9qIQUgBkEIaiEGIANBCGohAyAAQXhqIQAMAQsLIAVBB0HknsAAEDwACyAMIBJC//////////8DgzcDMCACQcACaiQAD
    wsgBEEDdCAMakFIaiATQv//////////A4M3AwAgEkI6hyABIAdBA3RqKQMAIhFCP4d8IBEgEkIGhiATQjqIhCIRfCISIB
    FUrXwhEyAXIARBBHQgAmpBOGoiAEEIaikDAH0gFSAAKQMAIhFUrX0hFyAOQQhqIQ4gDUEIaiENIA9BAWohDyAVIBF9IRU
    gByEEDAALAAsgBkEHQdSewAAQPAAL+QkBBH8jAEGACWsiAiQAIAJBgAhqIAAQXiACIAJBgAhqEF4gAkGACGogAEGAAWoi
    BBBeIAJBgAFqIAJBgAhqEF4gAkGACGogARBeIAIgAkGACGoQDyACQYAIaiABQYABaiIFEF4gAkGAAWogAkGACGoQDyAAK
    AKABiEDAkACQCABKAKABkECRwRAIANBAkYNASACQYAIaiAAQYAFahBeIAJBgAJqIAJBgAhqEF4gAkGACGogAUGABWoQXi
    ACQYACaiACQYAIahAPDAILIANBAkYEQCACQYAIaiAAQYAFahBeIAJBgAdqIAJBgAhqQcAAEGcaIAJBgAZqIAJBgAdqEIU
    BIAJBgAhqIAFBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGABmogAkGAB2oQSCACQYAIakE4EHIaIAJBATYCuAggAkHA
    CGpBOBByIAJB+AhqQQE2AgAgAkGACGogAkGABmoQpQEQsgEgAkGAAmogAkGACGpBgAEQZxoMAgsgAkGACGogAEGABWoQX
    iACQYACaiACQYAIahBeIAJBgAhqIAFBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGAAmogAkGAB2oQoAEMAQsgAkGACG
    ogAUGABWoQXiACQYACaiACQYAIahBeIAJBgAhqIABBgAVqEF4gAkGAB2ogAkGACGpBwAAQZxogAkGAAmogAkGAB2oQoAE
    LIAJBgAhqIAAQXiACQYADaiACQYAIahBeIAJBgAhqIAEQXiACQYAEaiACQYAIahBeIAJBgAhqIAQQXiACQYADaiACQYAI
    ahCVASACQYADahCoASACQYAIaiAFEF4gAkGABGogAkGACGoQlQEgAkGABGoQqAEgAkGABWogAkGAA2oQXiACQYAFaiACQ
    YAEahAPIAJBgAZqIAIQXiACQYAGaiACQYABahCVASACQYAGahA6IAJBgAVqIAJBgAZqEJUBIAJBgAhqIAAQXiACQYADai
    ACQYAIahCQASACQYAIaiAAQYAFaiIDEF4gAkGAA2ogAkGACGoQlQEgAkGAA2oQqAEgAkGACGogARBeIAJBgARqIAJBgAh
    qEJABIAJBgAhqIAFBgAVqIgEQXiACQYAEaiACQYAIahCVASACQYAEahCoASACQYAHaiACQYADahBeIAJBgAdqIAJBgARq
    EA8gAkGABmogAhCQASACQYAGaiACQYACahCVASACQYAGahA6IAJBgAdqIAJBgAZqEJUBIAJBgAhqIAQQXiACQYADaiACQ
    YAIahCQASACQYAIaiADEF4gAkGAA2ogAkGACGoQlQEgAkGAA2oQqAEgAkGACGogBRBeIAJBgARqIAJBgAhqEJABIAJBgA
    hqIAEQXiACQYAEaiACQYAIahCVASACQYAEahCoASACQYAIaiACQYADahBeIAJBgAhqIAJBgARqEA8gAkGABmogAkGAAWo
    QkAEgAkGABmogAkGAAmoQlQEgAkGABmoQOiACQYAIaiACQYAGahCVASACQYABahBVIAIgAkGAAWoQlQEgACACIAJBgAVq
    EKEBIAJBgAJqEFUgAkGAAmoQqAEgAEGAA2ogAkGAAmoQkAEgAEGAAmoQqQEgAkGACGoQqAEgAkGACGoQVSAAQYAEaiIBI
    AJBgAhqIAJBgAdqEKEBIAAQrAEgARCsASAAQQQ2AoAGIAJBgAlqJAALnwgBB38jAEGgC2siASQAIAFBCGpBoKfAABBfIA
    FBCGpBARCeAQNAIAJBMEYEQCABIAEpAzhCAYc3AzggAUEIakEBEJ4BIAFBCGpBARA7QQAhAiABQYABakE4EHIaIAFB4Ap
    qQTgQchogAUGACWpBOBByGiABQQE2ArgBIAFBwAFqQTgQciEEIAFB+AFqQQE2AgAgAUGAAmpBOBByGiABQbgCakEBNgIA
    IAFBwAJqQTgQchogAUH4AmpBATYCACABQYADakE4EHIaIAFBuANqQQE2AgAgAUHAA2pBOBByGiABQfgDakEBNgIAIAFBg
    ARqQTgQchogAUG4BGpBATYCACABQcAEakE4EHIaIAFB+ARqQQE2AgAgAUGABWpBOBByGiABQbgFakEBNgIAIAFBwAVqQT
    gQchogAUH4BWpBATYCACABQYAGakE4EHIaIAFBuAZqQQE2AgAgAUHABmpBOBByGiABQfgGakEBNgIAIAFBgAdqQTgQcho
    gAUG4B2pBATYCACABQcAHakE4EHIaIAFB+AdqQQE2AgAgAUGACGogAUHgCmpBOBBnGiABQbgIakEBNgIAIAFBwAhqIAFB
    gAlqQTgQZxogAUH4CGpBATYCACABQYAJakHnABByGiABQegJaiAAEIUBIAFB6AlqEEQgAUGoCmogAUEIahBfIAFBqApqE
    EQgAUGoCmoQKUEDaiIFQQJ2IgNBAWohBgJAAkACQAJAAkACQANAAkAgAiAGRgRAIAFBgAFqEGkgBCABQegJahClASABQe
    AKakE4EHIaIAFBATYCmAtBgHkhAgwBCyABQagKaiABQagKakEEEIwBIgcQngEgAUGoCmoQRCACQecARg0CIAFBgAlqIAJ
    qIAc6AAAgAUGoCmpBBBA7IAJBAWohAgwBCwsDQCACBEAgAUHgCmogAUGAAWogAmoiBEHAB2oQpQEgBEGACGoiBCABQeAK
    ahClASAEIAFB6AlqEEggAkFAayECDAELCyAFQZwDTw0BIAFBgAlqIANqLAAAIgJBD0sNAiABQUBrIAFBgAFqIAJBBnRqE
    IUBIANBf2ohAgNAIAJBf0YNBiABQUBrEAMgAUFAaxADIAFBQGsQAyABQUBrEAMgAkHmAEsNBCABQYAJaiACai0AACIDQQ
    9LDQUgAUFAayABQYABaiADQQZ0ahBIIAJBf2ohAgwACwALQecAQecAQYSjwAAQPAALIANB5wBBlKPAABA8AAsgAkEQQaS
    jwAAQPAALIAJB5wBBtKPAABA8AAsgA0EYdEEYdUEQQcSjwAAQPAALIAFBQGsQEiAAIAFBQGsQpQEgAUGgC2okAAUgAUEI
    aiACaiIDIANBCGopAwBCOYZCgICAgICAgIACgyADKQMAQgGHhDcDACACQQhqIQIMAQsLC8EHAhJ/BX4jAEGQAmsiBCQAI
    ABB8AAQciEPIARBMGpB4AEQchogBEEwaiEAAkADQCADQThGBEACQCAPIAQpAzAiGEL//////////wODNwMAIAFBCGohCS
    ACQQhqIQogAiEMIAEhDUF4IRBBASEGIBghFSAEQThqKQMAIhkhFwNAAkAgF0IGhiAVQjqIhCEWIBdCOochFyAGQQdGBEA
    gAUEIaiEMIAJBCGohDUEHIQBBBiEKDAELIAsgBkEBdiIFayEAIAwgBUEDdCIIayERIA0gCGshEiAEQTBqIAZBBHRqIgVB
    CGopAwAgGXwgBSkDACIVIBh8IhggFVStfCIZIBd8IBYgGHwiFSAYVK18IRcgCEFQaiETIAggEGohFCAGQQFqIQ5BACEDI
    AkhByAKIQUDQCADIBRGBEAgDyAGQQN0aiAVQv//////////A4M3AwAgDEEIaiEMIA1BCGohDSALQQFqIQsgEEF4aiEQIA
    4hBgwDCyADIBNGDQYgAEEGSw0DIARBEGogAyARaikDACAFIAhqKQMAfSIWIBZCP4cgByAIaikDACADIBJqKQMAfSIWIBZ
    CP4cQMSAEKQMQIhYgFXwiFSAWVK0gBEEYaikDACAXfHwhFyAAQX9qIQAgB0EIaiEHIAVBCGohBSADQXhqIQMMAAsACwsD
    QAJAIABBDUcEQCAKIABBAXYiBWshByACIAVBA3QiCWshCCABIAlrIQsgGSAAQQR0IARqQUBqIgVBCGopAwB9IBggBSkDA
    CIVVK19IhkgF3wgGCAVfSIYIBZ8IhcgGFStfCEVIABBAWohBkEwIQMgDCEFIA0hDgNAIAMgCUYNAiAHQQZNBEAgBCADIA
    hqKQMAIAkgDmopAwB9IhYgFkI/hyAFIAlqKQMAIAMgC2opAwB9IhYgFkI/hxAxIAQpAwAiFiAXfCIXIBZUrSAEQQhqKQM
    AIBV8fCEVIAdBf2ohByAFQQhqIQUgDkEIaiEOIANBeGohAwwBCwsgB0EHQYSewAAQPAALIA8gFjcDaCAEQZACaiQADwsg
    DyAAQQN0aiAXQv//////////A4M3AwAgFUIGhiAXQjqIhCEWIAJBCGohAiABQQhqIQEgCkEBaiEKIBVCOochFyAGIQAMA
    AsACwUgBEEgaiACIANqKQMAIhUgFUI/hyABIANqKQMAIhUgFUI/hxAxIAAgBEEoaikDADcDCCAAIAQpAyA3AwAgAEEQai
    EAIANBCGohAwwBCwsgAEEHQfSdwAAQPAALQQdBB0HkncAAEDwAC8sIAQV/IABBeGoiASAAQXxqKAIAIgNBeHEiAGohAgJ
    AAkAgA0EBcQ0AIANBA3FFDQEgASgCACIDIABqIQAgASADayIBQey4wQAoAgBGBEAgAigCBEEDcUEDRw0BQeS4wQAgADYC
    ACACIAIoAgRBfnE2AgQgASAAQQFyNgIEIAAgAWogADYCAA8LIAEgAxAVCwJAIAJBBGoiBCgCACIDQQJxBEAgBCADQX5xN
    gIAIAEgAEEBcjYCBCAAIAFqIAA2AgAMAQsCQCACQfC4wQAoAgBHBEBB7LjBACgCACACRg0BIAIgA0F4cSICEBUgASAAIA
    JqIgBBAXI2AgQgACABaiAANgIAIAFB7LjBACgCAEcNAkHkuMEAIAA2AgAPC0HwuMEAIAE2AgBB6LjBAEHouMEAKAIAIAB
    qIgA2AgAgASAAQQFyNgIEQey4wQAoAgAgAUYEQEHkuMEAQQA2AgBB7LjBAEEANgIAC0GMucEAKAIAIgIgAE8NAkHwuMEA
    KAIAIgBFDQICQEHouMEAKAIAIgNBKUkNAEH8uMEAIQEDQCABKAIAIgQgAE0EQCAEIAEoAgRqIABLDQILIAEoAggiAQ0AC
    wtBlLnBAAJ/Qf8fQYS5wQAoAgAiAEUNABpBACEBA0AgAUEBaiEBIAAoAggiAA0ACyABQf8fIAFB/x9LGws2AgAgAyACTQ
    0CQYy5wQBBfzYCAA8LQey4wQAgATYCAEHkuMEAQeS4wQAoAgAgAGoiADYCACABIABBAXI2AgQgACABaiAANgIADwtBlLn
    BAAJ/AkAgAEGAAk8EQEEfIQIgAUIANwIQIABB////B00EQCAAQQYgAEEIdmciAmtBH3F2QQFxIAJBAXRrQT5qIQILIAFB
    HGogAjYCACACQQJ0QeS3wQBqIQMCQAJAAkACQAJAQdi1wQAoAgAiBEEBIAJBH3F0IgVxBEAgAygCACIDQQRqKAIAQXhxI
    ABHDQEgAyECDAILQdi1wQAgBCAFcjYCACADIAE2AgAMAwsgAEEAQRkgAkEBdmtBH3EgAkEfRht0IQQDQCADIARBHXZBBH
    FqQRBqIgUoAgAiAkUNAiAEQQF0IQQgAiEDIAJBBGooAgBBeHEgAEcNAAsLIAIoAggiACABNgIMIAIgATYCCCABQRhqQQA
    2AgAgASACNgIMIAEgADYCCAwCCyAFIAE2AgALIAFBGGogAzYCACABIAE2AgwgASABNgIIC0GUucEAQZS5wQAoAgBBf2oi
    ADYCACAADQNBhLnBACgCACIADQFB/x8MAgsgAEEDdiICQQN0Qdy1wQBqIQACf0HUtcEAKAIAIgNBASACdCICcQRAIAAoA
    ggMAQtB1LXBACACIANyNgIAIAALIQIgACABNgIIIAIgATYCDCABIAA2AgwgASACNgIIDwtBACEBA0AgAUEBaiEBIAAoAg
    giAA0ACyABQf8fIAFB/x9LGws2AgALC9AHAgp/An4jAEEwayIIJABBJyECAkAgADUCACIMQpDOAFQEQCAMIQ0MAQsDQCA
    IQQlqIAJqIgBBfGogDEKQzgCAIg1C8LF/fiAMfKciA0H//wNxQeQAbiIEQQF0QeaowABqLwAAOwAAIABBfmogBEGcf2wg
    A2pB//8DcUEBdEHmqMAAai8AADsAACACQXxqIQIgDEL/wdcvViANIQwNAAsLIA2nIgBB4wBKBEAgAkF+aiICIAhBCWpqI
    A2nIgNB//8DcUHkAG4iAEGcf2wgA2pB//8DcUEBdEHmqMAAai8AADsAAAsCQCAAQQpOBEAgAkF+aiIFIAhBCWpqIABBAX
    RB5qjAAGovAAA7AAAMAQsgAkF/aiIFIAhBCWpqIABBMGo6AAALQScgBWshA0EBIQJBK0GAgMQAIAEoAgAiAEEBcSIGGyE
    EIABBHXRBH3VB9KrAAHEhByAIQQlqIAVqIQUCQCABKAIIQQFHBEAgASAEIAcQUw0BIAEoAhggBSADIAFBHGooAgAoAgwR
    BQAhAgwBCyABQQxqKAIAIgkgAyAGaiIGTQRAIAEgBCAHEFMNASABKAIYIAUgAyABQRxqKAIAKAIMEQUAIQIMAQsCQAJAA
    kACQCAAQQhxBEAgASgCBCEKIAFBMDYCBCABLQAgIQsgAUEBOgAgIAEgBCAHEFMNBUEAIQIgCSAGayIAIQRBASABLQAgIg
    cgB0EDRhtBA3FBAWsOAwIBAgMLQQAhAiAJIAZrIgAhCQJAAkACQEEBIAEtACAiBiAGQQNGG0EDcUEBaw4DAQABAgsgAEE
    BdiECIABBAWpBAXYhCQwBC0EAIQkgACECCyACQQFqIQIDQCACQX9qIgJFDQQgASgCGCABKAIEIAEoAhwoAhARAwBFDQAL
    QQEhAgwECyAAQQF2IQIgAEEBakEBdiEEDAELQQAhBCAAIQILIAJBAWohAgJAA0AgAkF/aiICRQ0BIAEoAhggASgCBCABK
    AIcKAIQEQMARQ0AC0EBIQIMAgsgASgCBCEHQQEhAiABKAIYIAUgAyABKAIcKAIMEQUADQEgBEEBaiEAIAEoAhwhAyABKA
    IYIQQDQCAAQX9qIgAEQCAEIAcgAygCEBEDAEUNAQwDCwsgASALOgAgIAEgCjYCBEEAIQIMAQsgASgCBCEGQQEhAiABIAQ
    gBxBTDQAgASgCGCAFIAMgASgCHCgCDBEFAA0AIAlBAWohACABKAIcIQMgASgCGCEBA0AgAEF/aiIARQRAQQAhAgwCCyAB
    IAYgAygCEBEDAEUNAAsLIAhBMGokACACC7gGAQV/IwBBgAhrIgIkACACIAAQXiACIAEQDyACQYABaiAAQYABaiIDEF4gA
    kGAAWogAUGAAWoiBRAPIAJBgAJqIABBgAJqIgQQXiACQYACaiABQYACaiIGEA8gAkGAA2ogABBeIAJBgANqIAMQlQEgAk
    GAA2oQqAEgAkGABGogARBeIAJBgARqIAUQlQEgAkGABGoQqAEgAkGAA2ogAkGABGoQDyACQYAEaiACEJABIAJBgARqIAJ
    BgAFqEJUBIAJBgANqIAJBgARqEH0gAkGAA2oQqAEgAkGABGogAxCQASACQYAEaiAEEJUBIAJBgARqEKgBIAJBgAVqIAUQ
    XiACQYAFaiAGEJUBIAJBgAVqEKgBIAJBgARqIAJBgAVqEA8gAkGABWogAkGAAWoQkAEgAkGABWogAkGAAmoQlQEgAkGAB
    GogAkGABWoQfSACQYAEahCoASACQYAFaiAAEJABIAJBgAVqIAQQlQEgAkGABWoQqAEgAkGABmogARBeIAJBgAZqIAYQlQ
    EgAkGABmoQqAEgAkGABWogAkGABmoQDyACQYAGaiACEJABIAJBgAZqIAJBgAJqEJUBIAJBgAZqIAJBgAVqELUBIAJBgAZ
    qEKgBIAJBgAVqIAIQkAEgAkGABWogAhCVASACIAJBgAVqEJUBIAIQqAEgAkGAAmpBDBCfASACQYACahBVIAJBgAJqEKgB
    IAJBgAdqIAJBgAFqEF4gAkGAB2ogAkGAAmoQlQEgAkGAB2oQqAEgAkGAAWogAkGAAmoQfSACQYABahCoASACQYAGakEME
    J8BIAJBgAZqEFUgAkGABmoQqAEgAkGABWogAkGABmoQkAEgAkGABWogAkGABGoQDyACQYACaiACQYADahCQASACQYACai
    ACQYABahAPIAJBgAVqIAJBgAJqELUBIAJBgAZqIAIQDyACQYABaiACQYAHahAPIAJBgAZqIAJBgAFqEJUBIAIgAkGAA2o
    QDyACQYAHaiACQYAEahAPIAJBgAdqIAIQlQEgACACQYAFahCQASAAEKgBIAMgAkGABmoQkAEgAxCoASAEIAJBgAdqEJAB
    IAQQqAEgAkGACGokAAv2BQEFfyMAQYAEayICJAAgAiAAEIUBIAIgARBIIAJBQGsgAEFAayIDEIUBIAJBQGsgAUFAayIFE
    EggAkGAAWogAEGAAWoiBBCFASACQYABaiABQYABaiIGEEggAkHAAWogABCFASACQcABaiADEHggAkHAAWoQRCACQYACai
    ABEIUBIAJBgAJqIAUQeCACQYACahBEIAJBwAFqIAJBgAJqEEggAkGAAmogAhClASACQYACaiACQUBrEHggAkHAAWogAkG
    AAmoQgAEgAkHAAWoQRCACQYACaiADEKUBIAJBgAJqIAQQeCACQYACahBEIAJBwAJqIAUQhQEgAkHAAmogBhB4IAJBwAJq
    EEQgAkGAAmogAkHAAmoQSCACQcACaiACQUBrEKUBIAJBwAJqIAJBgAFqEHggAkGAAmogAkHAAmoQgAEgAkGAAmoQRCACQ
    cACaiAAEKUBIAJBwAJqIAQQeCACQcACahBEIAJBgANqIAEQhQEgAkGAA2ogBhB4IAJBgANqEEQgAkHAAmogAkGAA2oQSC
    ACQYADaiACEKUBIAJBgANqIAJBgAFqEHggAkGAA2ogAkHAAmoQswEgAkGAA2oQRCACQcACaiACEKUBIAJBwAJqIAIQeCA
    CIAJBwAJqEHggAhBEIAJBgAFqQQwQUiACQcADaiACQUBrEIUBIAJBwANqIAJBgAFqEHggAkHAA2oQRCACQUBrIAJBgAFq
    EIABIAJBQGsQRCACQYADakEMEFIgAkHAAmogAkGAA2oQpQEgAkHAAmogAkGAAmoQSCACQYABaiACQcABahClASACQYABa
    iACQUBrEEggAkHAAmogAkGAAWoQswEgAkGAA2ogAhBIIAJBQGsgAkHAA2oQSCACQYADaiACQUBrEHggAiACQcABahBIIA
    JBwANqIAJBgAJqEEggAkHAA2ogAhB4IAAgAkHAAmoQpQEgABBEIAMgAkGAA2oQpQEgAxBEIAQgAkHAA2oQpQEgBBBEIAJ
    BgARqJAALxQUBBH8jAEHwEmsiACQAIAAQOEF/IQEgABCIAUUEQCAAQYADakE4EHIaIABBuANqQTgQchogAEG4A2ogAEGA
    A2oQVCAAQfAKakG4gMAAEF8gAEHwDWpB8IDAABBfIABB8ANqIABB8ApqIABB8A1qEEkgAEHwBGpBOBByGiAAQQE2AqgFI
    ABBsAVqQTgQchogAEHoBWpBATYCACAAQfAFakE4EHIaIABBATYCqAYgAEGwBmpBOBByGiAAQegGakEBNgIAIABB8AZqQT
    gQchogAEEBNgKoByAAQbAHakE4EHIaIABB6AdqQQE2AgBBf2ohAyAAQfAHahAqIABB8AdqIAAQfiAAQfAKahAqIABB8Ap
    qIABB8AdqEH4gAEHwDWoQKiAAQfANaiAAQfAHahB+IABB8A1qEJwBAkACQAJAA0AgAiEBIANBAkkNAyAAQfAKaiAAQfAE
    aiAAQfAFaiAAQfAGahAlIAFBxABNBEAgAEHwEGogAEHwBGogAEHwBWogAEHwBmoQRiABQQh0QdCrwABqIABB8BBqEJIBI
    AFBAWohAgJAAkAgAEG4A2ogA0F/aiIDEFcgAEGAA2ogAxBXa0EBag4DAQMAAwsgAEHwCmogAEHwB2ogAEHwBGogAEHwBW
    ogAEHwBmoQHiABQcMASw0DIABB8BBqIABB8ARqIABB8AVqIABB8AZqEEYgAkEIdEHQq8AAaiAAQfAQahCSASABQQJqIQI
    MAgsgAEHwCmogAEHwDWogAEHwBGogAEHwBWogAEHwBmoQHiABQcMASw0DIABB8BBqIABB8ARqIABB8AVqIABB8AZqEEYg
    AkEIdEHQq8AAaiAAQfAQahCSASABQQJqIQIMAQsLIAFBxQBBvIHAABA8AAtBxQBBxQBBzIHAABA8AAtBxQBBxQBB3IHAA
    BA8AAtBACEBCyAAQfASaiQAIAEL8gQBBH8jAEGADGsiAiQAIAIgABCOASACQYACahAvIAJBgARqIABBgAJqIgMQjgEgAk
    GABmoQLyACQYAIaiAAEI4BIAJBgApqIAEQjgEgAiABEBkgAkGABGogAUGAAmoiBBAZIAJBgAhqIAMQlgEgAkGACmogBBC
    WASACQYAIahCsASACQYAKahCsASACQYACaiACQYAIahCSASACQYACaiACQYAKahAZIAJBgAhqIAMQkgEgAkGACGogAEGA
    BGoiBRCWASACQYAKaiAEEJIBIAJBgApqIAFBgARqIgQQlgEgAkGACGoQrAEgAkGACmoQrAEgAkGABmogAkGACGoQkgEgA
    kGABmogAkGACmoQGSACQYAIaiACEJIBIAJBgAhqECsgAkGACmogAkGABGoQkgEgAkGACmoQKyACQYACaiACQYAIahCWAS
    ADIAJBgAJqEJIBIAMgAkGACmoQlgEgAkGABmogAkGACmoQlgEgAkGABGogAkGACGoQlgEgAkGACGogABCSASACQYAIaiA
    FEJYBIAJBgAhqEKwBIAJBgApqIAEQkgEgAkGACmogBBCWASACQYAKahCsASACQYAIaiACQYAKahAZIAJBgARqIAJBgAhq
    EJYBIAJBgAhqIAUQkgEgAkGACGogBBAZIAJBgApqIAJBgAhqEJIBIAJBgApqECsgBSACQYAEahCSASAFIAJBgApqEJYBI
    AJBgAZqIAJBgApqEJYBIAJBgAhqEGYgAyACQYAIahCWASACQYAGahCsASACQYAGahBmIAAgAhCSASAAIAJBgAZqEJYBIA
    BBBTYCgAYgABCZASACQYAMaiQAC68EAQV/IwBBkAZrIgIkACAAQUBrIQQCQCABQfgAaigCACABKAI4aqwgAEH4AGooAgA
    iAyAAKAI4IgVqrH5CgICAEFMNACAFQQJOBH8gABASIAAoAngFIAMLQQJIDQAgBBASCyACQaCnwAAQX0EAIQMgAkE4akHw
    ABByGiABQUBrIQUDQCADQThGBEAgAkHwAGohBkEAIQMDQCADQThGRQRAIAMgBmogAiADaikDADcDACADQQhqIQMMAQsLI
    AJBqAFqIAAQXyACQeABaiABEF8gAkGYAmogACABEAggAkGIA2ogBCAFEAggAkGoAWogBBBhIAJBqAFqEEQgAkHgAWogBR
    BhIAJB4AFqEEQgAkH4A2ogAkGoAWogAkHgAWoQCEEAIQMgAkHoBGpB8AAQchoDQCADQfAARkUEQCACQegEaiADaiACQZg
    CaiADaikDADcDACADQQhqIQMMAQsLIAJB6ARqIAJBiANqEGVBACEDA0AgA0HwAEZFBEAgAkGIA2ogA2oiASACQThqIANq
    KQMAIAEpAwB9NwMAIANBCGohAwwBCwsgAkGYAmogAkGIA2oQZSACQZgCahBFIAJB+ANqIAJB6ARqEGQgAkH4A2oQRSACQ
    dgFaiACQZgCahAFIAAgAkHYBWoQayAAQQM2AjggAkHYBWogAkH4A2oQBSAEIAJB2AVqEGsgAEECNgJ4IAJBkAZqJAAFIA
    JBOGogA2pCADcDACADQQhqIQMMAQsLC5QEAQF/IwBB0CJrIgMkACADQcAWakG4gMAAEF8gA0HIHGpB8IDAABBfIANBCGo
    gA0HAFmogA0HIHGoQSSADQYgBakE4EHIaIANBwAFqQTgQchogA0H4AWoQKgJAIAIQhAFFBEAgA0H4BGoQKiADQfgEaiAB
    EH4gA0H4BGoQSiADQfgHahBLIANB+AdqIAIQfyADQfgHahBHIANByBxqIANB+AdqEIUBIANBuAlqIANByBxqEIUBIANBy
    BxqIANBuAhqEIUBIANB+AlqIANByBxqEIUBIANBuApqECogA0G4DWoQYCADQbgKaiADQfgEahB+IANBwBNqECogA0HAE2
    ogA0H4BGoQfiADQcATahCcASADQcABaiADQYgBahBUQX9qIQIDQCACQQFNBEAgA0G4DWoQkwEgACADQbgNakGIBhBnGgw
    DBSADQbgNahAbIANBwBZqIANBuApqIANBuAlqIANB+AlqEBcCQAJAAkAgA0HAAWogAkF/aiICEFcgA0GIAWogAhBXa0EB
    ag4DAQIAAgsgA0HIHGogA0G4CmogA0H4BGogA0G4CWogA0H4CWoQFiADQcAWaiADQcgcahAGDAELIANByBxqIANBuApqI
    ANBwBNqIANBuAlqIANB+AlqEBYgA0HAFmogA0HIHGoQBgsgA0G4DWogA0HAFmoQBAwBCwALAAsgABBgCyADQdAiaiQAC8
    MDARV/A0AgAUHAAUYEQAJAIABBKGohCyAAQRRqKAIAIgwhCCAAQRBqKAIAIg0hAyAAQQxqKAIAIg4hAiAAKAIIIg8hASA
    AQRhqKAIAIhAhCiAAQRxqKAIAIhEhBCAAQSBqKAIAIhIhByAAQSRqKAIAIhMhBgNAIAchCSAEIQcgCiEEIAVBgAJGDQEg
    AiADcSEUIAIgA3MhFSAFIAtqKAIAIAVB9J7AAGooAgAgBEEadyAEQRV3cyAEQQd3cyAGaiAJIARBf3NxIAQgB3FyampqI
    gYgCGohCiAFQQRqIQUgAyEIIAIhAyABIQIgAUEedyABQRN3cyABQQp3cyAUIAEgFXFzaiAGaiEBIAkhBgwACwALBSAAIA
    FqIgNB6ABqIANBzABqKAIAIANBKGooAgAgA0EsaigCACICQRl3IAJBDndzIAJBA3ZzIANB4ABqKAIAIgJBD3cgAkENd3M
    gAkEKdnNqamo2AgAgAUEEaiEBDAELCyAAIAYgE2o2AiQgACAJIBJqNgIgIAAgByARajYCHCAAIAQgEGo2AhggACAIIAxq
    NgIUIAAgAyANajYCECAAIAIgDmo2AgwgACABIA9qNgIIC9YDAgZ/An4jAEHwAGsiASQAIAFBoKfAABBfIAFBOGogARBfI
    AAQRAJAAkACQCABAn8gACgCOCICQRBMBEAgAkF/ahA5DAELIAEpAzAiCEIBfCIHIAhUDQEgACkDMCIIQoCAgICAgICAgH
    9RQQAgB0J/URsNAiABQThqIAggB3+nECghByABIAEpA2ggB0I6hnw3A2ggACABQThqEGIgABBEQQILIgMQLSAAQQhqIQQ
    DQCADRQ0DIAEgASkDCEI5hkKAgICAgICAgAKDIAEpAwBCAYeEIgc3AwAgASAAKQMAIAd9IgdC//////////8DgzcDOEEA
    IQIDQCAHQjqHIQcgAkEoRkUEQCABIAJqIgVBCGoiBiAFQRBqKQMAQjmGQoCAgICAgICAAoMgBikDAEIBh4QiCDcDACABI
    AJqQUBrIAIgBGopAwAgCH0gB3wiB0L//////////wODNwMAIAJBCGohAgwBCwsgASABKQMwQgGHIgg3AzAgASAAKQMwIA
    h9IAd8Igc3A2ggACABQThqIAdCP4enQQFqEE8gA0F/aiEDDAALAAtBoKLAAEEZQbyiwAAQWwALQdCiwABBH0G8osAAEFs
    ACyAAQQE2AjggAUHwAGokAAuhAwEBfyMAQZADayIGJAAgBkEIakHAABByGiAGQcgAakGoAhByGiAGQcgAahBDA0AgAQRA
    IAZByABqQQAQPiABQX9qIQEMAQUCQCACBEAgBkHIAGogAiADEHoLIAQEQCAGQcgAaiAEIAUQegsgBkGIA2pCADcDACAGQ
    YADakIANwMAIAZB+AJqQgA3AwAgBkIANwPwAiAGKAJIIQEgBigCTCECIAZByABqQYABED4DQCAGKAJIQf8DcUHAA0ZFBE
    AgBkHIAGpBABA+DAELCyAGQawBaiABNgIAIAZBqAFqIAI2AgAgBkHIAGoQEUEAIQJBACEBA0AgAUEgRkUEQCAGQfACaiA
    BaiABQXxxIAZqQdAAaigCACACQX9zQRhxdjoAACACQQhqIQIgAUEBaiEBDAELCyAGQcgAahBDQQAhAQNAIAFBIEZFBEAg
    BkEIaiABaiAGQfACaiABai0AADoAACABQQFqIQEMAQsLQQAhAQNAIAFBIEYNASAAIAFqIAZBCGogAWotAAA6AAAgAUEBa
    iEBDAALAAsLCyAGQZADaiQAC6EDAQN/IwBBgAZrIgEkACABIABBgAFqIgMQXiABQYABaiADEF4gAUGAAWoQMiABQYACai
    ABEF4gAUGAAmogAEGAAmoiAhAPIAFBgANqIAIQXiABQYADahAyIAIgAUGAAWoQkAEgAiABQYABahCVASACEKgBIAIQpwE
    gAhCnASACEKgBIAFBgANqQQwQnwEgAUGAA2oQVSABQYADahCoASABQYAEaiABQYADahBeIAFBgARqIAIQDyABQYAFaiAB
    QYABahBeIAFBgAVqIAFBgANqEJUBIAFBgAVqEKgBIAIgAUGAAmoQDyABQYACaiABQYADahCQASABQYACaiABQYADahCVA
    SABQYADaiABQYACahCVASABQYADahCoASABQYABaiABQYADahB9IAFBgAFqEKgBIAFBgAVqIAFBgAFqEA8gAUGABWogAU
    GABGoQlQEgAUGAAmogABCQASABQYACaiABEA8gACABQYABahCQASAAEKgBIAAgAUGAAmoQDyAAEKcBIAAQqAEgAyABQYA
    FahCQASADEKgBIAFBgAZqJAALhQMBBH8CQAJAIAFBgAJPBEAgAEEYaigCACEEAkACQCAAIAAoAgwiAkYEQCAAQRRBECAA
    QRRqIgIoAgAiAxtqKAIAIgENAUEAIQIMAgsgACgCCCIBIAI2AgwgAiABNgIIDAELIAIgAEEQaiADGyEDA0AgAyEFIAEiA
    kEUaiIDKAIAIgFFBEAgAkEQaiEDIAIoAhAhAQsgAQ0ACyAFQQA2AgALIARFDQIgACAAQRxqKAIAQQJ0QeS3wQBqIgEoAg
    BHBEAgBEEQQRQgBCgCECAARhtqIAI2AgAgAkUNAwwCCyABIAI2AgAgAg0BQdi1wQBB2LXBACgCAEF+IAAoAhx3cTYCAA8
    LIABBDGooAgAiAiAAQQhqKAIAIgBHBEAgACACNgIMIAIgADYCCA8LQdS1wQBB1LXBACgCAEF+IAFBA3Z3cTYCAAwBCyAC
    IAQ2AhggACgCECIBBEAgAiABNgIQIAEgAjYCGAsgAEEUaigCACIARQ0AIAJBFGogADYCACAAIAI2AhgLC7MCAQF/IwBBg
    AtrIgUkACAFEC8gBUGAAmoQLyAFQYAEahAvIAVBgAZqQTgQchogBUEBNgK4BiAFQcAGakE4EHIaIAVB+AZqQQE2AgAgBU
    GAB2pBOBByGiAFQQE2ArgHIAVBwAdqQTgQchogBUH4B2pBATYCACAFQYAIakE4EHIaIAVBATYCuAggBUHACGpBOBByGiA
    FQfgIakEBNgIAIAEgAiAFQYAGaiAFQYAHaiAFQYAIahAeIAVBgAhqIAMQoAEgBUGABmogBBCgASAFQYAJaiAFQYAGaiAF
    QYAHahCRASAFIAVBgAlqEJIBIAVBgAlqIAVBgAhqEJsBIAVBgARqIAVBgAlqEJIBIAVBgARqEGYgACAFIAVBgAJqIAVBg
    ARqEHYgAEEDNgKABiAFQYALaiQAC7ECAQF/IwBBgAtrIgQkACAEEC8gBEGAAmoQLyAEQYAEahAvIARBgAZqQTgQchogBE
    EBNgK4BiAEQcAGakE4EHIaIARB+AZqQQE2AgAgBEGAB2pBOBByGiAEQQE2ArgHIARBwAdqQTgQchogBEH4B2pBATYCACA
    EQYAIakE4EHIaIARBATYCuAggBEHACGpBOBByGiAEQfgIakEBNgIAIAEgBEGABmogBEGAB2ogBEGACGoQJSAEQYAIaiAC
    EKABIARBgAZqIAMQoAEgBEGACWogBEGABmogBEGAB2oQkQEgBCAEQYAJahCSASAEQYAJaiAEQYAIahCbASAEQYAEaiAEQ
    YAJahCSASAEQYAEahBmIAAgBCAEQYACaiAEQYAEahB2IABBAzYCgAYgBEGAC2okAAvJAgEDfyMAQcACayIBJAAgASAAQU
    BrIgMQhQEgARADIAFBQGsgAxCFASABQUBrIABBgAFqIgIQSCABQYABaiACEIUBIAFBgAFqEAMgAiABEKUBIAIgARB4IAI
    QRCACEE4gAhBOIAIQRCABQYABakEMEFIgAUHAAWogAUGAAWoQhQEgAUHAAWogAhBIIAFBgAJqIAEQhQEgAUGAAmogAUGA
    AWoQeCABQYACahBEIAIgAUFAaxBIIAFBQGsgAUGAAWoQpQEgAUFAayABQYABahB4IAFBgAFqIAFBQGsQeCABIAFBgAFqE
    IABIAEQRCABQYACaiABEEggAUGAAmogAUHAAWoQeCABQUBrIAAQpQEgAUFAayADEEggACABEKUBIAAQRCAAIAFBQGsQSC
    AAEE4gABBEIAMgAUGAAmoQpQEgAxBEIAFBwAJqJAALrQIBA38jAEGABGsiAiQAIAIgABBeIAJBgAFqIABBgAFqIgMQXiA
    CQYACakE4EHIaIAJBATYCuAIgAkHAAmpBOBByGiACQfgCakEBNgIAIAJBgANqIAMQXiACIAEQDyACQYABaiABQYABaiIE
    EA8gAkGAAmogBBCQASACQYACaiABEJUBIAJBgANqIAAQlQEgAkGAAmoQqAEgAkGAA2oQqAEgAkGAA2ogAkGAAmoQDyACQ
    YACaiACEJABIAJBgAJqEDogAkGAA2ogAkGAAmoQlQEgAkGAA2oQqAEgAkGAAmogAkGAAWoQkAEgAkGAAmoQOiADIAJBgA
    NqEJABIAMgAkGAAmoQlQEgAkGAAWoQVSAAIAJBgAFqEJABIAAgAhCVASAAEKwBIAJBgARqJAALvQIBA38jAEGACGsiASQ
    AIAEgABCOASABQYACaiAAQYAEaiICEI4BIAFBgARqIABBgAJqIgMQjgEgAUGABmoQLyAAECIgAUGABmogABCSASABQYAG
    aiAAEJYBIAAgAUGABmoQlgEgABCsASABELYBIAEQrwEgACABEJYBIAFBgAJqECIgAUGAAmoQZiABQYAGaiABQYACahCSA
    SABQYAGaiABQYACahCWASABQYACaiABQYAGahCWASABQYACahCsASABQYAEahAiIAFBgAZqIAFBgARqEJIBIAFBgAZqIA
    FBgARqEJYBIAFBgARqIAFBgAZqEJYBIAFBgARqEKwBIAMQrgEgAxCvASACELYBIAIQrwEgAyABQYACahCWASACIAFBgAR
    qEJYBIABBBTYCgAYgABCaASABQYAIaiQAC7ICAQN/IwBBgAhrIgEkACAAKAKABkEBRwRAIAEgABCOASABQYACaiAAQYAC
    aiIDEI4BIAFBgARqIABBgARqIgIQjgEgAUGABmogABCOASABECIgAUGAAmogAhAZIAFBgAJqEK8BIAFBgAJqEKwBIAFBg
    ARqECIgAUGABmogAxAZIAFBgAZqEK8BIAIgABCWASACIAMQlgEgAhCsASACECIgACABEJIBIAEgAUGAAmoQlgEgARCsAS
    ABIAFBgARqEJYBIAEgAUGABmoQlgEgARCsASABECsgAUGAAmoQZiABQYAEahBmIAAgAUGAAmoQlgEgAyABQYAEahCSASA
    DIAFBgAZqEJYBIAIgARCWASAAQQRBBSAAKAKABkF+cUECRhs2AoAGIAAQmQELIAFBgAhqJAALigIBAn8jAEHgAWsiAiQA
    IAAQRCACQQhqQTAQchogAkIBNwMAIAJBOGogABBfIAJB8ABqIAEQXyACQagBakE4EHIaIAAQdANAIAJBOGogAkHwAGoQN
    UF/TARAA0ACQCADQQBMDQAgAkHwAGpBARA7IAJBARA7IAJBqAFqIAJBOGoQayACQagBaiACQfAAahBiIAJBqAFqEEQgAk
    E4aiACQagBaiACKQPYAUI/h6dBAWoiARBPIAJBqAFqIAAQayACQagBaiACEGEgAkGoAWoQRCAAIAJBqAFqIAEQTyADQX9
    qIQMMAQsLBSACQQEQLSACQfAAakEBEC0gA0EBaiEDDAELCyACQeABaiQAC54CAQF/IwBBgA1rIgMkACADIAEQaiADEJkB
    IANBiAZqIAIQXyADQYgGahBEIANBwAZqIANBiAZqEF8gA0HABmpBAxAoGiADQcAGahBEIANB+AZqIAMQagJAIANBwAZqE
    FpFBEAgA0HABmoQKUF/aiECA0AgAkEBTQRAIANB+AZqEJoBDAMLIANB+AZqEBoCQAJAIANBwAZqIAJBf2oiAhBXIANBiA
    ZqIAIQV2tBAWoOAwECAAILIANB+AZqIAMQDgwBCyADEJMBIANB+AZqIAMQDiADEJMBDAALAAsgA0H4BmoQsAEgA0H4B2o
    QqQEgA0H4CGoQrQEgA0H4CmoQrQEgA0EBNgL4DAsgACADQfgGakGIBhBnGiADQYANaiQAC5ACAQJ/IwBBgAJrIgUkACAF
    QYABaiAAEF4gAiAFQYABahCQASAFQYABaiAAQYABahBeIAQgBUGAAWoQkAEgBUGAAWogAEGAAmoiBhBeIAUgBUGAAWoQX
    iAFQYABaiAGEF4gAyAFQYABahCQASAFQYABaiABQYABaiIGEF4gBSAFQYABahAPIAVBgAFqIAEQXiADIAVBgAFqEA8gAi
    ADEH0gAhCoASAEIAUQfSAEEKgBIAUgAhCQASACEFUgAhCoASAFQYABaiAGEF4gBSAFQYABahAPIAMgBBCQASAFQYABaiA
    BEF4gAyAFQYABahAPIAMgBRB9IAMQqAEgBBA6IAQQqAEgACABEAsgBUGAAmokAAvkAQECfyMAQcABayIDJAAgAxBLIAAg
    ASACQR91IgQgAnMgBEF/c2pBAm0iAkF/akEfdhBtIAAgAUHAAWogAkEBc0F/akEfdhBtIAAgAUGAA2ogAkECc0F/akEfd
    hBtIAAgAUHABGogAkEDc0F/akEfdhBtIAAgAUGABmogAkEEc0F/akEfdhBtIAAgAUHAB2ogAkEFc0F/akEfdhBtIAAgAU
    GACWogAkEGc0F/akEfdhBtIAAgAUHACmogAkEHc0F/akEfdhBtIAMgABB/IAMQpgEgACADIARBAXEQbSADQcABaiQAC+Q
    BAQJ/IwBBgANrIgMkACADECogACABIAJBH3UiBCACcyAEQX9zakECbSICQX9qQR92EG8gACABQYADaiACQQFzQX9qQR92
    EG8gACABQYAGaiACQQJzQX9qQR92EG8gACABQYAJaiACQQNzQX9qQR92EG8gACABQYAMaiACQQRzQX9qQR92EG8gACABQ
    YAPaiACQQVzQX9qQR92EG8gACABQYASaiACQQZzQX9qQR92EG8gACABQYAVaiACQQdzQX9qQR92EG8gAyAAEH4gAxCcAS
    AAIAMgBEEBcRBvIANBgANqJAALvAEBAn8jAEGwAWsiAiQAIAJBMBByIQIDQCADQTBGBEACQCABQTBqIQEgAkEwaiACEHV
    BACEDA0AgA0EwRg0BIAIgA2ogASADai0AADoAACADQQFqIQMMAAsACwUgAiADaiABIANqLQAAOgAAIANBAWohAwwBCwsg
    AkHwAGogAhB1IABBOBByIgBBATYCOCAAQUBrQTgQciAAQfgAakEBNgIAIAAgAkHwAGoQpQEgAkEwahClASACQbABaiQAC
    9QBAQJ/IwBBgANrIgEkACABIAAQXiABQYABaiAAQYABaiICEF4gAUGAAmogABBeIAFBgAJqIAIQDyABIAIQlQEgAUGAAW
    oQVSABQYABaiAAEJUBIAEQqAEgAUGAAWoQqAEgACABEJABIAAgAUGAAWoQDyABQYABaiABQYACahCQASABQYABahBVIAF
    BgAFqIAFBgAJqEJUBIAFBgAFqEKgBIAFBgAFqEDogACABQYABahCVASABQYACahCnASACIAFBgAJqEJABIAAQrAEgAUGA
    A2okAAvEAQEBfyMAQYADayIDJAAgA0EIaiABEIUBAkAgAkUEQCADQQhqEAcMAQsgA0EIaiACEKUBCyADQcgAakHYo8AAE
    F8gA0GAAWogA0HIAGoQiwEgA0HAAWogA0EIahCFASADQcABahADIANBwAFqIAEQSCAAIAEQhQEgACADQQhqEEggA0GAAm
    ogA0HAAWoQhQEgABBYIQEgA0HAAmogABCFASADQcACahBBIANBwAJqEEQgACADQcACaiABEHkgA0GAA2okAAufAQEBfyM
    AQfAAayICJAAgAiABEF9BACEBIAJBOGpBOBByGiAAEEQCQCAAIAIQNUEASA0AA0AgAkEBEC0gAUEBaiEBIAAgAhA1QX9K
    DQALA0AgAUEATA0BIAJBARA7IAJBOGogABBrIAJBOGogAhBiIAJBOGoQRCAAIAJBOGogAikDaEI/h6dBAWoQTyABQX9qI
    QEMAAsACyACQfAAaiQAC7IBAQF/IwBBgAJrIgQkACAEQYABaiAAEF4gAyAEQYABahCQASAEQYABaiAAQYABahBeIAQgBE
    GAAWoQXiAEQYABaiAAQYACahBeIAIgBEGAAWoQkAEgASAEEJABIAEgAhAPIAMQMiAEEDIgAhAyIAEQpwEgARA6IAEQqAE
    gARBVIAEQqAEgAkEMEJ8BIANBAxCfASACEFUgAhCoASACIAQQfSACEKgBIAAQFCAEQYACaiQAC58BAQJ/IwBBgAJrIgIk
    ACAAIAEQXiAAEDIgAkGIAWpB2KTAABBfIAJBCGpBOBByGiACQQE2AkAgAkHIAGpBOBByIAJBgAFqQQE2AgAgAkHAAWogA
    kGIAWoQiwEgAkEIaiACQcABahClARCyASACQQhqEKgBIAJBCGoQVSACQQhqEKgBIAAgARAPIAAgAkEIahCVASAAEKsBIA
    JBgAJqJAALowEBAX8jAEEwayIGJAAgBkEQaiAAIAEQsQEgBiAGKAIUIgA2AhwgBiAGKAIQIgE2AhggBkEIaiACIAMQsQE
    gBiAGKAIMIgI2AiQgBiAGKAIIIgM2AiAgBiAEIAUQsQEgBiAGKAIEIgQ2AiwgBiAGKAIAIgU2AiggASAAIAMgAiAFIAQQ
    ACAGQShqEKQBIAZBIGoQpAEgBkEYahCkASAGQTBqJAALiAECA38DfiMAQRBrIgIkAAN+IANBOEYEfiACQRBqJAAgBgUgA
    iAAIANqIgQpAwAiBSAFQj+HIAGsIgUgBUI/hxAxIAQgAikDACIHIAZ8IgVC//////////8DgzcDACAFIAdUrSACQQhqKQ
    MAIAZCP4d8fEIGhiAFQjqIhCEGIANBCGohAwwBCwsLhAECA38BfiMAQUBqIgEkACABQQhqIAAQXyABQQhqEEQgAUE4aiE
    CQQYhA0HcAiEAAn8DQEEAIANBAEgNARogAikDACIEUARAIAJBeGohAiAAQUZqIQAgA0F/aiEDDAELCwN/IARQBH8gAAUg
    AEEBaiEAIARCAn8hBAwBCwsLIAFBQGskAAuHAQEBfyMAQcABayIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByGiAAQfgAa
    kEBNgIAIAEQUCABQYgBakE4EHIaIABBgAFqIAFBgAEQZxogAEGAAmpBOBByGiAAQbgCakEBNgIAIABBvAJqIAFBhAFqQT
    wQZxogAEH4AmpBATYCACABQcABaiQAC48BAQJ/IwBBgAJrIgEkACAAEKwBIAEgABBeIAFBgAFqQTgQchogAUEBNgK4ASA
    BQcABakE4EHIaIAFB+AFqQQE2AgAgASAAQYABaiICEJUBIAEQOiABQYABaiABEJABIAFBgAFqIAIQlQEgAiABEJABIAIg
    ABCVASAAIAFBgAFqEJABIAAQrAEgAUGAAmokAAt9AgF/An4jAEGAAWsiASQAIAFBCGogABCFASABQQhqEBIgAUHIAGogA
    UEIahCDAUEIIQADQCAAQThGRQRAIAFByABqIABqKQMAIAKEIQIgAEEIaiEADAELCyABKQNIIQMgAUGAAWokACACQn98IA
    NCAYVCf3yDQjqIp0EBcQuJAQIBfwJ+IAAgACkDMCABQT9xrSIDhiAAKQMoQTogAWtBP3GtIgSHhDcDMCAAQShqIQFBBiE
    CA0AgAkEBTQRAIAAgACkDACADhkL//////////wODNwMABSABIAEpAwAgA4ZC//////////8DgyABQXhqIgEpAwAgBIeE
    NwMAIAJBf2ohAgwBCwsLiQECAX8CfiAAIAApA2BBOiABQTpwIgFrrSIEhyAAKQNoIAGtIgOGhDcDaCAAQeAAaiEBQQ0hA
    gNAIAJBAU0EQCAAIAApAwAgA4ZC//////////8DgzcDAAUgASABKQMAIAOGQv//////////A4MgAUF4aiIBKQMAIASHhD
    cDACACQX9qIQIMAQsLC3EBAX8jAEFAaiIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByGiAAQfgAakEBNgIAIAFBCGpBOBB
    yGiAAQYABakE4EHIaIABBuAFqQQE2AgAgAEG8AWogAUEEakE8EGcaIABB+AFqQQE2AgAgAUFAayQAC4EBAgF/AX4gAEHw
    ABByIQADQCACQThGBEACQCAAIAEpAzAiA0I6hzcDOCAAIANC//////////8DgzcDMCAAQUBrIQBBACECA0AgAkEwRg0BI
    AAgAmpCADcDACACQQhqIQIMAAsACwUgACACaiABIAJqKQMANwMAIAJBCGohAgwBCwsLdQECfiAAIANCIIgiBSABQiCIIg
    Z+IAIgA358IAEgBH58IANC/////w+DIgIgAUL/////D4MiAX4iA0IgiCACIAZ+fCICQiCIfCABIAV+IAJC/////w+DfCI
    BQiCIfDcDCCAAIANC/////w+DIAFCIIaENwMAC3YBAn8jAEHAAWsiASQAIAEgABCFASABQUBrIAAQhQEgAUGAAWogAEFA
    ayICEIUBIAEgAhB4IAFBQGsgABB4IAFBQGsQRCACIAFBQGsQSCABQYABahBBIAAgAUGAAWoQeCABEEQgABBEIAAgARBII
    AFBwAFqJAALkwEBAn9B0LXBAEHQtcEAKAIAQQFqNgIAAkACQEGYucEAKAIAQQFGBEBBnLnBAEGcucEAKAIAQQFqIgA2Ag
    AgAEECSw0CQaC5wQAoAgAiAUF/Sg0BDAILQZi5wQBCgYCAgBA3AwBBoLnBACgCACIAQQBIDQFBoLnBACAANgIAAAtBoLn
    BACABNgIAIABBAUsNAAALAAtnAQJ/IwBBQGoiAiQAIAAQRCACIAAQhQECQCABRQRAIAAQBwwBCyAAIAEQpQELQQAhAQNA
    IAFBAUsgA3JFBEAgABADIAFBAEchAyABIAFFaiEBDAELCyAAIAIQSCAAEBIgAkFAayQAC18CAX8EfkIBIQNBMCECA38gA
    kF4RgR/IARCAYYgA3ynQX9qBSABIAJqKQMAIgUgACACaikDACIGfUI6hyADgyAEhCEEIAJBeGohAiAFIAaFQn98QjqHIA
    ODIQMMAQsLC2ACAX8EfkIBIQNB6AAhAgN/IAJBeEYEfyAEQgGGIAN8p0F/agUgASACaikDACIFIAAgAmopAwAiBn1COoc
    gA4MgBIQhBCACQXhqIQIgBSAGhUJ/fEI6hyADgyEDDAELCwt3AQN/IwBBgAJrIgIkACACIAEQXiACQYABaiABEF4gAhAy
    IAJBgAFqIAIQDyAAIAJBgAFqEJcBIABBgAJqIgMgAkGAAWoQlwEgAEGABGoiBCACQYABahCXASADIAEQogEgBCACEKIBI
    ABBBTYCgAYgAkGAAmokAAt6AQF/IwBB4ANrIgEkACABQYABakHApcAAEF8gAUG4AWpB+KXAABBfIAEgAUGAAWogAUG4AW
    oQSSABQfACakGwpsAAEF8gAUGoA2pB6KbAABBfIAFB8AFqIAFB8AJqIAFBqANqEEkgACABIAFB8AFqED8gAUHgA2okAAt
    nACAAQQF2IAByIgBBAnYgAHIiAEEEdiAAciIAQQh2IAByIgBBEHYgAHIiACAAQQF2QdWq1aoFcWsiAEECdkGz5syZA3Eg
    AEGz5syZA3FqIgBBBHYgAGpBj568+ABxQYGChAhsQRh2C2cBAn8jAEGAAWsiASQAIAEgABCFASABQUBrQTgQchogAUEBN
    gJ4IAEgAEFAayICEHggARBBIAFBQGsgARClASABQUBrIAIQeCACIAEQpQEgAiAAEHggACABQUBrEKUBIAFBgAFqJAALaA
    IBfwJ+IAFBP3GtIQNBOiABa0E/ca0hBEEAIQEDQCABQTBGBEAgACAAKQMwIAOHNwMwBSAAIAFqIgIgAkEIaikDACAEhkL
    //////////wODIAIpAwAgA4eENwMAIAFBCGohAQwBCwsLbAEBfyMAQTBrIgMkACADIAE2AgQgAyAANgIAIANBHGpBAjYC
    ACADQSxqQQI2AgAgA0ICNwIMIANBlKjAADYCCCADQQI2AiQgAyADQSBqNgIYIAMgAzYCKCADIANBBGo2AiAgA0EIaiACE
    HAAC2wBAX8jAEEwayIDJAAgAyABNgIEIAMgADYCACADQRxqQQI2AgAgA0EsakECNgIAIANCAjcCDCADQbCqwAA2AgggA0
    ECNgIkIAMgA0EgajYCGCADIANBBGo2AiggAyADNgIgIANBCGogAhBwAAtlAQJ/IAAgACgCACICQQhqIgM2AgAgACACQQN
    2QTxxakEoaiICIAFB/wFxIAIoAgBBCHRyNgIAAkACQCADRQRAIABBADYCACAAIAAoAgRBAWo2AgQMAQsgA0H/A3ENAQsg
    ABARCwtnAQF/IwBBgAJrIgMkACAAECogACABEJABIABBgAFqIgEgAhCQASAAQYACahCwASAAEKgBIAMgABAmIANBgAFqI
    AEQXiADQYABahAyIANBgAFqIAMQe0UEQCAAEJgBCyADQYACaiQAC18BAn8jAEGAAWsiASQAIAAQqAEgASAAEIUBIAFBQG
    sgAEFAayICEIUBIAEQAyABQUBrEAMgASABQUBrEHggAUEAEDQgACABEEggARBBIAEQRCACIAEQSCABQYABaiQAC10BAn8
    jAEFAaiIBJAAgAUEIakGgp8AAEF8gAUEIaiAAKAI4QX9qEDkiAhAtIAAgAUEIahBjIABBASACQQFqQR9xdCICNgI4IAJB
    gICAEE4EQCAAEBILIAFBQGskAAtfAgF/AX4jAEHwAGsiASQAIAFBoKfAABBfIAApAwAhAiABQThqIAAQXyAAQQEQOyABQ
    ThqIAEQYSABQThqEEQgAUE4akEBEDsgACABQThqIAJCAoGnEE8gAUHwAGokAAt7AQJ/IABBKGohAgNAIAFBgAJGBEAgAE
    LnzKfQ1tDrs7t/NwIIIABCADcCACAAQSBqQquzj/yRo7Pw2wA3AgAgAEEYakL/pLmIxZHagpt/NwIAIABBEGpC8ua746O
    n/aelfzcCAAUgASACakEANgIAIAFBBGohAQwBCwsLaQICfwF+IAAgACkDACIDQv//////////A4M3AwBBCCEBA0AgA0I6
    hyEDIAFBMEYEQCAAIAApAzAgA3w3AzAFIAAgAWoiAiACKQMAIAN8IgNC//////////8DgzcDACABQQhqIQEMAQsLC2oCA
    n8BfiAAIAApAwAiA0L//////////wODNwMAQQghAQNAIANCOochAyABQegARgRAIAAgACkDaCADfDcDaAUgACABaiICIA
    IpAwAgA3wiA0L//////////wODNwMAIAFBCGohAQwBCwsLWQEBfyMAQYADayIEJAAgBCADEF4gBBBAIARBgAFqIAEQXiA
    EQYACaiACEF4gBEGAAWogBBAPIARBgAJqIAQQDyAAIARBgAFqIARBgAJqEJEBIARBgANqJAALWQECfyMAQUBqIgEkAAJA
    IAAQhAENACABQQEQigEgAEGAAWoiAiABEFkNACACQQAQNCAAIAIQSCAAEBIgAEFAayIAIAIQSCAAEBIgAiABEKUBCyABQ
    UBrJAALVwEBfyMAQbABayICJAAgATQCOCAANAI4fkKAgIAQWQRAIAAQEgsgAkEIaiAAIAEQCCACQfgAaiACQQhqEAUgAC
    ACQfgAahBrIABBAjYCOCACQbABaiQAC08BAn8jAEFAaiIDJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByIABB+ABqQQE2AgA
    gAyABEIsBIAAgAxClASADIAIQiwEgAxClASADQUBrJAALWQECfyMAQYABayIBJAACQCAAEIgBDQAgARBQIABBgAJqIgIg
    ARB7DQAgAhBAIAAgAhAPIAAQqwEgAEGAAWoiACACEA8gABCrASACIAEQkAELIAFBgAFqJAALSwEBfyMAQUBqIgEkACAAQ
    TgQciIAQQE2AjggAUEBEIoBIABBQGsgAUHAABBnGiAAQYABakE4EHIaIABBuAFqQQE2AgAgAUFAayQAC0sBAn8jAEHwAG
    siASQAIAAQd0UEQCABQaCnwAAQXyABQThqIAAQgwEgASABQThqEGIgARBEIAFBOGogARA1IQILIAFB8ABqJAAgAgtPAQF
    /IwBBgAFrIgIkACAAIAEQhQEgABADIAJByABqQdikwAAQXyACQQhqIAJByABqEIsBIAAgARBIIAAgAkEIahB4IAAQEiAC
    QYABaiQAC0kBAn8DQCABQThGRQRAIAAgAWoiAiACKQMAQgGGNwMAIAFBCGohAQwBCwsgACAAKAI4QQF0IgE2AjggAUGAg
    IAQTgRAIAAQEgsLQgIBfwJ+QQAgAmusIQQDQCADQThHBEAgACADaiICIAIpAwAiBSABIANqKQMAhSAEgyAFhTcDACADQQ
    hqIQMMAQsLC0YBAn8jAEFAaiIBJAAgAEE4EHIiAEEBNgI4IABBQGtBOBByIABB+ABqQQE2AgAgAUEBEIoBIAAgARClARC
    yASABQUBrJAALTgEBfyMAQYAEayIBJAAgABAvIAEQLyABQYACahAvIABBgAJqIAFBgAIQZxogAEGABGogAUGAAmpBgAIQ
    ZxogAEEANgKABiABQYAEaiQAC0sBAX8jAEFAaiICJAACQCAAKAI4IAFsQYCAgBBOBEAgAiABEIoBIAAgAhBIDAELIAAgA
    RAoGiAAIAAoAjggAWw2AjgLIAJBQGskAAtKAAJ/IAFBgIDEAEcEQEEBIAAoAhggASAAQRxqKAIAKAIQEQMADQEaCyACRQ
    RAQQAPCyAAKAIYIAJBACAAQRxqKAIAKAIMEQUACwtCAQF/IwBBQGoiAiQAIAJBCGpBgIDAABBfIAEgAkEIahBrIAEQRCA
    AIAEQayAAQQMQKBogABBEIAAQKSACQUBrJAALSQECfyMAQcABayIBJAAgASAAEF4gAUGAAWogABCFASAAIABBQGsiAhCl
    ASAAEEEgAiABQYABahClASAAIAEQlQEgAUHAAWokAAtIAQF/IwBB4AFrIgEkACABQeihwAAQXyABQThqIAAgARAIIAFBq
    AFqIAFBOGoQBSAAIAFBqAFqEGsgAEECNgI4IAFB4AFqJAALPgEBfyABQTpuIQIgAUGVA00EQCAAIAJBA3RqKQMAQgEgAU
    H//wNxQTpwrYaDQgBVDwsgAkEHQdSdwAAQPAALQAIBfwF+IwBBgAFrIgEkACABQQhqIAAQhQEgAUEIahASIAFByABqIAF
    BCGoQgwEgASkDSCABQYABaiQAQgKBpws8AQF/IwBBgAFrIgIkACACIAAQhQEgAkFAayABEIUBIAIQEiACQUBrEBIgAiAC
    QUBrEDUgAkGAAWokAEULPAIBfwF+A38gAUE4RgR/IAJCf3xCgICAgICAgIAEg0I6iKcFIAAgAWopAwAgAoQhAiABQQhqI
    QEMAQsLC0cBAX8jAEEgayIDJAAgA0EUakEANgIAIANB9KrAADYCECADQgE3AgQgAyABNgIcIAMgADYCGCADIANBGGo2Ag
    AgAyACEHAACzkBAX8jAEFAaiICJAAgAiAAEIUBIAIQByABBEAgASACEKUBCyACEAMgAiAAEEggAhAsIAJBQGskAAs6AQF
    /IABBOBByIQADQCACQTBGRQRAIABBCBAtIAAgACkDACABIAJqMQAAfDcDACACQQFqIQIMAQsLCzQBAX8gAEE4EHIiAEEB
    NgI4IABBQGtBOBByIABB+ABqQQE2AgAgACABEKUBIAFBQGsQpQELMAEBfyAAQTgQciEAA0AgAkE4RwRAIAAgAmogASACa
    ikDADcDACACQQhqIQIMAQsLCz8BAX8jAEGAAmsiASQAIAAQUSABEG4gACABEJIBIABBgAJqEK0BIABBgARqEK0BIABBAT
    YCgAYgAUGAAmokAAswAQJ/A0AgAkE4RwRAIAAgAmoiAyADKQMAIAEgAmopAwB8NwMAIAJBCGohAgwBCwsLMAECfwNAIAJ
    BOEcEQCAAIAJqIgMgAykDACABIAJqKQMAfTcDACACQQhqIQIMAQsLCzABAn8DQCACQThHBEAgACACaiIDIAEgAmopAwAg
    AykDAH03AwAgAkEIaiECDAELCwsxAQJ/A0AgAkHwAEcEQCAAIAJqIgMgAykDACABIAJqKQMAfTcDACACQQhqIQIMAQsLC
    zEBAn8DQCACQfAARwRAIAAgAmoiAyADKQMAIAEgAmopAwB8NwMAIAJBCGohAgwBCwsLOQECfyMAQYABayIBJAAgASAAQY
    ABaiICEF4gAiAAEJABIAEQVSAAIAEQkAEgABCsASABQYABaiQACzMBAX8gAgRAIAAhAwNAIAMgAS0AADoAACABQQFqIQE
    gA0EBaiEDIAJBf2oiAg0ACwsgAAtIAQN/IwBBEGsiASQAIAAoAgwhAyAAKAIIIgJFBEBB9KrAAEErQaCrwAAQWwALIAEg
    AzYCCCABIAA2AgQgASACNgIAIAEQcQALMgEBfyAAQgE3AwBBCCEBA0AgAUE4RkUEQCAAIAFqQgA3AwAgAUEIaiEBDAELC
    yAAEFYLNwAgABBRIAAgARCSASAAQYACaiABQYACahCSASAAQYAEaiABQYAEahCSASAAIAEoAoAGNgKABgsoAQF/A0AgAk
    E4RwRAIAAgAmogASACaikDADcDACACQQhqIQIMAQsLCzMAIAAgARCSASAAQYACaiABQYACahCSASAAQYAEaiABQYAEahC
    SASAAIAEoAoAGNgKABgsoACAAIAEgAhB5IABBQGsgAUFAayACEHkgAEGAAWogAUGAAWogAhB5Cy4BAX8jAEGAAWsiASQA
    IAAQLyABEFAgACABEJABIABBgAFqEKkBIAFBgAFqJAALLQAgACABIAIQjwEgAEGAAWogAUGAAWogAhCPASAAQYACaiABQ
    YACaiACEI8BCzQBAX8jAEEQayICJAAgAiABNgIMIAIgADYCCCACQaSowAA2AgQgAkH0qsAANgIAIAIQaAALPgEBfyMAQR
    BrIgEkACABQQhqIABBCGooAgA2AgAgASAAKQIANwMAIAEoAgAiAEEUaigCABogACgCBBoQMwALKQEBfyABBEAgACECA0A
    gAkEAOgAAIAJBAWohAiABQX9qIgENAAsLIAALKwEBfyMAQcABayICJAAgAhBLIAIgARB/IAIQpgEgACACEAwgAkHAAWok
    AAsiAQF/A0AgAUE4RwRAIAAgAWpCADcDACABQQhqIQEMAQsLCycBAX8jAEFAaiICJAAgAkEIaiABEF0gACACQQhqEIsBI
    AJBQGskAAsrACAAEFEgACABEJIBIABBgAJqIAIQkgEgAEGABGogAxCSASAAQQU2AoAGCyMBAX8jAEFAaiIBJAAgASAAEI
    UBIAEQEiABEFogAUFAayQACykAIAAgARBhIAAgACgCOCABKAI4aiIBNgI4IAFBgICAEE4EQCAAEBILCyUAIAAgASACEE8
    gAEEAIAJrIAAoAjgiACABKAI4c3EgAHM2AjgLIwADQCACBEAgACABLQAAED4gAkF/aiECIAFBAWohAQwBCwsLIgACQCAA
    IAEQWUUNACAAQUBrIAFBQGsQWUUNAEEBDwtBAAskAAJAIABBfE0EQCAARQRAQQQhAAwCCyAAEAEiAA0BCwALIAALJwEBf
    yMAQYABayICJAAgAiABEF4gAhA6IAAgAhCVASACQYABaiQACycAIAAgARCQASAAQYABaiABQYABahCQASAAQYACaiABQY
    ACahCQAQslACAAIAEQpQEgAEFAayABQUBrEKUBIABBgAFqIAFBgAFqEKUBCyUBAX8jAEFAaiICJAAgAiABEIUBIAIQQSA
    AIAIQeCACQUBrJAALKAEBfyMAQYACayICJAAgAiABEI4BIAIQKyAAIAIQlgEgAkGAAmokAAsjAEGEAiACSQRAIAJBhAIg
    AxA9AAsgACACNgIEIAAgATYCAAsiAQF/IwBB8ABrIgIkACACIAEQMCAAIAIQBSACQfAAaiQACxwAAkAgABB3RQ0AIABBg
    AFqEHdFDQBBAQ8LQQALHwAgAEE4EHIiAEEBNgI4IAAgARBrIAAgASgCODYCOAseAAJAIAAQhwFFDQAgAEGAAWoQhwFFDQ
    BBAQ8LQQALGwACQCAAEHdFDQAgAEFAaxB3RQ0AQQEPC0EACx4AAkAgABCHAUUNACAAQYACahCHAUUNAEEBDwtBAAsaAQF
    /IAAQWCIBIABBQGsQWCABcyAAEHdxcwsaACAAQTgQciIAQQE2AjggACABEJ0BIAAQVgsZACAAQTgQciIAQQE2AjggACAB
    EGsgABBWCxcAIAAQRCAAKAIAQX8gAUEfcXRBf3NxCxoAIAAgARBfIAAgAhAkIAAgAhBjIAAgAhAkCxwAIAAQLyAAIAEQk
    AEgAEGAAWogAUGAAWoQkAELGAAgACABIAIQeSAAQUBrIAFBQGsgAhB5CxYAIAAgARClASAAQUBrIAFBQGsQpQELGAAgAB
    AvIAAgARCQASAAQYABaiACEJABCxgAIAAgARCQASAAQYABaiABQYABahCQAQsZACAAEK4BIABBgAJqELYBIABBgARqEK4
    BCxcAIAAQsgEgAEFAaxBpIABBgAFqELIBCxQAIAAgARB4IABBQGsgAUFAaxB4CxgAIAAgARCVASAAQYABaiABQYABahCV
    AQsYACAAEKYBIABBgAFqIgAQpgEgACABEA8LGQAgABCpASAAQYABahCwASAAQYACahCpAQsZACAAEKwBIABBgAJqEKwBI
    ABBgARqEKwBCxkAIAAQqgEgAEGAAmoQqgEgAEGABGoQqgELFgAgABAvIAAgARCQASAAQYABahCpAQsWACAAQYABaiIAEK
    gBIAAQOiAAEKgBCxQAIAAQRCAAIAApAwAgAax8NwMACxQAIAAQRCAAIAApAwAgAax9NwMACxEAIAAgARBSIABBQGsgARB
    SCxEAIAAgARBIIABBQGsgARBICxQAIAAgARCQASAAQYABaiACEJABCxIAIAAgARAPIABBgAFqIAEQDwsUACAAIAEQoAEg
    AEGAAWogARCgAQsRACAAKAIEBEAgACgCABAJCwsSACAAIAEQayAAIAEoAjg2AjgLDwAgAEFAayIAEEEgABBECw0AIAAQT
    iAAQUBrEE4LDQAgABBEIABBQGsQRAsPACAAELIBIABBQGsQsgELEAAgABCrASAAQYABahCrAQsNACAAEBIgAEFAaxASCx
    AAIAAQqAEgAEGAAWoQqAELEAAgABCpASAAQYABahCpAQsPACAAQYABahA6IAAQrAELEAAgABCnASAAQYABahCnAQsOACA
    AEGkgAEFAaxCyAQsQACAAIAI2AgQgACABNgIACw0AIAAQdCAAQQE2AjgLDAAgABBBIAAgARB4CwwAIAAgARBrIAAQVgsN
    ACAAEDogACABEJUBCwsAIAAQOiAAEKwBCwwAQunQotvMouq7RgsDAAELAwABCwv+PZoCAEGCgMAACwcBAAAAAQI0AEG4g
    MAAC9sBuF8jku11BwFjT+D5WE+pA2dPnKtLeD0Akew9ffXy9AMD1g8fDSwgAK1vjPCZwa4A8DtNkAEAAADzStxtEor3AI
    uwH1tTsFYDgvLFYx+X7AAysL/NHtseAkehVLifHyMCQHo6ogw4sQGz4sMPAAAAAHNyYy9ibHMxMjM4MS9wYWlyLnJzqAA
    QABQAAAAHAQAACQAAAKgAEAAUAAAADAEAAA0AAACoABAAFAAAABEBAAANAAAAAAAAAAEAAAD///8Dv/+W/78AaQM7VYAd
    moCAAefMIPV1pkwBp+1zAEGogsAACyz+//7///8BAosAgILYBPYB4Y1oiW++kwLOdqvfPagdAMZpulHOdt8Dy1nGFwBB4
    ILAAAuRAZABEAATAAAA0AEAABgAAACQARAAEwAAANQBAAARAAAAkAEQABMAAADWAQAAHAAAAHNyYy9ibHMxMjM4MS9lY3
    AucnMAkAEQABMAAAAZBQAADQAAAJABEAATAAAAGwUAAAkAAACQARAAEwAAABwFAAARAAAAkAEQABMAAAAfBQAAHAAAAAA
    AAAABAAEAAAABAjQAQaCEwAALuSCQARAAEwAAAGcEAAARAAAAkAEQABMAAABsBAAADQAAAJABEAATAAAAbgQAABUAAACQ
    ARAAEwAAAHAEAAAgAAAAHUxYLQgo9ADXXz44aOPbAInJGoj9roEBomOjmrkPTgGY6rCCSW3JAoBOWs9QOu4AimlEAQAAA
    ADgKxeO6UjMAXSpOluMVsgAolXvNe/8FADngsIBPcnDA8EWIDvuPnUAusRiAAwgWgDRCCkuAQAAALgh6L1iEMUA3/4Vlz
    tIpQGLCDH8A9S9AbsR/Cc0UtIDHfAS2hvXowEqPc423S/bAshidB8AAAAAKdKiiy66yAHqR06TLeDGAiSMtsYkvPEDAo/
    w3iCL+AGd1zE97u2BA4ilRy+cg4kDSMIIbgAAAAB7+wUWP99nAjJ7Fwrjx90CaW+GFDsANgMrVFv+4Zl3A8x9+g1bVtIB
    Aju2nPiBcwIH2iEDAQAAAJ4MOb5nECQDX97JALfLQgIx+rexS69LAYydZXIx6AACyy7dIo8TXQHUDYML8enzAuH4sWkBA
    AAAF+OXhGqYcQFbpdOtpXylAPrkHV2MkmwBFovSVX2eswF1O8QNmb5jAc0s5B7x42kCH8/TgAAAAACOyPDjGFbLAOdrHT
    0yPvIBmzNTJw/vYgALmsY2bZ2sAuVtNVN+EdEAIQ4duvj2agBw54F7AQAAAITtOaEl8tcBt7JLQTBKlADaqLKGnI8hAiN
    AhjM+PJkAhhWxv1LmigOwyY1aShP5A1Nl7dYAAAAAgyllb8bBEwFzRs+5ckvDAQgK+Wh+CbkCTntu5kll9wGxPNu1Sqf3
    AwZIdMD/xFwDUDIMYwEAAADZlYis6UwVARTxnQfMG4oChYnB+oJZtgK7IfzsX0loAZnbmVSOEeQDLK2Q2RB9ZgCjJpfpA
    AAAAGFomx1kiLMB8WQcxDiXuAEzNQgzG58oA8zGl/w2qpUB5PXXElTlBwN0goHTbRvzA2ZxjncBAAAAsNyerJ2fFwD4p1
    yCSo8PA1jJJY7GHlAC46GVD2alzAEkA84bmgrRATESRAc7nl0C2wVA1QAAAAC7g8uz8e40ALrVMMa8qTwCg7SGHg3HMwK
    X1V8Qqr1sAecXfByoRyECrC5iwcvqUAI+7ZRyAQAAALdJRnNiFqwCq1uLuXy1MABhhSxO22y1A4nJfwFciyICPjBrhRWY
    2QEHRAIu0MygA7HyBRoBAAAACt3saNGEYwELQBne0pLTATFZwTGPlzMBfdvdQN9bugO0gvaAZqWzAo9b2xG1SnoCqxP8l
    QAAAABB1qF5Oux2AxHckO6qpJkAOFCDmPNn2gBA0K3ZhMV1AI1/4Myjx68Bz4Kkl+BTaQNqzw6hAAAAAF5azL2b2fcBxL
    R4RCdSbgH6gMUimN8cAltmoKIpbwgDY39umQHPdABs/SyMLCpZA6nCekoBAAAAOkrobkl0JQA7G3jD49TsAKfO6e0qBnM
    AuDglhk69ZgJXD1chZ1ngAxiDz0OGTVoAz6osdwAAAAClBGOfovktAHDEowjxkjQAQPeCiUvyzgMOKTS1cjqnAzVXOenG
    BgUD30NOVe6ZOQGOXzXnAAAAAB6iMjVbOZ0DVAdezQfqpgC9qW0wO4NOAK017oqBhGYBx9//faDnQwNXx5sCKkWKACAWj
    joBAAAA2CzGjZPoDQMEcT27D0m1AZcE/dYovIoCMlNFlcVa/AAkCFtU60B8A/urDrK/uGIBGlglNAAAAAAZPrhcujnCAD
    +3PyWfJfQAas3qrBEL4ACZ8kczxmm9AUGJbx+Z8r8BivlNoJfI6AHlL5ayAAAAAP87K8huJ8gBeboJLBshqgI9cfWLxIg
    lAJsEMADCMygD6EFwNjblmAJEHC3SEGfVAt6lYSUBAAAAHBvSQPr5PAEmfg+Nb6A1AlUrxor8F4YAVnLqIm2NLgHv1QFv
    +tNLA4u5LIZrxj8DSNWojAAAAAAEtshpvla0AMEdB7C/n0ABZisb8FqpTwG3XuVoWRI+Ah0Yy7Uu30IDzkKpk/PAQwLp5
    GteAQAAAEsidVRxHmsC4e1rXtkmQQC6Rs6nltP1AKxmo5WhXwcCPWde/KPESAN9VqhAxDORA0WWElwAAAAAMwGY2/XT2Q
    IQmcoIRyvkA2zMWQbE0zICmU8AVjA1IAA7e3XcFeN7AisAv9ymskcDSjlaJAAAAAD4HpcL8ARMAYN8hGRkcBQCbPAzRnu
    ADgGcADvCmtCoALGnekQ/9QQAWEJVdObkBgDByoKxAAAAAI5NB9CkyAcCs4E10QZ9cwKdJEP2EfnnA6+5GAnDq+ICWTVS
    zO3S/gNQMEaut73NAwipRosBAAAAMsER0BpxEwA6v+6PM5fOAxsDYZ44FuQDYET/JL2yLQPLL82T+0MdA+NCf4NvNN8Ae
    eQTlwEAAAAwHHPK66qvA8qbrlN3FdwDs7lDTR7t5wFhGvjba0WeAgwqxCNKoa0Dea+OSG2vYQChp7vhAAAAAIel23tXDj
    cA2OiB4XGAlAGd5qsM8qHmAi16sAl3nlkAvTqPu6FNHgKIJyP6EpplA4sBxJ8AAAAAKftwGKNMXgFoTfq3P1SRAS9kQsg
    mbNoADvR/YPeO/wIFChd0xqYsAa9Jpvcbrs4AU418mAAAAADy1ulfhfhhAbJX0IORsB4CenTzNNbEEwDFSC0Thq8oA7hb
    5zxreScA9F2yLO8G6wO8ubBKAAAAAPClMzaxOrIBphygVrLJ2AMD4kRVrdPDAUHZ9d62vlID0Kd0oKbwuAFHeISI2tIYA
    KT8A2YBAAAA2/7o8uzatgEQKhBkAjf+Ae7CrVETIv0DDObhQjmP7wM2VRnEKRWiAvjTK9fEP/gD3j/AjAAAAADL9OWwd1
    w1Ail7h7GnrhYA5J3PUTLAPgKSJ3DkrTvkAqcq1FdndNgCRh0mXggHJgJuN4YfAAAAAPbhLcdA4t8A7kgBLIqFVAMmfdo
    AFLnkAxINi3OMYlkD4lIllEk7agAy4Si9mZulArqGxwwAAAAAlsZBLlrnlwD4L+qLZcRZAWxN03q2PjQCQT704DyVsAHp
    IxKDRvt2A7UNRHUEljsBEGqZNAEAAAAzuweXcUWYAq/w6M6mux4D0Dw9VFbJ9gJKrUiloSI5AhOtEfrcgEkBwkdnCbiT6
    AKBfNmQAAAAAI9LYx06RxUAEeAlTTxcvQDKBaLKVmPNAzvJTOHOiZcBD8RxwRl4DQJXCcmaD3C3AYEd+uAAAAAA9wbtJh
    Pc+gE0IDPFYe9FASDkgCSUJ98A0i0Hn6ScUwJbVr/yds1TAUP3otjOk8sCDkBgJgAAAADMRTNXOLGZAkewQu742AEAMGm
    42QCa7wJz9ZkIfCtmA0YzVJYUX7QAUUzY8PifHQMUlWutAAAAAJIQVuIptYQCpfqu3xsmWgJvURN56oyoAT4wSgs5vysC
    /5R/RwzFSAIHS2H9z0AHAnS2y6wAAAAAqGqPupy0+AAAgcHg06dwARqHXGpjbrMBZDmkmIbt5gDQbZwdkdIaACgEPFJvA
    akDniUvTQAAAABVP5G4i/RuAI3XbEr1qBcCc7xPfernkgEhTO0e9oSPAfcWMpCEStkDZYGgOoebwgHaXKVnAQAAAEpdU1
    WdPSMD2iCS5O69+AMshbQ5v8RQAxWvgmS9GpMDDPv5xEzX0QNT+YbGSBjbANOObIYBAAAA2S6BFVpB7gAYuXcAAmw9AJI
    rE1djIP0AzfpfP33oewE3pOVu/6a7An4374D6qY8Di/A+agEAAABcd2oSmRMaAU/ux2JpAKcCXx0FoADEWwJNd73jMzTq
    A/3sXkuC6awAzaHu8Mt2pgIIfABmAQAAAKy3+ap/R8YCgDhz6ndu4wCfRKb18LaHAbMXB2JDVRkDUgG3gjF4rAK6mexny
    7ZhAJdSno0AAAAAHQClESMUOQJ2e7v0A3fFAiBqkeyd/KABu1DB7qY9fAKc0cbcjSL4AkQyAyz50BcBlQcOvgAAAAAWVF
    9EmG3SAGrrpaCwPNkAJxf0anKeSAL2SDhM83ZvA8UV0dG07YkD70iDfOWUYwKHKH1rAQAAAPJnvz21OCUCR+Jbvo01XwF
    nyi7NedJdAtYwxPy5RlUBhcR4V7GObgGfq+rbiTaQAQYz31gAAAAAPaBJLiwQ9gJMjafU2IEJAYr3AT5FbzUAhJJyVhPH
    3ANPyIW4SMNDAFsvg4YHSOAAwnUtlgEAAADBYzawU5JHAUAbCIO9I9oAf6Dncr61MgIMu5svYOKVA20aYOnq0PoAUASGl
    CwmpwLDxBJhAQAAAHNyYy9ibHMxMjM4MS9iaWcucnMAoA4QABMAAADMAQAALQAAAKAOEAATAAAAzAEAADUAAACgDhAAEw
    AAABkCAAANAAAAoA4QABMAAAA4AwAAGAAAAKAOEAATAAAAOAMAACEAAACgDhAAEwAAAEIDAAAhAAAAoA4QABMAAABbAwA
    AFwAAAKAOEAATAAAAZAMAABcAAACgDhAAEwAAAHIDAAAwAAAAoA4QABMAAAB7AwAAMAAAAKAOEAATAAAApwMAABgAAACg
    DhAAEwAAALUDAAAYAAAAmC+KQpFEN3HP+8C1pdu16VvCVjnxEfFZpII/ktVeHKuYqgfYAVuDEr6FMSTDfQxVdF2+cv6x3
    oCnBtybdPGbwcFpm+SGR77vxp3BD8yhDCRvLOktqoR0StypsFzaiPl2UlE+mG3GMajIJwOwx39Zv/ML4MZHkafVUWPKBm
    cpKRSFCrcnOCEbLvxtLE0TDThTVHMKZbsKanYuycKBhSxykqHov6JLZhqocItLwqNRbMcZ6JLRJAaZ1oU1DvRwoGoQFsG
    kGQhsNx5Md0gntbywNLMMHDlKqthOT8qcW/NvLmjugo90b2OleBR4yIQIAseM+v++kOtsUKT3o/m+8nhxxkJMU19TSUdf
    QkxTMTIzODFHMV9YTUQ6U0hBLTI1Nl9TU1dVX1JPX05VTF8A0BAQABMAAAA/AAAALgAAANAQEAATAAAAPQAAABUAAADQE
    BAAEwAAAD0AAAANAAAAc3JjL2JsczEyMzgxL2Jscy5ycwAAAAAArve+1aE5BgLok91iZEwkAdIsbk61CS0C2+VwMbbEEQ
    GZYzb76G2KA7ycH+3PFk8AK2qmngEAAABhdHRlbXB0IHRvIGRpdmlkZSBieSB6ZXJvAAAAbxEQABIAAAB8AQAAFAAAAAA
    AAABhdHRlbXB0IHRvIGRpdmlkZSB3aXRoIG92ZXJmbG93c3JjL2JsczEyMzgxL2ZwLnJzAAAAbxEQABIAAAASAgAADQAA
    AG8REAASAAAAHgIAACYAAABvERAAEgAAAB4CAAAjAAAAbxEQABIAAAAkAgAAFwAAAG8REAASAAAAJAIAABQAAAAAAAAAq
    qr//////gHu//9UrP//AupBYg9rDyoBw5z9ShTOEwJLd2TXrEtDAu3pxpKm+V8Cox4RoAEAAABAEhAAFAAAABUBAAATAA
    AAQBIQABQAAAAeAQAAGAAAAEASEAAUAAAAJAEAABwAAABzcmMvYmxzMTIzODEvZWNwMi5ycwAAAAAEAEGQpcAAC7wGQBI
    QABQAAADmAgAACQAAAEASEAAUAAAA7gIAAA0AAABAEhAAFAAAAP4CAAAhAAAAuL0hwchWgAD1+24BqskAA7pwFz2uR7YA
    RNEK7ADpUwN65MZREMUtA0kBgkmkwiMALyuqJAAAAAB+KwRdBX2sAflVF+WERDwDNJME9ce9GwJp12rYgmRCA9BrWWVPJ
    4gA6DRrH9hnnAAFtgI+AQAAAAEouAiGVJMBeKIo6w5zsgIjyRINFpWmAQq1nU73MqoCm/2tGjUu2gJxczJjhFufAHdSXc
    4AAAAAvnlf8F8HqQJqaAc710nDAfOzmulytSoB0pm8jp0W+gEoPsuZi8IrAKw0qwwzzakDAkpsYAAAAACrqv/////+Ae7
    //1Ss//8C6kFiD2sPKgHDnP1KFM4TAkt3ZNesS0MC7enGkqb5XwKjHhGgAQAAAAgUEAALAAAAjwEAAA8AAAAIFBAACwAA
    AKcBAAATAAAACBQQAAsAAACqAQAADQAAAHNyYy9obWFjLnJzADQUEAAgAAAAVBQQABIAAAADAAAAAAAAAAEAAAAEAAAAa
    W5kZXggb3V0IG9mIGJvdW5kczogdGhlIGxlbiBpcyAgYnV0IHRoZSBpbmRleCBpcyAwMDAxMDIwMzA0MDUwNjA3MDgwOT
    EwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ
    0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5
    ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OQAAQBUQABAAAABQFRAAIgAAAHJhbmdlIGVuZCBpb
    mRleCAgb3V0IG9mIHJhbmdlIGZvciBzbGljZSBvZiBsZW5ndGggAABjYWxsZWQgYE9wdGlvbjo6dW53cmFwKClgIG9uIG
    EgYE5vbmVgIHZhbHVlALAVEAAcAAAA7gEAAB4AAABsaWJyYXJ5L3N0ZC9zcmMvcGFuaWNraW5nLnJzAEGIrMAACwEBAEH
    IrMAACwEBAEGIrcAACwEBAEHIrcAACwEBAEGIrsAACwEBAEHIrsAACwEBAEGIr8AACwEBAEHIr8AACwEBAEGIsMAACwEB
    AEHIsMAACwEBAEGIscAACwEBAEHIscAACwEBAEGIssAACwEBAEHIssAACwEBAEGIs8AACwEBAEHIs8AACwEBAEGItMAAC
    wEBAEHItMAACwEBAEGItcAACwEBAEHItcAACwEBAEGItsAACwEBAEHItsAACwEBAEGIt8AACwEBAEHIt8AACwEBAEGIuM
    AACwEBAEHIuMAACwEBAEGIucAACwEBAEHIucAACwEBAEGIusAACwEBAEHIusAACwEBAEGIu8AACwEBAEHIu8AACwEBAEG
    IvMAACwEBAEHIvMAACwEBAEGIvcAACwEBAEHIvcAACwEBAEGIvsAACwEBAEHIvsAACwEBAEGIv8AACwEBAEHIv8AACwEB
    AEGIwMAACwEBAEHIwMAACwEBAEGIwcAACwEBAEHIwcAACwEBAEGIwsAACwEBAEHIwsAACwEBAEGIw8AACwEBAEHIw8AAC
    wEBAEGIxMAACwEBAEHIxMAACwEBAEGIxcAACwEBAEHIxcAACwEBAEGIxsAACwEBAEHIxsAACwEBAEGIx8AACwEBAEHIx8
    AACwEBAEGIyMAACwEBAEHIyMAACwEBAEGIycAACwEBAEHIycAACwEBAEGIysAACwEBAEHIysAACwEBAEGIy8AACwEBAEH
    Iy8AACwEBAEGIzMAACwEBAEHIzMAACwEBAEGIzcAACwEBAEHIzcAACwEBAEGIzsAACwEBAEHIzsAACwEBAEGIz8AACwEB
    AEHIz8AACwEBAEGI0MAACwEBAEHI0MAACwEBAEGI0cAACwEBAEHI0cAACwEBAEGI0sAACwEBAEHI0sAACwEBAEGI08AAC
    wEBAEHI08AACwEBAEGI1MAACwEBAEHI1MAACwEBAEGI1cAACwEBAEHI1cAACwEBAEGI1sAACwEBAEHI1sAACwEBAEGI18
    AACwEBAEHI18AACwEBAEGI2MAACwEBAEHI2MAACwEBAEGI2cAACwEBAEHI2cAACwEBAEGI2sAACwEBAEHI2sAACwEBAEG
    I28AACwEBAEHI28AACwEBAEGI3MAACwEBAEHI3MAACwEBAEGI3cAACwEBAEHI3cAACwEBAEGI3sAACwEBAEHI3sAACwEB
    AEGI38AACwEBAEHI38AACwEBAEGI4MAACwEBAEHI4MAACwEBAEGI4cAACwEBAEHI4cAACwEBAEGI4sAACwEBAEHI4sAAC
    wEBAEGI48AACwEBAEHI48AACwEBAEGI5MAACwEBAEHI5MAACwEBAEGI5cAACwEBAEHI5cAACwEBAEGI5sAACwEBAEHI5s
    AACwEBAEGI58AACwEBAEHI58AACwEBAEGI6MAACwEBAEHI6MAACwEBAEGI6cAACwEBAEHI6cAACwEBAEGI6sAACwEBAEH
    I6sAACwEBAEGI68AACwEBAEHI68AACwEBAEGI7MAACwEBAEHI7MAACwEBAEGI7cAACwEBAEHI7cAACwEBAEGI7sAACwEB
    AEHI7sAACwEBAEGI78AACwEBAEHI78AACwEBAEGI8MAACwEBAEHI8MAACwEBAEGI8cAACwEBAEHI8cAACwEBAEGI8sAAC
    wEBAEHI8sAACwEBAEGI88AACwEBAEHI88AACwEBAEGI9MAACwEBAEHI9MAACwEBAEGI9cAACwEBAEHI9cAACwEBAEGI9s
    AACwEBAEHI9sAACwEBAEGI98AACwEBAEHI98AACwEBAEGI+MAACwEBAEHI+MAACwEBAEGI+cAACwEBAEHI+cAACwEBAEG
    I+sAACwEBAEHI+sAACwEBAEGI+8AACwEBAEHI+8AACwEBAEGI/MAACwEBAEHI/MAACwEBAEGI/cAACwEBAEHI/cAACwEB
    AEGI/sAACwEBAEHI/sAACwEBAEGI/8AACwEBAEHI/8AACwEBAEGIgMEACwEBAEHIgMEACwEBAEGIgcEACwEBAEHIgcEAC
    wEBAEGIgsEACwEBAEHIgsEACwEBAEGIg8EACwEBAEHIg8EACwEBAEGIhMEACwEBAEHIhMEACwEBAEGIhcEACwEBAEHIhc
    EACwEBAEGIhsEACwEBAEHIhsEACwEBAEGIh8EACwEBAEHIh8EACwEBAEGIiMEACwEBAEHIiMEACwEBAEGIicEACwEBAEH
    IicEACwEBAEGIisEACwEBAEHIisEACwEBAEGIi8EACwEBAEHIi8EACwEBAEGIjMEACwEBAEHIjMEACwEBAEGIjcEACwEB
    AEHIjcEACwEBAEGIjsEACwEBAEHIjsEACwEBAEGIj8EACwEBAEHIj8EACwEBAEGIkMEACwEBAEHIkMEACwEBAEGIkcEAC
    wEBAEHIkcEACwEBAEGIksEACwEBAEHIksEACwEBAEGIk8EACwEBAEHIk8EACwEBAEGIlMEACwEBAEHIlMEACwEBAEGIlc
    EACwEBAEHIlcEACwEBAEGIlsEACwEBAEHIlsEACwEBAEGIl8EACwEBAEHIl8EACwEBAEGImMEACwEBAEHImMEACwEBAEG
    ImcEACwEBAEHImcEACwEBAEGImsEACwEBAEHImsEACwEBAEGIm8EACwEBAEHIm8EACwEBAEGInMEACwEBAEHInMEACwEB
    AEGIncEACwEBAEHIncEACwEBAEGInsEACwEBAEHInsEACwEBAEGIn8EACwEBAEHIn8EACwEBAEGIoMEACwEBAEHIoMEAC
    wEBAEGIocEACwEBAEHIocEACwEBAEGIosEACwEBAEHIosEACwEBAEGIo8EACwEBAEHIo8EACwEBAEGIpMEACwEBAEHIpM
    EACwEBAEGIpcEACwEBAEHIpcEACwEBAEGIpsEACwEBAEHIpsEACwEBAEGIp8EACwEBAEHIp8EACwEBAEGIqMEACwEBAEH
    IqMEACwEBAEGIqcEACwEBAEHIqcEACwEBAEGIqsEACwEBAEHIqsEACwEBAEGIq8EACwEBAEHIq8EACwEBAEGIrMEACwEB
    AEHIrMEACwEBAEGIrcEACwEBAEHIrcEACwEBAEGIrsEACwEBAEHIrsEACwEBAEGIr8EACwEBAEHIr8EACwEBAEGIsMEAC
    wEBAEHIsMEACwEBAEGIscEACwEBAEHIscEACwEBAEGIssEACwEBAEHIssEACwEBAEGIs8EACwEBAEHIs8EACwEBAEGItM
    EACwEBAEHItMEACwEBAEGItcEACwEBAEHItcEACwEBAHsJcHJvZHVjZXJzAghsYW5ndWFnZQEEUnVzdAAMcHJvY2Vzc2V
    kLWJ5AwVydXN0Yx0xLjQ5LjAgKGUxODg0YThlMyAyMDIwLTEyLTI5KQZ3YWxydXMGMC4xOC4wDHdhc20tYmluZGdlbhIw
    LjIuNzAgKGI2MzU1YzI3MCk=
`.replace(/[^0-9a-zA-Z/+]/g, '');
const wasmBytes = base64_arraybuffer__WEBPACK_IMPORTED_MODULE_0__["decode"](wasmBytesBase64);
/**
 * @returns {number}
 */

function bls_init() {
  let ret = wasm.bls_init();
  return ret;
}
let cachegetUint8Memory0 = null;

function getUint8Memory0() {
  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }

  return cachegetUint8Memory0;
}

function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1);
  getUint8Memory0().set(arg, ptr / 1);
  return [ptr, arg.length];
}
/**
 * @param {Uint8Array} sig
 * @param {Uint8Array} m
 * @param {Uint8Array} w
 * @returns {number}
 */


function bls_verify(sig, m, w) {
  const [ptr0, len0] = passArray8ToWasm0(sig, wasm.__wbindgen_malloc);
  const [ptr1, len1] = passArray8ToWasm0(m, wasm.__wbindgen_malloc);
  const [ptr2, len2] = passArray8ToWasm0(w, wasm.__wbindgen_malloc);
  const ret = wasm.bls_verify(ptr0, len0, ptr1, len1, ptr2, len2);
  return ret;
}

async function load(module, imports) {
  if (typeof Response === 'function' && module instanceof Response) {
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);

    if (instance instanceof WebAssembly.Instance) {
      return {
        instance,
        module
      };
    } else {
      return instance;
    }
  }
}

async function init() {
  const imports = {};
  const {
    instance,
    module
  } = await load(wasmBytes, imports);
  wasm = instance.exports;
  init.__wbindgen_wasm_module = module;
  return wasm;
}
/**
 * If `module_or_path` is {RequestInfo} or {URL}, makes a request and
 * for everything else, calls `WebAssembly.instantiate` directly.
 *
 * @param {InitInput | Promise<InitInput>} module_or_path
 *
 * @returns {Promise<InitOutput>}
 */


/* harmony default export */ __webpack_exports__["default"] = (init);

/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/candid-core.js":
/*!*************************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/candid-core.js ***!
  \*************************************************************/
/*! exports provided: InputBox, InputForm, RecordForm, TupleForm, VariantForm, OptionForm, VecForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputBox", function() { return InputBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputForm", function() { return InputForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecordForm", function() { return RecordForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TupleForm", function() { return TupleForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VariantForm", function() { return VariantForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptionForm", function() { return OptionForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VecForm", function() { return VecForm; });
class InputBox {
  constructor(idl, ui) {
    this.idl = idl;
    this.ui = ui;
    this.label = null;
    this.value = undefined;
    const status = document.createElement('span');
    status.className = 'status';
    this.status = status;

    if (ui.input) {
      ui.input.addEventListener('blur', () => {
        if (ui.input.value === '') {
          return;
        }

        this.parse();
      });
      ui.input.addEventListener('input', () => {
        status.style.display = 'none';
        ui.input.classList.remove('reject');
      });
    }
  }

  isRejected() {
    return this.value === undefined;
  }

  parse(config = {}) {
    if (this.ui.form) {
      const value = this.ui.form.parse(config);
      this.value = value;
      return value;
    }

    if (this.ui.input) {
      const input = this.ui.input;

      try {
        const value = this.ui.parse(this.idl, config, input.value);

        if (!this.idl.covariant(value)) {
          throw new Error(`${input.value} is not of type ${this.idl.display()}`);
        }

        this.status.style.display = 'none';
        this.value = value;
        return value;
      } catch (err) {
        input.classList.add('reject');
        this.status.style.display = 'block';
        this.status.innerHTML = 'InputError: ' + err.message;
        this.value = undefined;
        return undefined;
      }
    }

    return null;
  }

  render(dom) {
    const container = document.createElement('span');

    if (this.label) {
      const label = document.createElement('label');
      label.innerText = this.label;
      container.appendChild(label);
    }

    if (this.ui.input) {
      container.appendChild(this.ui.input);
      container.appendChild(this.status);
    }

    if (this.ui.form) {
      this.ui.form.render(container);
    }

    dom.appendChild(container);
  }

}
class InputForm {
  constructor(ui) {
    this.ui = ui;
    this.form = [];
  }

  renderForm(dom) {
    if (this.ui.container) {
      this.form.forEach(e => e.render(this.ui.container));
      dom.appendChild(this.ui.container);
    } else {
      this.form.forEach(e => e.render(dom));
    }
  }

  render(dom) {
    if (this.ui.open && this.ui.event) {
      dom.appendChild(this.ui.open);
      const form = this; // eslint-disable-next-line

      form.ui.open.addEventListener(form.ui.event, () => {
        // Remove old form
        if (form.ui.container) {
          form.ui.container.innerHTML = '';
        } else {
          const oldContainer = form.ui.open.nextElementSibling;

          if (oldContainer) {
            oldContainer.parentNode.removeChild(oldContainer);
          }
        } // Render form


        form.generateForm();
        form.renderForm(dom);
      });
    } else {
      this.generateForm();
      this.renderForm(dom);
    }
  }

}
class RecordForm extends InputForm {
  constructor(fields, ui) {
    super(ui);
    this.fields = fields;
    this.ui = ui;
  }

  generateForm() {
    this.form = this.fields.map(([key, type]) => {
      const input = this.ui.render(type); // eslint-disable-next-line

      if (this.ui.labelMap && this.ui.labelMap.hasOwnProperty(key)) {
        input.label = this.ui.labelMap[key] + ' ';
      } else {
        input.label = key + ' ';
      }

      return input;
    });
  }

  parse(config) {
    const v = {};
    this.fields.forEach(([key, _], i) => {
      const value = this.form[i].parse(config);
      v[key] = value;
    });

    if (this.form.some(input => input.isRejected())) {
      return undefined;
    }

    return v;
  }

}
class TupleForm extends InputForm {
  constructor(components, ui) {
    super(ui);
    this.components = components;
    this.ui = ui;
  }

  generateForm() {
    this.form = this.components.map(type => {
      const input = this.ui.render(type);
      return input;
    });
  }

  parse(config) {
    const v = [];
    this.components.forEach((_, i) => {
      const value = this.form[i].parse(config);
      v.push(value);
    });

    if (this.form.some(input => input.isRejected())) {
      return undefined;
    }

    return v;
  }

}
class VariantForm extends InputForm {
  constructor(fields, ui) {
    super(ui);
    this.fields = fields;
    this.ui = ui;
  }

  generateForm() {
    const index = this.ui.open.selectedIndex;
    const [_, type] = this.fields[index];
    const variant = this.ui.render(type);
    this.form = [variant];
  }

  parse(config) {
    const select = this.ui.open;
    const selected = select.options[select.selectedIndex].value;
    const value = this.form[0].parse(config);

    if (value === undefined) {
      return undefined;
    }

    const v = {};
    v[selected] = value;
    return v;
  }

}
class OptionForm extends InputForm {
  constructor(ty, ui) {
    super(ui);
    this.ty = ty;
    this.ui = ui;
  }

  generateForm() {
    if (this.ui.open.checked) {
      const opt = this.ui.render(this.ty);
      this.form = [opt];
    } else {
      this.form = [];
    }
  }

  parse(config) {
    if (this.form.length === 0) {
      return [];
    } else {
      const value = this.form[0].parse(config);

      if (value === undefined) {
        return undefined;
      }

      return [value];
    }
  }

}
class VecForm extends InputForm {
  constructor(ty, ui) {
    super(ui);
    this.ty = ty;
    this.ui = ui;
  }

  generateForm() {
    const len = +this.ui.open.value;
    this.form = [];

    for (let i = 0; i < len; i++) {
      const t = this.ui.render(this.ty);
      this.form.push(t);
    }
  }

  parse(config) {
    const value = this.form.map(input => {
      return input.parse(config);
    });

    if (this.form.some(input => input.isRejected())) {
      return undefined;
    }

    return value;
  }

}

/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/candid-ui.js":
/*!***********************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/candid-ui.js ***!
  \***********************************************************/
/*! exports provided: inputBox, recordForm, tupleForm, variantForm, optForm, vecForm, Render, renderInput, renderValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inputBox", function() { return inputBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recordForm", function() { return recordForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tupleForm", function() { return tupleForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "variantForm", function() { return variantForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optForm", function() { return optForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vecForm", function() { return vecForm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Render", function() { return Render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderInput", function() { return renderInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderValue", function() { return renderValue; });
/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./idl */ "./node_modules/@dfinity/candid/lib/esm/idl.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _candid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./candid-core */ "./node_modules/@dfinity/candid/lib/esm/candid-core.js");



const InputConfig = {
  parse: parsePrimitive
};
const FormConfig = {
  render: renderInput
};
const inputBox = (t, config) => {
  return new _candid_core__WEBPACK_IMPORTED_MODULE_2__["InputBox"](t, Object.assign(Object.assign({}, InputConfig), config));
};
const recordForm = (fields, config) => {
  return new _candid_core__WEBPACK_IMPORTED_MODULE_2__["RecordForm"](fields, Object.assign(Object.assign({}, FormConfig), config));
};
const tupleForm = (components, config) => {
  return new _candid_core__WEBPACK_IMPORTED_MODULE_2__["TupleForm"](components, Object.assign(Object.assign({}, FormConfig), config));
};
const variantForm = (fields, config) => {
  return new _candid_core__WEBPACK_IMPORTED_MODULE_2__["VariantForm"](fields, Object.assign(Object.assign({}, FormConfig), config));
};
const optForm = (ty, config) => {
  return new _candid_core__WEBPACK_IMPORTED_MODULE_2__["OptionForm"](ty, Object.assign(Object.assign({}, FormConfig), config));
};
const vecForm = (ty, config) => {
  return new _candid_core__WEBPACK_IMPORTED_MODULE_2__["VecForm"](ty, Object.assign(Object.assign({}, FormConfig), config));
};
class Render extends _idl__WEBPACK_IMPORTED_MODULE_0__["Visitor"] {
  visitType(t, d) {
    const input = document.createElement('input');
    input.classList.add('argument');
    input.placeholder = t.display();
    return inputBox(t, {
      input
    });
  }

  visitNull(t, d) {
    return inputBox(t, {});
  }

  visitRecord(t, fields, d) {
    let config = {};

    if (fields.length > 1) {
      const container = document.createElement('div');
      container.classList.add('popup-form');
      config = {
        container
      };
    }

    const form = recordForm(fields, config);
    return inputBox(t, {
      form
    });
  }

  visitTuple(t, components, d) {
    let config = {};

    if (components.length > 1) {
      const container = document.createElement('div');
      container.classList.add('popup-form');
      config = {
        container
      };
    }

    const form = tupleForm(components, config);
    return inputBox(t, {
      form
    });
  }

  visitVariant(t, fields, d) {
    const select = document.createElement('select');

    for (const [key, type] of fields) {
      const option = new Option(key);
      select.add(option);
    }

    select.selectedIndex = -1;
    select.classList.add('open');
    const config = {
      open: select,
      event: 'change'
    };
    const form = variantForm(fields, config);
    return inputBox(t, {
      form
    });
  }

  visitOpt(t, ty, d) {
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.classList.add('open');
    const form = optForm(ty, {
      open: checkbox,
      event: 'change'
    });
    return inputBox(t, {
      form
    });
  }

  visitVec(t, ty, d) {
    const len = document.createElement('input');
    len.type = 'number';
    len.min = '0';
    len.max = '100';
    len.style.width = '8rem';
    len.placeholder = 'len';
    len.classList.add('open');
    const container = document.createElement('div');
    container.classList.add('popup-form');
    const form = vecForm(ty, {
      open: len,
      event: 'change',
      container
    });
    return inputBox(t, {
      form
    });
  }

  visitRec(t, ty, d) {
    return renderInput(ty);
  }

}

class Parse extends _idl__WEBPACK_IMPORTED_MODULE_0__["Visitor"] {
  visitNull(t, v) {
    return null;
  }

  visitBool(t, v) {
    if (v === 'true') {
      return true;
    }

    if (v === 'false') {
      return false;
    }

    throw new Error(`Cannot parse ${v} as boolean`);
  }

  visitText(t, v) {
    return v;
  }

  visitFloat(t, v) {
    return parseFloat(v);
  }

  visitNumber(t, v) {
    return BigInt(v);
  }

  visitPrincipal(t, v) {
    return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].fromText(v);
  }

  visitService(t, v) {
    return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].fromText(v);
  }

  visitFunc(t, v) {
    const x = v.split('.', 2);
    return [_dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].fromText(x[0]), x[1]];
  }

}

class Random extends _idl__WEBPACK_IMPORTED_MODULE_0__["Visitor"] {
  visitNull(t, v) {
    return null;
  }

  visitBool(t, v) {
    return Math.random() < 0.5;
  }

  visitText(t, v) {
    return Math.random().toString(36).substring(6);
  }

  visitFloat(t, v) {
    return Math.random();
  }

  visitInt(t, v) {
    return BigInt(this.generateNumber(true));
  }

  visitNat(t, v) {
    return BigInt(this.generateNumber(false));
  }

  visitFixedInt(t, v) {
    return BigInt(this.generateNumber(true));
  }

  visitFixedNat(t, v) {
    return BigInt(this.generateNumber(false));
  }

  generateNumber(signed) {
    const num = Math.floor(Math.random() * 100);

    if (signed && Math.random() < 0.5) {
      return -num;
    } else {
      return num;
    }
  }

}

function parsePrimitive(t, config, d) {
  if (config.random && d === '') {
    return t.accept(new Random(), d);
  } else {
    return t.accept(new Parse(), d);
  }
}
/**
 *
 * @param t an IDL type
 * @returns an input for that type
 */


function renderInput(t) {
  return t.accept(new Render(), null);
}
/**
 *
 * @param t an IDL Type
 * @param input an InputBox
 * @param value any
 * @returns rendering that value to the provided input
 */

function renderValue(t, input, value) {
  return t.accept(new RenderValue(), {
    input,
    value
  });
}

class RenderValue extends _idl__WEBPACK_IMPORTED_MODULE_0__["Visitor"] {
  visitType(t, d) {
    d.input.ui.input.value = t.valueToString(d.value);
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  visitNull(t, d) {}

  visitText(t, d) {
    d.input.ui.input.value = d.value;
  }

  visitRec(t, ty, d) {
    renderValue(ty, d.input, d.value);
  }

  visitOpt(t, ty, d) {
    if (d.value.length === 0) {
      return;
    } else {
      const form = d.input.ui.form;
      const open = form.ui.open;
      open.checked = true;
      open.dispatchEvent(new Event(form.ui.event));
      renderValue(ty, form.form[0], d.value[0]);
    }
  }

  visitRecord(t, fields, d) {
    const form = d.input.ui.form;
    fields.forEach(([key, type], i) => {
      renderValue(type, form.form[i], d.value[key]);
    });
  }

  visitTuple(t, components, d) {
    const form = d.input.ui.form;
    components.forEach((type, i) => {
      renderValue(type, form.form[i], d.value[i]);
    });
  }

  visitVariant(t, fields, d) {
    const form = d.input.ui.form;
    const selected = Object.entries(d.value)[0];
    fields.forEach(([key, type], i) => {
      if (key === selected[0]) {
        const open = form.ui.open;
        open.selectedIndex = i;
        open.dispatchEvent(new Event(form.ui.event));
        renderValue(type, form.form[0], selected[1]);
      }
    });
  }

  visitVec(t, ty, d) {
    const form = d.input.ui.form;
    const len = d.value.length;
    const open = form.ui.open;
    open.value = len;
    open.dispatchEvent(new Event(form.ui.event));
    d.value.forEach((v, i) => {
      renderValue(ty, form.form[i], v);
    });
  }

}

/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/idl.js":
/*!*****************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/idl.js ***!
  \*****************************************************/
/*! exports provided: Visitor, Type, PrimitiveType, ConstructType, EmptyClass, BoolClass, NullClass, ReservedClass, TextClass, IntClass, NatClass, FloatClass, FixedIntClass, FixedNatClass, VecClass, OptClass, RecordClass, TupleClass, VariantClass, RecClass, PrincipalClass, FuncClass, ServiceClass, encode, decode, Empty, Reserved, Bool, Null, Text, Int, Nat, Float32, Float64, Int8, Int16, Int32, Int64, Nat8, Nat16, Nat32, Nat64, Principal, Tuple, Vec, Opt, Record, Variant, Rec, Func, Service */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Visitor", function() { return Visitor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimitiveType", function() { return PrimitiveType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConstructType", function() { return ConstructType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmptyClass", function() { return EmptyClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoolClass", function() { return BoolClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NullClass", function() { return NullClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReservedClass", function() { return ReservedClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextClass", function() { return TextClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntClass", function() { return IntClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NatClass", function() { return NatClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloatClass", function() { return FloatClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedIntClass", function() { return FixedIntClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedNatClass", function() { return FixedNatClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VecClass", function() { return VecClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptClass", function() { return OptClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecordClass", function() { return RecordClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TupleClass", function() { return TupleClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VariantClass", function() { return VariantClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecClass", function() { return RecClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrincipalClass", function() { return PrincipalClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FuncClass", function() { return FuncClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceClass", function() { return ServiceClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encode", function() { return encode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decode", function() { return decode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Empty", function() { return Empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reserved", function() { return Reserved; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bool", function() { return Bool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Null", function() { return Null; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Text", function() { return Text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int", function() { return Int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nat", function() { return Nat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32", function() { return Float32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float64", function() { return Float64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int8", function() { return Int8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int16", function() { return Int16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int32", function() { return Int32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int64", function() { return Int64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nat8", function() { return Nat8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nat16", function() { return Nat16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nat32", function() { return Nat32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nat64", function() { return Nat64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Principal", function() { return Principal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tuple", function() { return Tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vec", function() { return Vec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Opt", function() { return Opt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Record", function() { return Record; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Variant", function() { return Variant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rec", function() { return Rec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Func", function() { return Func; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Service", function() { return Service; });
/* harmony import */ var buffer_pipe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer-pipe */ "./node_modules/buffer-pipe/index.js");
/* harmony import */ var buffer_pipe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer_pipe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ "./node_modules/@dfinity/candid/lib/esm/types.js");
/* harmony import */ var _utils_hash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/hash */ "./node_modules/@dfinity/candid/lib/esm/utils/hash.js");
/* harmony import */ var _utils_leb128__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/leb128 */ "./node_modules/@dfinity/candid/lib/esm/utils/leb128.js");
// tslint:disable:max-classes-per-file







const magicNumber = 'DIDL';

function zipWith(xs, ys, f) {
  return xs.map((x, i) => f(x, ys[i]));
}
/**
 * An IDL Type Table, which precedes the data in the stream.
 */


class TypeTable {
  constructor() {
    // List of types. Needs to be an array as the index needs to be stable.
    this._typs = [];
    this._idx = new Map();
  }

  has(obj) {
    return this._idx.has(obj.name);
  }

  add(type, buf) {
    const idx = this._typs.length;

    this._idx.set(type.name, idx);

    this._typs.push(buf);
  }

  merge(obj, knot) {
    const idx = this._idx.get(obj.name);

    const knotIdx = this._idx.get(knot);

    if (idx === undefined) {
      throw new Error('Missing type index for ' + obj);
    }

    if (knotIdx === undefined) {
      throw new Error('Missing type index for ' + knot);
    }

    this._typs[idx] = this._typs[knotIdx]; // Delete the type.

    this._typs.splice(knotIdx, 1);

    this._idx.delete(knot);
  }

  encode() {
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this._typs.length);
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(this._typs);
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([len, buf]);
  }

  indexOf(typeName) {
    if (!this._idx.has(typeName)) {
      throw new Error('Missing type index for ' + typeName);
    }

    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(this._idx.get(typeName) || 0);
  }

}

class Visitor {
  visitType(t, data) {
    throw new Error('Not implemented');
  }

  visitPrimitive(t, data) {
    return this.visitType(t, data);
  }

  visitEmpty(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitBool(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitNull(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitReserved(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitText(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitNumber(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitInt(t, data) {
    return this.visitNumber(t, data);
  }

  visitNat(t, data) {
    return this.visitNumber(t, data);
  }

  visitFloat(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitFixedInt(t, data) {
    return this.visitNumber(t, data);
  }

  visitFixedNat(t, data) {
    return this.visitNumber(t, data);
  }

  visitPrincipal(t, data) {
    return this.visitPrimitive(t, data);
  }

  visitConstruct(t, data) {
    return this.visitType(t, data);
  }

  visitVec(t, ty, data) {
    return this.visitConstruct(t, data);
  }

  visitOpt(t, ty, data) {
    return this.visitConstruct(t, data);
  }

  visitRecord(t, fields, data) {
    return this.visitConstruct(t, data);
  }

  visitTuple(t, components, data) {
    const fields = components.map((ty, i) => [`_${i}_`, ty]);
    return this.visitRecord(t, fields, data);
  }

  visitVariant(t, fields, data) {
    return this.visitConstruct(t, data);
  }

  visitRec(t, ty, data) {
    return this.visitConstruct(ty, data);
  }

  visitFunc(t, data) {
    return this.visitConstruct(t, data);
  }

  visitService(t, data) {
    return this.visitConstruct(t, data);
  }

}
/**
 * Represents an IDL type.
 */

class Type {
  /* Display type name */
  display() {
    return this.name;
  }

  valueToString(x) {
    return toReadableString(x);
  }
  /* Implement `T` in the IDL spec, only needed for non-primitive types */


  buildTypeTable(typeTable) {
    if (!typeTable.has(this)) {
      this._buildTypeTableImpl(typeTable);
    }
  }

}
class PrimitiveType extends Type {
  checkType(t) {
    if (this.name !== t.name) {
      throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
    }

    return t;
  }

  _buildTypeTableImpl(typeTable) {
    // No type table encoding for Primitive types.
    return;
  }

}
class ConstructType extends Type {
  checkType(t) {
    if (t instanceof RecClass) {
      const ty = t.getType();

      if (typeof ty === 'undefined') {
        throw new Error('type mismatch with uninitialized type');
      }

      return ty;
    }

    throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);
  }

  encodeType(typeTable) {
    return typeTable.indexOf(this.name);
  }

}
/**
 * Represents an IDL Empty, a type which has no inhabitants.
 * Since no values exist for this type, it cannot be serialised or deserialised.
 * Result types like `Result<Text, Empty>` should always succeed.
 */

class EmptyClass extends PrimitiveType {
  accept(v, d) {
    return v.visitEmpty(this, d);
  }

  covariant(x) {
    return false;
  }

  encodeValue() {
    throw new Error('Empty cannot appear as a function argument');
  }

  valueToString() {
    throw new Error('Empty cannot appear as a value');
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-17
    /* Empty */
    );
  }

  decodeValue() {
    throw new Error('Empty cannot appear as an output');
  }

  get name() {
    return 'empty';
  }

}
/**
 * Represents an IDL Bool
 */

class BoolClass extends PrimitiveType {
  accept(v, d) {
    return v.visitBool(this, d);
  }

  covariant(x) {
    return typeof x === 'boolean';
  }

  encodeValue(x) {
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].alloc(1);
    buf.writeInt8(x ? 1 : 0, 0);
    return buf;
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-2
    /* Bool */
    );
  }

  decodeValue(b, t) {
    this.checkType(t);
    const x = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, 1).toString('hex');

    if (x === '00') {
      return false;
    } else if (x === '01') {
      return true;
    } else {
      throw new Error('Boolean value out of range');
    }
  }

  get name() {
    return 'bool';
  }

}
/**
 * Represents an IDL Null
 */

class NullClass extends PrimitiveType {
  accept(v, d) {
    return v.visitNull(this, d);
  }

  covariant(x) {
    return x === null;
  }

  encodeValue() {
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].alloc(0);
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-1
    /* Null */
    );
  }

  decodeValue(b, t) {
    this.checkType(t);
    return null;
  }

  get name() {
    return 'null';
  }

}
/**
 * Represents an IDL Reserved
 */

class ReservedClass extends PrimitiveType {
  accept(v, d) {
    return v.visitReserved(this, d);
  }

  covariant(x) {
    return true;
  }

  encodeValue() {
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].alloc(0);
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-16
    /* Reserved */
    );
  }

  decodeValue(b, t) {
    if (t.name !== this.name) {
      t.decodeValue(b, t);
    }

    return null;
  }

  get name() {
    return 'reserved';
  }

}

function isValidUTF8(buf) {
  return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].compare(new buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"](buf.toString(), 'utf8'), buf) === 0;
}
/**
 * Represents an IDL Text
 */


class TextClass extends PrimitiveType {
  accept(v, d) {
    return v.visitText(this, d);
  }

  covariant(x) {
    return typeof x === 'string';
  }

  encodeValue(x) {
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(x, 'utf8');
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(buf.length);
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([len, buf]);
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-15
    /* Text */
    );
  }

  decodeValue(b, t) {
    this.checkType(t);
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(b);
    const buf = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, Number(len));

    if (!isValidUTF8(buf)) {
      throw new Error('Not valid UTF8 text');
    }

    return buf.toString('utf8');
  }

  get name() {
    return 'text';
  }

  valueToString(x) {
    return '"' + x + '"';
  }

}
/**
 * Represents an IDL Int
 */

class IntClass extends PrimitiveType {
  accept(v, d) {
    return v.visitInt(this, d);
  }

  covariant(x) {
    // We allow encoding of JavaScript plain numbers.
    // But we will always decode to bigint.
    return typeof x === 'bigint' || Number.isInteger(x);
  }

  encodeValue(x) {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(x);
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-4
    /* Int */
    );
  }

  decodeValue(b, t) {
    this.checkType(t);
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(b);
  }

  get name() {
    return 'int';
  }

  valueToString(x) {
    return x.toString();
  }

}
/**
 * Represents an IDL Nat
 */

class NatClass extends PrimitiveType {
  accept(v, d) {
    return v.visitNat(this, d);
  }

  covariant(x) {
    // We allow encoding of JavaScript plain numbers.
    // But we will always decode to bigint.
    return typeof x === 'bigint' && x >= BigInt(0) || Number.isInteger(x) && x >= 0;
  }

  encodeValue(x) {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(x);
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-3
    /* Nat */
    );
  }

  decodeValue(b, t) {
    this.checkType(t);
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(b);
  }

  get name() {
    return 'nat';
  }

  valueToString(x) {
    return x.toString();
  }

}
/**
 * Represents an IDL Float
 */

class FloatClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;

    if (_bits !== 32 && _bits !== 64) {
      throw new Error('not a valid float type');
    }
  }

  accept(v, d) {
    return v.visitFloat(this, d);
  }

  covariant(x) {
    return typeof x === 'number' || x instanceof Number;
  }

  encodeValue(x) {
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].allocUnsafe(this._bits / 8);

    if (this._bits === 32) {
      buf.writeFloatLE(x, 0);
    } else {
      buf.writeDoubleLE(x, 0);
    }

    return buf;
  }

  encodeType() {
    const opcode = this._bits === 32 ? -13
    /* Float32 */
    : -14
    /* Float64 */
    ;
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(opcode);
  }

  decodeValue(b, t) {
    this.checkType(t);
    const x = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, this._bits / 8);

    if (this._bits === 32) {
      return x.readFloatLE(0);
    } else {
      return x.readDoubleLE(0);
    }
  }

  get name() {
    return 'float' + this._bits;
  }

  valueToString(x) {
    return x.toString();
  }

}
/**
 * Represents an IDL fixed-width Int(n)
 */

class FixedIntClass extends PrimitiveType {
  constructor(_bits) {
    super();
    this._bits = _bits;
  }

  accept(v, d) {
    return v.visitFixedInt(this, d);
  }

  covariant(x) {
    const min = BigInt(2) ** BigInt(this._bits - 1) * BigInt(-1);
    const max = BigInt(2) ** BigInt(this._bits - 1) - BigInt(1);

    if (typeof x === 'bigint') {
      return x >= min && x <= max;
    } else if (Number.isInteger(x)) {
      const v = BigInt(x);
      return v >= min && v <= max;
    } else {
      return false;
    }
  }

  encodeValue(x) {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["writeIntLE"])(x, this._bits / 8);
  }

  encodeType() {
    const offset = Math.log2(this._bits) - 3;
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-9 - offset);
  }

  decodeValue(b, t) {
    this.checkType(t);
    const num = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["readIntLE"])(b, this._bits / 8);

    if (this._bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }

  get name() {
    return `int${this._bits}`;
  }

  valueToString(x) {
    return x.toString();
  }

}
/**
 * Represents an IDL fixed-width Nat(n)
 */

class FixedNatClass extends PrimitiveType {
  constructor(bits) {
    super();
    this.bits = bits;
  }

  accept(v, d) {
    return v.visitFixedNat(this, d);
  }

  covariant(x) {
    const max = BigInt(2) ** BigInt(this.bits);

    if (typeof x === 'bigint' && x >= BigInt(0)) {
      return x < max;
    } else if (Number.isInteger(x) && x >= 0) {
      const v = BigInt(x);
      return v < max;
    } else {
      return false;
    }
  }

  encodeValue(x) {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["writeUIntLE"])(x, this.bits / 8);
  }

  encodeType() {
    const offset = Math.log2(this.bits) - 3;
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-5 - offset);
  }

  decodeValue(b, t) {
    this.checkType(t);
    const num = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["readUIntLE"])(b, this.bits / 8);

    if (this.bits <= 32) {
      return Number(num);
    } else {
      return num;
    }
  }

  get name() {
    return `nat${this.bits}`;
  }

  valueToString(x) {
    return x.toString();
  }

}
/**
 * Represents an IDL Array
 * @param {Type} t
 */

class VecClass extends ConstructType {
  constructor(_type) {
    super();
    this._type = _type; // If true, this vector is really a blob and we can just use memcpy.

    this._blobOptimization = false;

    if (_type instanceof FixedNatClass && _type.bits === 8) {
      this._blobOptimization = true;
    }
  }

  accept(v, d) {
    return v.visitVec(this, this._type, d);
  }

  covariant(x) {
    return Array.isArray(x) && x.every(v => this._type.covariant(v));
  }

  encodeValue(x) {
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(x.length);

    if (this._blobOptimization) {
      return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([len, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(x)]);
    }

    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([len, ...x.map(d => this._type.encodeValue(d))]);
  }

  _buildTypeTableImpl(typeTable) {
    this._type.buildTypeTable(typeTable);

    const opCode = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-19
    /* Vector */
    );

    const buffer = this._type.encodeType(typeTable);

    typeTable.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([opCode, buffer]));
  }

  decodeValue(b, t) {
    const vec = this.checkType(t);

    if (!(vec instanceof VecClass)) {
      throw new Error('Not a vector type');
    }

    const len = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(b));

    if (this._blobOptimization) {
      return [...new Uint8Array(b.read(len))];
    }

    const rets = [];

    for (let i = 0; i < len; i++) {
      rets.push(this._type.decodeValue(b, vec._type));
    }

    return rets;
  }

  get name() {
    return `vec ${this._type.name}`;
  }

  display() {
    return `vec ${this._type.display()}`;
  }

  valueToString(x) {
    const elements = x.map(e => this._type.valueToString(e));
    return 'vec {' + elements.join('; ') + '}';
  }

}
/**
 * Represents an IDL Option
 * @param {Type} t
 */

class OptClass extends ConstructType {
  constructor(_type) {
    super();
    this._type = _type;
  }

  accept(v, d) {
    return v.visitOpt(this, this._type, d);
  }

  covariant(x) {
    return Array.isArray(x) && (x.length === 0 || x.length === 1 && this._type.covariant(x[0]));
  }

  encodeValue(x) {
    if (x.length === 0) {
      return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([0]);
    } else {
      return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([1]), this._type.encodeValue(x[0])]);
    }
  }

  _buildTypeTableImpl(typeTable) {
    this._type.buildTypeTable(typeTable);

    const opCode = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-18
    /* Opt */
    );

    const buffer = this._type.encodeType(typeTable);

    typeTable.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([opCode, buffer]));
  }

  decodeValue(b, t) {
    const opt = this.checkType(t);

    if (!(opt instanceof OptClass)) {
      throw new Error('Not an option type');
    }

    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, 1).toString('hex');

    if (len === '00') {
      return [];
    } else if (len === '01') {
      return [this._type.decodeValue(b, opt._type)];
    } else {
      throw new Error('Not an option value');
    }
  }

  get name() {
    return `opt ${this._type.name}`;
  }

  display() {
    return `opt ${this._type.display()}`;
  }

  valueToString(x) {
    if (x.length === 0) {
      return 'null';
    } else {
      return `opt ${this._type.valueToString(x[0])}`;
    }
  }

}
/**
 * Represents an IDL Record
 * @param {Object} [fields] - mapping of function name to Type
 */

class RecordClass extends ConstructType {
  constructor(fields = {}) {
    super();
    this._fields = Object.entries(fields).sort((a, b) => Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(a[0]) - Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(b[0]));
  }

  accept(v, d) {
    return v.visitRecord(this, this._fields, d);
  }

  tryAsTuple() {
    const res = [];

    for (let i = 0; i < this._fields.length; i++) {
      const [key, type] = this._fields[i];

      if (key !== `_${i}_`) {
        return null;
      }

      res.push(type);
    }

    return res;
  }

  covariant(x) {
    return typeof x === 'object' && this._fields.every(([k, t]) => {
      // eslint-disable-next-line
      if (!x.hasOwnProperty(k)) {
        throw new Error(`Record is missing key "${k}".`);
      }

      return t.covariant(x[k]);
    });
  }

  encodeValue(x) {
    const values = this._fields.map(([key]) => x[key]);

    const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(bufs);
  }

  _buildTypeTableImpl(T) {
    this._fields.forEach(([_, value]) => value.buildTypeTable(T));

    const opCode = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-20
    /* Record */
    );
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this._fields.length);

    const fields = this._fields.map(([key, value]) => buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(key)), value.encodeType(T)]));

    T.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([opCode, len, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(fields)]));
  }

  decodeValue(b, t) {
    const record = this.checkType(t);

    if (!(record instanceof RecordClass)) {
      throw new Error('Not a record type');
    }

    const x = {};
    let idx = 0;

    for (const [hash, type] of record._fields) {
      if (idx >= this._fields.length || Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(this._fields[idx][0]) !== Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(hash)) {
        // skip field
        type.decodeValue(b, type);
        continue;
      }

      const [expectKey, expectType] = this._fields[idx];
      x[expectKey] = expectType.decodeValue(b, type);
      idx++;
    }

    if (idx < this._fields.length) {
      throw new Error('Cannot find field ' + this._fields[idx][0]);
    }

    return x;
  }

  get name() {
    const fields = this._fields.map(([key, value]) => key + ':' + value.name);

    return `record {${fields.join('; ')}}`;
  }

  display() {
    const fields = this._fields.map(([key, value]) => key + ':' + value.display());

    return `record {${fields.join('; ')}}`;
  }

  valueToString(x) {
    const values = this._fields.map(([key]) => x[key]);

    const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));
    return `record {${fields.join('; ')}}`;
  }

}
/**
 * Represents Tuple, a syntactic sugar for Record.
 * @param {Type} components
 */

class TupleClass extends RecordClass {
  constructor(_components) {
    const x = {};

    _components.forEach((e, i) => x['_' + i + '_'] = e);

    super(x);
    this._components = _components;
  }

  accept(v, d) {
    return v.visitTuple(this, this._components, d);
  }

  covariant(x) {
    // `>=` because tuples can be covariant when encoded.
    return Array.isArray(x) && x.length >= this._fields.length && this._components.every((t, i) => t.covariant(x[i]));
  }

  encodeValue(x) {
    const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(bufs);
  }

  decodeValue(b, t) {
    const tuple = this.checkType(t);

    if (!(tuple instanceof TupleClass)) {
      throw new Error('not a tuple type');
    }

    if (tuple._components.length < this._components.length) {
      throw new Error('tuple mismatch');
    }

    const res = [];

    for (const [i, wireType] of tuple._components.entries()) {
      if (i >= this._components.length) {
        // skip value
        wireType.decodeValue(b, wireType);
      } else {
        res.push(this._components[i].decodeValue(b, wireType));
      }
    }

    return res;
  }

  display() {
    const fields = this._components.map(value => value.display());

    return `record {${fields.join('; ')}}`;
  }

  valueToString(values) {
    const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));
    return `record {${fields.join('; ')}}`;
  }

}
/**
 * Represents an IDL Variant
 * @param {Object} [fields] - mapping of function name to Type
 */

class VariantClass extends ConstructType {
  constructor(fields = {}) {
    super();
    this._fields = Object.entries(fields).sort((a, b) => Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(a[0]) - Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(b[0]));
  }

  accept(v, d) {
    return v.visitVariant(this, this._fields, d);
  }

  covariant(x) {
    return typeof x === 'object' && Object.entries(x).length === 1 && this._fields.every(([k, v]) => {
      // eslint-disable-next-line
      return !x.hasOwnProperty(k) || v.covariant(x[k]);
    });
  }

  encodeValue(x) {
    for (let i = 0; i < this._fields.length; i++) {
      const [name, type] = this._fields[i]; // eslint-disable-next-line

      if (x.hasOwnProperty(name)) {
        const idx = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(i);
        const buf = type.encodeValue(x[name]);
        return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([idx, buf]);
      }
    }

    throw Error('Variant has no data: ' + x);
  }

  _buildTypeTableImpl(typeTable) {
    this._fields.forEach(([, type]) => {
      type.buildTypeTable(typeTable);
    });

    const opCode = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-21
    /* Variant */
    );
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this._fields.length);

    const fields = this._fields.map(([key, value]) => buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(key)), value.encodeType(typeTable)]));

    typeTable.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([opCode, len, ...fields]));
  }

  decodeValue(b, t) {
    const variant = this.checkType(t);

    if (!(variant instanceof VariantClass)) {
      throw new Error('Not a variant type');
    }

    const idx = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(b));

    if (idx >= variant._fields.length) {
      throw Error('Invalid variant index: ' + idx);
    }

    const [wireHash, wireType] = variant._fields[idx];

    for (const [key, expectType] of this._fields) {
      if (Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(wireHash) === Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(key)) {
        const value = expectType.decodeValue(b, wireType);
        return {
          [key]: value
        };
      }
    }

    throw new Error('Cannot find field hash ' + wireHash);
  }

  get name() {
    const fields = this._fields.map(([key, type]) => key + ':' + type.name);

    return `variant {${fields.join('; ')}}`;
  }

  display() {
    const fields = this._fields.map(([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`));

    return `variant {${fields.join('; ')}}`;
  }

  valueToString(x) {
    for (const [name, type] of this._fields) {
      // eslint-disable-next-line
      if (x.hasOwnProperty(name)) {
        const value = type.valueToString(x[name]);

        if (value === 'null') {
          return `variant {${name}}`;
        } else {
          return `variant {${name}=${value}}`;
        }
      }
    }

    throw new Error('Variant has no data: ' + x);
  }

}
/**
 * Represents a reference to an IDL type, used for defining recursive data
 * types.
 */

class RecClass extends ConstructType {
  constructor() {
    super(...arguments);
    this._id = RecClass._counter++;
    this._type = undefined;
  }

  accept(v, d) {
    if (!this._type) {
      throw Error('Recursive type uninitialized.');
    }

    return v.visitRec(this, this._type, d);
  }

  fill(t) {
    this._type = t;
  }

  getType() {
    return this._type;
  }

  covariant(x) {
    return this._type ? this._type.covariant(x) : false;
  }

  encodeValue(x) {
    if (!this._type) {
      throw Error('Recursive type uninitialized.');
    }

    return this._type.encodeValue(x);
  }

  _buildTypeTableImpl(typeTable) {
    if (!this._type) {
      throw Error('Recursive type uninitialized.');
    }

    typeTable.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].alloc(0));

    this._type.buildTypeTable(typeTable);

    typeTable.merge(this, this._type.name);
  }

  decodeValue(b, t) {
    if (!this._type) {
      throw Error('Recursive type uninitialized.');
    }

    return this._type.decodeValue(b, t);
  }

  get name() {
    return `rec_${this._id}`;
  }

  display() {
    if (!this._type) {
      throw Error('Recursive type uninitialized.');
    }

    return `μ${this.name}.${this._type.name}`;
  }

  valueToString(x) {
    if (!this._type) {
      throw Error('Recursive type uninitialized.');
    }

    return this._type.valueToString(x);
  }

}
RecClass._counter = 0;

function decodePrincipalId(b) {
  const x = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, 1).toString('hex');

  if (x !== '01') {
    throw new Error('Cannot decode principal');
  }

  const len = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(b));
  const hex = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, len).toString('hex').toUpperCase();
  return _dfinity_principal__WEBPACK_IMPORTED_MODULE_2__["Principal"].fromHex(hex);
}
/**
 * Represents an IDL principal reference
 */


class PrincipalClass extends PrimitiveType {
  accept(v, d) {
    return v.visitPrincipal(this, d);
  }

  covariant(x) {
    return x && x._isPrincipal;
  }

  encodeValue(x) {
    const hex = x.toHex();
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(hex, 'hex');
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(buf.length);
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([1]), len, buf]);
  }

  encodeType() {
    return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-24
    /* Principal */
    );
  }

  decodeValue(b, t) {
    this.checkType(t);
    return decodePrincipalId(b);
  }

  get name() {
    return 'principal';
  }

  valueToString(x) {
    return `${this.name} "${x.toText()}"`;
  }

}
/**
 * Represents an IDL function reference.
 * @param argTypes Argument types.
 * @param retTypes Return types.
 * @param annotations Function annotations.
 */

class FuncClass extends ConstructType {
  constructor(argTypes, retTypes, annotations = []) {
    super();
    this.argTypes = argTypes;
    this.retTypes = retTypes;
    this.annotations = annotations;
  }

  static argsToString(types, v) {
    if (types.length !== v.length) {
      throw new Error('arity mismatch');
    }

    return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';
  }

  accept(v, d) {
    return v.visitFunc(this, d);
  }

  covariant(x) {
    return Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string';
  }

  encodeValue(x) {
    const hex = x[0].toHex();
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(hex, 'hex');
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(buf.length);
    const canister = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([1]), len, buf]);
    const method = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(x[1], 'utf8');
    const methodLen = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(method.length);
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([1]), canister, methodLen, method]);
  }

  _buildTypeTableImpl(T) {
    this.argTypes.forEach(arg => arg.buildTypeTable(T));
    this.retTypes.forEach(arg => arg.buildTypeTable(T));
    const opCode = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-22
    /* Func */
    );
    const argLen = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this.argTypes.length);
    const args = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(this.argTypes.map(arg => arg.encodeType(T)));
    const retLen = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this.retTypes.length);
    const rets = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(this.retTypes.map(arg => arg.encodeType(T)));
    const annLen = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this.annotations.length);
    const anns = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(this.annotations.map(a => this.encodeAnnotation(a)));
    T.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([opCode, argLen, args, retLen, rets, annLen, anns]));
  }

  decodeValue(b) {
    const x = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, 1).toString('hex');

    if (x !== '01') {
      throw new Error('Cannot decode function reference');
    }

    const canister = decodePrincipalId(b);
    const mLen = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(b));
    const buf = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, mLen);

    if (!isValidUTF8(buf)) {
      throw new Error('Not valid UTF8 method name');
    }

    const method = buf.toString('utf8');
    return [canister, method];
  }

  get name() {
    const args = this.argTypes.map(arg => arg.name).join(', ');
    const rets = this.retTypes.map(arg => arg.name).join(', ');
    const annon = ' ' + this.annotations.join(' ');
    return `(${args}) -> (${rets})${annon}`;
  }

  valueToString([principal, str]) {
    return `func "${principal.toText()}".${str}`;
  }

  display() {
    const args = this.argTypes.map(arg => arg.display()).join(', ');
    const rets = this.retTypes.map(arg => arg.display()).join(', ');
    const annon = ' ' + this.annotations.join(' ');
    return `(${args}) → (${rets})${annon}`;
  }

  encodeAnnotation(ann) {
    if (ann === 'query') {
      return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([1]);
    } else if (ann === 'oneway') {
      return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([2]);
    } else {
      throw new Error('Illeagal function annotation');
    }
  }

}
class ServiceClass extends ConstructType {
  constructor(fields) {
    super();
    this._fields = Object.entries(fields).sort((a, b) => Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(a[0]) - Object(_utils_hash__WEBPACK_IMPORTED_MODULE_4__["idlLabelToId"])(b[0]));
  }

  accept(v, d) {
    return v.visitService(this, d);
  }

  covariant(x) {
    return x && x._isPrincipal;
  }

  encodeValue(x) {
    const hex = x.toHex();
    const buf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(hex, 'hex');
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(buf.length);
    return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([1]), len, buf]);
  }

  _buildTypeTableImpl(T) {
    this._fields.forEach(([_, func]) => func.buildTypeTable(T));

    const opCode = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebEncode"])(-23
    /* Service */
    );
    const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(this._fields.length);

    const meths = this._fields.map(([label, func]) => {
      const labelBuf = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(label, 'utf8');
      const labelLen = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(labelBuf.length);
      return buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([labelLen, labelBuf, func.encodeType(T)]);
    });

    T.add(this, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([opCode, len, buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(meths)]));
  }

  decodeValue(b) {
    return decodePrincipalId(b);
  }

  get name() {
    const fields = this._fields.map(([key, value]) => key + ':' + value.name);

    return `service {${fields.join('; ')}}`;
  }

  valueToString(x) {
    return `service "${x.toText()}"`;
  }

}
/**
 *
 * @param x
 * @returns {string}
 */

function toReadableString(x) {
  return JSON.stringify(x, (_key, value) => typeof value === 'bigint' ? `BigInt(${value})` : value);
}
/**
 * Encode a array of values
 * @returns {Buffer} serialised value
 */


function encode(argTypes, args) {
  if (args.length < argTypes.length) {
    throw Error('Wrong number of message arguments');
  }

  const typeTable = new TypeTable();
  argTypes.forEach(t => t.buildTypeTable(typeTable));
  const magic = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from(magicNumber, 'utf8');
  const table = typeTable.encode();
  const len = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebEncode"])(args.length);
  const typs = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(argTypes.map(t => t.encodeType(typeTable)));
  const vals = buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat(zipWith(argTypes, args, (t, x) => {
    if (!t.covariant(x)) {
      throw new Error(`Invalid ${t.display()} argument: ${toReadableString(x)}`);
    }

    return t.encodeValue(x);
  }));
  return Object(_types__WEBPACK_IMPORTED_MODULE_3__["blobFromBuffer"])(buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].concat([magic, table, len, typs, vals]));
}
/**
 * Decode a binary value
 * @param retTypes - Types expected in the buffer.
 * @param bytes - hex-encoded string, or buffer.
 * @returns Value deserialised to JS type
 */

function decode(retTypes, bytes) {
  const b = new buffer_pipe__WEBPACK_IMPORTED_MODULE_0___default.a(bytes);

  if (bytes.byteLength < magicNumber.length) {
    throw new Error('Message length smaller than magic number');
  }

  const magic = Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(b, magicNumber.length).toString();

  if (magic !== magicNumber) {
    throw new Error('Wrong magic number: ' + magic);
  }

  function readTypeTable(pipe) {
    const typeTable = [];
    const len = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));

    for (let i = 0; i < len; i++) {
      const ty = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(pipe));

      switch (ty) {
        case -18
        /* Opt */
        :
        case -19
        /* Vector */
        :
          {
            const t = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(pipe));
            typeTable.push([ty, t]);
            break;
          }

        case -20
        /* Record */
        :
        case -21
        /* Variant */
        :
          {
            const fields = [];
            let objectLength = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));
            let prevHash;

            while (objectLength--) {
              const hash = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));

              if (hash >= Math.pow(2, 32)) {
                throw new Error('field id out of 32-bit range');
              }

              if (typeof prevHash === 'number' && prevHash >= hash) {
                throw new Error('field id collision or not sorted');
              }

              prevHash = hash;
              const t = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(pipe));
              fields.push([hash, t]);
            }

            typeTable.push([ty, fields]);
            break;
          }

        case -22
        /* Func */
        :
          {
            for (let k = 0; k < 2; k++) {
              let funcLength = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));

              while (funcLength--) {
                Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(pipe);
              }
            }

            const annLen = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));
            Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(pipe, annLen);
            typeTable.push([ty, undefined]);
            break;
          }

        case -23
        /* Service */
        :
          {
            let servLength = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));

            while (servLength--) {
              const l = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));
              Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["safeRead"])(pipe, l);
              Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(pipe);
            }

            typeTable.push([ty, undefined]);
            break;
          }

        default:
          throw new Error('Illegal op_code: ' + ty);
      }
    }

    const rawList = [];
    const length = Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["lebDecode"])(pipe));

    for (let i = 0; i < length; i++) {
      rawList.push(Number(Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_5__["slebDecode"])(pipe)));
    }

    return [typeTable, rawList];
  }

  const [rawTable, rawTypes] = readTypeTable(b);

  if (rawTypes.length < retTypes.length) {
    throw new Error('Wrong number of return values');
  }

  const table = rawTable.map(_ => Rec());

  function getType(t) {
    if (t < -24) {
      throw new Error('future value not supported');
    }

    if (t < 0) {
      switch (t) {
        case -1:
          return Null;

        case -2:
          return Bool;

        case -3:
          return Nat;

        case -4:
          return Int;

        case -5:
          return Nat8;

        case -6:
          return Nat16;

        case -7:
          return Nat32;

        case -8:
          return Nat64;

        case -9:
          return Int8;

        case -10:
          return Int16;

        case -11:
          return Int32;

        case -12:
          return Int64;

        case -13:
          return Float32;

        case -14:
          return Float64;

        case -15:
          return Text;

        case -16:
          return Reserved;

        case -17:
          return Empty;

        case -24:
          return Principal;

        default:
          throw new Error('Illegal op_code: ' + t);
      }
    }

    if (t >= rawTable.length) {
      throw new Error('type index out of range');
    }

    return table[t];
  }

  function buildType(entry) {
    switch (entry[0]) {
      case -19
      /* Vector */
      :
        {
          const ty = getType(entry[1]);
          return Vec(ty);
        }

      case -18
      /* Opt */
      :
        {
          const ty = getType(entry[1]);
          return Opt(ty);
        }

      case -20
      /* Record */
      :
        {
          const fields = {};

          for (const [hash, ty] of entry[1]) {
            const name = `_${hash}_`;
            fields[name] = getType(ty);
          }

          const record = Record(fields);
          const tuple = record.tryAsTuple();

          if (Array.isArray(tuple)) {
            return Tuple(...tuple);
          } else {
            return record;
          }
        }

      case -21
      /* Variant */
      :
        {
          const fields = {};

          for (const [hash, ty] of entry[1]) {
            const name = `_${hash}_`;
            fields[name] = getType(ty);
          }

          return Variant(fields);
        }

      case -22
      /* Func */
      :
        {
          return Func([], [], []);
        }

      case -23
      /* Service */
      :
        {
          return Service({});
        }

      default:
        throw new Error('Illegal op_code: ' + entry[0]);
    }
  }

  rawTable.forEach((entry, i) => {
    const t = buildType(entry);
    table[i].fill(t);
  });
  const types = rawTypes.map(t => getType(t));
  const output = retTypes.map((t, i) => {
    return t.decodeValue(b, types[i]);
  }); // skip unused values

  for (let ind = retTypes.length; ind < types.length; ind++) {
    types[ind].decodeValue(b, types[ind]);
  }

  if (b.buffer.length > 0) {
    throw new Error('decode: Left-over bytes');
  }

  return output;
} // Export Types instances.

const Empty = new EmptyClass();
const Reserved = new ReservedClass();
const Bool = new BoolClass();
const Null = new NullClass();
const Text = new TextClass();
const Int = new IntClass();
const Nat = new NatClass();
const Float32 = new FloatClass(32);
const Float64 = new FloatClass(64);
const Int8 = new FixedIntClass(8);
const Int16 = new FixedIntClass(16);
const Int32 = new FixedIntClass(32);
const Int64 = new FixedIntClass(64);
const Nat8 = new FixedNatClass(8);
const Nat16 = new FixedNatClass(16);
const Nat32 = new FixedNatClass(32);
const Nat64 = new FixedNatClass(64);
const Principal = new PrincipalClass();
/**
 *
 * @param types array of any types
 * @returns TupleClass from those types
 */

function Tuple(...types) {
  return new TupleClass(types);
}
/**
 *
 * @param t IDL Type
 * @returns VecClass from that type
 */

function Vec(t) {
  return new VecClass(t);
}
/**
 *
 * @param t IDL Type
 * @returns OptClass of Type
 */

function Opt(t) {
  return new OptClass(t);
}
/**
 *
 * @param t Record of string and IDL Type
 * @returns RecordClass of string and Type
 */

function Record(t) {
  return new RecordClass(t);
}
/**
 *
 * @param fields Record of string and IDL Type
 * @returns VariantClass
 */

function Variant(fields) {
  return new VariantClass(fields);
}
/**
 *
 * @returns new RecClass
 */

function Rec() {
  return new RecClass();
}
/**
 *
 * @param args array of IDL Types
 * @param ret array of IDL Types
 * @param annotations array of strings, [] by default
 * @returns new FuncClass
 */

function Func(args, ret, annotations = []) {
  return new FuncClass(args, ret, annotations);
}
/**
 *
 * @param t Record of string and FuncClass
 * @returns ServiceClass
 */

function Service(t) {
  return new ServiceClass(t);
}

/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/index.js ***!
  \*******************************************************/
/*! exports provided: inputBox, recordForm, tupleForm, variantForm, optForm, vecForm, Render, renderInput, renderValue, InputBox, InputForm, RecordForm, TupleForm, VariantForm, OptionForm, VecForm, IDL, idlLabelToId, safeRead, lebEncode, lebDecode, slebEncode, slebDecode, writeUIntLE, writeIntLE, readUIntLE, readIntLE, blobFromBuffer, blobFromUint8Array, blobFromText, blobFromUint32Array, derBlobFromBlob, blobFromHex, blobToHex, blobToUint8Array, makeNonce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _candid_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./candid-ui */ "./node_modules/@dfinity/candid/lib/esm/candid-ui.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inputBox", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["inputBox"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recordForm", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["recordForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tupleForm", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["tupleForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variantForm", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["variantForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "optForm", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["optForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "vecForm", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["vecForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Render", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["Render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderInput", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["renderInput"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderValue", function() { return _candid_ui__WEBPACK_IMPORTED_MODULE_0__["renderValue"]; });

/* harmony import */ var _candid_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./candid-core */ "./node_modules/@dfinity/candid/lib/esm/candid-core.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InputBox", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["InputBox"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InputForm", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["InputForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecordForm", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["RecordForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TupleForm", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["TupleForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VariantForm", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["VariantForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OptionForm", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["OptionForm"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VecForm", function() { return _candid_core__WEBPACK_IMPORTED_MODULE_1__["VecForm"]; });

/* harmony import */ var _idl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./idl */ "./node_modules/@dfinity/candid/lib/esm/idl.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "IDL", function() { return _idl__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/hash */ "./node_modules/@dfinity/candid/lib/esm/utils/hash.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "idlLabelToId", function() { return _utils_hash__WEBPACK_IMPORTED_MODULE_3__["idlLabelToId"]; });

/* harmony import */ var _utils_leb128__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/leb128 */ "./node_modules/@dfinity/candid/lib/esm/utils/leb128.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "safeRead", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["safeRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lebEncode", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["lebEncode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lebDecode", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["lebDecode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slebEncode", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["slebEncode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slebDecode", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["slebDecode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "writeUIntLE", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["writeUIntLE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "writeIntLE", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["writeIntLE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readUIntLE", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["readUIntLE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readIntLE", function() { return _utils_leb128__WEBPACK_IMPORTED_MODULE_4__["readIntLE"]; });

/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ "./node_modules/@dfinity/candid/lib/esm/types.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobFromBuffer", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobFromBuffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobFromUint8Array", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobFromUint8Array"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobFromText", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobFromText"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobFromUint32Array", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobFromUint32Array"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "derBlobFromBlob", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["derBlobFromBlob"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobFromHex", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobFromHex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobToHex", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobToHex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blobToUint8Array", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["blobToUint8Array"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "makeNonce", function() { return _types__WEBPACK_IMPORTED_MODULE_5__["makeNonce"]; });









/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/types.js":
/*!*******************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/types.js ***!
  \*******************************************************/
/*! exports provided: blobFromBuffer, blobFromUint8Array, blobFromText, blobFromUint32Array, derBlobFromBlob, blobFromHex, blobToHex, blobToUint8Array, makeNonce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobFromBuffer", function() { return blobFromBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobFromUint8Array", function() { return blobFromUint8Array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobFromText", function() { return blobFromText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobFromUint32Array", function() { return blobFromUint32Array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "derBlobFromBlob", function() { return derBlobFromBlob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobFromHex", function() { return blobFromHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobToHex", function() { return blobToHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobToUint8Array", function() { return blobToUint8Array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeNonce", function() { return makeNonce; });
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_leb128__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/leb128 */ "./node_modules/@dfinity/candid/lib/esm/utils/leb128.js");
/* eslint-disable @typescript-eslint/no-empty-interface */

/* eslint-disable jsdoc/require-jsdoc */


function blobFromBuffer(b) {
  return b;
}
function blobFromUint8Array(arr) {
  return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(arr);
}
function blobFromText(text) {
  return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(text);
}
function blobFromUint32Array(arr) {
  return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(arr);
}
function derBlobFromBlob(blob) {
  return blob;
}
function blobFromHex(hex) {
  return buffer___WEBPACK_IMPORTED_MODULE_0__["Buffer"].from(hex, 'hex');
}
function blobToHex(blob) {
  return blob.toString('hex');
}
function blobToUint8Array(blob) {
  return new Uint8Array(blob.slice(0, blob.byteLength));
}
/**
 * Create a random Nonce, based on date and a random suffix.
 */

function makeNonce() {
  return Object(_utils_leb128__WEBPACK_IMPORTED_MODULE_1__["lebEncode"])(BigInt(+Date.now()) * BigInt(100000) + BigInt(Math.floor(Math.random() * 100000)));
}

/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/utils/hash.js":
/*!************************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/utils/hash.js ***!
  \************************************************************/
/*! exports provided: idlLabelToId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "idlLabelToId", function() { return idlLabelToId; });
/**
 * Hashes a string to a number. Algorithm can be found here:
 * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf
 * @param s
 */
function idlHash(s) {
  const utf8encoder = new TextEncoder();
  const array = utf8encoder.encode(s);
  let h = 0;

  for (const c of array) {
    h = (h * 223 + c) % 2 ** 32;
  }

  return h;
}
/**
 *
 * @param label string
 * @returns number representing hashed label
 */


function idlLabelToId(label) {
  if (/^_\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {
    const num = +label.slice(1, -1);

    if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {
      return num;
    }
  }

  return idlHash(label);
}

/***/ }),

/***/ "./node_modules/@dfinity/candid/lib/esm/utils/leb128.js":
/*!**************************************************************!*\
  !*** ./node_modules/@dfinity/candid/lib/esm/utils/leb128.js ***!
  \**************************************************************/
/*! exports provided: safeRead, lebEncode, lebDecode, slebEncode, slebDecode, writeUIntLE, writeIntLE, readUIntLE, readIntLE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeRead", function() { return safeRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lebEncode", function() { return lebEncode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lebDecode", function() { return lebDecode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slebEncode", function() { return slebEncode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slebDecode", function() { return slebDecode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeUIntLE", function() { return writeUIntLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeIntLE", function() { return writeIntLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readUIntLE", function() { return readUIntLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readIntLE", function() { return readIntLE; });
/* harmony import */ var buffer_pipe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer-pipe */ "./node_modules/buffer-pipe/index.js");
/* harmony import */ var buffer_pipe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer_pipe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_1__);


/**
 *
 * @param pipe Pipe from buffer-pipe
 * @param num number
 * @returns Buffer
 */

function safeRead(pipe, num) {
  if (pipe.buffer.length < num) {
    throw new Error('unexpected end of buffer');
  }

  return pipe.read(num);
}
/**
 * Encode a positive number (or bigint) into a Buffer. The number will be floored to the
 * nearest integer.
 * @param value The number to encode.
 */

function lebEncode(value) {
  if (typeof value === 'number') {
    value = BigInt(value);
  }

  if (value < BigInt(0)) {
    throw new Error('Cannot leb encode negative values.');
  }

  const pipe = new buffer_pipe__WEBPACK_IMPORTED_MODULE_0___default.a();

  while (true) {
    const i = Number(value & BigInt(0x7f));
    value /= BigInt(0x80);

    if (value === BigInt(0)) {
      pipe.write([i]);
      break;
    } else {
      pipe.write([i | 0x80]);
    }
  }

  return new buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"](pipe.buffer);
}
/**
 * Decode a leb encoded buffer into a bigint. The number will always be positive (does not
 * support signed leb encoding).
 * @param pipe A Buffer containing the leb encoded bits.
 */

function lebDecode(pipe) {
  let weight = BigInt(1);
  let value = BigInt(0);
  let byte;

  do {
    byte = safeRead(pipe, 1)[0];
    value += BigInt(byte & 0x7f).valueOf() * weight;
    weight *= BigInt(128);
  } while (byte >= 0x80);

  return value;
}
/**
 * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number
 * will be floored to the nearest integer.
 * @param value The number to encode.
 */

function slebEncode(value) {
  if (typeof value === 'number') {
    value = BigInt(value);
  }

  const isNeg = value < BigInt(0);

  if (isNeg) {
    value = -value - BigInt(1);
  }

  const pipe = new buffer_pipe__WEBPACK_IMPORTED_MODULE_0___default.a();

  while (true) {
    const i = getLowerBytes(value);
    value /= BigInt(0x80); // prettier-ignore

    if (isNeg && value === BigInt(0) && (i & 0x40) !== 0 || !isNeg && value === BigInt(0) && (i & 0x40) === 0) {
      pipe.write([i]);
      break;
    } else {
      pipe.write([i | 0x80]);
    }
  }

  function getLowerBytes(num) {
    const bytes = num % BigInt(0x80);

    if (isNeg) {
      // We swap the bits here again, and remove 1 to do two's complement.
      return Number(BigInt(0x80) - bytes - BigInt(1));
    } else {
      return Number(bytes);
    }
  }

  return new buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"](pipe.buffer);
}
/**
 * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative
 * signed-leb encoding.
 * @param pipe A Buffer containing the signed leb encoded bits.
 */

function slebDecode(pipe) {
  // Get the size of the buffer, then cut a buffer of that size.
  const pipeView = new Uint8Array(pipe.buffer);
  let len = 0;

  for (; len < pipeView.byteLength; len++) {
    if (pipeView[len] < 0x80) {
      // If it's a positive number, we reuse lebDecode.
      if ((pipeView[len] & 0x40) === 0) {
        return lebDecode(pipe);
      }

      break;
    }
  }

  const bytes = new Uint8Array(safeRead(pipe, len + 1));
  let value = BigInt(0);

  for (let i = bytes.byteLength - 1; i >= 0; i--) {
    value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);
  }

  return -value - BigInt(1);
}
/**
 *
 * @param value bigint or number
 * @param byteLength number
 * @returns Buffer
 */

function writeUIntLE(value, byteLength) {
  if (BigInt(value) < BigInt(0)) {
    throw new Error('Cannot write negative values.');
  }

  return writeIntLE(value, byteLength);
}
/**
 *
 * @param value bigint | number
 * @param byteLength number
 * @returns Buffer
 */

function writeIntLE(value, byteLength) {
  value = BigInt(value);
  const pipe = new buffer_pipe__WEBPACK_IMPORTED_MODULE_0___default.a();
  let i = 0;
  let mul = BigInt(256);
  let sub = BigInt(0);
  let byte = Number(value % mul);
  pipe.write([byte]);

  while (++i < byteLength) {
    if (value < 0 && sub === BigInt(0) && byte !== 0) {
      sub = BigInt(1);
    }

    byte = Number((value / mul - sub) % BigInt(256));
    pipe.write([byte]);
    mul *= BigInt(256);
  }

  return new buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"](pipe.buffer);
}
/**
 *
 * @param pipe Pipe from buffer-pipe
 * @param byteLength number
 * @returns bigint
 */

function readUIntLE(pipe, byteLength) {
  let val = BigInt(safeRead(pipe, 1)[0]);
  let mul = BigInt(1);
  let i = 0;

  while (++i < byteLength) {
    mul *= BigInt(256);
    const byte = BigInt(safeRead(pipe, 1)[0]);
    val = val + mul * byte;
  }

  return val;
}
/**
 *
 * @param pipe Pipe from buffer-pipe
 * @param byteLength number
 * @returns bigint
 */

function readIntLE(pipe, byteLength) {
  let val = readUIntLE(pipe, byteLength);
  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));

  if (val >= mul) {
    val -= mul * BigInt(2);
  }

  return val;
}

/***/ }),

/***/ "./node_modules/@dfinity/principal/lib/esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@dfinity/principal/lib/esm/index.js ***!
  \**********************************************************/
/*! exports provided: Principal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Principal", function() { return Principal; });
/* harmony import */ var _utils_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/base32 */ "./node_modules/@dfinity/principal/lib/esm/utils/base32.js");
/* harmony import */ var _utils_getCrc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getCrc */ "./node_modules/@dfinity/principal/lib/esm/utils/getCrc.js");
/* harmony import */ var _utils_sha224__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/sha224 */ "./node_modules/@dfinity/principal/lib/esm/utils/sha224.js");



const SELF_AUTHENTICATING_SUFFIX = 2;
const ANONYMOUS_SUFFIX = 4;

const fromHexString = hexString => {
  var _a;

  return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16)));
};

const toHexString = bytes => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');

class Principal {
  constructor(_arr) {
    this._arr = _arr;
    this._isPrincipal = true;
  }

  static anonymous() {
    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));
  }

  static selfAuthenticating(publicKey) {
    const sha = Object(_utils_sha224__WEBPACK_IMPORTED_MODULE_2__["sha224"])(publicKey);
    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));
  }

  static from(other) {
    if (typeof other === 'string') {
      return Principal.fromText(other);
    } else if (typeof other === 'object' && other !== null && other._isPrincipal === true) {
      return new Principal(other._arr);
    }

    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);
  }

  static fromHex(hex) {
    return new this(fromHexString(hex));
  }

  static fromText(text) {
    const canisterIdNoDash = text.toLowerCase().replace(/-/g, '');
    let arr = Object(_utils_base32__WEBPACK_IMPORTED_MODULE_0__["decode"])(canisterIdNoDash);
    arr = arr.slice(4, arr.length);
    const principal = new this(arr);

    if (principal.toText() !== text) {
      throw new Error(`Principal "${principal.toText()}" does not have a valid checksum.`);
    }

    return principal;
  }

  static fromUint8Array(arr) {
    return new this(arr);
  }

  isAnonymous() {
    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;
  }

  toUint8Array() {
    return this._arr;
  }

  toHex() {
    return toHexString(this._arr).toUpperCase();
  }

  toText() {
    const checksumArrayBuf = new ArrayBuffer(4);
    const view = new DataView(checksumArrayBuf);
    view.setUint32(0, Object(_utils_getCrc__WEBPACK_IMPORTED_MODULE_1__["getCrc32"])(this._arr));
    const checksum = Uint8Array.from(Buffer.from(checksumArrayBuf));
    const bytes = Uint8Array.from(this._arr);
    const array = new Uint8Array([...checksum, ...bytes]);
    const result = Object(_utils_base32__WEBPACK_IMPORTED_MODULE_0__["encode"])(array);
    const matches = result.match(/.{1,5}/g);

    if (!matches) {
      // This should only happen if there's no character, which is unreachable.
      throw new Error();
    }

    return matches.join('-');
  }

  toString() {
    return this.toText();
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@dfinity/principal/lib/esm/utils/base32.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/principal/lib/esm/utils/base32.js ***!
  \*****************************************************************/
/*! exports provided: encode, decode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encode", function() { return encode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decode", function() { return decode; });
// tslint:disable:no-bitwise
const alphabet = 'abcdefghijklmnopqrstuvwxyz234567'; // Build a lookup table for decoding.

const lookupTable = Object.create(null);

for (let i = 0; i < alphabet.length; i++) {
  lookupTable[alphabet[i]] = i;
} // Add aliases for rfc4648.


lookupTable['0'] = lookupTable.o;
lookupTable['1'] = lookupTable.i;
/**
 * @param input The input array to encode.
 * @returns A Base32 string encoding the input.
 */

function encode(input) {
  // How many bits will we skip from the first byte.
  let skip = 0; // 5 high bits, carry from one byte to the next.

  let bits = 0; // The output string in base32.

  let output = '';

  function encodeByte(byte) {
    if (skip < 0) {
      // we have a carry from the previous byte
      bits |= byte >> -skip;
    } else {
      // no carry
      bits = byte << skip & 248;
    }

    if (skip > 3) {
      // Not enough data to produce a character, get us another one
      skip -= 8;
      return 1;
    }

    if (skip < 4) {
      // produce a character
      output += alphabet[bits >> 3];
      skip += 5;
    }

    return 0;
  }

  for (let i = 0; i < input.length;) {
    i += encodeByte(input[i]);
  }

  return output + (skip < 0 ? alphabet[bits >> 3] : '');
}
/**
 * @param input The base32 encoded string to decode.
 */

function decode(input) {
  // how many bits we have from the previous character.
  let skip = 0; // current byte we're producing.

  let byte = 0;
  const output = new Uint8Array(input.length * 4 / 3 | 0);
  let o = 0;

  function decodeChar(char) {
    // Consume a character from the stream, store
    // the output in this.output. As before, better
    // to use update().
    let val = lookupTable[char.toLowerCase()];

    if (val === undefined) {
      throw new Error(`Invalid character: ${JSON.stringify(char)}`);
    } // move to the high bits


    val <<= 3;
    byte |= val >>> skip;
    skip += 5;

    if (skip >= 8) {
      // We have enough bytes to produce an output
      output[o++] = byte;
      skip -= 8;

      if (skip > 0) {
        byte = val << 5 - skip & 255;
      } else {
        byte = 0;
      }
    }
  }

  for (const c of input) {
    decodeChar(c);
  }

  return output.slice(0, o);
}

/***/ }),

/***/ "./node_modules/@dfinity/principal/lib/esm/utils/getCrc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/principal/lib/esm/utils/getCrc.js ***!
  \*****************************************************************/
/*! exports provided: getCrc32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCrc32", function() { return getCrc32; });
// tslint:disable:no-bitwise
// This file is translated to JavaScript from
// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/
const lookUpTable = new Uint32Array([0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d]);
/**
 * Calculate the CRC32 of an ArrayBufferLike.
 * @param buf The BufferLike to calculate the CRC32 of.
 */

function getCrc32(buf) {
  const b = new Uint8Array(buf);
  let crc = -1; // tslint:disable-next-line:prefer-for-of

  for (let i = 0; i < b.length; i++) {
    const byte = b[i];
    const t = (byte ^ crc) & 0xff;
    crc = lookUpTable[t] ^ crc >>> 8;
  }

  return (crc ^ -1) >>> 0;
}

/***/ }),

/***/ "./node_modules/@dfinity/principal/lib/esm/utils/sha224.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@dfinity/principal/lib/esm/utils/sha224.js ***!
  \*****************************************************************/
/*! exports provided: sha224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sha224", function() { return sha224; });
/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ "./node_modules/js-sha256/src/sha256.js");
/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);

/**
 *
 * @param data Arraybuffer to encode
 * @returns sha244-encoded BinaryBlob
 */

function sha224(data) {
  const shaObj = js_sha256__WEBPACK_IMPORTED_MODULE_0__["sha224"].create();
  shaObj.update(data);
  return new Uint8Array(shaObj.array());
}

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/BackgroundController.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/BackgroundController.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js");
var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};





var BackgroundController = function () {
  function BackgroundController(config) {
    this.trustedSources = [];
    this.ports = new Map();
    this.controllers = new Map();
    var controllers = config.controllers,
        trustedSources = config.trustedSources;
    this.name = config.name;

    if (typeof trustedSources === 'string') {
      this.trustedSources = [trustedSources];
    } else if (Array.isArray(trustedSources)) {
      this.trustedSources = trustedSources;
    }

    if (controllers) {
      for (var _i = 0, _a = Object.entries(controllers); _i < _a.length; _i++) {
        var _b = _a[_i],
            name_1 = _b[0],
            controller = _b[1];
        this.controllers.set(name_1, controller);
      }
    }

    this.onTabRemoved = this.onTabRemoved.bind(this);
    this.onPortMessage = this.onPortMessage.bind(this);
    this.onConnectListener = this.onConnectListener.bind(this);
  }

  BackgroundController.prototype.exposeController = function (name, controller) {
    this.controllers.set(name, controller);
  };

  BackgroundController.prototype.removeController = function (name) {
    return this.controllers.delete(name);
  };

  BackgroundController.prototype.callController = function (message, port) {
    var _a, _b, _c;

    var method = message.data.data.method;
    var controller = this.controllers.get(method);

    if (!controller) {
      console.error("controller \"" + method + "\" does not exist");
      var errMessage = {
        target: port.name,
        data: {
          name: this.name,
          data: {
            id: message.data.data.id,
            jsonrpc: '2.0',
            error: {
              code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].METHOD_NOT_FOUND,
              message: "Method " + message.data.data.method + " does not exist"
            }
          }
        }
      };
      port.postMessage(errMessage);
      return;
    }

    var tabId = ((_b = (_a = port.sender) === null || _a === void 0 ? void 0 : _a.tab) === null || _b === void 0 ? void 0 : _b.id) || 0;
    var frameId = ((_c = port.sender) === null || _c === void 0 ? void 0 : _c.frameId) || 0;
    var portId = tabId + ":" + frameId;
    controller.apply(void 0, __spreadArray([{
      message: message,
      callback: this.sendPortResponse.bind(this, port, message.data.data.id),
      ports: this.ports,
      sender: {
        port: port,
        tabId: tabId,
        frameId: frameId,
        id: portId,
        name: port.name
      }
    }], message.data.data.params));
  };

  BackgroundController.prototype.sendPortResponse = function (port, callId, err, res, targetPorts) {
    var _this = this;

    if (!targetPorts) {
      var resMessage = this.buildResMessage(port.name, this.name, callId, err, res);
      port.postMessage(resMessage);
      return;
    }

    targetPorts.forEach(function (targetPort) {
      var _port = _this.ports.get(targetPort.portId);

      if (_port) {
        var resMessage = _this.buildResMessage(_port.name, _this.name, targetPort.callId, err, res);

        _port.postMessage(resMessage);
      }
    });
  };

  BackgroundController.prototype.buildResMessage = function (target, name, id, err, res) {
    var resMessage = {
      target: target,
      data: {
        name: name,
        data: __assign({
          id: id,
          jsonrpc: '2.0'
        }, err ? {
          error: err
        } : {
          result: res
        })
      }
    };
    return resMessage;
  };

  BackgroundController.prototype.sendResponse = function (message) {
    var _this = this;

    var targetPorts = message.targetPorts,
        rpcResponse = __rest(message, ["targetPorts"]);

    var portsIds = [];

    if (typeof targetPorts === 'string') {
      portsIds = [targetPorts];
    } else if (Array.isArray(targetPorts)) {
      portsIds = targetPorts;
    }

    portsIds.forEach(function (portId) {
      var port = _this.ports.get(portId);

      if (port) {
        port.postMessage(rpcResponse);
      }
    });
  };

  BackgroundController.prototype.onPortMessage = function (message, port) {
    var _a = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["validateMessageSchema"])(message),
        type = _a.type,
        isValid = _a.isValid;

    if (!isValid) {
      console.error('port message not valid', message);
      return;
    }

    switch (type) {
      case 'req':
        this.callController(message, port);
        break;

      case 'res':
        this.sendResponse(message);
        break;
    }
  };

  BackgroundController.prototype.onConnectListener = function (port) {
    var _a, _b, _c;

    if (!this.trustedSources.includes(port.name)) {
      console.error("Port " + port.name + " not allowed");
      return;
    }

    ;
    this.updatePorts();
    var tabId = (_b = (_a = port.sender) === null || _a === void 0 ? void 0 : _a.tab) === null || _b === void 0 ? void 0 : _b.id;
    var frameId = ((_c = port.sender) === null || _c === void 0 ? void 0 : _c.frameId) || 0;

    if (tabId === undefined || tabId === null) {
      console.error('Port does not contain a valid tabId');
      return;
    }

    ;
    var portId = tabId + ":" + frameId;
    this.ports.set(portId, port);
    port.onMessage.addListener(this.onPortMessage);
  };

  BackgroundController.prototype.onTabRemoved = function (tabId) {
    var _this = this;

    var regexp = new RegExp("^" + tabId + ":", 'i');
    this.ports.forEach(function (port, key) {
      if (regexp.test(key)) {
        port.disconnect();

        _this.ports.delete(key);
      }
    });
  };

  BackgroundController.prototype.updatePorts = function () {
    var _this = this;

    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.tabs.query({}, function (tabs) {
      var tabsIds = tabs.map(function (tab) {
        return tab.id;
      });

      _this.ports.forEach(function (port, key) {
        var tabId = parseInt(key.split(':')[0], 10);

        if (!tabsIds.includes(tabId)) {
          port.disconnect();

          _this.ports.delete(key);
        }
      });
    });
  };

  BackgroundController.prototype.start = function () {
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.onConnect.addListener(this.onConnectListener);
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.tabs.onRemoved.addListener(this.onTabRemoved);
  };

  BackgroundController.prototype.stop = function () {
    this.ports.forEach(function (port) {
      port.disconnect();
    });
    this.ports.clear();
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.onConnect.removeListener(this.onConnectListener);
    extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.tabs.onRemoved.removeListener(this.onTabRemoved);
  };

  return BackgroundController;
}();

/* harmony default export */ __webpack_exports__["default"] = (BackgroundController);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/BrowserRPC.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/BrowserRPC.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();



var BrowserRPC = function (_super) {
  __extends(BrowserRPC, _super);

  function BrowserRPC(win, config) {
    var _this = _super.call(this, config) || this;

    _this.win = win;
    _this.receiveMessage = _this.receiveMessage.bind(_this);
    return _this;
  }

  BrowserRPC.prototype.sendMessage = function (message) {
    this.win.postMessage(message, '*');
  };

  BrowserRPC.prototype.receiveMessage = function (event) {
    _super.prototype.onMessage.call(this, event.data);
  };

  BrowserRPC.prototype.start = function () {
    this.win.addEventListener('message', this.receiveMessage);
  };

  BrowserRPC.prototype.stop = function () {
    _super.prototype.stop.call(this);

    this.win.removeEventListener('message', this.receiveMessage);
  };

  return BrowserRPC;
}(_RPC__WEBPACK_IMPORTED_MODULE_0__["default"]);

;
/* harmony default export */ __webpack_exports__["default"] = (BrowserRPC);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/PortRPC.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/PortRPC.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();




var PortRPC = function (_super) {
  __extends(PortRPC, _super);

  function PortRPC(config) {
    var _this = _super.call(this, config) || this;

    _this.port = undefined;
    _this.receiveMessage = _this.receiveMessage.bind(_this);
    return _this;
  }

  PortRPC.prototype.sendMessage = function (message) {
    if (this.port) {
      this.port.postMessage(message);
    }
  };

  PortRPC.prototype.receiveMessage = function (message) {
    _super.prototype.onMessage.call(this, message);
  };

  PortRPC.prototype.start = function () {
    this.port = extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.connect({
      name: this.name
    });

    if (this.port) {
      this.port.onMessage.addListener(this.receiveMessage);
    }
  };

  PortRPC.prototype.stop = function () {
    _super.prototype.stop.call(this);

    if (this.port) {
      this.port.onMessage.removeListener(this.receiveMessage);
    }
  };

  return PortRPC;
}(_RPC__WEBPACK_IMPORTED_MODULE_1__["default"]);

;
/* harmony default export */ __webpack_exports__["default"] = (PortRPC);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/ProxyRPC.js":
/*!********************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/ProxyRPC.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! extensionizer */ "./node_modules/extensionizer/index.js");
/* harmony import */ var extensionizer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(extensionizer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js");
var __extends = undefined && undefined.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};





var ProxyRPC = function (_super) {
  __extends(ProxyRPC, _super);

  function ProxyRPC(win, config) {
    var _this = _super.call(this, config) || this;

    _this.port = undefined;
    _this.win = win;
    _this.proxyResponse = _this.proxyResponse.bind(_this);
    _this.receiveMessage = _this.receiveMessage.bind(_this);
    return _this;
  }

  ProxyRPC.prototype.proxyResponse = function (resMessage) {
    resMessage.target = this.target;
    resMessage.data.name = this.name;
    this.sendMessage(resMessage);
  };

  ProxyRPC.prototype.sendPortMessage = function (message) {
    if (this.port) {
      this.port.postMessage(message);
    }
  };

  ProxyRPC.prototype.sendMessage = function (message) {
    this.win.postMessage(message, '*');
  };

  ProxyRPC.prototype.receiveMessage = function (event) {
    _super.prototype.onMessage.call(this, event.data);
  };

  ProxyRPC.prototype.onRequestMessage = function (message) {
    var _this = this;

    var resMessage = {
      target: this.target,
      data: {
        name: this.name,
        data: {
          id: message.data.data.id,
          jsonrpc: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_VERSION"]
        }
      }
    };

    try {
      var handler = this.handlers.get(message.data.data.method);

      if (!handler) {
        this.sendPortMessage(message);
        return;
      }

      var callback = function (err, res) {
        if (err) {
          resMessage.data.data.error = err;

          _this.sendMessage(resMessage);

          return;
        }

        resMessage.data.data.result = res;

        _this.sendMessage(resMessage);
      };

      handler.apply(void 0, __spreadArray([{
        callback: callback,
        message: message
      }], message.data.data.params));
    } catch (error) {
      if (resMessage.data.data.hasOwnProperty('error')) return;
      if (resMessage.data.data.hasOwnProperty('result')) return;
      resMessage.data.data.error = {
        code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].SERVER_ERROR,
        message: error.toString()
      };
      this.sendMessage(resMessage);
    }

    ;
  };

  ProxyRPC.prototype.start = function () {
    this.win.addEventListener('message', this.receiveMessage);
    this.port = extensionizer__WEBPACK_IMPORTED_MODULE_0___default.a.runtime.connect({
      name: this.name
    });

    if (this.port) {
      this.port.onMessage.addListener(this.proxyResponse);
    }
  };

  ProxyRPC.prototype.stop = function () {
    _super.prototype.stop.call(this);

    this.win.removeEventListener('message', this.receiveMessage);

    if (this.port) {
      this.port.onMessage.removeListener(this.proxyResponse);
    }
  };

  return ProxyRPC;
}(_RPC__WEBPACK_IMPORTED_MODULE_1__["default"]);

;
/* harmony default export */ __webpack_exports__["default"] = (ProxyRPC);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js":
/*!***************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = undefined && undefined.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};





var RPC = function () {
  function RPC(config) {
    this.timeout = 5000;
    this.handlers = new Map();
    this.calls = new Map();
    this.name = config.name;
    this.target = config.target;

    if (config.timeout) {
      this.timeout = config.timeout;
    }

    if (config.handlers) {
      for (var _i = 0, _a = Object.entries(config.handlers); _i < _a.length; _i++) {
        var _b = _a[_i],
            name_1 = _b[0],
            handler = _b[1];
        this.handlers.set(name_1, handler);
      }
    }
  }

  ;

  RPC.prototype.exposeHandler = function (name, handler) {
    this.handlers.set(name, handler);
  };

  RPC.prototype.removeHandler = function (name) {
    return this.handlers.delete(name);
  };

  RPC.prototype._call = function (handler, target, timeout, args) {
    return __awaiter(this, void 0, void 0, function () {
      var id, message;

      var _this = this;

      return __generator(this, function (_a) {
        id = Object(uuid__WEBPACK_IMPORTED_MODULE_0__["v4"])();
        message = {
          target: target,
          data: {
            name: this.name,
            data: {
              id: id,
              jsonrpc: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_VERSION"],
              method: handler,
              params: args
            }
          }
        };
        return [2, new Promise(function (resolve, reject) {
          var resolver = function (err, res) {
            if (err) {
              reject(new Error(err.message));
              return;
            }

            resolve(res);
          };

          var timer;

          if (timeout > 0) {
            timer = setTimeout(function () {
              if (_this.calls.has(id)) {
                _this.calls.delete(id);

                resolver({
                  code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].TIMEOUT_ERROR,
                  message: 'Request Timeout'
                });
              }
            }, timeout);
          }

          ;

          _this.calls.set(id, {
            resolver: resolver,
            timer: timer
          });

          _this.sendMessage(message);
        })];
      });
    });
  };

  RPC.prototype.call = function (handler, args, config) {
    return __awaiter(this, void 0, void 0, function () {
      var timeout;
      return __generator(this, function (_a) {
        timeout = this.timeout;

        if (config && typeof config.timeout === 'number') {
          timeout = config.timeout;
        }

        return [2, this._call(handler, (config === null || config === void 0 ? void 0 : config.target) || this.target, timeout, args || [])];
      });
    });
  };

  RPC.prototype.onMessage = function (eventMessage) {
    var _a = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["validateMessageSchema"])(eventMessage),
        type = _a.type,
        isValid = _a.isValid;

    if (!isValid) return;
    var message = eventMessage;

    if (message.target === this.name && this.target === message.data.name) {
      switch (type) {
        case 'req':
          this.onRequestMessage(message);
          break;

        case 'res':
          this.onResponseMessage(message);
          break;
      }
    }
  };

  RPC.prototype.onRequestMessage = function (message) {
    var _this = this;

    var resMessage = {
      target: this.target,
      data: {
        name: this.name,
        data: {
          id: message.data.data.id,
          jsonrpc: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_VERSION"]
        }
      }
    };

    try {
      var handler = this.handlers.get(message.data.data.method);

      if (!handler) {
        resMessage.data.data.error = {
          code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].METHOD_NOT_FOUND,
          message: "Method " + message.data.data.method + " does not exist"
        };
        this.sendMessage(resMessage);
        return;
      }

      var callback = function (err, res) {
        if (err) {
          resMessage.data.data.error = err;

          _this.sendMessage(resMessage);

          return;
        }

        resMessage.data.data.result = res;

        _this.sendMessage(resMessage);
      };

      handler.apply(void 0, __spreadArray([{
        callback: callback,
        message: message
      }], message.data.data.params));
    } catch (error) {
      if (resMessage.data.data.hasOwnProperty('error')) return;
      if (resMessage.data.data.hasOwnProperty('result')) return;
      resMessage.data.data.error = {
        code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].SERVER_ERROR,
        message: error.toString()
      };
      this.sendMessage(resMessage);
    }

    ;
  };

  RPC.prototype.onResponseMessage = function (message) {
    var _a = message.data.data,
        id = _a.id,
        error = _a.error,
        result = _a.result;
    var call = this.calls.get(id);
    if (!call) return;

    if (call.timer) {
      clearTimeout(call.timer);
    }

    call.resolver(error, result);
    this.calls.delete(id);
  };

  RPC.prototype.stop = function () {
    this.calls.forEach(function (call) {
      if (call.timer) {
        clearTimeout(call.timer);
      }

      call.resolver({
        message: 'RPC stopped',
        code: _constants__WEBPACK_IMPORTED_MODULE_2__["JSON_RPC_ERROR_CODES"].INTERNAL_ERROR
      });
    });
    this.calls.clear();
  };

  return RPC;
}();

/* harmony default export */ __webpack_exports__["default"] = (RPC);
;

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/constants.js ***!
  \*********************************************************************/
/*! exports provided: JSON_RPC_ERROR_CODES, JSON_RPC_VERSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSON_RPC_ERROR_CODES", function() { return JSON_RPC_ERROR_CODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JSON_RPC_VERSION", function() { return JSON_RPC_VERSION; });
var JSON_RPC_ERROR_CODES = {
  PARSE_ERROR: -32700,
  INVALID_REQUEST: -32600,
  METHOD_NOT_FOUND: -32601,
  INVALID_PARAMS: -32602,
  INTERNAL_ERROR: -32603,
  TIMEOUT_ERROR: -32604,
  SERVER_ERROR: -32000
};
var JSON_RPC_VERSION = '2.0';

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/helpers.js ***!
  \*******************************************************************/
/*! exports provided: validateMessageSchema */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateMessageSchema", function() { return validateMessageSchema; });
/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema */ "./node_modules/@psychedelic/browser-rpc/dist/esm/schema.js");

var validateMessageSchema = function (message) {
  var result = _schema__WEBPACK_IMPORTED_MODULE_0__["default"].validate(message);
  if (result.error) return {
    isValid: false,
    type: null
  };
  var type = null;

  if (message.data.data.hasOwnProperty('method') && message.data.data.hasOwnProperty('params')) {
    type = 'req';
  } else if (message.data.data.hasOwnProperty('result') || message.data.data.hasOwnProperty('error')) {
    type = 'res';
  }

  return {
    type: type,
    isValid: type === 'req' || type === 'res'
  };
};

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/index.js ***!
  \*****************************************************************/
/*! exports provided: BackgroundController, BrowserRPC, ProxyRPC, PortRPC, RPC, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _BackgroundController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BackgroundController */ "./node_modules/@psychedelic/browser-rpc/dist/esm/BackgroundController.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BackgroundController", function() { return _BackgroundController__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _BrowserRPC__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserRPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/BrowserRPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BrowserRPC", function() { return _BrowserRPC__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _ProxyRPC__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ProxyRPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/ProxyRPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyRPC", function() { return _ProxyRPC__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _PortRPC__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PortRPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/PortRPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PortRPC", function() { return _PortRPC__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _RPC__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RPC */ "./node_modules/@psychedelic/browser-rpc/dist/esm/RPC.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RPC", function() { return _RPC__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _BrowserRPC__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ "./node_modules/@psychedelic/browser-rpc/dist/esm/types.js");
/* empty/unused harmony star reexport */







/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/schema.js":
/*!******************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/schema.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! joi */ "./node_modules/joi/dist/joi-browser.min.js");
/* harmony import */ var joi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(joi__WEBPACK_IMPORTED_MODULE_0__);

var schema = joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
  target: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().required(),
  data: joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
    name: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().required(),
    data: joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
      id: joi__WEBPACK_IMPORTED_MODULE_0___default.a.alternatives().try(joi__WEBPACK_IMPORTED_MODULE_0___default.a.number(), joi__WEBPACK_IMPORTED_MODULE_0___default.a.string()).required(),
      jsonrpc: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().valid('2.0').required(),
      result: joi__WEBPACK_IMPORTED_MODULE_0___default.a.any(),
      method: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string(),
      params: joi__WEBPACK_IMPORTED_MODULE_0___default.a.array().items(joi__WEBPACK_IMPORTED_MODULE_0___default.a.any()),
      error: joi__WEBPACK_IMPORTED_MODULE_0___default.a.object({
        code: joi__WEBPACK_IMPORTED_MODULE_0___default.a.number().required(),
        message: joi__WEBPACK_IMPORTED_MODULE_0___default.a.string().required(),
        data: joi__WEBPACK_IMPORTED_MODULE_0___default.a.any()
      })
    }).required()
  }).required()
});
/* harmony default export */ __webpack_exports__["default"] = (schema);

/***/ }),

/***/ "./node_modules/@psychedelic/browser-rpc/dist/esm/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@psychedelic/browser-rpc/dist/esm/types.js ***!
  \*****************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
;
;
;
;


/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/package.json":
/*!******************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/package.json ***!
  \******************************************************************************/
/*! exports provided: name, version, main, module, jsnext:main, types, license, sideEffects, scripts, repository, publishConfig, keywords, author, bugs, homepage, devDependencies, peerDependencies, dependencies, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"@psychedelic/plug-inpage-provider\",\"version\":\"2.3.0\",\"main\":\"dist/src/index.js\",\"module\":\"dist/esm/src/index.js\",\"jsnext:main\":\"dist/esm/src/index.js\",\"types\":\"dist/src/index.d.ts\",\"license\":\"MIT\",\"sideEffects\":false,\"scripts\":{\"build\":\"npm run clean && npm-run-all --parallel build:** && node ./scripts/add-package.js\",\"build:cjs\":\"tsc --module commonjs --target es6 --outDir ./dist\",\"build:esm\":\"tsc --module es2015 --target es6 --outDir ./dist/esm -d false\",\"prepublishOnly\":\"npm run build\",\"clean\":\"rimraf ./dist\",\"lint\":\"eslint --ext .js,.ts ./src/**\",\"lint:fix\":\"npm run lint -- --fix\",\"test\":\"jest\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/psychedelic/plug-inpage-provider.git\"},\"publishConfig\":{\"registry\":\"https://npm.pkg.github.com/@psychedelic\"},\"keywords\":[\"package\",\"typescript\"],\"author\":\"Psychedelic\",\"bugs\":{\"url\":\"https://github.com/Psychedelic/plug-inpage-provider/issues\"},\"homepage\":\"https://github.com/Psychedelic/plug-inpage-provider#readme\",\"devDependencies\":{\"@babel/core\":\"^7.13.16\",\"@types/jest\":\"^26.0.22\",\"@types/react-test-renderer\":\"^17.0.1\",\"@types/uuid\":\"^8.3.0\",\"@typescript-eslint/eslint-plugin\":\"^4.22.0\",\"@typescript-eslint/parser\":\"^4.22.0\",\"babel-loader\":\"^8.2.2\",\"eslint\":\"^7.24.0\",\"eslint-config-airbnb\":\"^18.2.1\",\"eslint-plugin-import\":\"^2.22.1\",\"husky\":\"^3.1.0\",\"jest\":\"^26.6.3\",\"lint-staged\":\"^9.5.0\",\"npm-run-all\":\"^4.1.5\",\"react-test-renderer\":\"^17.0.2\",\"rimraf\":\"^3.0.0\",\"ts-jest\":\"^26.5.5\",\"typescript\":\"^4.2.4\"},\"peerDependencies\":{},\"dependencies\":{\"@dfinity/agent\":\"0.9.3\",\"@dfinity/candid\":\"0.9.3\",\"@dfinity/principal\":\"0.9.3\",\"@psychedelic/browser-rpc\":\"2.1.0\",\"@types/chrome\":\"^0.0.180\",\"buffer-crc32\":\"^0.2.13\",\"crypto-js\":\"^4.1.1\",\"json-bigint\":\"^1.0.0\"}}");

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/Provider/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/Provider/index.js ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Provider; });
/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ "./node_modules/@dfinity/agent/lib/esm/index.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/domain-metadata */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js");
/* harmony import */ var _utils_ic_management_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ic-management-api */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/ic-management-api.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/constants.js");
/* harmony import */ var _utils_sign__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/sign */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/sign.js");
/* harmony import */ var _utils_agent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/agent */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/agent.js");
/* harmony import */ var _utils_bigint__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/bigint */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/bigint.js");
/* harmony import */ var _modules_RPCManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../modules/RPCManager */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/modules/RPCManager/index.js");
/* harmony import */ var _modules_SessionManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../modules/SessionManager */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/modules/SessionManager/index.js");
/* harmony import */ var _utils_account__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/account */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/account.js");
/* harmony import */ var _utils_communication__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/communication */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/communication.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __asyncValues = undefined && undefined.__asyncValues || function (o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
};













class Provider {
  constructor(clientRPC) {
    this.idls = {};

    this.hookToWindowEvents = () => {
      window.addEventListener('updateConnection', () => __awaiter(this, void 0, void 0, function* () {
        const connectionData = yield this.sessionManager.updateConnection();
        const {
          sessionData
        } = connectionData || {};

        if (sessionData) {
          this.agent = sessionData === null || sessionData === void 0 ? void 0 : sessionData.agent;
          this.principalId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.principalId;
          this.accountId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.accountId;
        }
      }), false);
    };

    this.clientRPC = new _modules_RPCManager__WEBPACK_IMPORTED_MODULE_8__["default"]({
      instance: clientRPC
    });
    this.sessionManager = new _modules_SessionManager__WEBPACK_IMPORTED_MODULE_9__["default"]({
      rpc: this.clientRPC
    });
    this.versions = _constants__WEBPACK_IMPORTED_MODULE_4__["versions"];
  }

  init() {
    return __awaiter(this, void 0, void 0, function* () {
      const connectionData = yield this.sessionManager.init();
      const {
        sessionData
      } = connectionData || {};

      if (sessionData) {
        this.agent = sessionData === null || sessionData === void 0 ? void 0 : sessionData.agent;
        this.principalId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.principalId;
        this.accountId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.accountId;
      }

      this.hookToWindowEvents();
    });
  }

  createActor({
    canisterId,
    interfaceFactory
  }) {
    var _a;

    return __awaiter(this, void 0, void 0, function* () {
      if (!canisterId || !Object(_utils_account__WEBPACK_IMPORTED_MODULE_10__["validateCanisterId"])(canisterId)) throw Error("a canisterId valid is a required argument");
      if (!interfaceFactory) throw Error("interfaceFactory is a required argument");
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      this.idls[canisterId] = Object(_utils_sign__WEBPACK_IMPORTED_MODULE_5__["getArgTypes"])(interfaceFactory);
      const connectionData = yield this.sessionManager.getConnectionData();
      const agent = yield Object(_utils_agent__WEBPACK_IMPORTED_MODULE_6__["createAgent"])(this.clientRPC, metadata, {
        whitelist: [canisterId],
        host: (_a = connectionData === null || connectionData === void 0 ? void 0 : connectionData.connection) === null || _a === void 0 ? void 0 : _a.host
      }, Object(_utils_sign__WEBPACK_IMPORTED_MODULE_5__["getArgTypes"])(interfaceFactory));
      return Object(_utils_agent__WEBPACK_IMPORTED_MODULE_6__["createActor"])(agent, canisterId, interfaceFactory);
    });
  }

  getPrincipal({
    asString
  } = {
    asString: false
  }) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      const principal = this.principalId;

      if (principal) {
        return asString ? principal.toString() : _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].from(principal);
      } else {
        const response = yield this.clientRPC.call({
          handler: "getPrincipal",
          args: [metadata.url]
        });

        if (response && asString) {
          return response.toString();
        }

        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].from(response);
      }
    });
  }

  isConnected() {
    return __awaiter(this, void 0, void 0, function* () {
      const connectionData = yield this.sessionManager.getConnectionData();
      const {
        connection
      } = connectionData || {};
      return !!connection;
    });
  }

  disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.sessionManager.disconnect();
    });
  }

  requestConnect(args = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      const {
        sessionData,
        connection
      } = yield this.sessionManager.requestConnect(args);

      if (sessionData) {
        this.agent = sessionData === null || sessionData === void 0 ? void 0 : sessionData.agent;
        this.principalId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.principalId;
        this.accountId = sessionData === null || sessionData === void 0 ? void 0 : sessionData.accountId;
      }

      return connection === null || connection === void 0 ? void 0 : connection.publicKey;
    });
  }

  createAgent({
    whitelist,
    host
  } = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      this.agent = yield Object(_utils_agent__WEBPACK_IMPORTED_MODULE_6__["createAgent"])(this.clientRPC, metadata, {
        whitelist,
        host
      }, null);
      return !!this.agent;
    });
  }

  requestBalance(accountId = null) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      const balances = yield this.clientRPC.call({
        handler: "requestBalance",
        args: [metadata, accountId]
      });
      return balances.map(balance => {
        const {
          value
        } = balance,
              rest = __rest(balance, ["value"]);

        return rest;
      });
    });
  }

  requestTransfer(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      return yield this.clientRPC.call({
        handler: "requestTransfer",
        args: [metadata, params]
      });
    });
  }

  batchTransactions(transactions) {
    var transactions_1, transactions_1_1;

    var e_1, _a;

    var _b;

    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      const canisterList = transactions.map(transaction => transaction.canisterId);
      const connectionData = yield this.sessionManager.getConnectionData();
      const sender = yield this.getPrincipal({
        asString: true
      });
      const signInfo = transactions.map(trx => Object(_utils_sign__WEBPACK_IMPORTED_MODULE_5__["getSignInfoFromTransaction"])(trx, sender)).map(trx => Object(_utils_bigint__WEBPACK_IMPORTED_MODULE_7__["recursiveParseBigint"])(Object.assign(Object.assign({}, trx), {
        arguments: Object(_utils_communication__WEBPACK_IMPORTED_MODULE_11__["bufferToBase64"])(Buffer.from(trx.arguments))
      })));
      const batchResponse = yield this.clientRPC.call({
        handler: "batchTransactions",
        args: [metadata, signInfo]
      });
      if (!batchResponse.status) return false;
      const agent = yield Object(_utils_agent__WEBPACK_IMPORTED_MODULE_6__["createAgent"])(this.clientRPC, metadata, {
        whitelist: canisterList,
        host: (_b = connectionData === null || connectionData === void 0 ? void 0 : connectionData.connection) === null || _b === void 0 ? void 0 : _b.host
      }, null, batchResponse.txId);
      let transactionIndex = 0;
      let prevTransactionsData = [];

      try {
        for (transactions_1 = __asyncValues(transactions); transactions_1_1 = yield transactions_1.next(), !transactions_1_1.done;) {
          const transaction = transactions_1_1.value;
          const actor = yield Object(_utils_agent__WEBPACK_IMPORTED_MODULE_6__["createActor"])(agent, transaction.canisterId, transaction.idl);
          const method = actor[transaction.methodName];

          try {
            let response;

            if (typeof transaction.args === "function") {
              if (prevTransactionsData) {
                response = yield method(...transaction.args(prevTransactionsData));
              }

              if (!prevTransactionsData) {
                response = yield method(...transaction.args());
              }
            } else if (Array.isArray(transaction.args)) {
              response = yield method(...transaction.args);
            } else {
              yield transaction === null || transaction === void 0 ? void 0 : transaction.onFail("Invalid transaction arguments, must be function or array", prevTransactionsData);
              break;
            }

            if (transaction === null || transaction === void 0 ? void 0 : transaction.onSuccess) {
              const chainedResponse = yield transaction === null || transaction === void 0 ? void 0 : transaction.onSuccess(response);

              if (chainedResponse) {
                prevTransactionsData = [...prevTransactionsData, {
                  transactionIndex,
                  response: chainedResponse
                }];
              }
            }
          } catch (error) {
            if (transaction === null || transaction === void 0 ? void 0 : transaction.onFail) {
              yield transaction.onFail(error, prevTransactionsData);
            }

            break;
          }

          transactionIndex++;
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (transactions_1_1 && !transactions_1_1.done && (_a = transactions_1.return)) yield _a.call(transactions_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      return true;
    });
  }

  getICNSInfo() {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      return yield this.clientRPC.call({
        handler: "getICNSInfo",
        args: [metadata]
      });
    });
  }

  requestBurnXTC(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      return yield this.clientRPC.call({
        handler: "requestBurnXTC",
        args: [metadata, params]
      });
    });
  }

  getManagementCanister() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.agent) {
        throw Error("Oops! Agent initialization required.");
      }

      return _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__["Actor"].createActor(_utils_ic_management_api__WEBPACK_IMPORTED_MODULE_3__["managementCanisterIdlFactory"], Object.assign({
        agent: this.agent,
        canisterId: _utils_ic_management_api__WEBPACK_IMPORTED_MODULE_3__["managementCanisterPrincipal"]
      }, {
        callTransform: _utils_ic_management_api__WEBPACK_IMPORTED_MODULE_3__["transformOverrideHandler"],
        queryTransform: _utils_ic_management_api__WEBPACK_IMPORTED_MODULE_3__["transformOverrideHandler"]
      }));
    });
  }

  requestImportToken(params) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_2__["default"])();
      return yield this.clientRPC.call({
        handler: "requestImportToken",
        args: [metadata, params]
      });
    });
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/constants.js ***!
  \**********************************************************************************/
/*! exports provided: PLUG_PROXY_HOST, IC_MAINNET_URLS, versions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLUG_PROXY_HOST", function() { return PLUG_PROXY_HOST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IC_MAINNET_URLS", function() { return IC_MAINNET_URLS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "versions", function() { return versions; });
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../package.json */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/package.json");
var _package_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/package.json", 1);

const PLUG_PROXY_HOST = 'https://mainnet.plugwallet.ooo/';
const IC_MAINNET_URLS = ['https://mainnet.dfinity.network', 'ic0.app', PLUG_PROXY_HOST];
const versions = {
  extension: "0.5.3",
  provider: _package_json__WEBPACK_IMPORTED_MODULE_0__.version
};

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/identity.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/identity.js ***!
  \*********************************************************************************/
/*! exports provided: PlugIdentity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlugIdentity", function() { return PlugIdentity; });
/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ "./node_modules/@dfinity/agent/lib/esm/index.js");
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};



class PlugIdentity extends _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__["SignIdentity"] {
  constructor(publicKey, whitelist) {
    super();
    this.publicKey = Object.assign(Object.assign({}, publicKey), {
      toDer: () => {
        var _a, _b;

        return (_b = (_a = publicKey.derKey) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : publicKey.derKey;
      }
    });
    this.whitelist = whitelist || [];
  }

  getPublicKey() {
    return this.publicKey;
  }

  sign(_blob, _signInfo) {
    return __awaiter(this, void 0, void 0, function* () {
      throw "DONT USE SIGN FROM IDENTITY";
    });
  }

  getPrincipal() {
    if (!this._principal) {
      this._principal = _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].selfAuthenticating(this.publicKey.toDer());
    }

    return this._principal;
  }

}

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/index.js ***!
  \******************************************************************************/
/*! exports provided: Provider, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Provider */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/Provider/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Provider", function() { return _Provider__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _Provider__WEBPACK_IMPORTED_MODULE_0__["default"]; });




/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/modules/RPCManager/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/modules/RPCManager/index.js ***!
  \*************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RPCManager; });
/* harmony import */ var _utils_domain_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domain-metadata */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};


const DEFAULT_CONFIG = {
  timeout: 0,
  target: ""
};
class RPCManager {
  constructor({
    instance
  }) {
    this.instance = instance;
    this.instance.start();
  }

  call({
    handler,
    args,
    config = DEFAULT_CONFIG
  }) {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_0__["default"])();

      const handleCallSuccess = result => result;

      const handleCallFailure = error => __awaiter(this, void 0, void 0, function* () {
        const {
          message
        } = error || {};
        const errorHandler = message === "Request Timeout" ? "handleTimeout" : "handleError";
        return yield this.instance.call(errorHandler, [metadata, message], DEFAULT_CONFIG);
      });

      return this.instance.call(handler, args, config).then(handleCallSuccess, handleCallFailure);
    });
  }

}

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/modules/SessionManager/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/modules/SessionManager/index.js ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SessionManager; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/constants.js");
/* harmony import */ var _utils_domain_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/domain-metadata */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js");
/* harmony import */ var _utils_account__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/account */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/account.js");
/* harmony import */ var _utils_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/agent */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/agent.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};





class SessionManager {
  constructor({
    host,
    whitelist,
    timeout,
    rpc
  }) {
    this.sessionData = null;
    this.initialized = false;
    this.host = host || _constants__WEBPACK_IMPORTED_MODULE_0__["IC_MAINNET_URLS"][0];
    this.whitelist = whitelist || [];
    this.timeout = timeout || 120000;
    this.rpc = rpc;
  }

  getSession() {
    return this.sessionData;
  }

  createSession(publicKey) {
    return __awaiter(this, void 0, void 0, function* () {
      const agent = yield Object(_utils_agent__WEBPACK_IMPORTED_MODULE_3__["privateCreateAgent"])({
        publicKey,
        clientRPC: this.rpc,
        whitelist: this.whitelist || [],
        host: this.host || _constants__WEBPACK_IMPORTED_MODULE_0__["PLUG_PROXY_HOST"]
      });
      const principal = yield agent.getPrincipal();
      const principalId = principal.toString();
      const accountId = yield Object(_utils_account__WEBPACK_IMPORTED_MODULE_2__["getAccountId"])(principal);
      this.sessionData = {
        agent,
        principalId,
        accountId
      };
      return this.sessionData;
    });
  }

  init() {
    return __awaiter(this, void 0, void 0, function* () {
      let connData = null;

      if (!this.initialized) {
        connData = yield this.getConnectionData();
        this.initialized = true;
      }

      return connData;
    });
  }

  getConnectionData() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.initialized) return null;
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_1__["default"])();
      const connection = yield this.rpc.call({
        handler: "getConnectionData",
        args: [metadata.url]
      });
      let sessionData = null;

      if (connection) {
        this.host = connection.host;
        this.whitelist = connection.whitelist;
        this.timeout = connection.timeout;
        sessionData = yield this.createSession(connection.publicKey);
      }

      return {
        sessionData,
        connection
      };
    });
  }

  requestConnect(args = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      const {
        whitelist = [],
        host = _constants__WEBPACK_IMPORTED_MODULE_0__["PLUG_PROXY_HOST"],
        timeout = 120000
      } = args;
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_1__["default"])();
      const publicKey = yield this.rpc.call({
        handler: "requestConnect",
        args: [metadata, whitelist, timeout, host]
      });
      this.host = host;
      this.whitelist = whitelist;
      this.timeout = timeout;
      this.onConnectionUpdate = args === null || args === void 0 ? void 0 : args.onConnectionUpdate;
      const sessionData = yield this.createSession(publicKey);
      return {
        sessionData,
        connection: {
          host,
          whitelist,
          timeout,
          publicKey
        }
      };
    });
  }

  disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      const metadata = Object(_utils_domain_metadata__WEBPACK_IMPORTED_MODULE_1__["default"])();
      yield this.rpc.call({
        handler: "disconnect",
        args: [metadata.url]
      });
      this.sessionData = null;
    });
  }

  updateConnection() {
    var _a;

    return __awaiter(this, void 0, void 0, function* () {
      const data = yield this.getConnectionData();

      if (data) {
        (_a = this.onConnectionUpdate) === null || _a === void 0 ? void 0 : _a.call(this, data);
      }

      return data;
    });
  }

}
;

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/account.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/account.js ***!
  \**************************************************************************************/
/*! exports provided: getAccountId, PRINCIPAL_REGEX, CANISTER_MAX_LENGTH, ALPHANUM_REGEX, isValidPrincipal, validatePrincipalId, validateAccountId, validateCanisterId, validateToken */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAccountId", function() { return getAccountId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRINCIPAL_REGEX", function() { return PRINCIPAL_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CANISTER_MAX_LENGTH", function() { return CANISTER_MAX_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALPHANUM_REGEX", function() { return ALPHANUM_REGEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidPrincipal", function() { return isValidPrincipal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validatePrincipalId", function() { return validatePrincipalId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateAccountId", function() { return validateAccountId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateCanisterId", function() { return validateCanisterId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateToken", function() { return validateToken; });
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js */ "./node_modules/crypto-js/index.js");
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");
/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crypto */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/crypto.js");



const ACCOUNT_DOMAIN_SEPERATOR = "\x0Aaccount-id";
const SUB_ACCOUNT_ZERO = Buffer.alloc(32);
const getAccountId = (principal, subAccount) => {
  const sha = crypto_js__WEBPACK_IMPORTED_MODULE_0___default.a.algo.SHA224.create();
  sha.update(ACCOUNT_DOMAIN_SEPERATOR);
  sha.update(Object(_crypto__WEBPACK_IMPORTED_MODULE_2__["byteArrayToWordArray"])(principal.toUint8Array()));
  const subBuffer = Buffer.from(SUB_ACCOUNT_ZERO);

  if (subAccount) {
    subBuffer.writeUInt32BE(subAccount);
  }

  sha.update(Object(_crypto__WEBPACK_IMPORTED_MODULE_2__["byteArrayToWordArray"])(subBuffer));
  const hash = sha.finalize();
  const byteArray = Object(_crypto__WEBPACK_IMPORTED_MODULE_2__["wordArrayToByteArray"])(hash, 28);
  const checksum = Object(_crypto__WEBPACK_IMPORTED_MODULE_2__["generateChecksum"])(new Uint8Array(byteArray));
  const val = checksum + hash.toString();
  return val;
};
const PRINCIPAL_REGEX = /(\w{5}-){10}\w{3}/;
const CANISTER_MAX_LENGTH = 27;
const ALPHANUM_REGEX = /^[a-zA-Z0-9]+$/;
const isValidPrincipal = text => _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__["Principal"].fromText(text).toText() === text;
const validatePrincipalId = text => {
  try {
    return Boolean(PRINCIPAL_REGEX.test(text) && isValidPrincipal(text));
  } catch (e) {
    return false;
  }
};
const validateAccountId = text => text.length === 64 && ALPHANUM_REGEX.test(text);
const validateCanisterId = text => {
  try {
    return Boolean(text.length <= CANISTER_MAX_LENGTH && isValidPrincipal(text));
  } catch (e) {
    return false;
  }
};
const validateToken = metadata => Boolean(!!metadata.decimal && !!metadata.name && !!metadata.symbol);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/agent.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/agent.js ***!
  \************************************************************************************/
/*! exports provided: privateCreateAgent, createAgent, createActor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "privateCreateAgent", function() { return privateCreateAgent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAgent", function() { return createAgent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createActor", function() { return createActor; });
/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ "./node_modules/@dfinity/agent/lib/esm/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/constants.js");
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../identity */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/identity.js");
/* harmony import */ var _factories_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./factories/agent */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/factories/agent.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};





const DEFAULT_HOST = _constants__WEBPACK_IMPORTED_MODULE_1__["IC_MAINNET_URLS"][0];
const DEFAULT_CREATE_AGENT_ARGS = {
  whitelist: [],
  host: DEFAULT_HOST
};

class PlugAgent extends _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__["HttpAgent"] {
  constructor(options = {}, clientRPC, idl, batchTxId = "") {
    super(options);
    this["query"] = Object(_factories_agent__WEBPACK_IMPORTED_MODULE_3__["queryMethodFactory"])(clientRPC);
    this["call"] = Object(_factories_agent__WEBPACK_IMPORTED_MODULE_3__["callMethodFactory"])(clientRPC, batchTxId, idl);
    this["readState"] = Object(_factories_agent__WEBPACK_IMPORTED_MODULE_3__["readStateMethodFactory"])(clientRPC);
  }

}

;
const privateCreateAgent = ({
  publicKey,
  clientRPC,
  idl = null,
  batchTxId = "",
  whitelist = DEFAULT_CREATE_AGENT_ARGS.whitelist,
  host = DEFAULT_CREATE_AGENT_ARGS.host
}) => __awaiter(void 0, void 0, void 0, function* () {
  const identity = new _identity__WEBPACK_IMPORTED_MODULE_2__["PlugIdentity"](publicKey, whitelist);
  const agent = new PlugAgent({
    identity,
    host
  }, clientRPC, idl, batchTxId);

  if (!_constants__WEBPACK_IMPORTED_MODULE_1__["IC_MAINNET_URLS"].includes(host)) {
    yield agent.fetchRootKey();
  }

  return agent;
});
const createAgent = (clientRPC, metadata, {
  whitelist = DEFAULT_CREATE_AGENT_ARGS.whitelist,
  host = DEFAULT_CREATE_AGENT_ARGS.host
}, idl = null, batchTxId = "") => __awaiter(void 0, void 0, void 0, function* () {
  const publicKey = yield clientRPC.call({
    handler: "verifyWhitelist",
    args: [metadata, whitelist]
  });
  const agent = yield privateCreateAgent({
    publicKey,
    clientRPC,
    idl,
    batchTxId,
    whitelist,
    host
  });
  return agent;
});
const createActor = (agent, canisterId, interfaceFactory) => __awaiter(void 0, void 0, void 0, function* () {
  return _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__["Actor"].createActor(interfaceFactory, {
    agent: agent,
    canisterId
  });
});

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/bigint.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/bigint.js ***!
  \*************************************************************************************/
/*! exports provided: recursiveParseBigint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recursiveParseBigint", function() { return recursiveParseBigint; });
const recursiveParseBigint = value => {
  if (value instanceof Object) {
    return Array.isArray(value) ? value.map(val => recursiveParseBigint(val)) : Object.entries(value).reduce((acum, [key, val]) => Object.assign(Object.assign({}, acum), {
      [key]: recursiveParseBigint(val)
    }), {});
  }

  if (typeof value === "bigint") {
    return parseInt(value.toString(), 10);
  }

  return value;
};

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/communication.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/communication.js ***!
  \********************************************************************************************/
/*! exports provided: bufferToBase64, base64ToBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferToBase64", function() { return bufferToBase64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "base64ToBuffer", function() { return base64ToBuffer; });
const bufferToBase64 = buf => {
  return Buffer.from(buf).toString("base64");
};
const base64ToBuffer = base64 => {
  return Buffer.from(base64, "base64");
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/crypto.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/crypto.js ***!
  \*************************************************************************************/
/*! exports provided: byteArrayToWordArray, wordToByteArray, wordArrayToByteArray, intToHex, generateChecksum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "byteArrayToWordArray", function() { return byteArrayToWordArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wordToByteArray", function() { return wordToByteArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wordArrayToByteArray", function() { return wordArrayToByteArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intToHex", function() { return intToHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateChecksum", function() { return generateChecksum; });
/* harmony import */ var buffer_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer-crc32 */ "./node_modules/buffer-crc32/index.js");
/* harmony import */ var buffer_crc32__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer_crc32__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js */ "./node_modules/crypto-js/index.js");
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_1__);


const byteArrayToWordArray = byteArray => {
  const wordArray = [];
  let i;

  for (i = 0; i < byteArray.length; i += 1) {
    wordArray[i / 4 | 0] |= byteArray[i] << 24 - 8 * i;
  }

  const result = crypto_js__WEBPACK_IMPORTED_MODULE_1___default.a.lib.WordArray.create(wordArray, byteArray.length);
  return result;
};
const wordToByteArray = (word, length) => {
  const byteArray = [];
  const xFF = 0xff;
  if (length > 0) byteArray.push(word >>> 24);
  if (length > 1) byteArray.push(word >>> 16 & xFF);
  if (length > 2) byteArray.push(word >>> 8 & xFF);
  if (length > 3) byteArray.push(word & xFF);
  return byteArray;
};
const wordArrayToByteArray = (wordArray, length) => {
  if (wordArray.hasOwnProperty('sigBytes') && wordArray.hasOwnProperty('words')) {
    length = wordArray.sigBytes;
    wordArray = wordArray.words;
  }

  let result = [];
  let bytes;
  let i = 0;

  while (length > 0) {
    bytes = wordToByteArray(wordArray[i], Math.min(4, length));
    length -= bytes.length;
    result = [...result, bytes];
    i++;
  }

  return [].concat.apply([], result);
};
const intToHex = val => val < 0 ? (Number(val) >>> 0).toString(16) : Number(val).toString(16);
const generateChecksum = hash => {
  const crc = buffer_crc32__WEBPACK_IMPORTED_MODULE_0___default.a.unsigned(Buffer.from(hash));
  const hex = intToHex(crc);
  return hex.padStart(8, '0');
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const getDomainMetadata = () => {
  const url = beautifyUrl(window.location.origin);
  const name = getName();
  const icons = getIcons();
  const pageWidth = getPageWidth();
  return {
    url,
    name,
    icons,
    pageWidth
  };
};

/* harmony default export */ __webpack_exports__["default"] = (getDomainMetadata);

const beautifyUrl = url => url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, '').split('/')[0];

const getPageWidth = () => {
  const win = window,
        doc = document,
        docElem = doc.documentElement,
        body = doc.getElementsByTagName('body')[0];
  return win.innerWidth || docElem.clientWidth || body.clientWidth;
};

const getName = () => {
  var _a;

  let name = null;
  const metaTags = document.getElementsByTagName('meta');
  if (!metaTags) return beautifyUrl(window.location.origin);

  for (let i = 0; i < metaTags.length; i += 1) {
    const meta = metaTags[i];
    const property = ((_a = meta.getAttribute('property')) === null || _a === void 0 ? void 0 : _a.toLowerCase().indexOf('site_name')) > -1;

    if (property) {
      name = meta.getAttribute('content');
    }
  }

  return name !== null && name !== void 0 ? name : beautifyUrl(window.location.origin);
};

const getIcons = () => {
  var _a;

  const links = document.getElementsByTagName('link');
  const icons = [];

  for (let i = 0; i < links.length; i += 1) {
    const link = links[i];
    const rel = ((_a = link.getAttribute('rel')) === null || _a === void 0 ? void 0 : _a.toLowerCase().indexOf('icon')) > -1;

    if (rel) {
      const href = link.getAttribute('href');

      if (href) {
        if (href.toLowerCase().indexOf('https:') === -1 && href.toLowerCase().indexOf('http:') === -1 && href.indexOf('//') !== 0) {
          let absoluteHref = `${window.location.protocol}//${window.location.host}`;

          if (href.indexOf('/') === 0) {
            absoluteHref += href;
          } else {
            const path = window.location.pathname.split('/');
            path.pop();
            const finalPath = path.join('/');
            absoluteHref += `${finalPath}/${href}`;
          }

          icons.push(absoluteHref);
        } else if (href.indexOf('//') === 0) {
          const absoluteUrl = window.location.protocol + href;
          icons.push(absoluteUrl);
        } else {
          icons.push(href);
        }
      }
    }
  }

  return icons;
};

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/factories/agent.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/factories/agent.js ***!
  \**********************************************************************************************/
/*! exports provided: callMethodFactory, queryMethodFactory, readStateMethodFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "callMethodFactory", function() { return callMethodFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryMethodFactory", function() { return queryMethodFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readStateMethodFactory", function() { return readStateMethodFactory; });
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var _bigint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bigint */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/bigint.js");
/* harmony import */ var _communication__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../communication */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/communication.js");
/* harmony import */ var _domain_metadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../domain-metadata */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};





const callMethodFactory = (clientRPC, batchTxId = "", idl) => (canisterId, options, identity) => __awaiter(void 0, void 0, void 0, function* () {
  var _a;

  const metadata = Object(_domain_metadata__WEBPACK_IMPORTED_MODULE_3__["default"])();
  let decodedArgs = null;

  if (idl) {
    decodedArgs = Object(_bigint__WEBPACK_IMPORTED_MODULE_1__["recursiveParseBigint"])(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["IDL"].decode(idl[options.methodName], options.arg));
  }

  const arg = Object(_communication__WEBPACK_IMPORTED_MODULE_2__["bufferToBase64"])(Buffer.from(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["blobToUint8Array"])(options.arg).buffer));
  const result = yield clientRPC.call({
    handler: "requestCall",
    args: [metadata, {
      canisterId: canisterId.toString(),
      methodName: options.methodName,
      arg,
      effectiveCanisterId: (_a = options.effectiveCanisterId) === null || _a === void 0 ? void 0 : _a.toString()
    }, batchTxId, decodedArgs]
  });
  if (result.error) throw result.error.message;
  return Object.assign(Object.assign({}, result), {
    requestId: Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["blobFromUint8Array"])(new Uint8Array(Object(_communication__WEBPACK_IMPORTED_MODULE_2__["base64ToBuffer"])(result.requestId)))
  });
});
const queryMethodFactory = clientRPC => (canisterId, fields, identity) => __awaiter(void 0, void 0, void 0, function* () {
  const result = yield clientRPC.call({
    handler: "requestQuery",
    args: [{
      canisterId: canisterId.toString(),
      methodName: fields.methodName,
      arg: Object(_communication__WEBPACK_IMPORTED_MODULE_2__["bufferToBase64"])(Buffer.from(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["blobToUint8Array"])(fields.arg).buffer)),
      url: Object(_domain_metadata__WEBPACK_IMPORTED_MODULE_3__["default"])().url
    }]
  });
  if (result.error) throw result.error.message;
  return result.status === "replied" ? Object.assign(Object.assign({}, result), {
    reply: {
      arg: Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["blobFromUint8Array"])(new Uint8Array(Object(_communication__WEBPACK_IMPORTED_MODULE_2__["base64ToBuffer"])(result.reply.arg)))
    }
  }) : Object.assign({}, result);
});
const readStateMethodFactory = clientRPC => (canisterId, fields, identity) => __awaiter(void 0, void 0, void 0, function* () {
  const paths = fields.paths[0].map(path => Object(_communication__WEBPACK_IMPORTED_MODULE_2__["bufferToBase64"])(Buffer.from(Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["blobToUint8Array"])(path).buffer)));

  try {
    const result = yield clientRPC.call({
      handler: "requestReadState",
      args: [{
        canisterId: canisterId.toString(),
        paths,
        url: Object(_domain_metadata__WEBPACK_IMPORTED_MODULE_3__["default"])().url
      }]
    });
    if (result.error) throw result.error.message;
    return {
      certificate: Object(_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["blobFromUint8Array"])(new Uint8Array(Object(_communication__WEBPACK_IMPORTED_MODULE_2__["base64ToBuffer"])(result.certificate)))
    };
  } catch (e) {
    throw e;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/ic-management-api.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/ic-management-api.js ***!
  \************************************************************************************************/
/*! exports provided: managementCanisterIdlFactory, managementCanisterPrincipal, transformOverrideHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "managementCanisterIdlFactory", function() { return managementCanisterIdlFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "managementCanisterPrincipal", function() { return managementCanisterPrincipal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformOverrideHandler", function() { return transformOverrideHandler; });
/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ "./node_modules/@dfinity/principal/lib/esm/index.js");

const managementCanisterIdlFactory = ({
  IDL
}) => {
  const canister_id = IDL.Principal;
  const definite_canister_settings = IDL.Record({
    'freezing_threshold': IDL.Nat,
    'controllers': IDL.Vec(IDL.Principal),
    'memory_allocation': IDL.Nat,
    'compute_allocation': IDL.Nat
  });
  const canister_settings = IDL.Record({
    'freezing_threshold': IDL.Opt(IDL.Nat),
    'controllers': IDL.Opt(IDL.Vec(IDL.Principal)),
    'memory_allocation': IDL.Opt(IDL.Nat),
    'compute_allocation': IDL.Opt(IDL.Nat)
  });
  const wasm_module = IDL.Vec(IDL.Nat8);
  return IDL.Service({
    'canister_status': IDL.Func([IDL.Record({
      'canister_id': canister_id
    })], [IDL.Record({
      'status': IDL.Variant({
        'stopped': IDL.Null,
        'stopping': IDL.Null,
        'running': IDL.Null
      }),
      'memory_size': IDL.Nat,
      'cycles': IDL.Nat,
      'settings': definite_canister_settings,
      'module_hash': IDL.Opt(IDL.Vec(IDL.Nat8))
    })], []),
    'create_canister': IDL.Func([IDL.Record({
      'settings': IDL.Opt(canister_settings)
    })], [IDL.Record({
      'canister_id': canister_id
    })], []),
    'delete_canister': IDL.Func([IDL.Record({
      'canister_id': canister_id
    })], [], []),
    'deposit_cycles': IDL.Func([IDL.Record({
      'canister_id': canister_id
    })], [], []),
    'install_code': IDL.Func([IDL.Record({
      'arg': IDL.Vec(IDL.Nat8),
      'wasm_module': wasm_module,
      'mode': IDL.Variant({
        'reinstall': IDL.Null,
        'upgrade': IDL.Null,
        'install': IDL.Null
      }),
      'canister_id': canister_id
    })], [], []),
    'provisional_create_canister_with_cycles': IDL.Func([IDL.Record({
      'settings': IDL.Opt(canister_settings),
      'amount': IDL.Opt(IDL.Nat)
    })], [IDL.Record({
      'canister_id': canister_id
    })], []),
    'provisional_top_up_canister': IDL.Func([IDL.Record({
      'canister_id': canister_id,
      'amount': IDL.Nat
    })], [], []),
    'raw_rand': IDL.Func([], [IDL.Vec(IDL.Nat8)], []),
    'start_canister': IDL.Func([IDL.Record({
      'canister_id': canister_id
    })], [], []),
    'stop_canister': IDL.Func([IDL.Record({
      'canister_id': canister_id
    })], [], []),
    'uninstall_code': IDL.Func([IDL.Record({
      'canister_id': canister_id
    })], [], []),
    'update_settings': IDL.Func([IDL.Record({
      'canister_id': IDL.Principal,
      'settings': canister_settings
    })], [], [])
  });
};
const managementCanisterPrincipal = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__["Principal"].fromHex('');
const transformOverrideHandler = (methodName, args, callConfig) => {
  let overridable = {
    effectiveCanisterId: managementCanisterPrincipal
  };
  if (!Array.isArray(args) || !args.length) return overridable;

  if (args[0].hasOwnProperty('canister_id') && args[0].canister_id) {
    overridable = {
      effectiveCanisterId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__["Principal"].from(args[0].canister_id)
    };
  }

  return overridable;
};

/***/ }),

/***/ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/sign.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/sign.js ***!
  \***********************************************************************************/
/*! exports provided: canDecodeArgs, getSignInfoFromTransaction, decodeArgs, signFactory, getArgTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canDecodeArgs", function() { return canDecodeArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSignInfoFromTransaction", function() { return getSignInfoFromTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeArgs", function() { return decodeArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "signFactory", function() { return signFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getArgTypes", function() { return getArgTypes; });
/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ "./node_modules/@dfinity/candid/lib/esm/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer/ */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bigint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bigint */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/bigint.js");
/* harmony import */ var _domain_metadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./domain-metadata */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/utils/domain-metadata.js");
var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};





const canDecodeArgs = (signInfo, argsTypes) => {
  var _a;

  return !!((signInfo === null || signInfo === void 0 ? void 0 : signInfo.canisterId) && (signInfo === null || signInfo === void 0 ? void 0 : signInfo.methodName) && (signInfo === null || signInfo === void 0 ? void 0 : signInfo.arguments) && ((_a = argsTypes[signInfo.canisterId]) === null || _a === void 0 ? void 0 : _a[signInfo.methodName]));
};
const getSignInfoFromTransaction = (transaction, sender) => {
  var _a;

  const interfaceFactory = transaction.idl({
    IDL: _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["IDL"]
  });
  const [methodName, func] = ((_a = interfaceFactory === null || interfaceFactory === void 0 ? void 0 : interfaceFactory._fields) === null || _a === void 0 ? void 0 : _a.find(([methodName, _func]) => methodName === transaction.methodName)) || [undefined, undefined];
  const decodedArguments = Array.isArray(transaction.args) ? transaction.args : undefined;
  return {
    methodName: methodName || transaction.methodName,
    canisterId: transaction.canisterId,
    sender,
    arguments: decodedArguments && Array.isArray(transaction.args) && func ? _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["IDL"].encode(func.argTypes, transaction.args) : buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"].from([]),
    decodedArguments,
    preApprove: false,
    requestType: "unknown"
  };
};
const decodeArgs = (signInfo, argsTypes) => {
  if (canDecodeArgs(signInfo, argsTypes)) {
    const assuredSignInfo = signInfo;
    const funArgumentsTypes = argsTypes[assuredSignInfo.canisterId][assuredSignInfo.methodName];
    return _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["IDL"].decode(funArgumentsTypes, assuredSignInfo.arguments);
  }
};
const signFactory = (clientRPC, argsTypes, preApprove = false) => (payload, signInfo) => __awaiter(void 0, void 0, void 0, function* () {
  const metadata = Object(_domain_metadata__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const payloadArr = new Uint8Array(payload);
  if (signInfo) signInfo.decodedArguments = signInfo.arguments ? Object(_bigint__WEBPACK_IMPORTED_MODULE_2__["recursiveParseBigint"])(decodeArgs(signInfo, argsTypes)) : [];
  const res = yield clientRPC.call({
    handler: "requestSign",
    args: [payloadArr, metadata, Object.assign(Object.assign({}, signInfo), {
      preApprove
    })]
  });
  return new Uint8Array(Object.values(res));
});
const getArgTypes = interfaceFactory => {
  const service = interfaceFactory({
    IDL: _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__["IDL"]
  });
  const methodArgType = {};

  service._fields.forEach(([methodName, fun]) => methodArgType[methodName] = fun.argTypes);

  return methodArgType;
};

/***/ }),

/***/ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function () {
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // Use a lookup table to find the index.

  var lookup = new Uint8Array(256);

  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function (arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
        i,
        len = bytes.length,
        base64 = "";

    for (i = 0; i < len; i += 3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode = function (base64) {
    var bufferLength = base64.length * 0.75,
        len = base64.length,
        i,
        p = 0,
        encoded1,
        encoded2,
        encoded3,
        encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;

      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i += 4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i + 1)];
      encoded3 = lookup[base64.charCodeAt(i + 2)];
      encoded4 = lookup[base64.charCodeAt(i + 3)];
      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }

    return arraybuffer;
  };
})();

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/bignumber.js/bignumber.js":
/*!************************************************!*\
  !*** ./node_modules/bignumber.js/bignumber.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;

(function (globalObject) {
  'use strict';
  /*
   *      bignumber.js v9.0.2
   *      A JavaScript library for arbitrary-precision arithmetic.
   *      https://github.com/MikeMcl/bignumber.js
   *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
   *      MIT Licensed.
   *
   *      BigNumber.prototype methods     |  BigNumber methods
   *                                      |
   *      absoluteValue            abs    |  clone
   *      comparedTo                      |  config               set
   *      decimalPlaces            dp     |      DECIMAL_PLACES
   *      dividedBy                div    |      ROUNDING_MODE
   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
   *      exponentiatedBy          pow    |      RANGE
   *      integerValue                    |      CRYPTO
   *      isEqualTo                eq     |      MODULO_MODE
   *      isFinite                        |      POW_PRECISION
   *      isGreaterThan            gt     |      FORMAT
   *      isGreaterThanOrEqualTo   gte    |      ALPHABET
   *      isInteger                       |  isBigNumber
   *      isLessThan               lt     |  maximum              max
   *      isLessThanOrEqualTo      lte    |  minimum              min
   *      isNaN                           |  random
   *      isNegative                      |  sum
   *      isPositive                      |
   *      isZero                          |
   *      minus                           |
   *      modulo                   mod    |
   *      multipliedBy             times  |
   *      negated                         |
   *      plus                            |
   *      precision                sd     |
   *      shiftedBy                       |
   *      squareRoot               sqrt   |
   *      toExponential                   |
   *      toFixed                         |
   *      toFormat                        |
   *      toFraction                      |
   *      toJSON                          |
   *      toNumber                        |
   *      toPrecision                     |
   *      toString                        |
   *      valueOf                         |
   *
   */

  var BigNumber,
      isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
      mathceil = Math.ceil,
      mathfloor = Math.floor,
      bignumberError = '[BigNumber Error] ',
      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',
      BASE = 1e14,
      LOG_BASE = 14,
      MAX_SAFE_INTEGER = 0x1fffffffffffff,
      // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
      SQRT_BASE = 1e7,
      // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9; // 0 to MAX_INT32

  /*
   * Create and return a BigNumber constructor.
   */

  function clone(configObject) {
    var div,
        convertBase,
        parseNumeric,
        P = BigNumber.prototype = {
      constructor: BigNumber,
      toString: null,
      valueOf: null
    },
        ONE = new BigNumber(1),
        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.
    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,
        // 0 to MAX
    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,
        // 0 to 8
    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,
        // 0 to -MAX
    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,
        // 0 to MAX
    // RANGE : [MIN_EXP, MAX_EXP]
    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,
        // -1 to -MAX
    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,
        // 1 to MAX
    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,
        // true or false
    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,
        // 0 to 9
    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,
        // 0 to MAX
    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      prefix: '',
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ',',
      decimalSeparator: '.',
      fractionGroupSize: 0,
      fractionGroupSeparator: '\xA0',
      // non-breaking space
      suffix: ''
    },
        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    // '-', '.', whitespace, or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
        alphabetHasNormalDecimalDigits = true; //------------------------------------------------------------------------------------------
    // CONSTRUCTOR

    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */

    function BigNumber(v, b) {
      var alphabet,
          c,
          caseChanged,
          e,
          i,
          isNum,
          len,
          str,
          x = this; // Enable constructor call without `new`.

      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {
        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {
          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).

          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++);

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {
          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        } // Decimal point?


        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?

        if ((i = str.search(/e/i)) > 0) {
          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {
          // Integer.
          e = str.length;
        }
      } else {
        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.

        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {
          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'

          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error(tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0; // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.

        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {
              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {
              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        } // Prevent later check for length on converted number.


        isNum = false;
        str = convertBase(str, b, 10, x.s); // Decimal point?

        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;
      } // Determine leading zeros.


      for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.


      for (len = str.length; str.charCodeAt(--len) === 48;);

      if (str = str.slice(i, ++len)) {
        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'

        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error(tooManyDigits + x.s * v);
        } // Overflow?


        if ((e = e - i - 1) > MAX_EXP) {
          // Infinity.
          x.c = x.e = null; // Underflow?
        } else if (e < MIN_EXP) {
          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = []; // Transform base
          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.

          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE; // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0');

          x.c.push(+str);
        }
      } else {
        // Zero.
        x.c = [x.e = 0];
      }
    } // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;
    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;
    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */

    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {
        if (typeof obj == 'object') {
          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          } // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];

            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'


          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];

            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);

              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error(bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          } // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'


          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];

            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error(bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error(bignumberError + p + ' not true or false: ' + v);
            }
          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'


          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          } // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'


          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);
          } // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'


          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p]; // Disallow if less than two characters,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.

            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
              ALPHABET = v;
            } else {
              throw Error(bignumberError + p + ' invalid: ' + v);
            }
          }
        } else {
          // '[BigNumber Error] Object expected: {v}'
          throw Error(bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };
    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */


    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;
      var i,
          n,
          c = v.c,
          e = v.e,
          s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {
        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          } // Calculate number of digits that c[0] should have, based on the exponent.


          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {

          if (String(c[0]).length == i) {
            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            } // Last element cannot be zero, unless it is the only element.


            if (n !== 0) return true;
          }
        } // Infinity/NaN

      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error(bignumberError + 'Invalid BigNumber: ' + v);
    };
    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */


    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };
    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */


    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };
    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */


    BigNumber.random = function () {
      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.

      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
        return mathfloor(Math.random() * pow2_53);
      } : function () {
        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
      };
      return function (dp) {
        var a,
            b,
            e,
            k,
            v,
            i = 0,
            c = [],
            rand = new BigNumber(ONE);
        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);
        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {
          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {
            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {
              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251

              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {
                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }

            i = k / 2; // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {
            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {
              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }

            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + 'crypto unavailable');
          }
        } // Use Math.random.


        if (!CRYPTO) {
          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.

        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        } // Remove trailing elements which are zero.


        for (; c[i] === 0; c.pop(), i--); // Zero?


        if (i < 0) {
          c = [e = 0];
        } else {
          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE); // Count the digits of the first element of c to determine leading zeros, and...


          for (i = 1, v = c[0]; v >= 10; v /= 10, i++); // adjust the exponent accordingly.


          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    }();
    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */


    BigNumber.sum = function () {
      var i = 1,
          args = arguments,
          sum = new BigNumber(args[0]);

      for (; i < args.length;) sum = sum.plus(args[i++]);

      return sum;
    }; // PRIVATE FUNCTIONS
    // Called by BigNumber and BigNumber.prototype.toString.


    convertBase = function () {
      var decimal = '0123456789';
      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */

      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      } // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.


      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet,
            d,
            e,
            k,
            r,
            x,
            xc,
            y,
            i = str.indexOf('.'),
            dp = DECIMAL_PLACES,
            rm = ROUNDING_MODE; // Non-integer.

        if (i >= 0) {
          k = POW_PRECISION; // Unlimited precision.

          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
          y.e = y.c.length;
        } // Convert the number as integer.


        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.

        e = k = xc.length; // Remove trailing zeros.

        for (; xc[--k] == 0; xc.pop()); // Zero?


        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.

        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e; // The sign is needed for correct rounding.

          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        } // xc now represents str converted to baseOut.
        // THe index of the rounding digit.


        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.

        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;
        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.

        if (d < 1 || !xc[0]) {
          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          // Truncate xc to the required number of decimal places.
          xc.length = d; // Round up?

          if (r) {
            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          } // Determine trailing zeros.


          for (k = xc.length; !xc[--k];); // E.g. [4, 11, 15] becomes 4bf.


          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])); // Add leading zeros, decimal point and trailing zeros as required.


          str = toFixedPoint(str, e, alphabet.charAt(0));
        } // The caller will add the sign.


        return str;
      };
    }(); // Perform division in the specified base. Called by div and convertBase.


    div = function () {
      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m,
            temp,
            xlo,
            xhi,
            carry = 0,
            i = x.length,
            klo = k % SQRT_BASE,
            khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);
        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {
          for (i = cmp = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0; // Subtract b from a.

        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        } // Remove leading zeros.


        for (; !a[0] && a.length > 1; a.splice(0, 1));
      } // x: dividend, y: divisor.


      return function (x, y, dp, rm, base) {
        var cmp,
            e,
            i,
            more,
            n,
            prod,
            prodL,
            q,
            qc,
            rem,
            remL,
            rem0,
            xi,
            xL,
            yc0,
            yL,
            yz,
            s = x.s == y.s ? 1 : -1,
            xc = x.c,
            yc = y.c; // Either NaN, Infinity or 0?

        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        } // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.


        for (i = 0; yc[i] == (xc[i] || 0); i++);

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {

          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length; // Add zeros to make remainder as long as divisor.

          for (; remL < yL; rem[remL++] = 0);

          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0; // Compare divisor and remainder.

            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.

            if (cmp < 0) {
              // Calculate trial digit, n.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.

              n = mathfloor(rem0 / yc0); //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {
                // n may be > base only when base is 3.
                if (n >= base) n = base - 1; // product = divisor * trial digit.

                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length; // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.

                while (compare(prod, rem, prodL, remL) == 1) {
                  n--; // Subtract divisor from product.

                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {
                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {
                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                } // product = divisor


                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.

              subtract(rem, prod, remL, base);
              remL = rem.length; // If product was < remainder.

              if (cmp == -1) {
                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++; // Subtract divisor from remainder.

                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0
            // Add the next digit, n, to the result array.


            qc[i++] = n; // Update the remainder.

            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null; // Leading zero?

          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {
          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    }();
    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */


    function format(n, i, rm, id) {
      var c0, e, ne, len, str;
      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
      if (!n.c) return n.toString();
      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.

        e = n.e;
        str = coeffToString(n.c);
        len = str.length; // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.
        // Exponential notation.

        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
          // Append zeros?
          for (; len < i; str += '0', len++);

          str = toExponential(str, e); // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0'); // Append zeros?

          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0');
          } else {
            i += e - len;

            if (i > 0) {
              if (e + 1 == len) str += '.';

              for (; i--; str += '0');
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    } // Handle BigNumber.max and BigNumber.min.


    function maxOrMin(args, method) {
      var n,
          i = 1,
          m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]); // If any number is NaN, return NaN.

        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }
    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */


    function normalise(n, c, e) {
      var i = 1,
          j = c.length; // Remove trailing zeros.

      for (; !c[--j]; c.pop()); // Calculate the base 10 exponent. First get the number of digits of c[0].


      for (j = c[0]; j >= 10; j /= 10, i++); // Overflow?


      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
        // Infinity.
        n.c = n.e = null; // Underflow?
      } else if (e < MIN_EXP) {
        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    } // Handle values that fail the validity test in BigNumber.


    parseNumeric = function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
          dotAfter = /^([^.]+)\.$/,
          dotBefore = /^\.([^.]+)$/,
          isInfinityOrNaN = /^-?(Infinity|NaN)$/,
          whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function (x, str, isNum, b) {
        var base,
            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.

        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b; // E.g. '1.' to '1', '.1' to '0.1'

              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          } // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'


          if (BigNumber.DEBUG) {
            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          } // NaN


          x.s = null;
        }

        x.c = x.e = null;
      };
    }();
    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */


    function round(x, sd, rm, r) {
      var d,
          i,
          j,
          k,
          n,
          ni,
          rd,
          xc = x.c,
          pows10 = POWS_TEN; // if x is not Infinity or NaN...

      if (xc) {
        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {
          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);

          i = sd - d; // If the rounding digit is in the first element of xc...

          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0]; // Get the rounding digit at index j of n.

            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {
              if (r) {
                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0));

                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni]; // Get the number of digits of n.

              for (d = 1; k >= 10; k /= 10, d++); // Get the index of rd within n.


              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.

              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.

              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {
              // Convert sd to decimal places.
              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.

              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {
              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          } // Remove excess digits.


          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.

            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          } // Round up?


          if (r) {
            for (;;) {
              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {
                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);

                j = xc[0] += k;

                for (k = 1; j >= 10; j /= 10, k++); // if i != k the length has increased.


                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          } // Remove trailing zeros.


          for (i = xc.length; xc[--i] === 0; xc.pop());
        } // Overflow? Infinity.


        if (x.e > MAX_EXP) {
          x.c = x.e = null; // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }

    function valueOf(n) {
      var str,
          e = n.e;
      if (e === null) return n.toString();
      str = coeffToString(n.c);
      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
      return n.s < 0 ? '-' + str : str;
    } // PROTOTYPE/INSTANCE METHODS

    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */


    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };
    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */


    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };
    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */


    P.decimalPlaces = P.dp = function (dp, rm) {
      var c,
          n,
          v,
          x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.

      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
      if (n < 0) n = 0;
      return n;
    };
    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */


    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };
    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */


    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };
    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */


    P.exponentiatedBy = P.pow = function (n, m) {
      var half,
          isModExp,
          i,
          k,
          more,
          nIsBig,
          nIsNeg,
          nIsOdd,
          y,
          x = this;
      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.

      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.

      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.

      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {
        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.

        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.

        return new BigNumber(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {
        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.

      for (;;) {
        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);
      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };
    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */


    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };
    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */


    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };
    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */


    P.isFinite = function () {
      return !!this.c;
    };
    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */


    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };
    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */


    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
    };
    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */


    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */


    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };
    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */


    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };
    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */


    P.isNaN = function () {
      return !this.s;
    };
    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */


    P.isNegative = function () {
      return this.s < 0;
    };
    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */


    P.isPositive = function () {
      return this.s > 0;
    };
    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */


    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };
    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */


    P.minus = function (y, b) {
      var i,
          j,
          t,
          xLTy,
          x = this,
          a = x.s;
      y = new BigNumber(y, b);
      b = y.s; // Either NaN?

      if (!a || !b) return new BigNumber(NaN); // Signs differ?

      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
          ye = y.e / LOG_BASE,
          xc = x.c,
          yc = y.c;

      if (!xe || !ye) {
        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?

        if (!xc[0] || !yc[0]) {
          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice(); // Determine which is the bigger number.

      if (a = xe - ye) {
        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse(); // Prepend zeros to equalise exponents.

        for (b = a; b--; t.push(0));

        t.reverse();
      } else {
        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      } // x < y? Point xc to the array of the bigger number.


      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.

      if (b > 0) for (; b--; xc[i++] = 0);
      b = BASE - 1; // Subtract yc from xc.

      for (; j > a;) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b);

          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      } // Remove leading zeros and adjust exponent accordingly.


      for (; xc[0] == 0; xc.splice(0, 1), --ye); // Zero?


      if (!xc[0]) {
        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.


      return normalise(y, xc, ye);
    };
    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */


    P.modulo = P.mod = function (y, b) {
      var q,
          s,
          x = this;
      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.

      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {
        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.

      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
      return y;
    };
    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */


    P.multipliedBy = P.times = function (y, b) {
      var c,
          e,
          i,
          j,
          k,
          m,
          xcL,
          xlo,
          xhi,
          ycL,
          ylo,
          yhi,
          zc,
          base,
          sqrtBase,
          x = this,
          xc = x.c,
          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?

      if (!xc || !yc || !xc[0] || !yc[0]) {
        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s; // Return ±Infinity if either is ±Infinity.

          if (!xc || !yc) {
            y.c = y.e = null; // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.

      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.

      for (i = xcL + ycL, zc = []; i--; zc.push(0));

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };
    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */


    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };
    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */


    P.plus = function (y, b) {
      var t,
          x = this,
          a = x.s;
      y = new BigNumber(y, b);
      b = y.s; // Either NaN?

      if (!a || !b) return new BigNumber(NaN); // Signs differ?

      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
          ye = y.e / LOG_BASE,
          xc = x.c,
          yc = y.c;

      if (!xe || !ye) {
        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.

        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.

      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();

        for (; a--; t.push(0));

        t.reverse();
      }

      a = xc.length;
      b = yc.length; // Point xc to the longer array, and b to the shorter length.

      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.

      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible


      return normalise(y, xc, ye);
    };
    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */


    P.precision = P.sd = function (sd, rm) {
      var c,
          n,
          v,
          x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {
        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--); // Add the number of digits of the first element.


        for (v = c[0]; v >= 10; v /= 10, n++);
      }

      if (sd && x.e + 1 > n) n = x.e + 1;
      return n;
    };
    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */


    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };
    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */


    P.squareRoot = P.sqrt = function () {
      var m,
          n,
          r,
          rep,
          t,
          x = this,
          c = x.c,
          s = x.s,
          e = x.e,
          dp = DECIMAL_PLACES + 4,
          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?

      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      } // Initial estimate.


      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.

      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      } // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.


      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0; // Newton-Raphson iteration.

        for (;;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.

            if (n == '9999' || !rep && n == '4999') {
              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {
              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };
    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */


    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }

      return format(this, dp, rm, 1);
    };
    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */


    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }

      return format(this, dp, rm);
    };
    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */


    P.toFormat = function (dp, rm, format) {
      var str,
          x = this;

      if (format == null) {
        if (dp != null && rm && typeof rm == 'object') {
          format = rm;
          rm = null;
        } else if (dp && typeof dp == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if (typeof format != 'object') {
        throw Error(bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
            arr = str.split('.'),
            g1 = +format.groupSize,
            g2 = +format.secondaryGroupSize,
            groupSeparator = format.groupSeparator || '',
            intPart = arr[0],
            fractionPart = arr[1],
            isNeg = x.s < 0,
            intDigits = isNeg ? intPart.slice(1) : intPart,
            len = intDigits.length;
        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);

          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);

          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };
    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */


    P.toFraction = function (md) {
      var d,
          d0,
          d1,
          d2,
          e,
          exp,
          n,
          n0,
          n1,
          q,
          r,
          s,
          x = this,
          xc = x.c;

      if (md != null) {
        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.

        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);
      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc); // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.

      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s); // n0 = d1 = 0

      n0.c[0] = 0;

      for (;;) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1

      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r;
    };
    /*
     * Return the value of this BigNumber converted to a number primitive.
     */


    P.toNumber = function () {
      return +valueOf(this);
    };
    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */


    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };
    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */


    P.toString = function (b) {
      var str,
          n = this,
          s = n.s,
          e = n.e; // Infinity or NaN?

      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };
    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */


    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };

    P._isBigNumber = true;
    if (configObject != null) BigNumber.set(configObject);
    return BigNumber;
  } // PRIVATE HELPER FUNCTIONS
  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  } // Return a coefficient array as a string of base 10 digits.


  function coeffToString(a) {
    var s,
        z,
        i = 1,
        j = a.length,
        r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;

      for (; z--; s = '0' + s);

      r += s;
    } // Determine trailing zeros.


    for (j = r.length; r.charCodeAt(--j) === 48;);

    return r.slice(0, j + 1 || 1);
  } // Compare the value of BigNumbers x and y.


  function compare(x, y) {
    var a,
        b,
        xc = x.c,
        yc = y.c,
        i = x.s,
        j = y.s,
        k = x.e,
        l = y.e; // Either NaN?

    if (!i || !j) return null;
    a = xc && !xc[0];
    b = yc && !yc[0]; // Either zero?

    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?

    if (i != j) return i;
    a = i < 0;
    b = k == l; // Either Infinity?

    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.

    if (!b) return k > l ^ a ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.

    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1; // Compare lengths.


    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }
  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */


  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
    }
  } // Assumes finite n.


  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }

  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
  }

  function toFixedPoint(str, e, z) {
    var len, zs; // Negative exponent?

    if (e < 0) {
      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z);

      str = zs + str; // Positive exponent
    } else {
      len = str.length; // Append zeros.

      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z);

        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  } // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return BigNumber;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // Node.js and other environments that support module.exports.
  } else {}
})(this);

/***/ }),

/***/ "./node_modules/borc/src/constants.js":
/*!********************************************!*\
  !*** ./node_modules/borc/src/constants.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Bignumber = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js").BigNumber;

exports.MT = {
  POS_INT: 0,
  NEG_INT: 1,
  BYTE_STRING: 2,
  UTF8_STRING: 3,
  ARRAY: 4,
  MAP: 5,
  TAG: 6,
  SIMPLE_FLOAT: 7
};
exports.TAG = {
  DATE_STRING: 0,
  DATE_EPOCH: 1,
  POS_BIGINT: 2,
  NEG_BIGINT: 3,
  DECIMAL_FRAC: 4,
  BIGFLOAT: 5,
  BASE64URL_EXPECTED: 21,
  BASE64_EXPECTED: 22,
  BASE16_EXPECTED: 23,
  CBOR: 24,
  URI: 32,
  BASE64URL: 33,
  BASE64: 34,
  REGEXP: 35,
  MIME: 36
};
exports.NUMBYTES = {
  ZERO: 0,
  ONE: 24,
  TWO: 25,
  FOUR: 26,
  EIGHT: 27,
  INDEFINITE: 31
};
exports.SIMPLE = {
  FALSE: 20,
  TRUE: 21,
  NULL: 22,
  UNDEFINED: 23
};
exports.SYMS = {
  NULL: Symbol('null'),
  UNDEFINED: Symbol('undef'),
  PARENT: Symbol('parent'),
  BREAK: Symbol('break'),
  STREAM: Symbol('stream')
};
exports.SHIFT32 = Math.pow(2, 32);
exports.SHIFT16 = Math.pow(2, 16);
exports.MAX_SAFE_HIGH = 0x1fffff;
exports.NEG_ONE = new Bignumber(-1);
exports.TEN = new Bignumber(10);
exports.TWO = new Bignumber(2);
exports.PARENT = {
  ARRAY: 0,
  OBJECT: 1,
  MAP: 2,
  TAG: 3,
  BYTE_STRING: 4,
  UTF8_STRING: 5
};

/***/ }),

/***/ "./node_modules/borc/src/decoder.asm.js":
/*!**********************************************!*\
  !*** ./node_modules/borc/src/decoder.asm.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable */
module.exports = function decodeAsm(stdlib, foreign, buffer) {
  'use asm'; // -- Imports

  var heap = new stdlib.Uint8Array(buffer); // var log = foreign.log

  var pushInt = foreign.pushInt;
  var pushInt32 = foreign.pushInt32;
  var pushInt32Neg = foreign.pushInt32Neg;
  var pushInt64 = foreign.pushInt64;
  var pushInt64Neg = foreign.pushInt64Neg;
  var pushFloat = foreign.pushFloat;
  var pushFloatSingle = foreign.pushFloatSingle;
  var pushFloatDouble = foreign.pushFloatDouble;
  var pushTrue = foreign.pushTrue;
  var pushFalse = foreign.pushFalse;
  var pushUndefined = foreign.pushUndefined;
  var pushNull = foreign.pushNull;
  var pushInfinity = foreign.pushInfinity;
  var pushInfinityNeg = foreign.pushInfinityNeg;
  var pushNaN = foreign.pushNaN;
  var pushNaNNeg = foreign.pushNaNNeg;
  var pushArrayStart = foreign.pushArrayStart;
  var pushArrayStartFixed = foreign.pushArrayStartFixed;
  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
  var pushObjectStart = foreign.pushObjectStart;
  var pushObjectStartFixed = foreign.pushObjectStartFixed;
  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;
  var pushByteString = foreign.pushByteString;
  var pushByteStringStart = foreign.pushByteStringStart;
  var pushUtf8String = foreign.pushUtf8String;
  var pushUtf8StringStart = foreign.pushUtf8StringStart;
  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;
  var pushTagStart = foreign.pushTagStart;
  var pushTagStart4 = foreign.pushTagStart4;
  var pushTagStart8 = foreign.pushTagStart8;
  var pushTagUnassigned = foreign.pushTagUnassigned;
  var pushBreak = foreign.pushBreak;
  var pow = stdlib.Math.pow; // -- Constants
  // -- Mutable Variables

  var offset = 0;
  var inputLength = 0;
  var code = 0; // Decode a cbor string represented as Uint8Array
  // which is allocated on the heap from 0 to inputLength
  //
  // input - Int
  //
  // Returns Code - Int,
  // Success = 0
  // Error > 0

  function parse(input) {
    input = input | 0;
    offset = 0;
    inputLength = input;

    while ((offset | 0) < (inputLength | 0)) {
      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;

      if ((code | 0) > 0) {
        break;
      }
    }

    return code | 0;
  } // -- Helper Function


  function checkOffset(n) {
    n = n | 0;

    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {
      return 0;
    }

    return 1;
  }

  function readUInt16(n) {
    n = n | 0;
    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;
  }

  function readUInt32(n) {
    n = n | 0;
    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;
  } // -- Initial Byte Handlers


  function INT_P(octet) {
    octet = octet | 0;
    pushInt(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function UINT_P_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushInt(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function UINT_P_16(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushInt(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function UINT_P_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function UINT_P_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function INT_N(octet) {
    octet = octet | 0;
    pushInt(-1 - (octet - 32 | 0) | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function UINT_N_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function UINT_N_16(octet) {
    octet = octet | 0;
    var val = 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    val = readUInt16(offset + 1 | 0) | 0;
    pushInt(-1 - (val | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function UINT_N_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function UINT_N_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function BYTE_STRING(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var step = 0;
    step = octet - 64 | 0;

    if (checkOffset(step | 0) | 0) {
      return 1;
    }

    start = offset + 1 | 0;
    end = (offset + 1 | 0) + (step | 0) | 0;
    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_8(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    length = heap[offset + 1 | 0] | 0;
    start = offset + 2 | 0;
    end = (offset + 2 | 0) + (length | 0) | 0;

    if (checkOffset(length + 1 | 0) | 0) {
      return 1;
    }

    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_16(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    length = readUInt16(offset + 1 | 0) | 0;
    start = offset + 3 | 0;
    end = (offset + 3 | 0) + (length | 0) | 0;

    if (checkOffset(length + 2 | 0) | 0) {
      return 1;
    }

    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_32(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    length = readUInt32(offset + 1 | 0) | 0;
    start = offset + 5 | 0;
    end = (offset + 5 | 0) + (length | 0) | 0;

    if (checkOffset(length + 4 | 0) | 0) {
      return 1;
    }

    pushByteString(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function BYTE_STRING_64(octet) {
    // NOT IMPLEMENTED
    octet = octet | 0;
    return 1;
  }

  function BYTE_STRING_BREAK(octet) {
    octet = octet | 0;
    pushByteStringStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function UTF8_STRING(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var step = 0;
    step = octet - 96 | 0;

    if (checkOffset(step | 0) | 0) {
      return 1;
    }

    start = offset + 1 | 0;
    end = (offset + 1 | 0) + (step | 0) | 0;
    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_8(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    length = heap[offset + 1 | 0] | 0;
    start = offset + 2 | 0;
    end = (offset + 2 | 0) + (length | 0) | 0;

    if (checkOffset(length + 1 | 0) | 0) {
      return 1;
    }

    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_16(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    length = readUInt16(offset + 1 | 0) | 0;
    start = offset + 3 | 0;
    end = (offset + 3 | 0) + (length | 0) | 0;

    if (checkOffset(length + 2 | 0) | 0) {
      return 1;
    }

    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_32(octet) {
    octet = octet | 0;
    var start = 0;
    var end = 0;
    var length = 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    length = readUInt32(offset + 1 | 0) | 0;
    start = offset + 5 | 0;
    end = (offset + 5 | 0) + (length | 0) | 0;

    if (checkOffset(length + 4 | 0) | 0) {
      return 1;
    }

    pushUtf8String(start | 0, end | 0);
    offset = end | 0;
    return 0;
  }

  function UTF8_STRING_64(octet) {
    // NOT IMPLEMENTED
    octet = octet | 0;
    return 1;
  }

  function UTF8_STRING_BREAK(octet) {
    octet = octet | 0;
    pushUtf8StringStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function ARRAY(octet) {
    octet = octet | 0;
    pushArrayStartFixed(octet - 128 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function ARRAY_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushArrayStartFixed(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function ARRAY_16(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function ARRAY_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function ARRAY_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function ARRAY_BREAK(octet) {
    octet = octet | 0;
    pushArrayStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function MAP(octet) {
    octet = octet | 0;
    var step = 0;
    step = octet - 160 | 0;

    if (checkOffset(step | 0) | 0) {
      return 1;
    }

    pushObjectStartFixed(step | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function MAP_8(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushObjectStartFixed(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function MAP_16(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function MAP_32(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function MAP_64(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function MAP_BREAK(octet) {
    octet = octet | 0;
    pushObjectStart();
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_KNOWN(octet) {
    octet = octet | 0;
    pushTagStart(octet - 192 | 0 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BIGNUM_POS(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BIGNUM_NEG(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_FRAC(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BIGNUM_FLOAT(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_UNASSIGNED(octet) {
    octet = octet | 0;
    pushTagStart(octet - 192 | 0 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BASE64_URL(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BASE64(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_BASE16(octet) {
    octet = octet | 0;
    pushTagStart(octet | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function TAG_MORE_1(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushTagStart(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function TAG_MORE_2(octet) {
    octet = octet | 0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    pushTagStart(readUInt16(offset + 1 | 0) | 0);
    offset = offset + 3 | 0;
    return 0;
  }

  function TAG_MORE_4(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function TAG_MORE_8(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function SIMPLE_UNASSIGNED(octet) {
    octet = octet | 0;
    pushSimpleUnassigned((octet | 0) - 224 | 0);
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_FALSE(octet) {
    octet = octet | 0;
    pushFalse();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_TRUE(octet) {
    octet = octet | 0;
    pushTrue();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_NULL(octet) {
    octet = octet | 0;
    pushNull();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_UNDEFINED(octet) {
    octet = octet | 0;
    pushUndefined();
    offset = offset + 1 | 0;
    return 0;
  }

  function SIMPLE_BYTE(octet) {
    octet = octet | 0;

    if (checkOffset(1) | 0) {
      return 1;
    }

    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);
    offset = offset + 2 | 0;
    return 0;
  }

  function SIMPLE_FLOAT_HALF(octet) {
    octet = octet | 0;
    var f = 0;
    var g = 0;
    var sign = 1.0;
    var exp = 0.0;
    var mant = 0.0;
    var r = 0.0;

    if (checkOffset(2) | 0) {
      return 1;
    }

    f = heap[offset + 1 | 0] | 0;
    g = heap[offset + 2 | 0] | 0;

    if ((f | 0) & 0x80) {
      sign = -1.0;
    }

    exp = +(((f | 0) & 0x7C) >> 2);
    mant = +(((f | 0) & 0x03) << 8 | g);

    if (+exp == 0.0) {
      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));
    } else if (+exp == 31.0) {
      if (+sign == 1.0) {
        if (+mant > 0.0) {
          pushNaN();
        } else {
          pushInfinity();
        }
      } else {
        if (+mant > 0.0) {
          pushNaNNeg();
        } else {
          pushInfinityNeg();
        }
      }
    } else {
      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));
    }

    offset = offset + 3 | 0;
    return 0;
  }

  function SIMPLE_FLOAT_SINGLE(octet) {
    octet = octet | 0;

    if (checkOffset(4) | 0) {
      return 1;
    }

    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);
    offset = offset + 5 | 0;
    return 0;
  }

  function SIMPLE_FLOAT_DOUBLE(octet) {
    octet = octet | 0;

    if (checkOffset(8) | 0) {
      return 1;
    }

    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);
    offset = offset + 9 | 0;
    return 0;
  }

  function ERROR(octet) {
    octet = octet | 0;
    return 1;
  }

  function BREAK(octet) {
    octet = octet | 0;
    pushBreak();
    offset = offset + 1 | 0;
    return 0;
  } // -- Jump Table


  var jumpTable = [// Integer 0x00..0x17 (0..23)
  INT_P, // 0x00
  INT_P, // 0x01
  INT_P, // 0x02
  INT_P, // 0x03
  INT_P, // 0x04
  INT_P, // 0x05
  INT_P, // 0x06
  INT_P, // 0x07
  INT_P, // 0x08
  INT_P, // 0x09
  INT_P, // 0x0A
  INT_P, // 0x0B
  INT_P, // 0x0C
  INT_P, // 0x0D
  INT_P, // 0x0E
  INT_P, // 0x0F
  INT_P, // 0x10
  INT_P, // 0x11
  INT_P, // 0x12
  INT_P, // 0x13
  INT_P, // 0x14
  INT_P, // 0x15
  INT_P, // 0x16
  INT_P, // 0x17
  // Unsigned integer (one-byte uint8_t follows)
  UINT_P_8, // 0x18
  // Unsigned integer (two-byte uint16_t follows)
  UINT_P_16, // 0x19
  // Unsigned integer (four-byte uint32_t follows)
  UINT_P_32, // 0x1a
  // Unsigned integer (eight-byte uint64_t follows)
  UINT_P_64, // 0x1b
  ERROR, // 0x1c
  ERROR, // 0x1d
  ERROR, // 0x1e
  ERROR, // 0x1f
  // Negative integer -1-0x00..-1-0x17 (-1..-24)
  INT_N, // 0x20
  INT_N, // 0x21
  INT_N, // 0x22
  INT_N, // 0x23
  INT_N, // 0x24
  INT_N, // 0x25
  INT_N, // 0x26
  INT_N, // 0x27
  INT_N, // 0x28
  INT_N, // 0x29
  INT_N, // 0x2A
  INT_N, // 0x2B
  INT_N, // 0x2C
  INT_N, // 0x2D
  INT_N, // 0x2E
  INT_N, // 0x2F
  INT_N, // 0x30
  INT_N, // 0x31
  INT_N, // 0x32
  INT_N, // 0x33
  INT_N, // 0x34
  INT_N, // 0x35
  INT_N, // 0x36
  INT_N, // 0x37
  // Negative integer -1-n (one-byte uint8_t for n follows)
  UINT_N_8, // 0x38
  // Negative integer -1-n (two-byte uint16_t for n follows)
  UINT_N_16, // 0x39
  // Negative integer -1-n (four-byte uint32_t for nfollows)
  UINT_N_32, // 0x3a
  // Negative integer -1-n (eight-byte uint64_t for n follows)
  UINT_N_64, // 0x3b
  ERROR, // 0x3c
  ERROR, // 0x3d
  ERROR, // 0x3e
  ERROR, // 0x3f
  // byte string (0x00..0x17 bytes follow)
  BYTE_STRING, // 0x40
  BYTE_STRING, // 0x41
  BYTE_STRING, // 0x42
  BYTE_STRING, // 0x43
  BYTE_STRING, // 0x44
  BYTE_STRING, // 0x45
  BYTE_STRING, // 0x46
  BYTE_STRING, // 0x47
  BYTE_STRING, // 0x48
  BYTE_STRING, // 0x49
  BYTE_STRING, // 0x4A
  BYTE_STRING, // 0x4B
  BYTE_STRING, // 0x4C
  BYTE_STRING, // 0x4D
  BYTE_STRING, // 0x4E
  BYTE_STRING, // 0x4F
  BYTE_STRING, // 0x50
  BYTE_STRING, // 0x51
  BYTE_STRING, // 0x52
  BYTE_STRING, // 0x53
  BYTE_STRING, // 0x54
  BYTE_STRING, // 0x55
  BYTE_STRING, // 0x56
  BYTE_STRING, // 0x57
  // byte string (one-byte uint8_t for n, and then n bytes follow)
  BYTE_STRING_8, // 0x58
  // byte string (two-byte uint16_t for n, and then n bytes follow)
  BYTE_STRING_16, // 0x59
  // byte string (four-byte uint32_t for n, and then n bytes follow)
  BYTE_STRING_32, // 0x5a
  // byte string (eight-byte uint64_t for n, and then n bytes follow)
  BYTE_STRING_64, // 0x5b
  ERROR, // 0x5c
  ERROR, // 0x5d
  ERROR, // 0x5e
  // byte string, byte strings follow, terminated by "break"
  BYTE_STRING_BREAK, // 0x5f
  // UTF-8 string (0x00..0x17 bytes follow)
  UTF8_STRING, // 0x60
  UTF8_STRING, // 0x61
  UTF8_STRING, // 0x62
  UTF8_STRING, // 0x63
  UTF8_STRING, // 0x64
  UTF8_STRING, // 0x65
  UTF8_STRING, // 0x66
  UTF8_STRING, // 0x67
  UTF8_STRING, // 0x68
  UTF8_STRING, // 0x69
  UTF8_STRING, // 0x6A
  UTF8_STRING, // 0x6B
  UTF8_STRING, // 0x6C
  UTF8_STRING, // 0x6D
  UTF8_STRING, // 0x6E
  UTF8_STRING, // 0x6F
  UTF8_STRING, // 0x70
  UTF8_STRING, // 0x71
  UTF8_STRING, // 0x72
  UTF8_STRING, // 0x73
  UTF8_STRING, // 0x74
  UTF8_STRING, // 0x75
  UTF8_STRING, // 0x76
  UTF8_STRING, // 0x77
  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)
  UTF8_STRING_8, // 0x78
  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)
  UTF8_STRING_16, // 0x79
  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)
  UTF8_STRING_32, // 0x7a
  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)
  UTF8_STRING_64, // 0x7b
  // UTF-8 string, UTF-8 strings follow, terminated by "break"
  ERROR, // 0x7c
  ERROR, // 0x7d
  ERROR, // 0x7e
  UTF8_STRING_BREAK, // 0x7f
  // array (0x00..0x17 data items follow)
  ARRAY, // 0x80
  ARRAY, // 0x81
  ARRAY, // 0x82
  ARRAY, // 0x83
  ARRAY, // 0x84
  ARRAY, // 0x85
  ARRAY, // 0x86
  ARRAY, // 0x87
  ARRAY, // 0x88
  ARRAY, // 0x89
  ARRAY, // 0x8A
  ARRAY, // 0x8B
  ARRAY, // 0x8C
  ARRAY, // 0x8D
  ARRAY, // 0x8E
  ARRAY, // 0x8F
  ARRAY, // 0x90
  ARRAY, // 0x91
  ARRAY, // 0x92
  ARRAY, // 0x93
  ARRAY, // 0x94
  ARRAY, // 0x95
  ARRAY, // 0x96
  ARRAY, // 0x97
  // array (one-byte uint8_t fo, and then n data items follow)
  ARRAY_8, // 0x98
  // array (two-byte uint16_t for n, and then n data items follow)
  ARRAY_16, // 0x99
  // array (four-byte uint32_t for n, and then n data items follow)
  ARRAY_32, // 0x9a
  // array (eight-byte uint64_t for n, and then n data items follow)
  ARRAY_64, // 0x9b
  // array, data items follow, terminated by "break"
  ERROR, // 0x9c
  ERROR, // 0x9d
  ERROR, // 0x9e
  ARRAY_BREAK, // 0x9f
  // map (0x00..0x17 pairs of data items follow)
  MAP, // 0xa0
  MAP, // 0xa1
  MAP, // 0xa2
  MAP, // 0xa3
  MAP, // 0xa4
  MAP, // 0xa5
  MAP, // 0xa6
  MAP, // 0xa7
  MAP, // 0xa8
  MAP, // 0xa9
  MAP, // 0xaA
  MAP, // 0xaB
  MAP, // 0xaC
  MAP, // 0xaD
  MAP, // 0xaE
  MAP, // 0xaF
  MAP, // 0xb0
  MAP, // 0xb1
  MAP, // 0xb2
  MAP, // 0xb3
  MAP, // 0xb4
  MAP, // 0xb5
  MAP, // 0xb6
  MAP, // 0xb7
  // map (one-byte uint8_t for n, and then n pairs of data items follow)
  MAP_8, // 0xb8
  // map (two-byte uint16_t for n, and then n pairs of data items follow)
  MAP_16, // 0xb9
  // map (four-byte uint32_t for n, and then n pairs of data items follow)
  MAP_32, // 0xba
  // map (eight-byte uint64_t for n, and then n pairs of data items follow)
  MAP_64, // 0xbb
  ERROR, // 0xbc
  ERROR, // 0xbd
  ERROR, // 0xbe
  // map, pairs of data items follow, terminated by "break"
  MAP_BREAK, // 0xbf
  // Text-based date/time (data item follows; see Section 2.4.1)
  TAG_KNOWN, // 0xc0
  // Epoch-based date/time (data item follows; see Section 2.4.1)
  TAG_KNOWN, // 0xc1
  // Positive bignum (data item "byte string" follows)
  TAG_KNOWN, // 0xc2
  // Negative bignum (data item "byte string" follows)
  TAG_KNOWN, // 0xc3
  // Decimal Fraction (data item "array" follows; see Section 2.4.3)
  TAG_KNOWN, // 0xc4
  // Bigfloat (data item "array" follows; see Section 2.4.3)
  TAG_KNOWN, // 0xc5
  // (tagged item)
  TAG_UNASSIGNED, // 0xc6
  TAG_UNASSIGNED, // 0xc7
  TAG_UNASSIGNED, // 0xc8
  TAG_UNASSIGNED, // 0xc9
  TAG_UNASSIGNED, // 0xca
  TAG_UNASSIGNED, // 0xcb
  TAG_UNASSIGNED, // 0xcc
  TAG_UNASSIGNED, // 0xcd
  TAG_UNASSIGNED, // 0xce
  TAG_UNASSIGNED, // 0xcf
  TAG_UNASSIGNED, // 0xd0
  TAG_UNASSIGNED, // 0xd1
  TAG_UNASSIGNED, // 0xd2
  TAG_UNASSIGNED, // 0xd3
  TAG_UNASSIGNED, // 0xd4
  // Expected Conversion (data item follows; see Section 2.4.4.2)
  TAG_UNASSIGNED, // 0xd5
  TAG_UNASSIGNED, // 0xd6
  TAG_UNASSIGNED, // 0xd7
  // (more tagged items, 1/2/4/8 bytes and then a data item follow)
  TAG_MORE_1, // 0xd8
  TAG_MORE_2, // 0xd9
  TAG_MORE_4, // 0xda
  TAG_MORE_8, // 0xdb
  ERROR, // 0xdc
  ERROR, // 0xdd
  ERROR, // 0xde
  ERROR, // 0xdf
  // (simple value)
  SIMPLE_UNASSIGNED, // 0xe0
  SIMPLE_UNASSIGNED, // 0xe1
  SIMPLE_UNASSIGNED, // 0xe2
  SIMPLE_UNASSIGNED, // 0xe3
  SIMPLE_UNASSIGNED, // 0xe4
  SIMPLE_UNASSIGNED, // 0xe5
  SIMPLE_UNASSIGNED, // 0xe6
  SIMPLE_UNASSIGNED, // 0xe7
  SIMPLE_UNASSIGNED, // 0xe8
  SIMPLE_UNASSIGNED, // 0xe9
  SIMPLE_UNASSIGNED, // 0xea
  SIMPLE_UNASSIGNED, // 0xeb
  SIMPLE_UNASSIGNED, // 0xec
  SIMPLE_UNASSIGNED, // 0xed
  SIMPLE_UNASSIGNED, // 0xee
  SIMPLE_UNASSIGNED, // 0xef
  SIMPLE_UNASSIGNED, // 0xf0
  SIMPLE_UNASSIGNED, // 0xf1
  SIMPLE_UNASSIGNED, // 0xf2
  SIMPLE_UNASSIGNED, // 0xf3
  // False
  SIMPLE_FALSE, // 0xf4
  // True
  SIMPLE_TRUE, // 0xf5
  // Null
  SIMPLE_NULL, // 0xf6
  // Undefined
  SIMPLE_UNDEFINED, // 0xf7
  // (simple value, one byte follows)
  SIMPLE_BYTE, // 0xf8
  // Half-Precision Float (two-byte IEEE 754)
  SIMPLE_FLOAT_HALF, // 0xf9
  // Single-Precision Float (four-byte IEEE 754)
  SIMPLE_FLOAT_SINGLE, // 0xfa
  // Double-Precision Float (eight-byte IEEE 754)
  SIMPLE_FLOAT_DOUBLE, // 0xfb
  ERROR, // 0xfc
  ERROR, // 0xfd
  ERROR, // 0xfe
  // "break" stop code
  BREAK // 0xff
  ]; // --

  return {
    parse: parse
  };
};

/***/ }),

/***/ "./node_modules/borc/src/decoder.js":
/*!******************************************!*\
  !*** ./node_modules/borc/src/decoder.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

const {
  Buffer
} = __webpack_require__(/*! buffer */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");

const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");

const Bignumber = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js").BigNumber;

const parser = __webpack_require__(/*! ./decoder.asm */ "./node_modules/borc/src/decoder.asm.js");

const utils = __webpack_require__(/*! ./utils */ "./node_modules/borc/src/utils.js");

const c = __webpack_require__(/*! ./constants */ "./node_modules/borc/src/constants.js");

const Simple = __webpack_require__(/*! ./simple */ "./node_modules/borc/src/simple.js");

const Tagged = __webpack_require__(/*! ./tagged */ "./node_modules/borc/src/tagged.js");

const {
  URL
} = __webpack_require__(/*! iso-url */ "./node_modules/iso-url/index.js");
/**
 * Transform binary cbor data into JavaScript objects.
 */


class Decoder {
  /**
   * @param {Object} [opts={}]
   * @param {number} [opts.size=65536] - Size of the allocated heap.
   */
  constructor(opts) {
    opts = opts || {};

    if (!opts.size || opts.size < 0x10000) {
      opts.size = 0x10000;
    } else {
      // Ensure the size is a power of 2
      opts.size = utils.nextPowerOf2(opts.size);
    } // Heap use to share the input with the parser


    this._heap = new ArrayBuffer(opts.size);
    this._heap8 = new Uint8Array(this._heap);
    this._buffer = Buffer.from(this._heap);

    this._reset(); // Known tags


    this._knownTags = Object.assign({
      0: val => new Date(val),
      1: val => new Date(val * 1000),
      2: val => utils.arrayBufferToBignumber(val),
      3: val => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),
      4: v => {
        // const v = new Uint8Array(val)
        return c.TEN.pow(v[0]).times(v[1]);
      },
      5: v => {
        // const v = new Uint8Array(val)
        return c.TWO.pow(v[0]).times(v[1]);
      },
      32: val => new URL(val),
      35: val => new RegExp(val)
    }, opts.tags); // Initialize asm based parser

    this.parser = parser(global, {
      // eslint-disable-next-line no-console
      log: console.log.bind(console),
      pushInt: this.pushInt.bind(this),
      pushInt32: this.pushInt32.bind(this),
      pushInt32Neg: this.pushInt32Neg.bind(this),
      pushInt64: this.pushInt64.bind(this),
      pushInt64Neg: this.pushInt64Neg.bind(this),
      pushFloat: this.pushFloat.bind(this),
      pushFloatSingle: this.pushFloatSingle.bind(this),
      pushFloatDouble: this.pushFloatDouble.bind(this),
      pushTrue: this.pushTrue.bind(this),
      pushFalse: this.pushFalse.bind(this),
      pushUndefined: this.pushUndefined.bind(this),
      pushNull: this.pushNull.bind(this),
      pushInfinity: this.pushInfinity.bind(this),
      pushInfinityNeg: this.pushInfinityNeg.bind(this),
      pushNaN: this.pushNaN.bind(this),
      pushNaNNeg: this.pushNaNNeg.bind(this),
      pushArrayStart: this.pushArrayStart.bind(this),
      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
      pushObjectStart: this.pushObjectStart.bind(this),
      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
      pushByteString: this.pushByteString.bind(this),
      pushByteStringStart: this.pushByteStringStart.bind(this),
      pushUtf8String: this.pushUtf8String.bind(this),
      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
      pushTagUnassigned: this.pushTagUnassigned.bind(this),
      pushTagStart: this.pushTagStart.bind(this),
      pushTagStart4: this.pushTagStart4.bind(this),
      pushTagStart8: this.pushTagStart8.bind(this),
      pushBreak: this.pushBreak.bind(this)
    }, this._heap);
  }

  get _depth() {
    return this._parents.length;
  }

  get _currentParent() {
    return this._parents[this._depth - 1];
  }

  get _ref() {
    return this._currentParent.ref;
  } // Finish the current parent


  _closeParent() {
    var p = this._parents.pop();

    if (p.length > 0) {
      throw new Error(`Missing ${p.length} elements`);
    }

    switch (p.type) {
      case c.PARENT.TAG:
        this._push(this.createTag(p.ref[0], p.ref[1]));

        break;

      case c.PARENT.BYTE_STRING:
        this._push(this.createByteString(p.ref, p.length));

        break;

      case c.PARENT.UTF8_STRING:
        this._push(this.createUtf8String(p.ref, p.length));

        break;

      case c.PARENT.MAP:
        if (p.values % 2 > 0) {
          throw new Error('Odd number of elements in the map');
        }

        this._push(this.createMap(p.ref, p.length));

        break;

      case c.PARENT.OBJECT:
        if (p.values % 2 > 0) {
          throw new Error('Odd number of elements in the map');
        }

        this._push(this.createObject(p.ref, p.length));

        break;

      case c.PARENT.ARRAY:
        this._push(this.createArray(p.ref, p.length));

        break;

      default:
        break;
    }

    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {
      this._dec();
    }
  } // Reduce the expected length of the current parent by one


  _dec() {
    const p = this._currentParent; // The current parent does not know the epxected child length

    if (p.length < 0) {
      return;
    }

    p.length--; // All children were seen, we can close the current parent

    if (p.length === 0) {
      this._closeParent();
    }
  } // Push any value to the current parent


  _push(val, hasChildren) {
    const p = this._currentParent;
    p.values++;

    switch (p.type) {
      case c.PARENT.ARRAY:
      case c.PARENT.BYTE_STRING:
      case c.PARENT.UTF8_STRING:
        if (p.length > -1) {
          this._ref[this._ref.length - p.length] = val;
        } else {
          this._ref.push(val);
        }

        this._dec();

        break;

      case c.PARENT.OBJECT:
        if (p.tmpKey != null) {
          this._ref[p.tmpKey] = val;
          p.tmpKey = null;

          this._dec();
        } else {
          p.tmpKey = val;

          if (typeof p.tmpKey !== 'string') {
            // too bad, convert to a Map
            p.type = c.PARENT.MAP;
            p.ref = utils.buildMap(p.ref);
          }
        }

        break;

      case c.PARENT.MAP:
        if (p.tmpKey != null) {
          this._ref.set(p.tmpKey, val);

          p.tmpKey = null;

          this._dec();
        } else {
          p.tmpKey = val;
        }

        break;

      case c.PARENT.TAG:
        this._ref.push(val);

        if (!hasChildren) {
          this._dec();
        }

        break;

      default:
        throw new Error('Unknown parent type');
    }
  } // Create a new parent in the parents list


  _createParent(obj, type, len) {
    this._parents[this._depth] = {
      type: type,
      length: len,
      ref: obj,
      values: 0,
      tmpKey: null
    };
  } // Reset all state back to the beginning, also used for initiatlization


  _reset() {
    this._res = [];
    this._parents = [{
      type: c.PARENT.ARRAY,
      length: -1,
      ref: this._res,
      values: 0,
      tmpKey: null
    }];
  } // -- Interface to customize deoding behaviour


  createTag(tagNumber, value) {
    const typ = this._knownTags[tagNumber];

    if (!typ) {
      return new Tagged(tagNumber, value);
    }

    return typ(value);
  }

  createMap(obj, len) {
    return obj;
  }

  createObject(obj, len) {
    return obj;
  }

  createArray(arr, len) {
    return arr;
  }

  createByteString(raw, len) {
    return Buffer.concat(raw);
  }

  createByteStringFromHeap(start, end) {
    if (start === end) {
      return Buffer.alloc(0);
    }

    return Buffer.from(this._heap.slice(start, end));
  }

  createInt(val) {
    return val;
  }

  createInt32(f, g) {
    return utils.buildInt32(f, g);
  }

  createInt64(f1, f2, g1, g2) {
    return utils.buildInt64(f1, f2, g1, g2);
  }

  createFloat(val) {
    return val;
  }

  createFloatSingle(a, b, c, d) {
    return ieee754.read([a, b, c, d], 0, false, 23, 4);
  }

  createFloatDouble(a, b, c, d, e, f, g, h) {
    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8);
  }

  createInt32Neg(f, g) {
    return -1 - utils.buildInt32(f, g);
  }

  createInt64Neg(f1, f2, g1, g2) {
    const f = utils.buildInt32(f1, f2);
    const g = utils.buildInt32(g1, g2);

    if (f > c.MAX_SAFE_HIGH) {
      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g));
    }

    return -1 - (f * c.SHIFT32 + g);
  }

  createTrue() {
    return true;
  }

  createFalse() {
    return false;
  }

  createNull() {
    return null;
  }

  createUndefined() {
    return undefined;
  }

  createInfinity() {
    return Infinity;
  }

  createInfinityNeg() {
    return -Infinity;
  }

  createNaN() {
    return NaN;
  }

  createNaNNeg() {
    return -NaN;
  }

  createUtf8String(raw, len) {
    return raw.join('');
  }

  createUtf8StringFromHeap(start, end) {
    if (start === end) {
      return '';
    }

    return this._buffer.toString('utf8', start, end);
  }

  createSimpleUnassigned(val) {
    return new Simple(val);
  } // -- Interface for decoder.asm.js


  pushInt(val) {
    this._push(this.createInt(val));
  }

  pushInt32(f, g) {
    this._push(this.createInt32(f, g));
  }

  pushInt64(f1, f2, g1, g2) {
    this._push(this.createInt64(f1, f2, g1, g2));
  }

  pushFloat(val) {
    this._push(this.createFloat(val));
  }

  pushFloatSingle(a, b, c, d) {
    this._push(this.createFloatSingle(a, b, c, d));
  }

  pushFloatDouble(a, b, c, d, e, f, g, h) {
    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));
  }

  pushInt32Neg(f, g) {
    this._push(this.createInt32Neg(f, g));
  }

  pushInt64Neg(f1, f2, g1, g2) {
    this._push(this.createInt64Neg(f1, f2, g1, g2));
  }

  pushTrue() {
    this._push(this.createTrue());
  }

  pushFalse() {
    this._push(this.createFalse());
  }

  pushNull() {
    this._push(this.createNull());
  }

  pushUndefined() {
    this._push(this.createUndefined());
  }

  pushInfinity() {
    this._push(this.createInfinity());
  }

  pushInfinityNeg() {
    this._push(this.createInfinityNeg());
  }

  pushNaN() {
    this._push(this.createNaN());
  }

  pushNaNNeg() {
    this._push(this.createNaNNeg());
  }

  pushArrayStart() {
    this._createParent([], c.PARENT.ARRAY, -1);
  }

  pushArrayStartFixed(len) {
    this._createArrayStartFixed(len);
  }

  pushArrayStartFixed32(len1, len2) {
    const len = utils.buildInt32(len1, len2);

    this._createArrayStartFixed(len);
  }

  pushArrayStartFixed64(len1, len2, len3, len4) {
    const len = utils.buildInt64(len1, len2, len3, len4);

    this._createArrayStartFixed(len);
  }

  pushObjectStart() {
    this._createObjectStartFixed(-1);
  }

  pushObjectStartFixed(len) {
    this._createObjectStartFixed(len);
  }

  pushObjectStartFixed32(len1, len2) {
    const len = utils.buildInt32(len1, len2);

    this._createObjectStartFixed(len);
  }

  pushObjectStartFixed64(len1, len2, len3, len4) {
    const len = utils.buildInt64(len1, len2, len3, len4);

    this._createObjectStartFixed(len);
  }

  pushByteStringStart() {
    this._parents[this._depth] = {
      type: c.PARENT.BYTE_STRING,
      length: -1,
      ref: [],
      values: 0,
      tmpKey: null
    };
  }

  pushByteString(start, end) {
    this._push(this.createByteStringFromHeap(start, end));
  }

  pushUtf8StringStart() {
    this._parents[this._depth] = {
      type: c.PARENT.UTF8_STRING,
      length: -1,
      ref: [],
      values: 0,
      tmpKey: null
    };
  }

  pushUtf8String(start, end) {
    this._push(this.createUtf8StringFromHeap(start, end));
  }

  pushSimpleUnassigned(val) {
    this._push(this.createSimpleUnassigned(val));
  }

  pushTagStart(tag) {
    this._parents[this._depth] = {
      type: c.PARENT.TAG,
      length: 1,
      ref: [tag]
    };
  }

  pushTagStart4(f, g) {
    this.pushTagStart(utils.buildInt32(f, g));
  }

  pushTagStart8(f1, f2, g1, g2) {
    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2));
  }

  pushTagUnassigned(tagNumber) {
    this._push(this.createTag(tagNumber));
  }

  pushBreak() {
    if (this._currentParent.length > -1) {
      throw new Error('Unexpected break');
    }

    this._closeParent();
  }

  _createObjectStartFixed(len) {
    if (len === 0) {
      this._push(this.createObject({}));

      return;
    }

    this._createParent({}, c.PARENT.OBJECT, len);
  }

  _createArrayStartFixed(len) {
    if (len === 0) {
      this._push(this.createArray([]));

      return;
    }

    this._createParent(new Array(len), c.PARENT.ARRAY, len);
  }

  _decode(input) {
    if (input.byteLength === 0) {
      throw new Error('Input too short');
    }

    this._reset();

    this._heap8.set(input);

    const code = this.parser.parse(input.byteLength);

    if (this._depth > 1) {
      while (this._currentParent.length === 0) {
        this._closeParent();
      }

      if (this._depth > 1) {
        throw new Error('Undeterminated nesting');
      }
    }

    if (code > 0) {
      throw new Error('Failed to parse');
    }

    if (this._res.length === 0) {
      throw new Error('No valid result');
    }
  } // -- Public Interface


  decodeFirst(input) {
    this._decode(input);

    return this._res[0];
  }

  decodeAll(input) {
    this._decode(input);

    return this._res;
  }
  /**
   * Decode the first cbor object.
   *
   * @param {Buffer|string} input
   * @param {string} [enc='hex'] - Encoding used if a string is passed.
   * @returns {*}
   */


  static decode(input, enc) {
    if (typeof input === 'string') {
      input = Buffer.from(input, enc || 'hex');
    }

    const dec = new Decoder({
      size: input.length
    });
    return dec.decodeFirst(input);
  }
  /**
   * Decode all cbor objects.
   *
   * @param {Buffer|string} input
   * @param {string} [enc='hex'] - Encoding used if a string is passed.
   * @returns {Array<*>}
   */


  static decodeAll(input, enc) {
    if (typeof input === 'string') {
      input = Buffer.from(input, enc || 'hex');
    }

    const dec = new Decoder({
      size: input.length
    });
    return dec.decodeAll(input);
  }

}

Decoder.decodeFirst = Decoder.decode;
module.exports = Decoder;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/borc/src/diagnose.js":
/*!*******************************************!*\
  !*** ./node_modules/borc/src/diagnose.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(/*! buffer */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");

const Decoder = __webpack_require__(/*! ./decoder */ "./node_modules/borc/src/decoder.js");

const utils = __webpack_require__(/*! ./utils */ "./node_modules/borc/src/utils.js");
/**
 * Output the diagnostic format from a stream of CBOR bytes.
 *
 */


class Diagnose extends Decoder {
  createTag(tagNumber, value) {
    return `${tagNumber}(${value})`;
  }

  createInt(val) {
    return super.createInt(val).toString();
  }

  createInt32(f, g) {
    return super.createInt32(f, g).toString();
  }

  createInt64(f1, f2, g1, g2) {
    return super.createInt64(f1, f2, g1, g2).toString();
  }

  createInt32Neg(f, g) {
    return super.createInt32Neg(f, g).toString();
  }

  createInt64Neg(f1, f2, g1, g2) {
    return super.createInt64Neg(f1, f2, g1, g2).toString();
  }

  createTrue() {
    return 'true';
  }

  createFalse() {
    return 'false';
  }

  createFloat(val) {
    const fl = super.createFloat(val);

    if (utils.isNegativeZero(val)) {
      return '-0_1';
    }

    return `${fl}_1`;
  }

  createFloatSingle(a, b, c, d) {
    const fl = super.createFloatSingle(a, b, c, d);
    return `${fl}_2`;
  }

  createFloatDouble(a, b, c, d, e, f, g, h) {
    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);
    return `${fl}_3`;
  }

  createByteString(raw, len) {
    const val = raw.join(', ');

    if (len === -1) {
      return `(_ ${val})`;
    }

    return `h'${val}`;
  }

  createByteStringFromHeap(start, end) {
    const val = Buffer.from(super.createByteStringFromHeap(start, end)).toString('hex');
    return `h'${val}'`;
  }

  createInfinity() {
    return 'Infinity_1';
  }

  createInfinityNeg() {
    return '-Infinity_1';
  }

  createNaN() {
    return 'NaN_1';
  }

  createNaNNeg() {
    return '-NaN_1';
  }

  createNull() {
    return 'null';
  }

  createUndefined() {
    return 'undefined';
  }

  createSimpleUnassigned(val) {
    return `simple(${val})`;
  }

  createArray(arr, len) {
    const val = super.createArray(arr, len);

    if (len === -1) {
      // indefinite
      return `[_ ${val.join(', ')}]`;
    }

    return `[${val.join(', ')}]`;
  }

  createMap(map, len) {
    const val = super.createMap(map);
    const list = Array.from(val.keys()).reduce(collectObject(val), '');

    if (len === -1) {
      return `{_ ${list}}`;
    }

    return `{${list}}`;
  }

  createObject(obj, len) {
    const val = super.createObject(obj);
    const map = Object.keys(val).reduce(collectObject(val), '');

    if (len === -1) {
      return `{_ ${map}}`;
    }

    return `{${map}}`;
  }

  createUtf8String(raw, len) {
    const val = raw.join(', ');

    if (len === -1) {
      return `(_ ${val})`;
    }

    return `"${val}"`;
  }

  createUtf8StringFromHeap(start, end) {
    const val = Buffer.from(super.createUtf8StringFromHeap(start, end)).toString('utf8');
    return `"${val}"`;
  }

  static diagnose(input, enc) {
    if (typeof input === 'string') {
      input = Buffer.from(input, enc || 'hex');
    }

    const dec = new Diagnose();
    return dec.decodeFirst(input);
  }

}

module.exports = Diagnose;

function collectObject(val) {
  return (acc, key) => {
    if (acc) {
      return `${acc}, ${key}: ${val[key]}`;
    }

    return `${key}: ${val[key]}`;
  };
}

/***/ }),

/***/ "./node_modules/borc/src/encoder.js":
/*!******************************************!*\
  !*** ./node_modules/borc/src/encoder.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(/*! buffer */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");

const {
  URL
} = __webpack_require__(/*! iso-url */ "./node_modules/iso-url/index.js");

const Bignumber = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js").BigNumber;

const utils = __webpack_require__(/*! ./utils */ "./node_modules/borc/src/utils.js");

const constants = __webpack_require__(/*! ./constants */ "./node_modules/borc/src/constants.js");

const MT = constants.MT;
const NUMBYTES = constants.NUMBYTES;
const SHIFT32 = constants.SHIFT32;
const SYMS = constants.SYMS;
const TAG = constants.TAG;
const HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;
const FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;
const DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;
const TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;
const FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;
const UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;
const NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;
const MAXINT_BN = new Bignumber('0x20000000000000');
const BUF_NAN = Buffer.from('f97e00', 'hex');
const BUF_INF_NEG = Buffer.from('f9fc00', 'hex');
const BUF_INF_POS = Buffer.from('f97c00', 'hex');

function toType(obj) {
  // [object Type]
  // --------8---1
  return {}.toString.call(obj).slice(8, -1);
}
/**
 * Transform JavaScript values into CBOR bytes
 *
 */


class Encoder {
  /**
   * @param {Object} [options={}]
   * @param {function(Buffer)} options.stream
   */
  constructor(options) {
    options = options || {};
    this.streaming = typeof options.stream === 'function';
    this.onData = options.stream;
    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];
    const addTypes = options.genTypes || [];
    const len = addTypes.length;

    for (let i = 0; i < len; i++) {
      this.addSemanticType(addTypes[i][0], addTypes[i][1]);
    }

    this._reset();
  }

  addSemanticType(type, fun) {
    const len = this.semanticTypes.length;

    for (let i = 0; i < len; i++) {
      const typ = this.semanticTypes[i][0];

      if (typ === type) {
        const old = this.semanticTypes[i][1];
        this.semanticTypes[i][1] = fun;
        return old;
      }
    }

    this.semanticTypes.push([type, fun]);
    return null;
  }

  push(val) {
    if (!val) {
      return true;
    }

    this.result[this.offset] = val;
    this.resultMethod[this.offset] = 0;
    this.resultLength[this.offset] = val.length;
    this.offset++;

    if (this.streaming) {
      this.onData(this.finalize());
    }

    return true;
  }

  pushWrite(val, method, len) {
    this.result[this.offset] = val;
    this.resultMethod[this.offset] = method;
    this.resultLength[this.offset] = len;
    this.offset++;

    if (this.streaming) {
      this.onData(this.finalize());
    }

    return true;
  }

  _pushUInt8(val) {
    return this.pushWrite(val, 1, 1);
  }

  _pushUInt16BE(val) {
    return this.pushWrite(val, 2, 2);
  }

  _pushUInt32BE(val) {
    return this.pushWrite(val, 3, 4);
  }

  _pushDoubleBE(val) {
    return this.pushWrite(val, 4, 8);
  }

  _pushNaN() {
    return this.push(BUF_NAN);
  }

  _pushInfinity(obj) {
    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;
    return this.push(half);
  }

  _pushFloat(obj) {
    const b2 = Buffer.allocUnsafe(2);

    if (utils.writeHalf(b2, obj)) {
      if (utils.parseHalf(b2) === obj) {
        return this._pushUInt8(HALF) && this.push(b2);
      }
    }

    const b4 = Buffer.allocUnsafe(4);
    b4.writeFloatBE(obj, 0);

    if (b4.readFloatBE(0) === obj) {
      return this._pushUInt8(FLOAT) && this.push(b4);
    }

    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);
  }

  _pushInt(obj, mt, orig) {
    const m = mt << 5;

    if (obj < 24) {
      return this._pushUInt8(m | obj);
    }

    if (obj <= 0xff) {
      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);
    }

    if (obj <= 0xffff) {
      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);
    }

    if (obj <= 0xffffffff) {
      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);
    }

    if (obj <= Number.MAX_SAFE_INTEGER) {
      return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);
    }

    if (mt === MT.NEG_INT) {
      return this._pushFloat(orig);
    }

    return this._pushFloat(obj);
  }

  _pushIntNum(obj) {
    if (obj < 0) {
      return this._pushInt(-obj - 1, MT.NEG_INT, obj);
    } else {
      return this._pushInt(obj, MT.POS_INT);
    }
  }

  _pushNumber(obj) {
    switch (false) {
      case obj === obj:
        // eslint-disable-line
        return this._pushNaN(obj);

      case isFinite(obj):
        return this._pushInfinity(obj);

      case obj % 1 !== 0:
        return this._pushIntNum(obj);

      default:
        return this._pushFloat(obj);
    }
  }

  _pushString(obj) {
    const len = Buffer.byteLength(obj, 'utf8');
    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);
  }

  _pushBoolean(obj) {
    return this._pushUInt8(obj ? TRUE : FALSE);
  }

  _pushUndefined(obj) {
    return this._pushUInt8(UNDEFINED);
  }

  _pushArray(gen, obj) {
    const len = obj.length;

    if (!gen._pushInt(len, MT.ARRAY)) {
      return false;
    }

    for (let j = 0; j < len; j++) {
      if (!gen.pushAny(obj[j])) {
        return false;
      }
    }

    return true;
  }

  _pushTag(tag) {
    return this._pushInt(tag, MT.TAG);
  }

  _pushDate(gen, obj) {
    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in
    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is
    // still allowed to encode fractions of seconds which can be achieved by
    // changing overwriting the encode function for Date objects.
    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));
  }

  _pushBuffer(gen, obj) {
    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);
  }

  _pushNoFilter(gen, obj) {
    return gen._pushBuffer(gen, obj.slice());
  }

  _pushRegexp(gen, obj) {
    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);
  }

  _pushSet(gen, obj) {
    if (!gen._pushInt(obj.size, MT.ARRAY)) {
      return false;
    }

    for (const x of obj) {
      if (!gen.pushAny(x)) {
        return false;
      }
    }

    return true;
  }

  _pushUrl(gen, obj) {
    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());
  }

  _pushBigint(obj) {
    let tag = TAG.POS_BIGINT;

    if (obj.isNegative()) {
      obj = obj.negated().minus(1);
      tag = TAG.NEG_BIGINT;
    }

    let str = obj.toString(16);

    if (str.length % 2) {
      str = '0' + str;
    }

    const buf = Buffer.from(str, 'hex');
    return this._pushTag(tag) && this._pushBuffer(this, buf);
  }

  _pushBigNumber(gen, obj) {
    if (obj.isNaN()) {
      return gen._pushNaN();
    }

    if (!obj.isFinite()) {
      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);
    }

    if (obj.isInteger()) {
      return gen._pushBigint(obj);
    }

    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {
      return false;
    }

    const dec = obj.decimalPlaces();
    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));

    if (!gen._pushIntNum(-dec)) {
      return false;
    }

    if (slide.abs().isLessThan(MAXINT_BN)) {
      return gen._pushIntNum(slide.toNumber());
    } else {
      return gen._pushBigint(slide);
    }
  }

  _pushMap(gen, obj) {
    if (!gen._pushInt(obj.size, MT.MAP)) {
      return false;
    }

    return this._pushRawMap(obj.size, Array.from(obj));
  }

  _pushObject(obj) {
    if (!obj) {
      return this._pushUInt8(NULL);
    }

    var len = this.semanticTypes.length;

    for (var i = 0; i < len; i++) {
      if (obj instanceof this.semanticTypes[i][0]) {
        return this.semanticTypes[i][1].call(obj, this, obj);
      }
    }

    var f = obj.encodeCBOR;

    if (typeof f === 'function') {
      return f.call(obj, this);
    }

    var keys = Object.keys(obj);
    var keyLength = keys.length;

    if (!this._pushInt(keyLength, MT.MAP)) {
      return false;
    }

    return this._pushRawMap(keyLength, keys.map(k => [k, obj[k]]));
  }

  _pushRawMap(len, map) {
    // Sort keys for canoncialization
    // 1. encode key
    // 2. shorter key comes before longer key
    // 3. same length keys are sorted with lower
    //    byte value before higher
    map = map.map(function (a) {
      a[0] = Encoder.encode(a[0]);
      return a;
    }).sort(utils.keySorter);

    for (var j = 0; j < len; j++) {
      if (!this.push(map[j][0])) {
        return false;
      }

      if (!this.pushAny(map[j][1])) {
        return false;
      }
    }

    return true;
  }
  /**
   * Alias for `.pushAny`
   *
   * @param {*} obj
   * @returns {boolean} true on success
   */


  write(obj) {
    return this.pushAny(obj);
  }
  /**
   * Push any supported type onto the encoded stream
   *
   * @param {any} obj
   * @returns {boolean} true on success
   */


  pushAny(obj) {
    var typ = toType(obj);

    switch (typ) {
      case 'Number':
        return this._pushNumber(obj);

      case 'String':
        return this._pushString(obj);

      case 'Boolean':
        return this._pushBoolean(obj);

      case 'Object':
        return this._pushObject(obj);

      case 'Array':
        return this._pushArray(this, obj);

      case 'Uint8Array':
        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));

      case 'Null':
        return this._pushUInt8(NULL);

      case 'Undefined':
        return this._pushUndefined(obj);

      case 'Map':
        return this._pushMap(this, obj);

      case 'Set':
        return this._pushSet(this, obj);

      case 'URL':
        return this._pushUrl(this, obj);

      case 'BigNumber':
        return this._pushBigNumber(this, obj);

      case 'Date':
        return this._pushDate(this, obj);

      case 'RegExp':
        return this._pushRegexp(this, obj);

      case 'Symbol':
        switch (obj) {
          case SYMS.NULL:
            return this._pushObject(null);

          case SYMS.UNDEFINED:
            return this._pushUndefined(undefined);
          // TODO: Add pluggable support for other symbols

          default:
            throw new Error('Unknown symbol: ' + obj.toString());
        }

      default:
        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));
    }
  }

  finalize() {
    if (this.offset === 0) {
      return null;
    }

    var result = this.result;
    var resultLength = this.resultLength;
    var resultMethod = this.resultMethod;
    var offset = this.offset; // Determine the size of the buffer

    var size = 0;
    var i = 0;

    for (; i < offset; i++) {
      size += resultLength[i];
    }

    var res = Buffer.allocUnsafe(size);
    var index = 0;
    var length = 0; // Write the content into the result buffer

    for (i = 0; i < offset; i++) {
      length = resultLength[i];

      switch (resultMethod[i]) {
        case 0:
          result[i].copy(res, index);
          break;

        case 1:
          res.writeUInt8(result[i], index, true);
          break;

        case 2:
          res.writeUInt16BE(result[i], index, true);
          break;

        case 3:
          res.writeUInt32BE(result[i], index, true);
          break;

        case 4:
          res.writeDoubleBE(result[i], index, true);
          break;

        case 5:
          res.write(result[i], index, length, 'utf8');
          break;

        default:
          throw new Error('unkown method');
      }

      index += length;
    }

    var tmp = res;

    this._reset();

    return tmp;
  }

  _reset() {
    this.result = [];
    this.resultMethod = [];
    this.resultLength = [];
    this.offset = 0;
  }
  /**
   * Encode the given value
   * @param {*} o
   * @returns {Buffer}
   */


  static encode(o) {
    const enc = new Encoder();
    const ret = enc.pushAny(o);

    if (!ret) {
      throw new Error('Failed to encode input');
    }

    return enc.finalize();
  }

}

module.exports = Encoder;

/***/ }),

/***/ "./node_modules/borc/src/index.js":
/*!****************************************!*\
  !*** ./node_modules/borc/src/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // exports.Commented = require('./commented')

exports.Diagnose = __webpack_require__(/*! ./diagnose */ "./node_modules/borc/src/diagnose.js");
exports.Decoder = __webpack_require__(/*! ./decoder */ "./node_modules/borc/src/decoder.js");
exports.Encoder = __webpack_require__(/*! ./encoder */ "./node_modules/borc/src/encoder.js");
exports.Simple = __webpack_require__(/*! ./simple */ "./node_modules/borc/src/simple.js");
exports.Tagged = __webpack_require__(/*! ./tagged */ "./node_modules/borc/src/tagged.js"); // exports.comment = exports.Commented.comment

exports.decodeAll = exports.Decoder.decodeAll;
exports.decodeFirst = exports.Decoder.decodeFirst;
exports.diagnose = exports.Diagnose.diagnose;
exports.encode = exports.Encoder.encode;
exports.decode = exports.Decoder.decode;
exports.leveldb = {
  decode: exports.Decoder.decodeAll,
  encode: exports.Encoder.encode,
  buffer: true,
  name: 'cbor'
};

/***/ }),

/***/ "./node_modules/borc/src/simple.js":
/*!*****************************************!*\
  !*** ./node_modules/borc/src/simple.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const constants = __webpack_require__(/*! ./constants */ "./node_modules/borc/src/constants.js");

const MT = constants.MT;
const SIMPLE = constants.SIMPLE;
const SYMS = constants.SYMS;
/**
 * A CBOR Simple Value that does not map onto a known constant.
 */

class Simple {
  /**
   * Creates an instance of Simple.
   *
   * @param {integer} value - the simple value's integer value
   */
  constructor(value) {
    if (typeof value !== 'number') {
      throw new Error('Invalid Simple type: ' + typeof value);
    }

    if (value < 0 || value > 255 || (value | 0) !== value) {
      throw new Error('value must be a small positive integer: ' + value);
    }

    this.value = value;
  }
  /**
   * Debug string for simple value
   *
   * @returns {string} simple(value)
   */


  toString() {
    return 'simple(' + this.value + ')';
  }
  /**
   * Debug string for simple value
   *
   * @returns {string} simple(value)
   */


  inspect() {
    return 'simple(' + this.value + ')';
  }
  /**
   * Push the simple value onto the CBOR stream
   *
   * @param {cbor.Encoder} gen The generator to push onto
   * @returns {number}
   */


  encodeCBOR(gen) {
    return gen._pushInt(this.value, MT.SIMPLE_FLOAT);
  }
  /**
   * Is the given object a Simple?
   *
   * @param {any} obj - object to test
   * @returns {bool} - is it Simple?
   */


  static isSimple(obj) {
    return obj instanceof Simple;
  }
  /**
   * Decode from the CBOR additional information into a JavaScript value.
   * If the CBOR item has no parent, return a "safe" symbol instead of
   * `null` or `undefined`, so that the value can be passed through a
   * stream in object mode.
   *
   * @param {Number} val - the CBOR additional info to convert
   * @param {bool} hasParent - Does the CBOR item have a parent?
   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
   */


  static decode(val, hasParent) {
    if (hasParent == null) {
      hasParent = true;
    }

    switch (val) {
      case SIMPLE.FALSE:
        return false;

      case SIMPLE.TRUE:
        return true;

      case SIMPLE.NULL:
        if (hasParent) {
          return null;
        } else {
          return SYMS.NULL;
        }

      case SIMPLE.UNDEFINED:
        if (hasParent) {
          return undefined;
        } else {
          return SYMS.UNDEFINED;
        }

      case -1:
        if (!hasParent) {
          throw new Error('Invalid BREAK');
        }

        return SYMS.BREAK;

      default:
        return new Simple(val);
    }
  }

}

module.exports = Simple;

/***/ }),

/***/ "./node_modules/borc/src/tagged.js":
/*!*****************************************!*\
  !*** ./node_modules/borc/src/tagged.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A CBOR tagged item, where the tag does not have semantics specified at the
 * moment, or those semantics threw an error during parsing. Typically this will
 * be an extension point you're not yet expecting.
 */

class Tagged {
  /**
   * Creates an instance of Tagged.
   *
   * @param {Number} tag - the number of the tag
   * @param {any} value - the value inside the tag
   * @param {Error} err - the error that was thrown parsing the tag, or null
   */
  constructor(tag, value, err) {
    this.tag = tag;
    this.value = value;
    this.err = err;

    if (typeof this.tag !== 'number') {
      throw new Error('Invalid tag type (' + typeof this.tag + ')');
    }

    if (this.tag < 0 || (this.tag | 0) !== this.tag) {
      throw new Error('Tag must be a positive integer: ' + this.tag);
    }
  }
  /**
   * Convert to a String
   *
   * @returns {String} string of the form '1(2)'
   */


  toString() {
    return `${this.tag}(${JSON.stringify(this.value)})`;
  }
  /**
   * Push the simple value onto the CBOR stream
   *
   * @param {cbor.Encoder} gen The generator to push onto
   * @returns {number}
   */


  encodeCBOR(gen) {
    gen._pushTag(this.tag);

    return gen.pushAny(this.value);
  }
  /**
   * If we have a converter for this type, do the conversion.  Some converters
   * are built-in.  Additional ones can be passed in.  If you want to remove
   * a built-in converter, pass a converter in whose value is 'null' instead
   * of a function.
   *
   * @param {Object} converters - keys in the object are a tag number, the value
   *   is a function that takes the decoded CBOR and returns a JavaScript value
   *   of the appropriate type.  Throw an exception in the function on errors.
   * @returns {any} - the converted item
   */


  convert(converters) {
    var er, f;
    f = converters != null ? converters[this.tag] : undefined;

    if (typeof f !== 'function') {
      f = Tagged['_tag' + this.tag];

      if (typeof f !== 'function') {
        return this;
      }
    }

    try {
      return f.call(Tagged, this.value);
    } catch (error) {
      er = error;
      this.err = er;
      return this;
    }
  }

}

module.exports = Tagged;

/***/ }),

/***/ "./node_modules/borc/src/utils.js":
/*!****************************************!*\
  !*** ./node_modules/borc/src/utils.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  Buffer
} = __webpack_require__(/*! buffer */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");

const Bignumber = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.js").BigNumber;

const constants = __webpack_require__(/*! ./constants */ "./node_modules/borc/src/constants.js");

const SHIFT32 = constants.SHIFT32;
const SHIFT16 = constants.SHIFT16;
const MAX_SAFE_HIGH = 0x1fffff;

exports.parseHalf = function parseHalf(buf) {
  var exp, mant, sign;
  sign = buf[0] & 0x80 ? -1 : 1;
  exp = (buf[0] & 0x7C) >> 2;
  mant = (buf[0] & 0x03) << 8 | buf[1];

  if (!exp) {
    return sign * 5.9604644775390625e-8 * mant;
  } else if (exp === 0x1f) {
    return sign * (mant ? 0 / 0 : 2e308);
  } else {
    return sign * Math.pow(2, exp - 25) * (1024 + mant);
  }
};

function toHex(n) {
  if (n < 16) {
    return '0' + n.toString(16);
  }

  return n.toString(16);
}

exports.arrayBufferToBignumber = function (buf) {
  const len = buf.byteLength;
  let res = '';

  for (let i = 0; i < len; i++) {
    res += toHex(buf[i]);
  }

  return new Bignumber(res, 16);
}; // convert an Object into a Map


exports.buildMap = obj => {
  const res = new Map();
  const keys = Object.keys(obj);
  const length = keys.length;

  for (let i = 0; i < length; i++) {
    res.set(keys[i], obj[keys[i]]);
  }

  return res;
};

exports.buildInt32 = (f, g) => {
  return f * SHIFT16 + g;
};

exports.buildInt64 = (f1, f2, g1, g2) => {
  const f = exports.buildInt32(f1, f2);
  const g = exports.buildInt32(g1, g2);

  if (f > MAX_SAFE_HIGH) {
    return new Bignumber(f).times(SHIFT32).plus(g);
  } else {
    return f * SHIFT32 + g;
  }
};

exports.writeHalf = function writeHalf(buf, half) {
  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught
  // HACK: everyone settle in.  This isn't going to be pretty.
  // Translate cn-cbor's C code (from Carsten Borman):
  // uint32_t be32;
  // uint16_t be16, u16;
  // union {
  //   float f;
  //   uint32_t u;
  // } u32;
  // u32.f = float_val;
  const u32 = Buffer.allocUnsafe(4);
  u32.writeFloatBE(half, 0);
  const u = u32.readUInt32BE(0); // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */
  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion

  if ((u & 0x1FFF) !== 0) {
    return false;
  } //   int s16 = (u32.u >> 16) & 0x8000;
  //   int exp = (u32.u >> 23) & 0xff;
  //   int mant = u32.u & 0x7fffff;


  var s16 = u >> 16 & 0x8000; // top bit is sign

  const exp = u >> 23 & 0xff; // then 5 bits of exponent

  const mant = u & 0x7fffff; //   if (exp == 0 && mant == 0)
  //     ;              /* 0.0, -0.0 */
  // hildjj: zeros already handled.  Assert if you don't believe me.
  //   else if (exp >= 113 && exp <= 142) /* normalized */
  //     s16 += ((exp - 112) << 10) + (mant >> 13);

  if (exp >= 113 && exp <= 142) {
    s16 += (exp - 112 << 10) + (mant >> 13); //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
    //     if (mant & ((1 << (126 - exp)) - 1))
    //       goto float32;         /* loss of precision */
    //     s16 += ((mant + 0x800000) >> (126 - exp));
  } else if (exp >= 103 && exp < 113) {
    if (mant & (1 << 126 - exp) - 1) {
      return false;
    }

    s16 += mant + 0x800000 >> 126 - exp; //   } else if (exp == 255 && mant == 0) { /* Inf */
    //     s16 += 0x7c00;
    // hildjj: Infinity already handled
    //   } else
    //     goto float32;           /* loss of range */
  } else {
    return false;
  } //   ensure_writable(3);
  //   u16 = s16;
  //   be16 = hton16p((const uint8_t*)&u16);


  buf.writeUInt16BE(s16, 0);
  return true;
};

exports.keySorter = function (a, b) {
  var lenA = a[0].byteLength;
  var lenB = b[0].byteLength;

  if (lenA > lenB) {
    return 1;
  }

  if (lenB > lenA) {
    return -1;
  }

  return a[0].compare(b[0]);
}; // Adapted from http://www.2ality.com/2012/03/signedzero.html


exports.isNegativeZero = x => {
  return x === 0 && 1 / x < 0;
};

exports.nextPowerOf2 = n => {
  let count = 0; // First n in the below condition is for
  // the case where n is 0

  if (n && !(n & n - 1)) {
    return n;
  }

  while (n !== 0) {
    n >>= 1;
    count += 1;
  }

  return 1 << count;
};

/***/ }),

/***/ "./node_modules/buffer-crc32/index.js":
/*!********************************************!*\
  !*** ./node_modules/buffer-crc32/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer;

var CRC_TABLE = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];

if (typeof Int32Array !== 'undefined') {
  CRC_TABLE = new Int32Array(CRC_TABLE);
}

function ensureBuffer(input) {
  if (Buffer.isBuffer(input)) {
    return input;
  }

  var hasNewBufferAPI = typeof Buffer.alloc === "function" && typeof Buffer.from === "function";

  if (typeof input === "number") {
    return hasNewBufferAPI ? Buffer.alloc(input) : new Buffer(input);
  } else if (typeof input === "string") {
    return hasNewBufferAPI ? Buffer.from(input) : new Buffer(input);
  } else {
    throw new Error("input must be buffer, number, or string, received " + typeof input);
  }
}

function bufferizeInt(num) {
  var tmp = ensureBuffer(4);
  tmp.writeInt32BE(num, 0);
  return tmp;
}

function _crc32(buf, previous) {
  buf = ensureBuffer(buf);

  if (Buffer.isBuffer(previous)) {
    previous = previous.readUInt32BE(0);
  }

  var crc = ~~previous ^ -1;

  for (var n = 0; n < buf.length; n++) {
    crc = CRC_TABLE[(crc ^ buf[n]) & 0xff] ^ crc >>> 8;
  }

  return crc ^ -1;
}

function crc32() {
  return bufferizeInt(_crc32.apply(null, arguments));
}

crc32.signed = function () {
  return _crc32.apply(null, arguments);
};

crc32.unsigned = function () {
  return _crc32.apply(null, arguments) >>> 0;
};

module.exports = crc32;

/***/ }),

/***/ "./node_modules/buffer-pipe/index.js":
/*!*******************************************!*\
  !*** ./node_modules/buffer-pipe/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

module.exports = class BufferPipe {
  /**
   * Creates a new instance of a pipe
   * @param {Buffer} buf - an optional buffer to start with
   */
  constructor(buf = Buffer.from([])) {
    this.buffer = buf;
    this._bytesRead = 0;
    this._bytesWrote = 0;
  }
  /**
   * read `num` number of bytes from the pipe
   * @param {Number} num
   * @return {Buffer}
   */


  read(num) {
    this._bytesRead += num;
    const data = this.buffer.slice(0, num);
    this.buffer = this.buffer.slice(num);
    return data;
  }
  /**
   * Wites a buffer to the pipe
   * @param {Buffer} buf
   */


  write(buf) {
    buf = Buffer.from(buf);
    this._bytesWrote += buf.length;
    this.buffer = Buffer.concat([this.buffer, buf]);
  }
  /**
   * Whether or not there is more data to read from the buffer
   * returns {Boolean}
   */


  get end() {
    return !this.buffer.length;
  }
  /**
   * returns the number of bytes read from the stream
   * @return {Integer}
   */


  get bytesRead() {
    return this._bytesRead;
  }
  /**
   * returns the number of bytes wrote to the stream
   * @return {Integer}
   */


  get bytesWrote() {
    return this._bytesWrote;
  }

};

/***/ }),

/***/ "./node_modules/crypto-js/aes.js":
/*!***************************************!*\
  !*** ./node_modules/crypto-js/aes.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var BlockCipher = C_lib.BlockCipher;
    var C_algo = C.algo; // Lookup tables

    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX_0 = [];
    var SUB_MIX_1 = [];
    var SUB_MIX_2 = [];
    var SUB_MIX_3 = [];
    var INV_SUB_MIX_0 = [];
    var INV_SUB_MIX_1 = [];
    var INV_SUB_MIX_2 = [];
    var INV_SUB_MIX_3 = []; // Compute lookup tables

    (function () {
      // Compute double table
      var d = [];

      for (var i = 0; i < 256; i++) {
        if (i < 128) {
          d[i] = i << 1;
        } else {
          d[i] = i << 1 ^ 0x11b;
        }
      } // Walk GF(2^8)


      var x = 0;
      var xi = 0;

      for (var i = 0; i < 256; i++) {
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x; // Compute multiplication

        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4]; // Compute sub bytes, mix columns tables

        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX_0[x] = t << 24 | t >>> 8;
        SUB_MIX_1[x] = t << 16 | t >>> 16;
        SUB_MIX_2[x] = t << 8 | t >>> 24;
        SUB_MIX_3[x] = t; // Compute inv sub bytes, inv mix columns tables

        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
        INV_SUB_MIX_3[sx] = t; // Compute next counter

        if (!x) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
    })(); // Precomputed Rcon lookup


    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    /**
     * AES block cipher algorithm.
     */

    var AES = C_algo.AES = BlockCipher.extend({
      _doReset: function () {
        var t; // Skip reset of nRounds has been set before and key did not change

        if (this._nRounds && this._keyPriorReset === this._key) {
          return;
        } // Shortcuts


        var key = this._keyPriorReset = this._key;
        var keyWords = key.words;
        var keySize = key.sigBytes / 4; // Compute number of rounds

        var nRounds = this._nRounds = keySize + 6; // Compute number of key schedule rows

        var ksRows = (nRounds + 1) * 4; // Compute key schedule

        var keySchedule = this._keySchedule = [];

        for (var ksRow = 0; ksRow < ksRows; ksRow++) {
          if (ksRow < keySize) {
            keySchedule[ksRow] = keyWords[ksRow];
          } else {
            t = keySchedule[ksRow - 1];

            if (!(ksRow % keySize)) {
              // Rot word
              t = t << 8 | t >>> 24; // Sub word

              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff]; // Mix Rcon

              t ^= RCON[ksRow / keySize | 0] << 24;
            } else if (keySize > 6 && ksRow % keySize == 4) {
              // Sub word
              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
            }

            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
          }
        } // Compute inv key schedule


        var invKeySchedule = this._invKeySchedule = [];

        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
          var ksRow = ksRows - invKsRow;

          if (invKsRow % 4) {
            var t = keySchedule[ksRow];
          } else {
            var t = keySchedule[ksRow - 4];
          }

          if (invKsRow < 4 || ksRow <= 4) {
            invKeySchedule[invKsRow] = t;
          } else {
            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
          }
        }
      },
      encryptBlock: function (M, offset) {
        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
      },
      decryptBlock: function (M, offset) {
        // Swap 2nd and 4th rows
        var t = M[offset + 1];
        M[offset + 1] = M[offset + 3];
        M[offset + 3] = t;

        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX); // Inv swap 2nd and 4th rows


        var t = M[offset + 1];
        M[offset + 1] = M[offset + 3];
        M[offset + 3] = t;
      },
      _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
        // Shortcut
        var nRounds = this._nRounds; // Get input, add round key

        var s0 = M[offset] ^ keySchedule[0];
        var s1 = M[offset + 1] ^ keySchedule[1];
        var s2 = M[offset + 2] ^ keySchedule[2];
        var s3 = M[offset + 3] ^ keySchedule[3]; // Key schedule row counter

        var ksRow = 4; // Rounds

        for (var round = 1; round < nRounds; round++) {
          // Shift rows, sub bytes, mix columns, add round key
          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++]; // Update state

          s0 = t0;
          s1 = t1;
          s2 = t2;
          s3 = t3;
        } // Shift rows, sub bytes, add round key


        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]; // Set output

        M[offset] = t0;
        M[offset + 1] = t1;
        M[offset + 2] = t2;
        M[offset + 3] = t3;
      },
      keySize: 256 / 32
    });
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
     */

    C.AES = BlockCipher._createHelper(AES);
  })();

  return CryptoJS.AES;
});

/***/ }),

/***/ "./node_modules/crypto-js/cipher-core.js":
/*!***********************************************!*\
  !*** ./node_modules/crypto-js/cipher-core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * Cipher core components.
   */
  CryptoJS.lib.Cipher || function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var Base64 = C_enc.Base64;
    var C_algo = C.algo;
    var EvpKDF = C_algo.EvpKDF;
    /**
     * Abstract base cipher template.
     *
     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
     */

    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
      /**
       * Configuration options.
       *
       * @property {WordArray} iv The IV to use for this operation.
       */
      cfg: Base.extend(),

      /**
       * Creates this cipher in encryption mode.
       *
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {Cipher} A cipher instance.
       *
       * @static
       *
       * @example
       *
       *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
       */
      createEncryptor: function (key, cfg) {
        return this.create(this._ENC_XFORM_MODE, key, cfg);
      },

      /**
       * Creates this cipher in decryption mode.
       *
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {Cipher} A cipher instance.
       *
       * @static
       *
       * @example
       *
       *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
       */
      createDecryptor: function (key, cfg) {
        return this.create(this._DEC_XFORM_MODE, key, cfg);
      },

      /**
       * Initializes a newly created cipher.
       *
       * @param {number} xformMode Either the encryption or decryption transormation mode constant.
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @example
       *
       *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
       */
      init: function (xformMode, key, cfg) {
        // Apply config defaults
        this.cfg = this.cfg.extend(cfg); // Store transform mode and key

        this._xformMode = xformMode;
        this._key = key; // Set initial values

        this.reset();
      },

      /**
       * Resets this cipher to its initial state.
       *
       * @example
       *
       *     cipher.reset();
       */
      reset: function () {
        // Reset data buffer
        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic

        this._doReset();
      },

      /**
       * Adds data to be encrypted or decrypted.
       *
       * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
       *
       * @return {WordArray} The data after processing.
       *
       * @example
       *
       *     var encrypted = cipher.process('data');
       *     var encrypted = cipher.process(wordArray);
       */
      process: function (dataUpdate) {
        // Append
        this._append(dataUpdate); // Process available blocks


        return this._process();
      },

      /**
       * Finalizes the encryption or decryption process.
       * Note that the finalize operation is effectively a destructive, read-once operation.
       *
       * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
       *
       * @return {WordArray} The data after final processing.
       *
       * @example
       *
       *     var encrypted = cipher.finalize();
       *     var encrypted = cipher.finalize('data');
       *     var encrypted = cipher.finalize(wordArray);
       */
      finalize: function (dataUpdate) {
        // Final data update
        if (dataUpdate) {
          this._append(dataUpdate);
        } // Perform concrete-cipher logic


        var finalProcessedData = this._doFinalize();

        return finalProcessedData;
      },
      keySize: 128 / 32,
      ivSize: 128 / 32,
      _ENC_XFORM_MODE: 1,
      _DEC_XFORM_MODE: 2,

      /**
       * Creates shortcut functions to a cipher's object interface.
       *
       * @param {Cipher} cipher The cipher to create a helper for.
       *
       * @return {Object} An object with encrypt and decrypt shortcut functions.
       *
       * @static
       *
       * @example
       *
       *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
       */
      _createHelper: function () {
        function selectCipherStrategy(key) {
          if (typeof key == 'string') {
            return PasswordBasedCipher;
          } else {
            return SerializableCipher;
          }
        }

        return function (cipher) {
          return {
            encrypt: function (message, key, cfg) {
              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
            },
            decrypt: function (ciphertext, key, cfg) {
              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
            }
          };
        };
      }()
    });
    /**
     * Abstract base stream cipher template.
     *
     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
     */

    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
      _doFinalize: function () {
        // Process partial blocks
        var finalProcessedBlocks = this._process(!!'flush');

        return finalProcessedBlocks;
      },
      blockSize: 1
    });
    /**
     * Mode namespace.
     */

    var C_mode = C.mode = {};
    /**
     * Abstract base block cipher mode template.
     */

    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
      /**
       * Creates this mode for encryption.
       *
       * @param {Cipher} cipher A block cipher instance.
       * @param {Array} iv The IV words.
       *
       * @static
       *
       * @example
       *
       *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
       */
      createEncryptor: function (cipher, iv) {
        return this.Encryptor.create(cipher, iv);
      },

      /**
       * Creates this mode for decryption.
       *
       * @param {Cipher} cipher A block cipher instance.
       * @param {Array} iv The IV words.
       *
       * @static
       *
       * @example
       *
       *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
       */
      createDecryptor: function (cipher, iv) {
        return this.Decryptor.create(cipher, iv);
      },

      /**
       * Initializes a newly created mode.
       *
       * @param {Cipher} cipher A block cipher instance.
       * @param {Array} iv The IV words.
       *
       * @example
       *
       *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
       */
      init: function (cipher, iv) {
        this._cipher = cipher;
        this._iv = iv;
      }
    });
    /**
     * Cipher Block Chaining mode.
     */

    var CBC = C_mode.CBC = function () {
      /**
       * Abstract base CBC mode.
       */
      var CBC = BlockCipherMode.extend();
      /**
       * CBC encryptor.
       */

      CBC.Encryptor = CBC.extend({
        /**
         * Processes the data block at offset.
         *
         * @param {Array} words The data words to operate on.
         * @param {number} offset The offset where the block starts.
         *
         * @example
         *
         *     mode.processBlock(data.words, offset);
         */
        processBlock: function (words, offset) {
          // Shortcuts
          var cipher = this._cipher;
          var blockSize = cipher.blockSize; // XOR and encrypt

          xorBlock.call(this, words, offset, blockSize);
          cipher.encryptBlock(words, offset); // Remember this block to use with next block

          this._prevBlock = words.slice(offset, offset + blockSize);
        }
      });
      /**
       * CBC decryptor.
       */

      CBC.Decryptor = CBC.extend({
        /**
         * Processes the data block at offset.
         *
         * @param {Array} words The data words to operate on.
         * @param {number} offset The offset where the block starts.
         *
         * @example
         *
         *     mode.processBlock(data.words, offset);
         */
        processBlock: function (words, offset) {
          // Shortcuts
          var cipher = this._cipher;
          var blockSize = cipher.blockSize; // Remember this block to use with next block

          var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR

          cipher.decryptBlock(words, offset);
          xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block

          this._prevBlock = thisBlock;
        }
      });

      function xorBlock(words, offset, blockSize) {
        var block; // Shortcut

        var iv = this._iv; // Choose mixing block

        if (iv) {
          block = iv; // Remove IV for subsequent blocks

          this._iv = undefined;
        } else {
          block = this._prevBlock;
        } // XOR blocks


        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= block[i];
        }
      }

      return CBC;
    }();
    /**
     * Padding namespace.
     */


    var C_pad = C.pad = {};
    /**
     * PKCS #5/7 padding strategy.
     */

    var Pkcs7 = C_pad.Pkcs7 = {
      /**
       * Pads data using the algorithm defined in PKCS #5/7.
       *
       * @param {WordArray} data The data to pad.
       * @param {number} blockSize The multiple that the data should be padded to.
       *
       * @static
       *
       * @example
       *
       *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
       */
      pad: function (data, blockSize) {
        // Shortcut
        var blockSizeBytes = blockSize * 4; // Count padding bytes

        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word

        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding

        var paddingWords = [];

        for (var i = 0; i < nPaddingBytes; i += 4) {
          paddingWords.push(paddingWord);
        }

        var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding

        data.concat(padding);
      },

      /**
       * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
       *
       * @param {WordArray} data The data to unpad.
       *
       * @static
       *
       * @example
       *
       *     CryptoJS.pad.Pkcs7.unpad(wordArray);
       */
      unpad: function (data) {
        // Get number of padding bytes from last byte
        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

        data.sigBytes -= nPaddingBytes;
      }
    };
    /**
     * Abstract base block cipher template.
     *
     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
     */

    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
      /**
       * Configuration options.
       *
       * @property {Mode} mode The block mode to use. Default: CBC
       * @property {Padding} padding The padding strategy to use. Default: Pkcs7
       */
      cfg: Cipher.cfg.extend({
        mode: CBC,
        padding: Pkcs7
      }),
      reset: function () {
        var modeCreator; // Reset cipher

        Cipher.reset.call(this); // Shortcuts

        var cfg = this.cfg;
        var iv = cfg.iv;
        var mode = cfg.mode; // Reset block mode

        if (this._xformMode == this._ENC_XFORM_MODE) {
          modeCreator = mode.createEncryptor;
        } else
          /* if (this._xformMode == this._DEC_XFORM_MODE) */
          {
            modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding

            this._minBufferSize = 1;
          }

        if (this._mode && this._mode.__creator == modeCreator) {
          this._mode.init(this, iv && iv.words);
        } else {
          this._mode = modeCreator.call(mode, this, iv && iv.words);
          this._mode.__creator = modeCreator;
        }
      },
      _doProcessBlock: function (words, offset) {
        this._mode.processBlock(words, offset);
      },
      _doFinalize: function () {
        var finalProcessedBlocks; // Shortcut

        var padding = this.cfg.padding; // Finalize

        if (this._xformMode == this._ENC_XFORM_MODE) {
          // Pad data
          padding.pad(this._data, this.blockSize); // Process final blocks

          finalProcessedBlocks = this._process(!!'flush');
        } else
          /* if (this._xformMode == this._DEC_XFORM_MODE) */
          {
            // Process final blocks
            finalProcessedBlocks = this._process(!!'flush'); // Unpad data

            padding.unpad(finalProcessedBlocks);
          }

        return finalProcessedBlocks;
      },
      blockSize: 128 / 32
    });
    /**
     * A collection of cipher parameters.
     *
     * @property {WordArray} ciphertext The raw ciphertext.
     * @property {WordArray} key The key to this ciphertext.
     * @property {WordArray} iv The IV used in the ciphering operation.
     * @property {WordArray} salt The salt used with a key derivation function.
     * @property {Cipher} algorithm The cipher algorithm.
     * @property {Mode} mode The block mode used in the ciphering operation.
     * @property {Padding} padding The padding scheme used in the ciphering operation.
     * @property {number} blockSize The block size of the cipher.
     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
     */

    var CipherParams = C_lib.CipherParams = Base.extend({
      /**
       * Initializes a newly created cipher params object.
       *
       * @param {Object} cipherParams An object with any of the possible cipher parameters.
       *
       * @example
       *
       *     var cipherParams = CryptoJS.lib.CipherParams.create({
       *         ciphertext: ciphertextWordArray,
       *         key: keyWordArray,
       *         iv: ivWordArray,
       *         salt: saltWordArray,
       *         algorithm: CryptoJS.algo.AES,
       *         mode: CryptoJS.mode.CBC,
       *         padding: CryptoJS.pad.PKCS7,
       *         blockSize: 4,
       *         formatter: CryptoJS.format.OpenSSL
       *     });
       */
      init: function (cipherParams) {
        this.mixIn(cipherParams);
      },

      /**
       * Converts this cipher params object to a string.
       *
       * @param {Format} formatter (Optional) The formatting strategy to use.
       *
       * @return {string} The stringified cipher params.
       *
       * @throws Error If neither the formatter nor the default formatter is set.
       *
       * @example
       *
       *     var string = cipherParams + '';
       *     var string = cipherParams.toString();
       *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
       */
      toString: function (formatter) {
        return (formatter || this.formatter).stringify(this);
      }
    });
    /**
     * Format namespace.
     */

    var C_format = C.format = {};
    /**
     * OpenSSL formatting strategy.
     */

    var OpenSSLFormatter = C_format.OpenSSL = {
      /**
       * Converts a cipher params object to an OpenSSL-compatible string.
       *
       * @param {CipherParams} cipherParams The cipher params object.
       *
       * @return {string} The OpenSSL-compatible string.
       *
       * @static
       *
       * @example
       *
       *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
       */
      stringify: function (cipherParams) {
        var wordArray; // Shortcuts

        var ciphertext = cipherParams.ciphertext;
        var salt = cipherParams.salt; // Format

        if (salt) {
          wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
        } else {
          wordArray = ciphertext;
        }

        return wordArray.toString(Base64);
      },

      /**
       * Converts an OpenSSL-compatible string to a cipher params object.
       *
       * @param {string} openSSLStr The OpenSSL-compatible string.
       *
       * @return {CipherParams} The cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
       */
      parse: function (openSSLStr) {
        var salt; // Parse base64

        var ciphertext = Base64.parse(openSSLStr); // Shortcut

        var ciphertextWords = ciphertext.words; // Test for salt

        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
          // Extract salt
          salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext

          ciphertextWords.splice(0, 4);
          ciphertext.sigBytes -= 16;
        }

        return CipherParams.create({
          ciphertext: ciphertext,
          salt: salt
        });
      }
    };
    /**
     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
     */

    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
      /**
       * Configuration options.
       *
       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
       */
      cfg: Base.extend({
        format: OpenSSLFormatter
      }),

      /**
       * Encrypts a message.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {WordArray|string} message The message to encrypt.
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {CipherParams} A cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
       */
      encrypt: function (cipher, message, key, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Encrypt

        var encryptor = cipher.createEncryptor(key, cfg);
        var ciphertext = encryptor.finalize(message); // Shortcut

        var cipherCfg = encryptor.cfg; // Create and return serializable cipher params

        return CipherParams.create({
          ciphertext: ciphertext,
          key: key,
          iv: cipherCfg.iv,
          algorithm: cipher,
          mode: cipherCfg.mode,
          padding: cipherCfg.padding,
          blockSize: cipher.blockSize,
          formatter: cfg.format
        });
      },

      /**
       * Decrypts serialized ciphertext.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
       * @param {WordArray} key The key.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {WordArray} The plaintext.
       *
       * @static
       *
       * @example
       *
       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
       */
      decrypt: function (cipher, ciphertext, key, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Convert string to CipherParams

        ciphertext = this._parse(ciphertext, cfg.format); // Decrypt

        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
        return plaintext;
      },

      /**
       * Converts serialized ciphertext to CipherParams,
       * else assumed CipherParams already and returns ciphertext unchanged.
       *
       * @param {CipherParams|string} ciphertext The ciphertext.
       * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
       *
       * @return {CipherParams} The unserialized ciphertext.
       *
       * @static
       *
       * @example
       *
       *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
       */
      _parse: function (ciphertext, format) {
        if (typeof ciphertext == 'string') {
          return format.parse(ciphertext, this);
        } else {
          return ciphertext;
        }
      }
    });
    /**
     * Key derivation function namespace.
     */

    var C_kdf = C.kdf = {};
    /**
     * OpenSSL key derivation function.
     */

    var OpenSSLKdf = C_kdf.OpenSSL = {
      /**
       * Derives a key and IV from a password.
       *
       * @param {string} password The password to derive from.
       * @param {number} keySize The size in words of the key to generate.
       * @param {number} ivSize The size in words of the IV to generate.
       * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
       *
       * @return {CipherParams} A cipher params object with the key, IV, and salt.
       *
       * @static
       *
       * @example
       *
       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
       */
      execute: function (password, keySize, ivSize, salt) {
        // Generate random salt
        if (!salt) {
          salt = WordArray.random(64 / 8);
        } // Derive key and IV


        var key = EvpKDF.create({
          keySize: keySize + ivSize
        }).compute(password, salt); // Separate key and IV

        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
        key.sigBytes = keySize * 4; // Return params

        return CipherParams.create({
          key: key,
          iv: iv,
          salt: salt
        });
      }
    };
    /**
     * A serializable cipher wrapper that derives the key from a password,
     * and returns ciphertext as a serializable cipher params object.
     */

    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
      /**
       * Configuration options.
       *
       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
       */
      cfg: SerializableCipher.cfg.extend({
        kdf: OpenSSLKdf
      }),

      /**
       * Encrypts a message using a password.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {WordArray|string} message The message to encrypt.
       * @param {string} password The password.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {CipherParams} A cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
       */
      encrypt: function (cipher, message, password, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Derive key and other params

        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config

        cfg.iv = derivedParams.iv; // Encrypt

        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params

        ciphertext.mixIn(derivedParams);
        return ciphertext;
      },

      /**
       * Decrypts serialized ciphertext using a password.
       *
       * @param {Cipher} cipher The cipher algorithm to use.
       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
       * @param {string} password The password.
       * @param {Object} cfg (Optional) The configuration options to use for this operation.
       *
       * @return {WordArray} The plaintext.
       *
       * @static
       *
       * @example
       *
       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
       */
      decrypt: function (cipher, ciphertext, password, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg); // Convert string to CipherParams

        ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params

        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config

        cfg.iv = derivedParams.iv; // Decrypt

        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
        return plaintext;
      }
    });
  }();
});

/***/ }),

/***/ "./node_modules/crypto-js/core.js":
/*!****************************************!*\
  !*** ./node_modules/crypto-js/core.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory();
  } else {}
})(this, function () {
  /*globals window, global, require*/

  /**
   * CryptoJS core components.
   */
  var CryptoJS = CryptoJS || function (Math, undefined) {
    var crypto; // Native crypto from window (Browser)

    if (typeof window !== 'undefined' && window.crypto) {
      crypto = window.crypto;
    } // Native crypto in web worker (Browser)


    if (typeof self !== 'undefined' && self.crypto) {
      crypto = self.crypto;
    } // Native crypto from worker


    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
      crypto = globalThis.crypto;
    } // Native (experimental IE 11) crypto from window (Browser)


    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
      crypto = window.msCrypto;
    } // Native crypto from global (NodeJS)


    if (!crypto && typeof global !== 'undefined' && global.crypto) {
      crypto = global.crypto;
    } // Native crypto import via require (NodeJS)


    if (!crypto && "function" === 'function') {
      try {
        crypto = __webpack_require__(/*! crypto */ 0);
      } catch (err) {}
    }
    /*
     * Cryptographically secure pseudorandom number generator
     *
     * As Math.random() is cryptographically not safe to use
     */


    var cryptoSecureRandomInt = function () {
      if (crypto) {
        // Use getRandomValues method (Browser)
        if (typeof crypto.getRandomValues === 'function') {
          try {
            return crypto.getRandomValues(new Uint32Array(1))[0];
          } catch (err) {}
        } // Use randomBytes method (NodeJS)


        if (typeof crypto.randomBytes === 'function') {
          try {
            return crypto.randomBytes(4).readInt32LE();
          } catch (err) {}
        }
      }

      throw new Error('Native crypto module could not be used to get secure random number.');
    };
    /*
     * Local polyfill of Object.create
      */


    var create = Object.create || function () {
      function F() {}

      return function (obj) {
        var subtype;
        F.prototype = obj;
        subtype = new F();
        F.prototype = null;
        return subtype;
      };
    }();
    /**
     * CryptoJS namespace.
     */


    var C = {};
    /**
     * Library namespace.
     */

    var C_lib = C.lib = {};
    /**
     * Base object for prototypal inheritance.
     */

    var Base = C_lib.Base = function () {
      return {
        /**
         * Creates a new object that inherits from this object.
         *
         * @param {Object} overrides Properties to copy into the new object.
         *
         * @return {Object} The new object.
         *
         * @static
         *
         * @example
         *
         *     var MyType = CryptoJS.lib.Base.extend({
         *         field: 'value',
         *
         *         method: function () {
         *         }
         *     });
         */
        extend: function (overrides) {
          // Spawn
          var subtype = create(this); // Augment

          if (overrides) {
            subtype.mixIn(overrides);
          } // Create default initializer


          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
            subtype.init = function () {
              subtype.$super.init.apply(this, arguments);
            };
          } // Initializer's prototype is the subtype object


          subtype.init.prototype = subtype; // Reference supertype

          subtype.$super = this;
          return subtype;
        },

        /**
         * Extends this object and runs the init method.
         * Arguments to create() will be passed to init().
         *
         * @return {Object} The new object.
         *
         * @static
         *
         * @example
         *
         *     var instance = MyType.create();
         */
        create: function () {
          var instance = this.extend();
          instance.init.apply(instance, arguments);
          return instance;
        },

        /**
         * Initializes a newly created object.
         * Override this method to add some logic when your objects are created.
         *
         * @example
         *
         *     var MyType = CryptoJS.lib.Base.extend({
         *         init: function () {
         *             // ...
         *         }
         *     });
         */
        init: function () {},

        /**
         * Copies properties into this object.
         *
         * @param {Object} properties The properties to mix in.
         *
         * @example
         *
         *     MyType.mixIn({
         *         field: 'value'
         *     });
         */
        mixIn: function (properties) {
          for (var propertyName in properties) {
            if (properties.hasOwnProperty(propertyName)) {
              this[propertyName] = properties[propertyName];
            }
          } // IE won't copy toString using the loop above


          if (properties.hasOwnProperty('toString')) {
            this.toString = properties.toString;
          }
        },

        /**
         * Creates a copy of this object.
         *
         * @return {Object} The clone.
         *
         * @example
         *
         *     var clone = instance.clone();
         */
        clone: function () {
          return this.init.prototype.extend(this);
        }
      };
    }();
    /**
     * An array of 32-bit words.
     *
     * @property {Array} words The array of 32-bit words.
     * @property {number} sigBytes The number of significant bytes in this word array.
     */


    var WordArray = C_lib.WordArray = Base.extend({
      /**
       * Initializes a newly created word array.
       *
       * @param {Array} words (Optional) An array of 32-bit words.
       * @param {number} sigBytes (Optional) The number of significant bytes in the words.
       *
       * @example
       *
       *     var wordArray = CryptoJS.lib.WordArray.create();
       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
       *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
       */
      init: function (words, sigBytes) {
        words = this.words = words || [];

        if (sigBytes != undefined) {
          this.sigBytes = sigBytes;
        } else {
          this.sigBytes = words.length * 4;
        }
      },

      /**
       * Converts this word array to a string.
       *
       * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
       *
       * @return {string} The stringified word array.
       *
       * @example
       *
       *     var string = wordArray + '';
       *     var string = wordArray.toString();
       *     var string = wordArray.toString(CryptoJS.enc.Utf8);
       */
      toString: function (encoder) {
        return (encoder || Hex).stringify(this);
      },

      /**
       * Concatenates a word array to this word array.
       *
       * @param {WordArray} wordArray The word array to append.
       *
       * @return {WordArray} This word array.
       *
       * @example
       *
       *     wordArray1.concat(wordArray2);
       */
      concat: function (wordArray) {
        // Shortcuts
        var thisWords = this.words;
        var thatWords = wordArray.words;
        var thisSigBytes = this.sigBytes;
        var thatSigBytes = wordArray.sigBytes; // Clamp excess bits

        this.clamp(); // Concat

        if (thisSigBytes % 4) {
          // Copy one byte at a time
          for (var i = 0; i < thatSigBytes; i++) {
            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
          }
        } else {
          // Copy one word at a time
          for (var j = 0; j < thatSigBytes; j += 4) {
            thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
          }
        }

        this.sigBytes += thatSigBytes; // Chainable

        return this;
      },

      /**
       * Removes insignificant bits.
       *
       * @example
       *
       *     wordArray.clamp();
       */
      clamp: function () {
        // Shortcuts
        var words = this.words;
        var sigBytes = this.sigBytes; // Clamp

        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
        words.length = Math.ceil(sigBytes / 4);
      },

      /**
       * Creates a copy of this word array.
       *
       * @return {WordArray} The clone.
       *
       * @example
       *
       *     var clone = wordArray.clone();
       */
      clone: function () {
        var clone = Base.clone.call(this);
        clone.words = this.words.slice(0);
        return clone;
      },

      /**
       * Creates a word array filled with random bytes.
       *
       * @param {number} nBytes The number of random bytes to generate.
       *
       * @return {WordArray} The random word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.lib.WordArray.random(16);
       */
      random: function (nBytes) {
        var words = [];

        for (var i = 0; i < nBytes; i += 4) {
          words.push(cryptoSecureRandomInt());
        }

        return new WordArray.init(words, nBytes);
      }
    });
    /**
     * Encoder namespace.
     */

    var C_enc = C.enc = {};
    /**
     * Hex encoding strategy.
     */

    var Hex = C_enc.Hex = {
      /**
       * Converts a word array to a hex string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The hex string.
       *
       * @static
       *
       * @example
       *
       *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
       */
      stringify: function (wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes; // Convert

        var hexChars = [];

        for (var i = 0; i < sigBytes; i++) {
          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          hexChars.push((bite >>> 4).toString(16));
          hexChars.push((bite & 0x0f).toString(16));
        }

        return hexChars.join('');
      },

      /**
       * Converts a hex string to a word array.
       *
       * @param {string} hexStr The hex string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
       */
      parse: function (hexStr) {
        // Shortcut
        var hexStrLength = hexStr.length; // Convert

        var words = [];

        for (var i = 0; i < hexStrLength; i += 2) {
          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
        }

        return new WordArray.init(words, hexStrLength / 2);
      }
    };
    /**
     * Latin1 encoding strategy.
     */

    var Latin1 = C_enc.Latin1 = {
      /**
       * Converts a word array to a Latin1 string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The Latin1 string.
       *
       * @static
       *
       * @example
       *
       *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
       */
      stringify: function (wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes; // Convert

        var latin1Chars = [];

        for (var i = 0; i < sigBytes; i++) {
          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          latin1Chars.push(String.fromCharCode(bite));
        }

        return latin1Chars.join('');
      },

      /**
       * Converts a Latin1 string to a word array.
       *
       * @param {string} latin1Str The Latin1 string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
       */
      parse: function (latin1Str) {
        // Shortcut
        var latin1StrLength = latin1Str.length; // Convert

        var words = [];

        for (var i = 0; i < latin1StrLength; i++) {
          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
        }

        return new WordArray.init(words, latin1StrLength);
      }
    };
    /**
     * UTF-8 encoding strategy.
     */

    var Utf8 = C_enc.Utf8 = {
      /**
       * Converts a word array to a UTF-8 string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The UTF-8 string.
       *
       * @static
       *
       * @example
       *
       *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
       */
      stringify: function (wordArray) {
        try {
          return decodeURIComponent(escape(Latin1.stringify(wordArray)));
        } catch (e) {
          throw new Error('Malformed UTF-8 data');
        }
      },

      /**
       * Converts a UTF-8 string to a word array.
       *
       * @param {string} utf8Str The UTF-8 string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
       */
      parse: function (utf8Str) {
        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
      }
    };
    /**
     * Abstract buffered block algorithm template.
     *
     * The property blockSize must be implemented in a concrete subtype.
     *
     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
     */

    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
      /**
       * Resets this block algorithm's data buffer to its initial state.
       *
       * @example
       *
       *     bufferedBlockAlgorithm.reset();
       */
      reset: function () {
        // Initial values
        this._data = new WordArray.init();
        this._nDataBytes = 0;
      },

      /**
       * Adds new data to this block algorithm's buffer.
       *
       * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
       *
       * @example
       *
       *     bufferedBlockAlgorithm._append('data');
       *     bufferedBlockAlgorithm._append(wordArray);
       */
      _append: function (data) {
        // Convert string to WordArray, else assume WordArray already
        if (typeof data == 'string') {
          data = Utf8.parse(data);
        } // Append


        this._data.concat(data);

        this._nDataBytes += data.sigBytes;
      },

      /**
       * Processes available data blocks.
       *
       * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
       *
       * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
       *
       * @return {WordArray} The processed data.
       *
       * @example
       *
       *     var processedData = bufferedBlockAlgorithm._process();
       *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
       */
      _process: function (doFlush) {
        var processedWords; // Shortcuts

        var data = this._data;
        var dataWords = data.words;
        var dataSigBytes = data.sigBytes;
        var blockSize = this.blockSize;
        var blockSizeBytes = blockSize * 4; // Count blocks ready

        var nBlocksReady = dataSigBytes / blockSizeBytes;

        if (doFlush) {
          // Round up to include partial blocks
          nBlocksReady = Math.ceil(nBlocksReady);
        } else {
          // Round down to include only full blocks,
          // less the number of blocks that must remain in the buffer
          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
        } // Count words ready


        var nWordsReady = nBlocksReady * blockSize; // Count bytes ready

        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks

        if (nWordsReady) {
          for (var offset = 0; offset < nWordsReady; offset += blockSize) {
            // Perform concrete-algorithm logic
            this._doProcessBlock(dataWords, offset);
          } // Remove processed words


          processedWords = dataWords.splice(0, nWordsReady);
          data.sigBytes -= nBytesReady;
        } // Return processed words


        return new WordArray.init(processedWords, nBytesReady);
      },

      /**
       * Creates a copy of this object.
       *
       * @return {Object} The clone.
       *
       * @example
       *
       *     var clone = bufferedBlockAlgorithm.clone();
       */
      clone: function () {
        var clone = Base.clone.call(this);
        clone._data = this._data.clone();
        return clone;
      },
      _minBufferSize: 0
    });
    /**
     * Abstract hasher template.
     *
     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
     */

    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
      /**
       * Configuration options.
       */
      cfg: Base.extend(),

      /**
       * Initializes a newly created hasher.
       *
       * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
       *
       * @example
       *
       *     var hasher = CryptoJS.algo.SHA256.create();
       */
      init: function (cfg) {
        // Apply config defaults
        this.cfg = this.cfg.extend(cfg); // Set initial values

        this.reset();
      },

      /**
       * Resets this hasher to its initial state.
       *
       * @example
       *
       *     hasher.reset();
       */
      reset: function () {
        // Reset data buffer
        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic

        this._doReset();
      },

      /**
       * Updates this hasher with a message.
       *
       * @param {WordArray|string} messageUpdate The message to append.
       *
       * @return {Hasher} This hasher.
       *
       * @example
       *
       *     hasher.update('message');
       *     hasher.update(wordArray);
       */
      update: function (messageUpdate) {
        // Append
        this._append(messageUpdate); // Update the hash


        this._process(); // Chainable


        return this;
      },

      /**
       * Finalizes the hash computation.
       * Note that the finalize operation is effectively a destructive, read-once operation.
       *
       * @param {WordArray|string} messageUpdate (Optional) A final message update.
       *
       * @return {WordArray} The hash.
       *
       * @example
       *
       *     var hash = hasher.finalize();
       *     var hash = hasher.finalize('message');
       *     var hash = hasher.finalize(wordArray);
       */
      finalize: function (messageUpdate) {
        // Final message update
        if (messageUpdate) {
          this._append(messageUpdate);
        } // Perform concrete-hasher logic


        var hash = this._doFinalize();

        return hash;
      },
      blockSize: 512 / 32,

      /**
       * Creates a shortcut function to a hasher's object interface.
       *
       * @param {Hasher} hasher The hasher to create a helper for.
       *
       * @return {Function} The shortcut function.
       *
       * @static
       *
       * @example
       *
       *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
       */
      _createHelper: function (hasher) {
        return function (message, cfg) {
          return new hasher.init(cfg).finalize(message);
        };
      },

      /**
       * Creates a shortcut function to the HMAC's object interface.
       *
       * @param {Hasher} hasher The hasher to use in this HMAC helper.
       *
       * @return {Function} The shortcut function.
       *
       * @static
       *
       * @example
       *
       *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
       */
      _createHmacHelper: function (hasher) {
        return function (message, key) {
          return new C_algo.HMAC.init(hasher, key).finalize(message);
        };
      }
    });
    /**
     * Algorithm namespace.
     */

    var C_algo = C.algo = {};
    return C;
  }(Math);

  return CryptoJS;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/crypto-js/enc-base64.js":
/*!**********************************************!*\
  !*** ./node_modules/crypto-js/enc-base64.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;
    /**
     * Base64 encoding strategy.
     */

    var Base64 = C_enc.Base64 = {
      /**
       * Converts a word array to a Base64 string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The Base64 string.
       *
       * @static
       *
       * @example
       *
       *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
       */
      stringify: function (wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;
        var map = this._map; // Clamp excess bits

        wordArray.clamp(); // Convert

        var base64Chars = [];

        for (var i = 0; i < sigBytes; i += 3) {
          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
          var triplet = byte1 << 16 | byte2 << 8 | byte3;

          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
          }
        } // Add padding


        var paddingChar = map.charAt(64);

        if (paddingChar) {
          while (base64Chars.length % 4) {
            base64Chars.push(paddingChar);
          }
        }

        return base64Chars.join('');
      },

      /**
       * Converts a Base64 string to a word array.
       *
       * @param {string} base64Str The Base64 string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
       */
      parse: function (base64Str) {
        // Shortcuts
        var base64StrLength = base64Str.length;
        var map = this._map;
        var reverseMap = this._reverseMap;

        if (!reverseMap) {
          reverseMap = this._reverseMap = [];

          for (var j = 0; j < map.length; j++) {
            reverseMap[map.charCodeAt(j)] = j;
          }
        } // Ignore padding


        var paddingChar = map.charAt(64);

        if (paddingChar) {
          var paddingIndex = base64Str.indexOf(paddingChar);

          if (paddingIndex !== -1) {
            base64StrLength = paddingIndex;
          }
        } // Convert


        return parseLoop(base64Str, base64StrLength, reverseMap);
      },
      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    };

    function parseLoop(base64Str, base64StrLength, reverseMap) {
      var words = [];
      var nBytes = 0;

      for (var i = 0; i < base64StrLength; i++) {
        if (i % 4) {
          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
          var bitsCombined = bits1 | bits2;
          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
          nBytes++;
        }
      }

      return WordArray.create(words, nBytes);
    }
  })();

  return CryptoJS.enc.Base64;
});

/***/ }),

/***/ "./node_modules/crypto-js/enc-base64url.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-js/enc-base64url.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;
    /**
     * Base64url encoding strategy.
     */

    var Base64url = C_enc.Base64url = {
      /**
       * Converts a word array to a Base64url string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @param {boolean} urlSafe Whether to use url safe
       *
       * @return {string} The Base64url string.
       *
       * @static
       *
       * @example
       *
       *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
       */
      stringify: function (wordArray, urlSafe = true) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;
        var map = urlSafe ? this._safe_map : this._map; // Clamp excess bits

        wordArray.clamp(); // Convert

        var base64Chars = [];

        for (var i = 0; i < sigBytes; i += 3) {
          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
          var triplet = byte1 << 16 | byte2 << 8 | byte3;

          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
          }
        } // Add padding


        var paddingChar = map.charAt(64);

        if (paddingChar) {
          while (base64Chars.length % 4) {
            base64Chars.push(paddingChar);
          }
        }

        return base64Chars.join('');
      },

      /**
       * Converts a Base64url string to a word array.
       *
       * @param {string} base64Str The Base64url string.
       *
       * @param {boolean} urlSafe Whether to use url safe
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
       */
      parse: function (base64Str, urlSafe = true) {
        // Shortcuts
        var base64StrLength = base64Str.length;
        var map = urlSafe ? this._safe_map : this._map;
        var reverseMap = this._reverseMap;

        if (!reverseMap) {
          reverseMap = this._reverseMap = [];

          for (var j = 0; j < map.length; j++) {
            reverseMap[map.charCodeAt(j)] = j;
          }
        } // Ignore padding


        var paddingChar = map.charAt(64);

        if (paddingChar) {
          var paddingIndex = base64Str.indexOf(paddingChar);

          if (paddingIndex !== -1) {
            base64StrLength = paddingIndex;
          }
        } // Convert


        return parseLoop(base64Str, base64StrLength, reverseMap);
      },
      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
      _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
    };

    function parseLoop(base64Str, base64StrLength, reverseMap) {
      var words = [];
      var nBytes = 0;

      for (var i = 0; i < base64StrLength; i++) {
        if (i % 4) {
          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
          var bitsCombined = bits1 | bits2;
          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
          nBytes++;
        }
      }

      return WordArray.create(words, nBytes);
    }
  })();

  return CryptoJS.enc.Base64url;
});

/***/ }),

/***/ "./node_modules/crypto-js/enc-utf16.js":
/*!*********************************************!*\
  !*** ./node_modules/crypto-js/enc-utf16.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;
    /**
     * UTF-16 BE encoding strategy.
     */

    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
      /**
       * Converts a word array to a UTF-16 BE string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The UTF-16 BE string.
       *
       * @static
       *
       * @example
       *
       *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
       */
      stringify: function (wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes; // Convert

        var utf16Chars = [];

        for (var i = 0; i < sigBytes; i += 2) {
          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
          utf16Chars.push(String.fromCharCode(codePoint));
        }

        return utf16Chars.join('');
      },

      /**
       * Converts a UTF-16 BE string to a word array.
       *
       * @param {string} utf16Str The UTF-16 BE string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
       */
      parse: function (utf16Str) {
        // Shortcut
        var utf16StrLength = utf16Str.length; // Convert

        var words = [];

        for (var i = 0; i < utf16StrLength; i++) {
          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
        }

        return WordArray.create(words, utf16StrLength * 2);
      }
    };
    /**
     * UTF-16 LE encoding strategy.
     */

    C_enc.Utf16LE = {
      /**
       * Converts a word array to a UTF-16 LE string.
       *
       * @param {WordArray} wordArray The word array.
       *
       * @return {string} The UTF-16 LE string.
       *
       * @static
       *
       * @example
       *
       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
       */
      stringify: function (wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes; // Convert

        var utf16Chars = [];

        for (var i = 0; i < sigBytes; i += 2) {
          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
          utf16Chars.push(String.fromCharCode(codePoint));
        }

        return utf16Chars.join('');
      },

      /**
       * Converts a UTF-16 LE string to a word array.
       *
       * @param {string} utf16Str The UTF-16 LE string.
       *
       * @return {WordArray} The word array.
       *
       * @static
       *
       * @example
       *
       *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
       */
      parse: function (utf16Str) {
        // Shortcut
        var utf16StrLength = utf16Str.length; // Convert

        var words = [];

        for (var i = 0; i < utf16StrLength; i++) {
          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
        }

        return WordArray.create(words, utf16StrLength * 2);
      }
    };

    function swapEndian(word) {
      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
    }
  })();

  return CryptoJS.enc.Utf16;
});

/***/ }),

/***/ "./node_modules/crypto-js/evpkdf.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/evpkdf.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./sha1 */ "./node_modules/crypto-js/sha1.js"), __webpack_require__(/*! ./hmac */ "./node_modules/crypto-js/hmac.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var MD5 = C_algo.MD5;
    /**
     * This key derivation function is meant to conform with EVP_BytesToKey.
     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
     */

    var EvpKDF = C_algo.EvpKDF = Base.extend({
      /**
       * Configuration options.
       *
       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
       * @property {Hasher} hasher The hash algorithm to use. Default: MD5
       * @property {number} iterations The number of iterations to perform. Default: 1
       */
      cfg: Base.extend({
        keySize: 128 / 32,
        hasher: MD5,
        iterations: 1
      }),

      /**
       * Initializes a newly created key derivation function.
       *
       * @param {Object} cfg (Optional) The configuration options to use for the derivation.
       *
       * @example
       *
       *     var kdf = CryptoJS.algo.EvpKDF.create();
       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
       *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
       */
      init: function (cfg) {
        this.cfg = this.cfg.extend(cfg);
      },

      /**
       * Derives a key from a password.
       *
       * @param {WordArray|string} password The password.
       * @param {WordArray|string} salt A salt.
       *
       * @return {WordArray} The derived key.
       *
       * @example
       *
       *     var key = kdf.compute(password, salt);
       */
      compute: function (password, salt) {
        var block; // Shortcut

        var cfg = this.cfg; // Init hasher

        var hasher = cfg.hasher.create(); // Initial values

        var derivedKey = WordArray.create(); // Shortcuts

        var derivedKeyWords = derivedKey.words;
        var keySize = cfg.keySize;
        var iterations = cfg.iterations; // Generate key

        while (derivedKeyWords.length < keySize) {
          if (block) {
            hasher.update(block);
          }

          block = hasher.update(password).finalize(salt);
          hasher.reset(); // Iterations

          for (var i = 1; i < iterations; i++) {
            block = hasher.finalize(block);
            hasher.reset();
          }

          derivedKey.concat(block);
        }

        derivedKey.sigBytes = keySize * 4;
        return derivedKey;
      }
    });
    /**
     * Derives a key from a password.
     *
     * @param {WordArray|string} password The password.
     * @param {WordArray|string} salt A salt.
     * @param {Object} cfg (Optional) The configuration options to use for this computation.
     *
     * @return {WordArray} The derived key.
     *
     * @static
     *
     * @example
     *
     *     var key = CryptoJS.EvpKDF(password, salt);
     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
     */

    C.EvpKDF = function (password, salt, cfg) {
      return EvpKDF.create(cfg).compute(password, salt);
    };
  })();

  return CryptoJS.EvpKDF;
});

/***/ }),

/***/ "./node_modules/crypto-js/format-hex.js":
/*!**********************************************!*\
  !*** ./node_modules/crypto-js/format-hex.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var CipherParams = C_lib.CipherParams;
    var C_enc = C.enc;
    var Hex = C_enc.Hex;
    var C_format = C.format;
    var HexFormatter = C_format.Hex = {
      /**
       * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
       *
       * @param {CipherParams} cipherParams The cipher params object.
       *
       * @return {string} The hexadecimally encoded string.
       *
       * @static
       *
       * @example
       *
       *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
       */
      stringify: function (cipherParams) {
        return cipherParams.ciphertext.toString(Hex);
      },

      /**
       * Converts a hexadecimally encoded ciphertext string to a cipher params object.
       *
       * @param {string} input The hexadecimally encoded string.
       *
       * @return {CipherParams} The cipher params object.
       *
       * @static
       *
       * @example
       *
       *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
       */
      parse: function (input) {
        var ciphertext = Hex.parse(input);
        return CipherParams.create({
          ciphertext: ciphertext
        });
      }
    };
  })();

  return CryptoJS.format.Hex;
});

/***/ }),

/***/ "./node_modules/crypto-js/hmac.js":
/*!****************************************!*\
  !*** ./node_modules/crypto-js/hmac.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var C_algo = C.algo;
    /**
     * HMAC algorithm.
     */

    var HMAC = C_algo.HMAC = Base.extend({
      /**
       * Initializes a newly created HMAC.
       *
       * @param {Hasher} hasher The hash algorithm to use.
       * @param {WordArray|string} key The secret key.
       *
       * @example
       *
       *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
       */
      init: function (hasher, key) {
        // Init hasher
        hasher = this._hasher = new hasher.init(); // Convert string to WordArray, else assume WordArray already

        if (typeof key == 'string') {
          key = Utf8.parse(key);
        } // Shortcuts


        var hasherBlockSize = hasher.blockSize;
        var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys

        if (key.sigBytes > hasherBlockSizeBytes) {
          key = hasher.finalize(key);
        } // Clamp excess bits


        key.clamp(); // Clone key for inner and outer pads

        var oKey = this._oKey = key.clone();
        var iKey = this._iKey = key.clone(); // Shortcuts

        var oKeyWords = oKey.words;
        var iKeyWords = iKey.words; // XOR keys with pad constants

        for (var i = 0; i < hasherBlockSize; i++) {
          oKeyWords[i] ^= 0x5c5c5c5c;
          iKeyWords[i] ^= 0x36363636;
        }

        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes; // Set initial values

        this.reset();
      },

      /**
       * Resets this HMAC to its initial state.
       *
       * @example
       *
       *     hmacHasher.reset();
       */
      reset: function () {
        // Shortcut
        var hasher = this._hasher; // Reset

        hasher.reset();
        hasher.update(this._iKey);
      },

      /**
       * Updates this HMAC with a message.
       *
       * @param {WordArray|string} messageUpdate The message to append.
       *
       * @return {HMAC} This HMAC instance.
       *
       * @example
       *
       *     hmacHasher.update('message');
       *     hmacHasher.update(wordArray);
       */
      update: function (messageUpdate) {
        this._hasher.update(messageUpdate); // Chainable


        return this;
      },

      /**
       * Finalizes the HMAC computation.
       * Note that the finalize operation is effectively a destructive, read-once operation.
       *
       * @param {WordArray|string} messageUpdate (Optional) A final message update.
       *
       * @return {WordArray} The HMAC.
       *
       * @example
       *
       *     var hmac = hmacHasher.finalize();
       *     var hmac = hmacHasher.finalize('message');
       *     var hmac = hmacHasher.finalize(wordArray);
       */
      finalize: function (messageUpdate) {
        // Shortcut
        var hasher = this._hasher; // Compute HMAC

        var innerHash = hasher.finalize(messageUpdate);
        hasher.reset();
        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
        return hmac;
      }
    });
  })();
});

/***/ }),

/***/ "./node_modules/crypto-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/crypto-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./x64-core */ "./node_modules/crypto-js/x64-core.js"), __webpack_require__(/*! ./lib-typedarrays */ "./node_modules/crypto-js/lib-typedarrays.js"), __webpack_require__(/*! ./enc-utf16 */ "./node_modules/crypto-js/enc-utf16.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./enc-base64url */ "./node_modules/crypto-js/enc-base64url.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./sha1 */ "./node_modules/crypto-js/sha1.js"), __webpack_require__(/*! ./sha256 */ "./node_modules/crypto-js/sha256.js"), __webpack_require__(/*! ./sha224 */ "./node_modules/crypto-js/sha224.js"), __webpack_require__(/*! ./sha512 */ "./node_modules/crypto-js/sha512.js"), __webpack_require__(/*! ./sha384 */ "./node_modules/crypto-js/sha384.js"), __webpack_require__(/*! ./sha3 */ "./node_modules/crypto-js/sha3.js"), __webpack_require__(/*! ./ripemd160 */ "./node_modules/crypto-js/ripemd160.js"), __webpack_require__(/*! ./hmac */ "./node_modules/crypto-js/hmac.js"), __webpack_require__(/*! ./pbkdf2 */ "./node_modules/crypto-js/pbkdf2.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"), __webpack_require__(/*! ./mode-cfb */ "./node_modules/crypto-js/mode-cfb.js"), __webpack_require__(/*! ./mode-ctr */ "./node_modules/crypto-js/mode-ctr.js"), __webpack_require__(/*! ./mode-ctr-gladman */ "./node_modules/crypto-js/mode-ctr-gladman.js"), __webpack_require__(/*! ./mode-ofb */ "./node_modules/crypto-js/mode-ofb.js"), __webpack_require__(/*! ./mode-ecb */ "./node_modules/crypto-js/mode-ecb.js"), __webpack_require__(/*! ./pad-ansix923 */ "./node_modules/crypto-js/pad-ansix923.js"), __webpack_require__(/*! ./pad-iso10126 */ "./node_modules/crypto-js/pad-iso10126.js"), __webpack_require__(/*! ./pad-iso97971 */ "./node_modules/crypto-js/pad-iso97971.js"), __webpack_require__(/*! ./pad-zeropadding */ "./node_modules/crypto-js/pad-zeropadding.js"), __webpack_require__(/*! ./pad-nopadding */ "./node_modules/crypto-js/pad-nopadding.js"), __webpack_require__(/*! ./format-hex */ "./node_modules/crypto-js/format-hex.js"), __webpack_require__(/*! ./aes */ "./node_modules/crypto-js/aes.js"), __webpack_require__(/*! ./tripledes */ "./node_modules/crypto-js/tripledes.js"), __webpack_require__(/*! ./rc4 */ "./node_modules/crypto-js/rc4.js"), __webpack_require__(/*! ./rabbit */ "./node_modules/crypto-js/rabbit.js"), __webpack_require__(/*! ./rabbit-legacy */ "./node_modules/crypto-js/rabbit-legacy.js"));
  } else {}
})(this, function (CryptoJS) {
  return CryptoJS;
});

/***/ }),

/***/ "./node_modules/crypto-js/lib-typedarrays.js":
/*!***************************************************!*\
  !*** ./node_modules/crypto-js/lib-typedarrays.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Check if typed arrays are supported
    if (typeof ArrayBuffer != 'function') {
      return;
    } // Shortcuts


    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray; // Reference original init

    var superInit = WordArray.init; // Augment WordArray.init to handle typed arrays

    var subInit = WordArray.init = function (typedArray) {
      // Convert buffers to uint8
      if (typedArray instanceof ArrayBuffer) {
        typedArray = new Uint8Array(typedArray);
      } // Convert other array views to uint8


      if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
      } // Handle Uint8Array


      if (typedArray instanceof Uint8Array) {
        // Shortcut
        var typedArrayByteLength = typedArray.byteLength; // Extract bytes

        var words = [];

        for (var i = 0; i < typedArrayByteLength; i++) {
          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
        } // Initialize this word array


        superInit.call(this, words, typedArrayByteLength);
      } else {
        // Else call normal init
        superInit.apply(this, arguments);
      }
    };

    subInit.prototype = WordArray;
  })();

  return CryptoJS.lib.WordArray;
});

/***/ }),

/***/ "./node_modules/crypto-js/md5.js":
/*!***************************************!*\
  !*** ./node_modules/crypto-js/md5.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo; // Constants table

    var T = []; // Compute constants

    (function () {
      for (var i = 0; i < 64; i++) {
        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
      }
    })();
    /**
     * MD5 hash algorithm.
     */


    var MD5 = C_algo.MD5 = Hasher.extend({
      _doReset: function () {
        this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
      },
      _doProcessBlock: function (M, offset) {
        // Swap endian
        for (var i = 0; i < 16; i++) {
          // Shortcuts
          var offset_i = offset + i;
          var M_offset_i = M[offset_i];
          M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
        } // Shortcuts


        var H = this._hash.words;
        var M_offset_0 = M[offset + 0];
        var M_offset_1 = M[offset + 1];
        var M_offset_2 = M[offset + 2];
        var M_offset_3 = M[offset + 3];
        var M_offset_4 = M[offset + 4];
        var M_offset_5 = M[offset + 5];
        var M_offset_6 = M[offset + 6];
        var M_offset_7 = M[offset + 7];
        var M_offset_8 = M[offset + 8];
        var M_offset_9 = M[offset + 9];
        var M_offset_10 = M[offset + 10];
        var M_offset_11 = M[offset + 11];
        var M_offset_12 = M[offset + 12];
        var M_offset_13 = M[offset + 13];
        var M_offset_14 = M[offset + 14];
        var M_offset_15 = M[offset + 15]; // Working varialbes

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3]; // Computation

        a = FF(a, b, c, d, M_offset_0, 7, T[0]);
        d = FF(d, a, b, c, M_offset_1, 12, T[1]);
        c = FF(c, d, a, b, M_offset_2, 17, T[2]);
        b = FF(b, c, d, a, M_offset_3, 22, T[3]);
        a = FF(a, b, c, d, M_offset_4, 7, T[4]);
        d = FF(d, a, b, c, M_offset_5, 12, T[5]);
        c = FF(c, d, a, b, M_offset_6, 17, T[6]);
        b = FF(b, c, d, a, M_offset_7, 22, T[7]);
        a = FF(a, b, c, d, M_offset_8, 7, T[8]);
        d = FF(d, a, b, c, M_offset_9, 12, T[9]);
        c = FF(c, d, a, b, M_offset_10, 17, T[10]);
        b = FF(b, c, d, a, M_offset_11, 22, T[11]);
        a = FF(a, b, c, d, M_offset_12, 7, T[12]);
        d = FF(d, a, b, c, M_offset_13, 12, T[13]);
        c = FF(c, d, a, b, M_offset_14, 17, T[14]);
        b = FF(b, c, d, a, M_offset_15, 22, T[15]);
        a = GG(a, b, c, d, M_offset_1, 5, T[16]);
        d = GG(d, a, b, c, M_offset_6, 9, T[17]);
        c = GG(c, d, a, b, M_offset_11, 14, T[18]);
        b = GG(b, c, d, a, M_offset_0, 20, T[19]);
        a = GG(a, b, c, d, M_offset_5, 5, T[20]);
        d = GG(d, a, b, c, M_offset_10, 9, T[21]);
        c = GG(c, d, a, b, M_offset_15, 14, T[22]);
        b = GG(b, c, d, a, M_offset_4, 20, T[23]);
        a = GG(a, b, c, d, M_offset_9, 5, T[24]);
        d = GG(d, a, b, c, M_offset_14, 9, T[25]);
        c = GG(c, d, a, b, M_offset_3, 14, T[26]);
        b = GG(b, c, d, a, M_offset_8, 20, T[27]);
        a = GG(a, b, c, d, M_offset_13, 5, T[28]);
        d = GG(d, a, b, c, M_offset_2, 9, T[29]);
        c = GG(c, d, a, b, M_offset_7, 14, T[30]);
        b = GG(b, c, d, a, M_offset_12, 20, T[31]);
        a = HH(a, b, c, d, M_offset_5, 4, T[32]);
        d = HH(d, a, b, c, M_offset_8, 11, T[33]);
        c = HH(c, d, a, b, M_offset_11, 16, T[34]);
        b = HH(b, c, d, a, M_offset_14, 23, T[35]);
        a = HH(a, b, c, d, M_offset_1, 4, T[36]);
        d = HH(d, a, b, c, M_offset_4, 11, T[37]);
        c = HH(c, d, a, b, M_offset_7, 16, T[38]);
        b = HH(b, c, d, a, M_offset_10, 23, T[39]);
        a = HH(a, b, c, d, M_offset_13, 4, T[40]);
        d = HH(d, a, b, c, M_offset_0, 11, T[41]);
        c = HH(c, d, a, b, M_offset_3, 16, T[42]);
        b = HH(b, c, d, a, M_offset_6, 23, T[43]);
        a = HH(a, b, c, d, M_offset_9, 4, T[44]);
        d = HH(d, a, b, c, M_offset_12, 11, T[45]);
        c = HH(c, d, a, b, M_offset_15, 16, T[46]);
        b = HH(b, c, d, a, M_offset_2, 23, T[47]);
        a = II(a, b, c, d, M_offset_0, 6, T[48]);
        d = II(d, a, b, c, M_offset_7, 10, T[49]);
        c = II(c, d, a, b, M_offset_14, 15, T[50]);
        b = II(b, c, d, a, M_offset_5, 21, T[51]);
        a = II(a, b, c, d, M_offset_12, 6, T[52]);
        d = II(d, a, b, c, M_offset_3, 10, T[53]);
        c = II(c, d, a, b, M_offset_10, 15, T[54]);
        b = II(b, c, d, a, M_offset_1, 21, T[55]);
        a = II(a, b, c, d, M_offset_8, 6, T[56]);
        d = II(d, a, b, c, M_offset_15, 10, T[57]);
        c = II(c, d, a, b, M_offset_6, 15, T[58]);
        b = II(b, c, d, a, M_offset_13, 21, T[59]);
        a = II(a, b, c, d, M_offset_4, 6, T[60]);
        d = II(d, a, b, c, M_offset_11, 10, T[61]);
        c = II(c, d, a, b, M_offset_2, 15, T[62]);
        b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value

        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
      },
      _doFinalize: function () {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
        var nBitsTotalL = nBitsTotal;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
        data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

        this._process(); // Shortcuts


        var hash = this._hash;
        var H = hash.words; // Swap endian

        for (var i = 0; i < 4; i++) {
          // Shortcut
          var H_i = H[i];
          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
        } // Return final computed hash


        return hash;
      },
      clone: function () {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }
    });

    function FF(a, b, c, d, x, s, t) {
      var n = a + (b & c | ~b & d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function GG(a, b, c, d, x, s, t) {
      var n = a + (b & d | c & ~d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function HH(a, b, c, d, x, s, t) {
      var n = a + (b ^ c ^ d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function II(a, b, c, d, x, s, t) {
      var n = a + (c ^ (b | ~d)) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.MD5('message');
     *     var hash = CryptoJS.MD5(wordArray);
     */


    C.MD5 = Hasher._createHelper(MD5);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacMD5(message, key);
     */

    C.HmacMD5 = Hasher._createHmacHelper(MD5);
  })(Math);

  return CryptoJS.MD5;
});

/***/ }),

/***/ "./node_modules/crypto-js/mode-cfb.js":
/*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-cfb.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * Cipher Feedback block mode.
   */
  CryptoJS.mode.CFB = function () {
    var CFB = CryptoJS.lib.BlockCipherMode.extend();
    CFB.Encryptor = CFB.extend({
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // Remember this block to use with next block

        this._prevBlock = words.slice(offset, offset + blockSize);
      }
    });
    CFB.Decryptor = CFB.extend({
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize; // Remember this block to use with next block

        var thisBlock = words.slice(offset, offset + blockSize);
        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // This block becomes the previous block

        this._prevBlock = thisBlock;
      }
    });

    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
      var keystream; // Shortcut

      var iv = this._iv; // Generate keystream

      if (iv) {
        keystream = iv.slice(0); // Remove IV for subsequent blocks

        this._iv = undefined;
      } else {
        keystream = this._prevBlock;
      }

      cipher.encryptBlock(keystream, 0); // Encrypt

      for (var i = 0; i < blockSize; i++) {
        words[offset + i] ^= keystream[i];
      }
    }

    return CFB;
  }();

  return CryptoJS.mode.CFB;
});

/***/ }),

/***/ "./node_modules/crypto-js/mode-ctr-gladman.js":
/*!****************************************************!*\
  !*** ./node_modules/crypto-js/mode-ctr-gladman.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   */
  CryptoJS.mode.CTRGladman = function () {
    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

    function incWord(word) {
      if ((word >> 24 & 0xff) === 0xff) {
        //overflow
        var b1 = word >> 16 & 0xff;
        var b2 = word >> 8 & 0xff;
        var b3 = word & 0xff;

        if (b1 === 0xff) // overflow b1
          {
            b1 = 0;

            if (b2 === 0xff) {
              b2 = 0;

              if (b3 === 0xff) {
                b3 = 0;
              } else {
                ++b3;
              }
            } else {
              ++b2;
            }
          } else {
          ++b1;
        }

        word = 0;
        word += b1 << 16;
        word += b2 << 8;
        word += b3;
      } else {
        word += 0x01 << 24;
      }

      return word;
    }

    function incCounter(counter) {
      if ((counter[0] = incWord(counter[0])) === 0) {
        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
        counter[1] = incWord(counter[1]);
      }

      return counter;
    }

    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var iv = this._iv;
        var counter = this._counter; // Generate keystream

        if (iv) {
          counter = this._counter = iv.slice(0); // Remove IV for subsequent blocks

          this._iv = undefined;
        }

        incCounter(counter);
        var keystream = counter.slice(0);
        cipher.encryptBlock(keystream, 0); // Encrypt

        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= keystream[i];
        }
      }
    });
    CTRGladman.Decryptor = Encryptor;
    return CTRGladman;
  }();

  return CryptoJS.mode.CTRGladman;
});

/***/ }),

/***/ "./node_modules/crypto-js/mode-ctr.js":
/*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-ctr.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * Counter block mode.
   */
  CryptoJS.mode.CTR = function () {
    var CTR = CryptoJS.lib.BlockCipherMode.extend();
    var Encryptor = CTR.Encryptor = CTR.extend({
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var iv = this._iv;
        var counter = this._counter; // Generate keystream

        if (iv) {
          counter = this._counter = iv.slice(0); // Remove IV for subsequent blocks

          this._iv = undefined;
        }

        var keystream = counter.slice(0);
        cipher.encryptBlock(keystream, 0); // Increment counter

        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0; // Encrypt

        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= keystream[i];
        }
      }
    });
    CTR.Decryptor = Encryptor;
    return CTR;
  }();

  return CryptoJS.mode.CTR;
});

/***/ }),

/***/ "./node_modules/crypto-js/mode-ecb.js":
/*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-ecb.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * Electronic Codebook block mode.
   */
  CryptoJS.mode.ECB = function () {
    var ECB = CryptoJS.lib.BlockCipherMode.extend();
    ECB.Encryptor = ECB.extend({
      processBlock: function (words, offset) {
        this._cipher.encryptBlock(words, offset);
      }
    });
    ECB.Decryptor = ECB.extend({
      processBlock: function (words, offset) {
        this._cipher.decryptBlock(words, offset);
      }
    });
    return ECB;
  }();

  return CryptoJS.mode.ECB;
});

/***/ }),

/***/ "./node_modules/crypto-js/mode-ofb.js":
/*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-ofb.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * Output Feedback block mode.
   */
  CryptoJS.mode.OFB = function () {
    var OFB = CryptoJS.lib.BlockCipherMode.extend();
    var Encryptor = OFB.Encryptor = OFB.extend({
      processBlock: function (words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var iv = this._iv;
        var keystream = this._keystream; // Generate keystream

        if (iv) {
          keystream = this._keystream = iv.slice(0); // Remove IV for subsequent blocks

          this._iv = undefined;
        }

        cipher.encryptBlock(keystream, 0); // Encrypt

        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= keystream[i];
        }
      }
    });
    OFB.Decryptor = Encryptor;
    return OFB;
  }();

  return CryptoJS.mode.OFB;
});

/***/ }),

/***/ "./node_modules/crypto-js/pad-ansix923.js":
/*!************************************************!*\
  !*** ./node_modules/crypto-js/pad-ansix923.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * ANSI X.923 padding strategy.
   */
  CryptoJS.pad.AnsiX923 = {
    pad: function (data, blockSize) {
      // Shortcuts
      var dataSigBytes = data.sigBytes;
      var blockSizeBytes = blockSize * 4; // Count padding bytes

      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes; // Compute last byte position

      var lastBytePos = dataSigBytes + nPaddingBytes - 1; // Pad

      data.clamp();
      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
      data.sigBytes += nPaddingBytes;
    },
    unpad: function (data) {
      // Get number of padding bytes from last byte
      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

      data.sigBytes -= nPaddingBytes;
    }
  };
  return CryptoJS.pad.Ansix923;
});

/***/ }),

/***/ "./node_modules/crypto-js/pad-iso10126.js":
/*!************************************************!*\
  !*** ./node_modules/crypto-js/pad-iso10126.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * ISO 10126 padding strategy.
   */
  CryptoJS.pad.Iso10126 = {
    pad: function (data, blockSize) {
      // Shortcut
      var blockSizeBytes = blockSize * 4; // Count padding bytes

      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Pad

      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
    },
    unpad: function (data) {
      // Get number of padding bytes from last byte
      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

      data.sigBytes -= nPaddingBytes;
    }
  };
  return CryptoJS.pad.Iso10126;
});

/***/ }),

/***/ "./node_modules/crypto-js/pad-iso97971.js":
/*!************************************************!*\
  !*** ./node_modules/crypto-js/pad-iso97971.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * ISO/IEC 9797-1 Padding Method 2.
   */
  CryptoJS.pad.Iso97971 = {
    pad: function (data, blockSize) {
      // Add 0x80 byte
      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1)); // Zero pad the rest

      CryptoJS.pad.ZeroPadding.pad(data, blockSize);
    },
    unpad: function (data) {
      // Remove zero padding
      CryptoJS.pad.ZeroPadding.unpad(data); // Remove one more byte -- the 0x80 byte

      data.sigBytes--;
    }
  };
  return CryptoJS.pad.Iso97971;
});

/***/ }),

/***/ "./node_modules/crypto-js/pad-nopadding.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-js/pad-nopadding.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * A noop padding strategy.
   */
  CryptoJS.pad.NoPadding = {
    pad: function () {},
    unpad: function () {}
  };
  return CryptoJS.pad.NoPadding;
});

/***/ }),

/***/ "./node_modules/crypto-js/pad-zeropadding.js":
/*!***************************************************!*\
  !*** ./node_modules/crypto-js/pad-zeropadding.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  /**
   * Zero padding strategy.
   */
  CryptoJS.pad.ZeroPadding = {
    pad: function (data, blockSize) {
      // Shortcut
      var blockSizeBytes = blockSize * 4; // Pad

      data.clamp();
      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
    },
    unpad: function (data) {
      // Shortcut
      var dataWords = data.words; // Unpad

      var i = data.sigBytes - 1;

      for (var i = data.sigBytes - 1; i >= 0; i--) {
        if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {
          data.sigBytes = i + 1;
          break;
        }
      }
    }
  };
  return CryptoJS.pad.ZeroPadding;
});

/***/ }),

/***/ "./node_modules/crypto-js/pbkdf2.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/pbkdf2.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./sha1 */ "./node_modules/crypto-js/sha1.js"), __webpack_require__(/*! ./hmac */ "./node_modules/crypto-js/hmac.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var SHA1 = C_algo.SHA1;
    var HMAC = C_algo.HMAC;
    /**
     * Password-Based Key Derivation Function 2 algorithm.
     */

    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
      /**
       * Configuration options.
       *
       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
       * @property {Hasher} hasher The hasher to use. Default: SHA1
       * @property {number} iterations The number of iterations to perform. Default: 1
       */
      cfg: Base.extend({
        keySize: 128 / 32,
        hasher: SHA1,
        iterations: 1
      }),

      /**
       * Initializes a newly created key derivation function.
       *
       * @param {Object} cfg (Optional) The configuration options to use for the derivation.
       *
       * @example
       *
       *     var kdf = CryptoJS.algo.PBKDF2.create();
       *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
       *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
       */
      init: function (cfg) {
        this.cfg = this.cfg.extend(cfg);
      },

      /**
       * Computes the Password-Based Key Derivation Function 2.
       *
       * @param {WordArray|string} password The password.
       * @param {WordArray|string} salt A salt.
       *
       * @return {WordArray} The derived key.
       *
       * @example
       *
       *     var key = kdf.compute(password, salt);
       */
      compute: function (password, salt) {
        // Shortcut
        var cfg = this.cfg; // Init HMAC

        var hmac = HMAC.create(cfg.hasher, password); // Initial values

        var derivedKey = WordArray.create();
        var blockIndex = WordArray.create([0x00000001]); // Shortcuts

        var derivedKeyWords = derivedKey.words;
        var blockIndexWords = blockIndex.words;
        var keySize = cfg.keySize;
        var iterations = cfg.iterations; // Generate key

        while (derivedKeyWords.length < keySize) {
          var block = hmac.update(salt).finalize(blockIndex);
          hmac.reset(); // Shortcuts

          var blockWords = block.words;
          var blockWordsLength = blockWords.length; // Iterations

          var intermediate = block;

          for (var i = 1; i < iterations; i++) {
            intermediate = hmac.finalize(intermediate);
            hmac.reset(); // Shortcut

            var intermediateWords = intermediate.words; // XOR intermediate with block

            for (var j = 0; j < blockWordsLength; j++) {
              blockWords[j] ^= intermediateWords[j];
            }
          }

          derivedKey.concat(block);
          blockIndexWords[0]++;
        }

        derivedKey.sigBytes = keySize * 4;
        return derivedKey;
      }
    });
    /**
     * Computes the Password-Based Key Derivation Function 2.
     *
     * @param {WordArray|string} password The password.
     * @param {WordArray|string} salt A salt.
     * @param {Object} cfg (Optional) The configuration options to use for this computation.
     *
     * @return {WordArray} The derived key.
     *
     * @static
     *
     * @example
     *
     *     var key = CryptoJS.PBKDF2(password, salt);
     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
     */

    C.PBKDF2 = function (password, salt, cfg) {
      return PBKDF2.create(cfg).compute(password, salt);
    };
  })();

  return CryptoJS.PBKDF2;
});

/***/ }),

/***/ "./node_modules/crypto-js/rabbit-legacy.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-js/rabbit-legacy.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var StreamCipher = C_lib.StreamCipher;
    var C_algo = C.algo; // Reusable objects

    var S = [];
    var C_ = [];
    var G = [];
    /**
     * Rabbit stream cipher algorithm.
     *
     * This is a legacy version that neglected to convert the key to little-endian.
     * This error doesn't affect the cipher's security,
     * but it does affect its compatibility with other implementations.
     */

    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
      _doReset: function () {
        // Shortcuts
        var K = this._key.words;
        var iv = this.cfg.iv; // Generate initial state values

        var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16]; // Generate initial counter values

        var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff]; // Carry bit

        this._b = 0; // Iterate the system four times

        for (var i = 0; i < 4; i++) {
          nextState.call(this);
        } // Modify the counters


        for (var i = 0; i < 8; i++) {
          C[i] ^= X[i + 4 & 7];
        } // IV setup


        if (iv) {
          // Shortcuts
          var IV = iv.words;
          var IV_0 = IV[0];
          var IV_1 = IV[1]; // Generate four subvectors

          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
          var i1 = i0 >>> 16 | i2 & 0xffff0000;
          var i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values

          C[0] ^= i0;
          C[1] ^= i1;
          C[2] ^= i2;
          C[3] ^= i3;
          C[4] ^= i0;
          C[5] ^= i1;
          C[6] ^= i2;
          C[7] ^= i3; // Iterate the system four times

          for (var i = 0; i < 4; i++) {
            nextState.call(this);
          }
        }
      },
      _doProcessBlock: function (M, offset) {
        // Shortcut
        var X = this._X; // Iterate the system

        nextState.call(this); // Generate four keystream words

        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

        for (var i = 0; i < 4; i++) {
          // Swap endian
          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00; // Encrypt

          M[offset + i] ^= S[i];
        }
      },
      blockSize: 128 / 32,
      ivSize: 64 / 32
    });

    function nextState() {
      // Shortcuts
      var X = this._X;
      var C = this._C; // Save old counter values

      for (var i = 0; i < 8; i++) {
        C_[i] = C[i];
      } // Calculate new counter values


      C[0] = C[0] + 0x4d34d34d + this._b | 0;
      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0; // Calculate the g-values

      for (var i = 0; i < 8; i++) {
        var gx = X[i] + C[i]; // Construct high and low argument for squaring

        var ga = gx & 0xffff;
        var gb = gx >>> 16; // Calculate high and low result of squaring

        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low

        G[i] = gh ^ gl;
      } // Calculate new state values


      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
    }
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
     */


    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
  })();

  return CryptoJS.RabbitLegacy;
});

/***/ }),

/***/ "./node_modules/crypto-js/rabbit.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/rabbit.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var StreamCipher = C_lib.StreamCipher;
    var C_algo = C.algo; // Reusable objects

    var S = [];
    var C_ = [];
    var G = [];
    /**
     * Rabbit stream cipher algorithm
     */

    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
      _doReset: function () {
        // Shortcuts
        var K = this._key.words;
        var iv = this.cfg.iv; // Swap endian

        for (var i = 0; i < 4; i++) {
          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
        } // Generate initial state values


        var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16]; // Generate initial counter values

        var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff]; // Carry bit

        this._b = 0; // Iterate the system four times

        for (var i = 0; i < 4; i++) {
          nextState.call(this);
        } // Modify the counters


        for (var i = 0; i < 8; i++) {
          C[i] ^= X[i + 4 & 7];
        } // IV setup


        if (iv) {
          // Shortcuts
          var IV = iv.words;
          var IV_0 = IV[0];
          var IV_1 = IV[1]; // Generate four subvectors

          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
          var i1 = i0 >>> 16 | i2 & 0xffff0000;
          var i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values

          C[0] ^= i0;
          C[1] ^= i1;
          C[2] ^= i2;
          C[3] ^= i3;
          C[4] ^= i0;
          C[5] ^= i1;
          C[6] ^= i2;
          C[7] ^= i3; // Iterate the system four times

          for (var i = 0; i < 4; i++) {
            nextState.call(this);
          }
        }
      },
      _doProcessBlock: function (M, offset) {
        // Shortcut
        var X = this._X; // Iterate the system

        nextState.call(this); // Generate four keystream words

        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

        for (var i = 0; i < 4; i++) {
          // Swap endian
          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00; // Encrypt

          M[offset + i] ^= S[i];
        }
      },
      blockSize: 128 / 32,
      ivSize: 64 / 32
    });

    function nextState() {
      // Shortcuts
      var X = this._X;
      var C = this._C; // Save old counter values

      for (var i = 0; i < 8; i++) {
        C_[i] = C[i];
      } // Calculate new counter values


      C[0] = C[0] + 0x4d34d34d + this._b | 0;
      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0; // Calculate the g-values

      for (var i = 0; i < 8; i++) {
        var gx = X[i] + C[i]; // Construct high and low argument for squaring

        var ga = gx & 0xffff;
        var gb = gx >>> 16; // Calculate high and low result of squaring

        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low

        G[i] = gh ^ gl;
      } // Calculate new state values


      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
    }
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
     */


    C.Rabbit = StreamCipher._createHelper(Rabbit);
  })();

  return CryptoJS.Rabbit;
});

/***/ }),

/***/ "./node_modules/crypto-js/rc4.js":
/*!***************************************!*\
  !*** ./node_modules/crypto-js/rc4.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var StreamCipher = C_lib.StreamCipher;
    var C_algo = C.algo;
    /**
     * RC4 stream cipher algorithm.
     */

    var RC4 = C_algo.RC4 = StreamCipher.extend({
      _doReset: function () {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words;
        var keySigBytes = key.sigBytes; // Init sbox

        var S = this._S = [];

        for (var i = 0; i < 256; i++) {
          S[i] = i;
        } // Key setup


        for (var i = 0, j = 0; i < 256; i++) {
          var keyByteIndex = i % keySigBytes;
          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
          j = (j + S[i] + keyByte) % 256; // Swap

          var t = S[i];
          S[i] = S[j];
          S[j] = t;
        } // Counters


        this._i = this._j = 0;
      },
      _doProcessBlock: function (M, offset) {
        M[offset] ^= generateKeystreamWord.call(this);
      },
      keySize: 256 / 32,
      ivSize: 0
    });

    function generateKeystreamWord() {
      // Shortcuts
      var S = this._S;
      var i = this._i;
      var j = this._j; // Generate keystream word

      var keystreamWord = 0;

      for (var n = 0; n < 4; n++) {
        i = (i + 1) % 256;
        j = (j + S[i]) % 256; // Swap

        var t = S[i];
        S[i] = S[j];
        S[j] = t;
        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
      } // Update counters


      this._i = i;
      this._j = j;
      return keystreamWord;
    }
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
     */


    C.RC4 = StreamCipher._createHelper(RC4);
    /**
     * Modified RC4 stream cipher algorithm.
     */

    var RC4Drop = C_algo.RC4Drop = RC4.extend({
      /**
       * Configuration options.
       *
       * @property {number} drop The number of keystream words to drop. Default 192
       */
      cfg: RC4.cfg.extend({
        drop: 192
      }),
      _doReset: function () {
        RC4._doReset.call(this); // Drop


        for (var i = this.cfg.drop; i > 0; i--) {
          generateKeystreamWord.call(this);
        }
      }
    });
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
     */

    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
  })();

  return CryptoJS.RC4;
});

/***/ }),

/***/ "./node_modules/crypto-js/ripemd160.js":
/*!*********************************************!*\
  !*** ./node_modules/crypto-js/ripemd160.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  /** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo; // Constants table

    var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);

    var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);

    var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);

    var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);

    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);

    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
    /**
     * RIPEMD160 hash algorithm.
     */


    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
      _doReset: function () {
        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
      },
      _doProcessBlock: function (M, offset) {
        // Swap endian
        for (var i = 0; i < 16; i++) {
          // Shortcuts
          var offset_i = offset + i;
          var M_offset_i = M[offset_i]; // Swap

          M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
        } // Shortcut


        var H = this._hash.words;
        var hl = _hl.words;
        var hr = _hr.words;
        var zl = _zl.words;
        var zr = _zr.words;
        var sl = _sl.words;
        var sr = _sr.words; // Working variables

        var al, bl, cl, dl, el;
        var ar, br, cr, dr, er;
        ar = al = H[0];
        br = bl = H[1];
        cr = cl = H[2];
        dr = dl = H[3];
        er = el = H[4]; // Computation

        var t;

        for (var i = 0; i < 80; i += 1) {
          t = al + M[offset + zl[i]] | 0;

          if (i < 16) {
            t += f1(bl, cl, dl) + hl[0];
          } else if (i < 32) {
            t += f2(bl, cl, dl) + hl[1];
          } else if (i < 48) {
            t += f3(bl, cl, dl) + hl[2];
          } else if (i < 64) {
            t += f4(bl, cl, dl) + hl[3];
          } else {
            // if (i<80) {
            t += f5(bl, cl, dl) + hl[4];
          }

          t = t | 0;
          t = rotl(t, sl[i]);
          t = t + el | 0;
          al = el;
          el = dl;
          dl = rotl(cl, 10);
          cl = bl;
          bl = t;
          t = ar + M[offset + zr[i]] | 0;

          if (i < 16) {
            t += f5(br, cr, dr) + hr[0];
          } else if (i < 32) {
            t += f4(br, cr, dr) + hr[1];
          } else if (i < 48) {
            t += f3(br, cr, dr) + hr[2];
          } else if (i < 64) {
            t += f2(br, cr, dr) + hr[3];
          } else {
            // if (i<80) {
            t += f1(br, cr, dr) + hr[4];
          }

          t = t | 0;
          t = rotl(t, sr[i]);
          t = t + er | 0;
          ar = er;
          er = dr;
          dr = rotl(cr, 10);
          cr = br;
          br = t;
        } // Intermediate hash value


        t = H[1] + cl + dr | 0;
        H[1] = H[2] + dl + er | 0;
        H[2] = H[3] + el + ar | 0;
        H[3] = H[4] + al + br | 0;
        H[4] = H[0] + bl + cr | 0;
        H[0] = t;
      },
      _doFinalize: function () {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
        data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

        this._process(); // Shortcuts


        var hash = this._hash;
        var H = hash.words; // Swap endian

        for (var i = 0; i < 5; i++) {
          // Shortcut
          var H_i = H[i]; // Swap

          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
        } // Return final computed hash


        return hash;
      },
      clone: function () {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }
    });

    function f1(x, y, z) {
      return x ^ y ^ z;
    }

    function f2(x, y, z) {
      return x & y | ~x & z;
    }

    function f3(x, y, z) {
      return (x | ~y) ^ z;
    }

    function f4(x, y, z) {
      return x & z | y & ~z;
    }

    function f5(x, y, z) {
      return x ^ (y | ~z);
    }

    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.RIPEMD160('message');
     *     var hash = CryptoJS.RIPEMD160(wordArray);
     */


    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
     */

    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
  })(Math);

  return CryptoJS.RIPEMD160;
});

/***/ }),

/***/ "./node_modules/crypto-js/sha1.js":
/*!****************************************!*\
  !*** ./node_modules/crypto-js/sha1.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo; // Reusable object

    var W = [];
    /**
     * SHA-1 hash algorithm.
     */

    var SHA1 = C_algo.SHA1 = Hasher.extend({
      _doReset: function () {
        this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
      },
      _doProcessBlock: function (M, offset) {
        // Shortcut
        var H = this._hash.words; // Working variables

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4]; // Computation

        for (var i = 0; i < 80; i++) {
          if (i < 16) {
            W[i] = M[offset + i] | 0;
          } else {
            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = n << 1 | n >>> 31;
          }

          var t = (a << 5 | a >>> 27) + e + W[i];

          if (i < 20) {
            t += (b & c | ~b & d) + 0x5a827999;
          } else if (i < 40) {
            t += (b ^ c ^ d) + 0x6ed9eba1;
          } else if (i < 60) {
            t += (b & c | b & d | c & d) - 0x70e44324;
          } else
            /* if (i < 80) */
            {
              t += (b ^ c ^ d) - 0x359d3e2a;
            }

          e = d;
          d = c;
          c = b << 30 | b >>> 2;
          b = a;
          a = t;
        } // Intermediate hash value


        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
        H[4] = H[4] + e | 0;
      },
      _doFinalize: function () {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
        data.sigBytes = dataWords.length * 4; // Hash final blocks

        this._process(); // Return final computed hash


        return this._hash;
      },
      clone: function () {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }
    });
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.SHA1('message');
     *     var hash = CryptoJS.SHA1(wordArray);
     */

    C.SHA1 = Hasher._createHelper(SHA1);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacSHA1(message, key);
     */

    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
  })();

  return CryptoJS.SHA1;
});

/***/ }),

/***/ "./node_modules/crypto-js/sha224.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/sha224.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./sha256 */ "./node_modules/crypto-js/sha256.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var SHA256 = C_algo.SHA256;
    /**
     * SHA-224 hash algorithm.
     */

    var SHA224 = C_algo.SHA224 = SHA256.extend({
      _doReset: function () {
        this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
      },
      _doFinalize: function () {
        var hash = SHA256._doFinalize.call(this);

        hash.sigBytes -= 4;
        return hash;
      }
    });
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.SHA224('message');
     *     var hash = CryptoJS.SHA224(wordArray);
     */

    C.SHA224 = SHA256._createHelper(SHA224);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacSHA224(message, key);
     */

    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
  })();

  return CryptoJS.SHA224;
});

/***/ }),

/***/ "./node_modules/crypto-js/sha256.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/sha256.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo; // Initialization and round constants tables

    var H = [];
    var K = []; // Compute constants

    (function () {
      function isPrime(n) {
        var sqrtN = Math.sqrt(n);

        for (var factor = 2; factor <= sqrtN; factor++) {
          if (!(n % factor)) {
            return false;
          }
        }

        return true;
      }

      function getFractionalBits(n) {
        return (n - (n | 0)) * 0x100000000 | 0;
      }

      var n = 2;
      var nPrime = 0;

      while (nPrime < 64) {
        if (isPrime(n)) {
          if (nPrime < 8) {
            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
          }

          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
          nPrime++;
        }

        n++;
      }
    })(); // Reusable object


    var W = [];
    /**
     * SHA-256 hash algorithm.
     */

    var SHA256 = C_algo.SHA256 = Hasher.extend({
      _doReset: function () {
        this._hash = new WordArray.init(H.slice(0));
      },
      _doProcessBlock: function (M, offset) {
        // Shortcut
        var H = this._hash.words; // Working variables

        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];
        var f = H[5];
        var g = H[6];
        var h = H[7]; // Computation

        for (var i = 0; i < 64; i++) {
          if (i < 16) {
            W[i] = M[offset + i] | 0;
          } else {
            var gamma0x = W[i - 15];
            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
            var gamma1x = W[i - 2];
            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
          }

          var ch = e & f ^ ~e & g;
          var maj = a & b ^ a & c ^ b & c;
          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
          var t1 = h + sigma1 + ch + K[i] + W[i];
          var t2 = sigma0 + maj;
          h = g;
          g = f;
          f = e;
          e = d + t1 | 0;
          d = c;
          c = b;
          b = a;
          a = t1 + t2 | 0;
        } // Intermediate hash value


        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
        H[4] = H[4] + e | 0;
        H[5] = H[5] + f | 0;
        H[6] = H[6] + g | 0;
        H[7] = H[7] + h | 0;
      },
      _doFinalize: function () {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
        data.sigBytes = dataWords.length * 4; // Hash final blocks

        this._process(); // Return final computed hash


        return this._hash;
      },
      clone: function () {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }
    });
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.SHA256('message');
     *     var hash = CryptoJS.SHA256(wordArray);
     */

    C.SHA256 = Hasher._createHelper(SHA256);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacSHA256(message, key);
     */

    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
  })(Math);

  return CryptoJS.SHA256;
});

/***/ }),

/***/ "./node_modules/crypto-js/sha3.js":
/*!****************************************!*\
  !*** ./node_modules/crypto-js/sha3.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./x64-core */ "./node_modules/crypto-js/x64-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_x64 = C.x64;
    var X64Word = C_x64.Word;
    var C_algo = C.algo; // Constants tables

    var RHO_OFFSETS = [];
    var PI_INDEXES = [];
    var ROUND_CONSTANTS = []; // Compute Constants

    (function () {
      // Compute rho offset constants
      var x = 1,
          y = 0;

      for (var t = 0; t < 24; t++) {
        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
        var newX = y % 5;
        var newY = (2 * x + 3 * y) % 5;
        x = newX;
        y = newY;
      } // Compute pi index constants


      for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
        }
      } // Compute round constants


      var LFSR = 0x01;

      for (var i = 0; i < 24; i++) {
        var roundConstantMsw = 0;
        var roundConstantLsw = 0;

        for (var j = 0; j < 7; j++) {
          if (LFSR & 0x01) {
            var bitPosition = (1 << j) - 1;

            if (bitPosition < 32) {
              roundConstantLsw ^= 1 << bitPosition;
            } else
              /* if (bitPosition >= 32) */
              {
                roundConstantMsw ^= 1 << bitPosition - 32;
              }
          } // Compute next LFSR


          if (LFSR & 0x80) {
            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
            LFSR = LFSR << 1 ^ 0x71;
          } else {
            LFSR <<= 1;
          }
        }

        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
      }
    })(); // Reusable objects for temporary values


    var T = [];

    (function () {
      for (var i = 0; i < 25; i++) {
        T[i] = X64Word.create();
      }
    })();
    /**
     * SHA-3 hash algorithm.
     */


    var SHA3 = C_algo.SHA3 = Hasher.extend({
      /**
       * Configuration options.
       *
       * @property {number} outputLength
       *   The desired number of bits in the output hash.
       *   Only values permitted are: 224, 256, 384, 512.
       *   Default: 512
       */
      cfg: Hasher.cfg.extend({
        outputLength: 512
      }),
      _doReset: function () {
        var state = this._state = [];

        for (var i = 0; i < 25; i++) {
          state[i] = new X64Word.init();
        }

        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
      },
      _doProcessBlock: function (M, offset) {
        // Shortcuts
        var state = this._state;
        var nBlockSizeLanes = this.blockSize / 2; // Absorb

        for (var i = 0; i < nBlockSizeLanes; i++) {
          // Shortcuts
          var M2i = M[offset + 2 * i];
          var M2i1 = M[offset + 2 * i + 1]; // Swap endian

          M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
          M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00; // Absorb message into state

          var lane = state[i];
          lane.high ^= M2i1;
          lane.low ^= M2i;
        } // Rounds


        for (var round = 0; round < 24; round++) {
          // Theta
          for (var x = 0; x < 5; x++) {
            // Mix column lanes
            var tMsw = 0,
                tLsw = 0;

            for (var y = 0; y < 5; y++) {
              var lane = state[x + 5 * y];
              tMsw ^= lane.high;
              tLsw ^= lane.low;
            } // Temporary values


            var Tx = T[x];
            Tx.high = tMsw;
            Tx.low = tLsw;
          }

          for (var x = 0; x < 5; x++) {
            // Shortcuts
            var Tx4 = T[(x + 4) % 5];
            var Tx1 = T[(x + 1) % 5];
            var Tx1Msw = Tx1.high;
            var Tx1Lsw = Tx1.low; // Mix surrounding columns

            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);

            for (var y = 0; y < 5; y++) {
              var lane = state[x + 5 * y];
              lane.high ^= tMsw;
              lane.low ^= tLsw;
            }
          } // Rho Pi


          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
            var tMsw;
            var tLsw; // Shortcuts

            var lane = state[laneIndex];
            var laneMsw = lane.high;
            var laneLsw = lane.low;
            var rhoOffset = RHO_OFFSETS[laneIndex]; // Rotate lanes

            if (rhoOffset < 32) {
              tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
              tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
            } else
              /* if (rhoOffset >= 32) */
              {
                tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
              } // Transpose lanes


            var TPiLane = T[PI_INDEXES[laneIndex]];
            TPiLane.high = tMsw;
            TPiLane.low = tLsw;
          } // Rho pi at x = y = 0


          var T0 = T[0];
          var state0 = state[0];
          T0.high = state0.high;
          T0.low = state0.low; // Chi

          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              // Shortcuts
              var laneIndex = x + 5 * y;
              var lane = state[laneIndex];
              var TLane = T[laneIndex];
              var Tx1Lane = T[(x + 1) % 5 + 5 * y];
              var Tx2Lane = T[(x + 2) % 5 + 5 * y]; // Mix rows

              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
            }
          } // Iota


          var lane = state[0];
          var roundConstant = ROUND_CONSTANTS[round];
          lane.high ^= roundConstant.high;
          lane.low ^= roundConstant.low;
        }
      },
      _doFinalize: function () {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;
        var blockSizeBits = this.blockSize * 32; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
        data.sigBytes = dataWords.length * 4; // Hash final blocks

        this._process(); // Shortcuts


        var state = this._state;
        var outputLengthBytes = this.cfg.outputLength / 8;
        var outputLengthLanes = outputLengthBytes / 8; // Squeeze

        var hashWords = [];

        for (var i = 0; i < outputLengthLanes; i++) {
          // Shortcuts
          var lane = state[i];
          var laneMsw = lane.high;
          var laneLsw = lane.low; // Swap endian

          laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
          laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00; // Squeeze state to retrieve hash

          hashWords.push(laneLsw);
          hashWords.push(laneMsw);
        } // Return final computed hash


        return new WordArray.init(hashWords, outputLengthBytes);
      },
      clone: function () {
        var clone = Hasher.clone.call(this);

        var state = clone._state = this._state.slice(0);

        for (var i = 0; i < 25; i++) {
          state[i] = state[i].clone();
        }

        return clone;
      }
    });
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.SHA3('message');
     *     var hash = CryptoJS.SHA3(wordArray);
     */

    C.SHA3 = Hasher._createHelper(SHA3);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacSHA3(message, key);
     */

    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
  })(Math);

  return CryptoJS.SHA3;
});

/***/ }),

/***/ "./node_modules/crypto-js/sha384.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/sha384.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./x64-core */ "./node_modules/crypto-js/x64-core.js"), __webpack_require__(/*! ./sha512 */ "./node_modules/crypto-js/sha512.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_x64 = C.x64;
    var X64Word = C_x64.Word;
    var X64WordArray = C_x64.WordArray;
    var C_algo = C.algo;
    var SHA512 = C_algo.SHA512;
    /**
     * SHA-384 hash algorithm.
     */

    var SHA384 = C_algo.SHA384 = SHA512.extend({
      _doReset: function () {
        this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
      },
      _doFinalize: function () {
        var hash = SHA512._doFinalize.call(this);

        hash.sigBytes -= 16;
        return hash;
      }
    });
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.SHA384('message');
     *     var hash = CryptoJS.SHA384(wordArray);
     */

    C.SHA384 = SHA512._createHelper(SHA384);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacSHA384(message, key);
     */

    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
  })();

  return CryptoJS.SHA384;
});

/***/ }),

/***/ "./node_modules/crypto-js/sha512.js":
/*!******************************************!*\
  !*** ./node_modules/crypto-js/sha512.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./x64-core */ "./node_modules/crypto-js/x64-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Hasher = C_lib.Hasher;
    var C_x64 = C.x64;
    var X64Word = C_x64.Word;
    var X64WordArray = C_x64.WordArray;
    var C_algo = C.algo;

    function X64Word_create() {
      return X64Word.create.apply(X64Word, arguments);
    } // Constants


    var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)]; // Reusable objects

    var W = [];

    (function () {
      for (var i = 0; i < 80; i++) {
        W[i] = X64Word_create();
      }
    })();
    /**
     * SHA-512 hash algorithm.
     */


    var SHA512 = C_algo.SHA512 = Hasher.extend({
      _doReset: function () {
        this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
      },
      _doProcessBlock: function (M, offset) {
        // Shortcuts
        var H = this._hash.words;
        var H0 = H[0];
        var H1 = H[1];
        var H2 = H[2];
        var H3 = H[3];
        var H4 = H[4];
        var H5 = H[5];
        var H6 = H[6];
        var H7 = H[7];
        var H0h = H0.high;
        var H0l = H0.low;
        var H1h = H1.high;
        var H1l = H1.low;
        var H2h = H2.high;
        var H2l = H2.low;
        var H3h = H3.high;
        var H3l = H3.low;
        var H4h = H4.high;
        var H4l = H4.low;
        var H5h = H5.high;
        var H5l = H5.low;
        var H6h = H6.high;
        var H6l = H6.low;
        var H7h = H7.high;
        var H7l = H7.low; // Working variables

        var ah = H0h;
        var al = H0l;
        var bh = H1h;
        var bl = H1l;
        var ch = H2h;
        var cl = H2l;
        var dh = H3h;
        var dl = H3l;
        var eh = H4h;
        var el = H4l;
        var fh = H5h;
        var fl = H5l;
        var gh = H6h;
        var gl = H6l;
        var hh = H7h;
        var hl = H7l; // Rounds

        for (var i = 0; i < 80; i++) {
          var Wil;
          var Wih; // Shortcut

          var Wi = W[i]; // Extend message

          if (i < 16) {
            Wih = Wi.high = M[offset + i * 2] | 0;
            Wil = Wi.low = M[offset + i * 2 + 1] | 0;
          } else {
            // Gamma0
            var gamma0x = W[i - 15];
            var gamma0xh = gamma0x.high;
            var gamma0xl = gamma0x.low;
            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25); // Gamma1

            var gamma1x = W[i - 2];
            var gamma1xh = gamma1x.high;
            var gamma1xl = gamma1x.low;
            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

            var Wi7 = W[i - 7];
            var Wi7h = Wi7.high;
            var Wi7l = Wi7.low;
            var Wi16 = W[i - 16];
            var Wi16h = Wi16.high;
            var Wi16l = Wi16.low;
            Wil = gamma0l + Wi7l;
            Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
            Wil = Wil + gamma1l;
            Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
            Wil = Wil + Wi16l;
            Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
            Wi.high = Wih;
            Wi.low = Wil;
          }

          var chh = eh & fh ^ ~eh & gh;
          var chl = el & fl ^ ~el & gl;
          var majh = ah & bh ^ ah & ch ^ bh & ch;
          var majl = al & bl ^ al & cl ^ bl & cl;
          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9); // t1 = h + sigma1 + ch + K[i] + W[i]

          var Ki = K[i];
          var Kih = Ki.high;
          var Kil = Ki.low;
          var t1l = hl + sigma1l;
          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
          var t1l = t1l + chl;
          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
          var t1l = t1l + Kil;
          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
          var t1l = t1l + Wil;
          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0); // t2 = sigma0 + maj

          var t2l = sigma0l + majl;
          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0); // Update working variables

          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          el = dl + t1l | 0;
          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          al = t1l + t2l | 0;
          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
        } // Intermediate hash value


        H0l = H0.low = H0l + al;
        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
        H1l = H1.low = H1l + bl;
        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
        H2l = H2.low = H2l + cl;
        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
        H3l = H3.low = H3l + dl;
        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
        H4l = H4.low = H4l + el;
        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
        H5l = H5.low = H5l + fl;
        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
        H6l = H6.low = H6l + gl;
        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
        H7l = H7.low = H7l + hl;
        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
      },
      _doFinalize: function () {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8; // Add padding

        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
        data.sigBytes = dataWords.length * 4; // Hash final blocks

        this._process(); // Convert hash to 32-bit word array before returning


        var hash = this._hash.toX32(); // Return final computed hash


        return hash;
      },
      clone: function () {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      },
      blockSize: 1024 / 32
    });
    /**
     * Shortcut function to the hasher's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     *
     * @return {WordArray} The hash.
     *
     * @static
     *
     * @example
     *
     *     var hash = CryptoJS.SHA512('message');
     *     var hash = CryptoJS.SHA512(wordArray);
     */

    C.SHA512 = Hasher._createHelper(SHA512);
    /**
     * Shortcut function to the HMAC's object interface.
     *
     * @param {WordArray|string} message The message to hash.
     * @param {WordArray|string} key The secret key.
     *
     * @return {WordArray} The HMAC.
     *
     * @static
     *
     * @example
     *
     *     var hmac = CryptoJS.HmacSHA512(message, key);
     */

    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
  })();

  return CryptoJS.SHA512;
});

/***/ }),

/***/ "./node_modules/crypto-js/tripledes.js":
/*!*********************************************!*\
  !*** ./node_modules/crypto-js/tripledes.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory, undef) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var BlockCipher = C_lib.BlockCipher;
    var C_algo = C.algo; // Permuted Choice 1 constants

    var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]; // Permuted Choice 2 constants

    var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]; // Cumulative bit shift constants

    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28]; // SBOXes and round permutation constants

    var SBOX_P = [{
      0x0: 0x808200,
      0x10000000: 0x8000,
      0x20000000: 0x808002,
      0x30000000: 0x2,
      0x40000000: 0x200,
      0x50000000: 0x808202,
      0x60000000: 0x800202,
      0x70000000: 0x800000,
      0x80000000: 0x202,
      0x90000000: 0x800200,
      0xa0000000: 0x8200,
      0xb0000000: 0x808000,
      0xc0000000: 0x8002,
      0xd0000000: 0x800002,
      0xe0000000: 0x0,
      0xf0000000: 0x8202,
      0x8000000: 0x0,
      0x18000000: 0x808202,
      0x28000000: 0x8202,
      0x38000000: 0x8000,
      0x48000000: 0x808200,
      0x58000000: 0x200,
      0x68000000: 0x808002,
      0x78000000: 0x2,
      0x88000000: 0x800200,
      0x98000000: 0x8200,
      0xa8000000: 0x808000,
      0xb8000000: 0x800202,
      0xc8000000: 0x800002,
      0xd8000000: 0x8002,
      0xe8000000: 0x202,
      0xf8000000: 0x800000,
      0x1: 0x8000,
      0x10000001: 0x2,
      0x20000001: 0x808200,
      0x30000001: 0x800000,
      0x40000001: 0x808002,
      0x50000001: 0x8200,
      0x60000001: 0x200,
      0x70000001: 0x800202,
      0x80000001: 0x808202,
      0x90000001: 0x808000,
      0xa0000001: 0x800002,
      0xb0000001: 0x8202,
      0xc0000001: 0x202,
      0xd0000001: 0x800200,
      0xe0000001: 0x8002,
      0xf0000001: 0x0,
      0x8000001: 0x808202,
      0x18000001: 0x808000,
      0x28000001: 0x800000,
      0x38000001: 0x200,
      0x48000001: 0x8000,
      0x58000001: 0x800002,
      0x68000001: 0x2,
      0x78000001: 0x8202,
      0x88000001: 0x8002,
      0x98000001: 0x800202,
      0xa8000001: 0x202,
      0xb8000001: 0x808200,
      0xc8000001: 0x800200,
      0xd8000001: 0x0,
      0xe8000001: 0x8200,
      0xf8000001: 0x808002
    }, {
      0x0: 0x40084010,
      0x1000000: 0x4000,
      0x2000000: 0x80000,
      0x3000000: 0x40080010,
      0x4000000: 0x40000010,
      0x5000000: 0x40084000,
      0x6000000: 0x40004000,
      0x7000000: 0x10,
      0x8000000: 0x84000,
      0x9000000: 0x40004010,
      0xa000000: 0x40000000,
      0xb000000: 0x84010,
      0xc000000: 0x80010,
      0xd000000: 0x0,
      0xe000000: 0x4010,
      0xf000000: 0x40080000,
      0x800000: 0x40004000,
      0x1800000: 0x84010,
      0x2800000: 0x10,
      0x3800000: 0x40004010,
      0x4800000: 0x40084010,
      0x5800000: 0x40000000,
      0x6800000: 0x80000,
      0x7800000: 0x40080010,
      0x8800000: 0x80010,
      0x9800000: 0x0,
      0xa800000: 0x4000,
      0xb800000: 0x40080000,
      0xc800000: 0x40000010,
      0xd800000: 0x84000,
      0xe800000: 0x40084000,
      0xf800000: 0x4010,
      0x10000000: 0x0,
      0x11000000: 0x40080010,
      0x12000000: 0x40004010,
      0x13000000: 0x40084000,
      0x14000000: 0x40080000,
      0x15000000: 0x10,
      0x16000000: 0x84010,
      0x17000000: 0x4000,
      0x18000000: 0x4010,
      0x19000000: 0x80000,
      0x1a000000: 0x80010,
      0x1b000000: 0x40000010,
      0x1c000000: 0x84000,
      0x1d000000: 0x40004000,
      0x1e000000: 0x40000000,
      0x1f000000: 0x40084010,
      0x10800000: 0x84010,
      0x11800000: 0x80000,
      0x12800000: 0x40080000,
      0x13800000: 0x4000,
      0x14800000: 0x40004000,
      0x15800000: 0x40084010,
      0x16800000: 0x10,
      0x17800000: 0x40000000,
      0x18800000: 0x40084000,
      0x19800000: 0x40000010,
      0x1a800000: 0x40004010,
      0x1b800000: 0x80010,
      0x1c800000: 0x0,
      0x1d800000: 0x4010,
      0x1e800000: 0x40080010,
      0x1f800000: 0x84000
    }, {
      0x0: 0x104,
      0x100000: 0x0,
      0x200000: 0x4000100,
      0x300000: 0x10104,
      0x400000: 0x10004,
      0x500000: 0x4000004,
      0x600000: 0x4010104,
      0x700000: 0x4010000,
      0x800000: 0x4000000,
      0x900000: 0x4010100,
      0xa00000: 0x10100,
      0xb00000: 0x4010004,
      0xc00000: 0x4000104,
      0xd00000: 0x10000,
      0xe00000: 0x4,
      0xf00000: 0x100,
      0x80000: 0x4010100,
      0x180000: 0x4010004,
      0x280000: 0x0,
      0x380000: 0x4000100,
      0x480000: 0x4000004,
      0x580000: 0x10000,
      0x680000: 0x10004,
      0x780000: 0x104,
      0x880000: 0x4,
      0x980000: 0x100,
      0xa80000: 0x4010000,
      0xb80000: 0x10104,
      0xc80000: 0x10100,
      0xd80000: 0x4000104,
      0xe80000: 0x4010104,
      0xf80000: 0x4000000,
      0x1000000: 0x4010100,
      0x1100000: 0x10004,
      0x1200000: 0x10000,
      0x1300000: 0x4000100,
      0x1400000: 0x100,
      0x1500000: 0x4010104,
      0x1600000: 0x4000004,
      0x1700000: 0x0,
      0x1800000: 0x4000104,
      0x1900000: 0x4000000,
      0x1a00000: 0x4,
      0x1b00000: 0x10100,
      0x1c00000: 0x4010000,
      0x1d00000: 0x104,
      0x1e00000: 0x10104,
      0x1f00000: 0x4010004,
      0x1080000: 0x4000000,
      0x1180000: 0x104,
      0x1280000: 0x4010100,
      0x1380000: 0x0,
      0x1480000: 0x10004,
      0x1580000: 0x4000100,
      0x1680000: 0x100,
      0x1780000: 0x4010004,
      0x1880000: 0x10000,
      0x1980000: 0x4010104,
      0x1a80000: 0x10104,
      0x1b80000: 0x4000004,
      0x1c80000: 0x4000104,
      0x1d80000: 0x4010000,
      0x1e80000: 0x4,
      0x1f80000: 0x10100
    }, {
      0x0: 0x80401000,
      0x10000: 0x80001040,
      0x20000: 0x401040,
      0x30000: 0x80400000,
      0x40000: 0x0,
      0x50000: 0x401000,
      0x60000: 0x80000040,
      0x70000: 0x400040,
      0x80000: 0x80000000,
      0x90000: 0x400000,
      0xa0000: 0x40,
      0xb0000: 0x80001000,
      0xc0000: 0x80400040,
      0xd0000: 0x1040,
      0xe0000: 0x1000,
      0xf0000: 0x80401040,
      0x8000: 0x80001040,
      0x18000: 0x40,
      0x28000: 0x80400040,
      0x38000: 0x80001000,
      0x48000: 0x401000,
      0x58000: 0x80401040,
      0x68000: 0x0,
      0x78000: 0x80400000,
      0x88000: 0x1000,
      0x98000: 0x80401000,
      0xa8000: 0x400000,
      0xb8000: 0x1040,
      0xc8000: 0x80000000,
      0xd8000: 0x400040,
      0xe8000: 0x401040,
      0xf8000: 0x80000040,
      0x100000: 0x400040,
      0x110000: 0x401000,
      0x120000: 0x80000040,
      0x130000: 0x0,
      0x140000: 0x1040,
      0x150000: 0x80400040,
      0x160000: 0x80401000,
      0x170000: 0x80001040,
      0x180000: 0x80401040,
      0x190000: 0x80000000,
      0x1a0000: 0x80400000,
      0x1b0000: 0x401040,
      0x1c0000: 0x80001000,
      0x1d0000: 0x400000,
      0x1e0000: 0x40,
      0x1f0000: 0x1000,
      0x108000: 0x80400000,
      0x118000: 0x80401040,
      0x128000: 0x0,
      0x138000: 0x401000,
      0x148000: 0x400040,
      0x158000: 0x80000000,
      0x168000: 0x80001040,
      0x178000: 0x40,
      0x188000: 0x80000040,
      0x198000: 0x1000,
      0x1a8000: 0x80001000,
      0x1b8000: 0x80400040,
      0x1c8000: 0x1040,
      0x1d8000: 0x80401000,
      0x1e8000: 0x400000,
      0x1f8000: 0x401040
    }, {
      0x0: 0x80,
      0x1000: 0x1040000,
      0x2000: 0x40000,
      0x3000: 0x20000000,
      0x4000: 0x20040080,
      0x5000: 0x1000080,
      0x6000: 0x21000080,
      0x7000: 0x40080,
      0x8000: 0x1000000,
      0x9000: 0x20040000,
      0xa000: 0x20000080,
      0xb000: 0x21040080,
      0xc000: 0x21040000,
      0xd000: 0x0,
      0xe000: 0x1040080,
      0xf000: 0x21000000,
      0x800: 0x1040080,
      0x1800: 0x21000080,
      0x2800: 0x80,
      0x3800: 0x1040000,
      0x4800: 0x40000,
      0x5800: 0x20040080,
      0x6800: 0x21040000,
      0x7800: 0x20000000,
      0x8800: 0x20040000,
      0x9800: 0x0,
      0xa800: 0x21040080,
      0xb800: 0x1000080,
      0xc800: 0x20000080,
      0xd800: 0x21000000,
      0xe800: 0x1000000,
      0xf800: 0x40080,
      0x10000: 0x40000,
      0x11000: 0x80,
      0x12000: 0x20000000,
      0x13000: 0x21000080,
      0x14000: 0x1000080,
      0x15000: 0x21040000,
      0x16000: 0x20040080,
      0x17000: 0x1000000,
      0x18000: 0x21040080,
      0x19000: 0x21000000,
      0x1a000: 0x1040000,
      0x1b000: 0x20040000,
      0x1c000: 0x40080,
      0x1d000: 0x20000080,
      0x1e000: 0x0,
      0x1f000: 0x1040080,
      0x10800: 0x21000080,
      0x11800: 0x1000000,
      0x12800: 0x1040000,
      0x13800: 0x20040080,
      0x14800: 0x20000000,
      0x15800: 0x1040080,
      0x16800: 0x80,
      0x17800: 0x21040000,
      0x18800: 0x40080,
      0x19800: 0x21040080,
      0x1a800: 0x0,
      0x1b800: 0x21000000,
      0x1c800: 0x1000080,
      0x1d800: 0x40000,
      0x1e800: 0x20040000,
      0x1f800: 0x20000080
    }, {
      0x0: 0x10000008,
      0x100: 0x2000,
      0x200: 0x10200000,
      0x300: 0x10202008,
      0x400: 0x10002000,
      0x500: 0x200000,
      0x600: 0x200008,
      0x700: 0x10000000,
      0x800: 0x0,
      0x900: 0x10002008,
      0xa00: 0x202000,
      0xb00: 0x8,
      0xc00: 0x10200008,
      0xd00: 0x202008,
      0xe00: 0x2008,
      0xf00: 0x10202000,
      0x80: 0x10200000,
      0x180: 0x10202008,
      0x280: 0x8,
      0x380: 0x200000,
      0x480: 0x202008,
      0x580: 0x10000008,
      0x680: 0x10002000,
      0x780: 0x2008,
      0x880: 0x200008,
      0x980: 0x2000,
      0xa80: 0x10002008,
      0xb80: 0x10200008,
      0xc80: 0x0,
      0xd80: 0x10202000,
      0xe80: 0x202000,
      0xf80: 0x10000000,
      0x1000: 0x10002000,
      0x1100: 0x10200008,
      0x1200: 0x10202008,
      0x1300: 0x2008,
      0x1400: 0x200000,
      0x1500: 0x10000000,
      0x1600: 0x10000008,
      0x1700: 0x202000,
      0x1800: 0x202008,
      0x1900: 0x0,
      0x1a00: 0x8,
      0x1b00: 0x10200000,
      0x1c00: 0x2000,
      0x1d00: 0x10002008,
      0x1e00: 0x10202000,
      0x1f00: 0x200008,
      0x1080: 0x8,
      0x1180: 0x202000,
      0x1280: 0x200000,
      0x1380: 0x10000008,
      0x1480: 0x10002000,
      0x1580: 0x2008,
      0x1680: 0x10202008,
      0x1780: 0x10200000,
      0x1880: 0x10202000,
      0x1980: 0x10200008,
      0x1a80: 0x2000,
      0x1b80: 0x202008,
      0x1c80: 0x200008,
      0x1d80: 0x0,
      0x1e80: 0x10000000,
      0x1f80: 0x10002008
    }, {
      0x0: 0x100000,
      0x10: 0x2000401,
      0x20: 0x400,
      0x30: 0x100401,
      0x40: 0x2100401,
      0x50: 0x0,
      0x60: 0x1,
      0x70: 0x2100001,
      0x80: 0x2000400,
      0x90: 0x100001,
      0xa0: 0x2000001,
      0xb0: 0x2100400,
      0xc0: 0x2100000,
      0xd0: 0x401,
      0xe0: 0x100400,
      0xf0: 0x2000000,
      0x8: 0x2100001,
      0x18: 0x0,
      0x28: 0x2000401,
      0x38: 0x2100400,
      0x48: 0x100000,
      0x58: 0x2000001,
      0x68: 0x2000000,
      0x78: 0x401,
      0x88: 0x100401,
      0x98: 0x2000400,
      0xa8: 0x2100000,
      0xb8: 0x100001,
      0xc8: 0x400,
      0xd8: 0x2100401,
      0xe8: 0x1,
      0xf8: 0x100400,
      0x100: 0x2000000,
      0x110: 0x100000,
      0x120: 0x2000401,
      0x130: 0x2100001,
      0x140: 0x100001,
      0x150: 0x2000400,
      0x160: 0x2100400,
      0x170: 0x100401,
      0x180: 0x401,
      0x190: 0x2100401,
      0x1a0: 0x100400,
      0x1b0: 0x1,
      0x1c0: 0x0,
      0x1d0: 0x2100000,
      0x1e0: 0x2000001,
      0x1f0: 0x400,
      0x108: 0x100400,
      0x118: 0x2000401,
      0x128: 0x2100001,
      0x138: 0x1,
      0x148: 0x2000000,
      0x158: 0x100000,
      0x168: 0x401,
      0x178: 0x2100400,
      0x188: 0x2000001,
      0x198: 0x2100000,
      0x1a8: 0x0,
      0x1b8: 0x2100401,
      0x1c8: 0x100401,
      0x1d8: 0x400,
      0x1e8: 0x2000400,
      0x1f8: 0x100001
    }, {
      0x0: 0x8000820,
      0x1: 0x20000,
      0x2: 0x8000000,
      0x3: 0x20,
      0x4: 0x20020,
      0x5: 0x8020820,
      0x6: 0x8020800,
      0x7: 0x800,
      0x8: 0x8020000,
      0x9: 0x8000800,
      0xa: 0x20800,
      0xb: 0x8020020,
      0xc: 0x820,
      0xd: 0x0,
      0xe: 0x8000020,
      0xf: 0x20820,
      0x80000000: 0x800,
      0x80000001: 0x8020820,
      0x80000002: 0x8000820,
      0x80000003: 0x8000000,
      0x80000004: 0x8020000,
      0x80000005: 0x20800,
      0x80000006: 0x20820,
      0x80000007: 0x20,
      0x80000008: 0x8000020,
      0x80000009: 0x820,
      0x8000000a: 0x20020,
      0x8000000b: 0x8020800,
      0x8000000c: 0x0,
      0x8000000d: 0x8020020,
      0x8000000e: 0x8000800,
      0x8000000f: 0x20000,
      0x10: 0x20820,
      0x11: 0x8020800,
      0x12: 0x20,
      0x13: 0x800,
      0x14: 0x8000800,
      0x15: 0x8000020,
      0x16: 0x8020020,
      0x17: 0x20000,
      0x18: 0x0,
      0x19: 0x20020,
      0x1a: 0x8020000,
      0x1b: 0x8000820,
      0x1c: 0x8020820,
      0x1d: 0x20800,
      0x1e: 0x820,
      0x1f: 0x8000000,
      0x80000010: 0x20000,
      0x80000011: 0x800,
      0x80000012: 0x8020020,
      0x80000013: 0x20820,
      0x80000014: 0x20,
      0x80000015: 0x8020000,
      0x80000016: 0x8000000,
      0x80000017: 0x8000820,
      0x80000018: 0x8020820,
      0x80000019: 0x8000020,
      0x8000001a: 0x8000800,
      0x8000001b: 0x0,
      0x8000001c: 0x20800,
      0x8000001d: 0x820,
      0x8000001e: 0x20020,
      0x8000001f: 0x8020800
    }]; // Masks that select the SBOX input

    var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];
    /**
     * DES block cipher algorithm.
     */

    var DES = C_algo.DES = BlockCipher.extend({
      _doReset: function () {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words; // Select 56 bits according to PC1

        var keyBits = [];

        for (var i = 0; i < 56; i++) {
          var keyBitPos = PC1[i] - 1;
          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
        } // Assemble 16 subkeys


        var subKeys = this._subKeys = [];

        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
          // Create subkey
          var subKey = subKeys[nSubKey] = []; // Shortcut

          var bitShift = BIT_SHIFTS[nSubKey]; // Select 48 bits according to PC2

          for (var i = 0; i < 24; i++) {
            // Select from the left 28 key bits
            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6; // Select from the right 28 key bits

            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
          } // Since each subkey is applied to an expanded 32-bit input,
          // the subkey can be broken into 8 values scaled to 32-bits,
          // which allows the key to be used without expansion


          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;

          for (var i = 1; i < 7; i++) {
            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
          }

          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
        } // Compute inverse subkeys


        var invSubKeys = this._invSubKeys = [];

        for (var i = 0; i < 16; i++) {
          invSubKeys[i] = subKeys[15 - i];
        }
      },
      encryptBlock: function (M, offset) {
        this._doCryptBlock(M, offset, this._subKeys);
      },
      decryptBlock: function (M, offset) {
        this._doCryptBlock(M, offset, this._invSubKeys);
      },
      _doCryptBlock: function (M, offset, subKeys) {
        // Get input
        this._lBlock = M[offset];
        this._rBlock = M[offset + 1]; // Initial permutation

        exchangeLR.call(this, 4, 0x0f0f0f0f);
        exchangeLR.call(this, 16, 0x0000ffff);
        exchangeRL.call(this, 2, 0x33333333);
        exchangeRL.call(this, 8, 0x00ff00ff);
        exchangeLR.call(this, 1, 0x55555555); // Rounds

        for (var round = 0; round < 16; round++) {
          // Shortcuts
          var subKey = subKeys[round];
          var lBlock = this._lBlock;
          var rBlock = this._rBlock; // Feistel function

          var f = 0;

          for (var i = 0; i < 8; i++) {
            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
          }

          this._lBlock = rBlock;
          this._rBlock = lBlock ^ f;
        } // Undo swap from last round


        var t = this._lBlock;
        this._lBlock = this._rBlock;
        this._rBlock = t; // Final permutation

        exchangeLR.call(this, 1, 0x55555555);
        exchangeRL.call(this, 8, 0x00ff00ff);
        exchangeRL.call(this, 2, 0x33333333);
        exchangeLR.call(this, 16, 0x0000ffff);
        exchangeLR.call(this, 4, 0x0f0f0f0f); // Set output

        M[offset] = this._lBlock;
        M[offset + 1] = this._rBlock;
      },
      keySize: 64 / 32,
      ivSize: 64 / 32,
      blockSize: 64 / 32
    }); // Swap bits across the left and right words

    function exchangeLR(offset, mask) {
      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
      this._rBlock ^= t;
      this._lBlock ^= t << offset;
    }

    function exchangeRL(offset, mask) {
      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
      this._lBlock ^= t;
      this._rBlock ^= t << offset;
    }
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
     */


    C.DES = BlockCipher._createHelper(DES);
    /**
     * Triple-DES block cipher algorithm.
     */

    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
      _doReset: function () {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words; // Make sure the key length is valid (64, 128 or >= 192 bit)

        if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
          throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
        } // Extend the key according to the keying options defined in 3DES standard


        var key1 = keyWords.slice(0, 2);
        var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
        var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6); // Create DES instances

        this._des1 = DES.createEncryptor(WordArray.create(key1));
        this._des2 = DES.createEncryptor(WordArray.create(key2));
        this._des3 = DES.createEncryptor(WordArray.create(key3));
      },
      encryptBlock: function (M, offset) {
        this._des1.encryptBlock(M, offset);

        this._des2.decryptBlock(M, offset);

        this._des3.encryptBlock(M, offset);
      },
      decryptBlock: function (M, offset) {
        this._des3.decryptBlock(M, offset);

        this._des2.encryptBlock(M, offset);

        this._des1.decryptBlock(M, offset);
      },
      keySize: 192 / 32,
      ivSize: 64 / 32,
      blockSize: 64 / 32
    });
    /**
     * Shortcut functions to the cipher's object interface.
     *
     * @example
     *
     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
     */

    C.TripleDES = BlockCipher._createHelper(TripleDES);
  })();

  return CryptoJS.TripleDES;
});

/***/ }),

/***/ "./node_modules/crypto-js/x64-core.js":
/*!********************************************!*\
  !*** ./node_modules/crypto-js/x64-core.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

;

(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));
  } else {}
})(this, function (CryptoJS) {
  (function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var X32WordArray = C_lib.WordArray;
    /**
     * x64 namespace.
     */

    var C_x64 = C.x64 = {};
    /**
     * A 64-bit word.
     */

    var X64Word = C_x64.Word = Base.extend({
      /**
       * Initializes a newly created 64-bit word.
       *
       * @param {number} high The high 32 bits.
       * @param {number} low The low 32 bits.
       *
       * @example
       *
       *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
       */
      init: function (high, low) {
        this.high = high;
        this.low = low;
      }
      /**
       * Bitwise NOTs this word.
       *
       * @return {X64Word} A new x64-Word object after negating.
       *
       * @example
       *
       *     var negated = x64Word.not();
       */
      // not: function () {
      // var high = ~this.high;
      // var low = ~this.low;
      // return X64Word.create(high, low);
      // },

      /**
       * Bitwise ANDs this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to AND with this word.
       *
       * @return {X64Word} A new x64-Word object after ANDing.
       *
       * @example
       *
       *     var anded = x64Word.and(anotherX64Word);
       */
      // and: function (word) {
      // var high = this.high & word.high;
      // var low = this.low & word.low;
      // return X64Word.create(high, low);
      // },

      /**
       * Bitwise ORs this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to OR with this word.
       *
       * @return {X64Word} A new x64-Word object after ORing.
       *
       * @example
       *
       *     var ored = x64Word.or(anotherX64Word);
       */
      // or: function (word) {
      // var high = this.high | word.high;
      // var low = this.low | word.low;
      // return X64Word.create(high, low);
      // },

      /**
       * Bitwise XORs this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to XOR with this word.
       *
       * @return {X64Word} A new x64-Word object after XORing.
       *
       * @example
       *
       *     var xored = x64Word.xor(anotherX64Word);
       */
      // xor: function (word) {
      // var high = this.high ^ word.high;
      // var low = this.low ^ word.low;
      // return X64Word.create(high, low);
      // },

      /**
       * Shifts this word n bits to the left.
       *
       * @param {number} n The number of bits to shift.
       *
       * @return {X64Word} A new x64-Word object after shifting.
       *
       * @example
       *
       *     var shifted = x64Word.shiftL(25);
       */
      // shiftL: function (n) {
      // if (n < 32) {
      // var high = (this.high << n) | (this.low >>> (32 - n));
      // var low = this.low << n;
      // } else {
      // var high = this.low << (n - 32);
      // var low = 0;
      // }
      // return X64Word.create(high, low);
      // },

      /**
       * Shifts this word n bits to the right.
       *
       * @param {number} n The number of bits to shift.
       *
       * @return {X64Word} A new x64-Word object after shifting.
       *
       * @example
       *
       *     var shifted = x64Word.shiftR(7);
       */
      // shiftR: function (n) {
      // if (n < 32) {
      // var low = (this.low >>> n) | (this.high << (32 - n));
      // var high = this.high >>> n;
      // } else {
      // var low = this.high >>> (n - 32);
      // var high = 0;
      // }
      // return X64Word.create(high, low);
      // },

      /**
       * Rotates this word n bits to the left.
       *
       * @param {number} n The number of bits to rotate.
       *
       * @return {X64Word} A new x64-Word object after rotating.
       *
       * @example
       *
       *     var rotated = x64Word.rotL(25);
       */
      // rotL: function (n) {
      // return this.shiftL(n).or(this.shiftR(64 - n));
      // },

      /**
       * Rotates this word n bits to the right.
       *
       * @param {number} n The number of bits to rotate.
       *
       * @return {X64Word} A new x64-Word object after rotating.
       *
       * @example
       *
       *     var rotated = x64Word.rotR(7);
       */
      // rotR: function (n) {
      // return this.shiftR(n).or(this.shiftL(64 - n));
      // },

      /**
       * Adds this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to add with this word.
       *
       * @return {X64Word} A new x64-Word object after adding.
       *
       * @example
       *
       *     var added = x64Word.add(anotherX64Word);
       */
      // add: function (word) {
      // var low = (this.low + word.low) | 0;
      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
      // var high = (this.high + word.high + carry) | 0;
      // return X64Word.create(high, low);
      // }

    });
    /**
     * An array of 64-bit words.
     *
     * @property {Array} words The array of CryptoJS.x64.Word objects.
     * @property {number} sigBytes The number of significant bytes in this word array.
     */

    var X64WordArray = C_x64.WordArray = Base.extend({
      /**
       * Initializes a newly created word array.
       *
       * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
       * @param {number} sigBytes (Optional) The number of significant bytes in the words.
       *
       * @example
       *
       *     var wordArray = CryptoJS.x64.WordArray.create();
       *
       *     var wordArray = CryptoJS.x64.WordArray.create([
       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
       *     ]);
       *
       *     var wordArray = CryptoJS.x64.WordArray.create([
       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
       *     ], 10);
       */
      init: function (words, sigBytes) {
        words = this.words = words || [];

        if (sigBytes != undefined) {
          this.sigBytes = sigBytes;
        } else {
          this.sigBytes = words.length * 8;
        }
      },

      /**
       * Converts this 64-bit word array to a 32-bit word array.
       *
       * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
       *
       * @example
       *
       *     var x32WordArray = x64WordArray.toX32();
       */
      toX32: function () {
        // Shortcuts
        var x64Words = this.words;
        var x64WordsLength = x64Words.length; // Convert

        var x32Words = [];

        for (var i = 0; i < x64WordsLength; i++) {
          var x64Word = x64Words[i];
          x32Words.push(x64Word.high);
          x32Words.push(x64Word.low);
        }

        return X32WordArray.create(x32Words, this.sigBytes);
      },

      /**
       * Creates a copy of this word array.
       *
       * @return {X64WordArray} The clone.
       *
       * @example
       *
       *     var clone = x64WordArray.clone();
       */
      clone: function () {
        var clone = Base.clone.call(this); // Clone "words" array

        var words = clone.words = this.words.slice(0); // Clone each X64Word object

        var wordsLength = words.length;

        for (var i = 0; i < wordsLength; i++) {
          words[i] = words[i].clone();
        }

        return clone;
      }
    });
  })();

  return CryptoJS;
});

/***/ }),

/***/ "./node_modules/extensionizer/extension-instance.js":
/*!**********************************************************!*\
  !*** ./node_modules/extensionizer/extension-instance.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

const apis = ['alarms', 'bookmarks', 'browserAction', 'commands', 'contextMenus', 'cookies', 'downloads', 'events', 'extension', 'extensionTypes', 'history', 'i18n', 'idle', 'notifications', 'pageAction', 'runtime', 'storage', 'tabs', 'webNavigation', 'webRequest', 'windows'];
const hasChrome = typeof chrome !== 'undefined';
const hasWindow = typeof window !== 'undefined';
const hasBrowser = typeof browser !== 'undefined';

function Extension() {
  const _this = this;

  apis.forEach(function (api) {
    _this[api] = null;

    if (hasChrome) {
      try {
        if (chrome[api]) {
          _this[api] = chrome[api];
        }
      } catch (e) {}
    }

    if (hasWindow) {
      try {
        if (window[api]) {
          _this[api] = window[api];
        }
      } catch (e) {}
    }

    if (hasBrowser) {
      try {
        if (browser[api]) {
          _this[api] = browser[api];
        }
      } catch (e) {}

      try {
        _this.api = browser.extension[api];
      } catch (e) {}
    }
  });

  if (hasBrowser) {
    try {
      if (browser && browser.runtime) {
        this.runtime = browser.runtime;
      }
    } catch (e) {}

    try {
      if (browser && browser.browserAction) {
        this.browserAction = browser.browserAction;
      }
    } catch (e) {}
  }
}

module.exports = Extension;

/***/ }),

/***/ "./node_modules/extensionizer/index.js":
/*!*********************************************!*\
  !*** ./node_modules/extensionizer/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Extension.js
 *
 * A module for unifying browser differences in the WebExtension API.
 *
 * Initially implemented because Chrome hides all of their WebExtension API
 * behind a global `chrome` variable, but we'd like to start grooming
 * the code-base for cross-browser extension support.
 *
 * You can read more about the WebExtension API here:
 * https://developer.mozilla.org/en-US/Add-ons/WebExtensions
 */
const Extension = __webpack_require__(/*! ./extension-instance */ "./node_modules/extensionizer/extension-instance.js");

module.exports = new Extension();

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/iso-url/index.js":
/*!***************************************!*\
  !*** ./node_modules/iso-url/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  URLWithLegacySupport,
  format,
  URLSearchParams,
  defaultBase
} = __webpack_require__(/*! ./src/url */ "./node_modules/iso-url/src/url-browser.js");

const relative = __webpack_require__(/*! ./src/relative */ "./node_modules/iso-url/src/relative.js");

module.exports = {
  URL: URLWithLegacySupport,
  URLSearchParams,
  format,
  relative,
  defaultBase
};

/***/ }),

/***/ "./node_modules/iso-url/src/relative.js":
/*!**********************************************!*\
  !*** ./node_modules/iso-url/src/relative.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const {
  URLWithLegacySupport,
  format
} = __webpack_require__(/*! ./url */ "./node_modules/iso-url/src/url-browser.js");

module.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {
  let protocol = location.protocol ? location.protocol.replace(':', '') : 'http'; // Check protocol map

  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
  let urlParsed;

  try {
    urlParsed = new URLWithLegacySupport(url);
  } catch (err) {
    urlParsed = {};
  }

  const base = Object.assign({}, location, {
    protocol: protocol || urlParsed.protocol,
    host: location.host || urlParsed.host
  });
  return new URLWithLegacySupport(url, format(base)).toString();
};

/***/ }),

/***/ "./node_modules/iso-url/src/url-browser.js":
/*!*************************************************!*\
  !*** ./node_modules/iso-url/src/url-browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const defaultBase = self.location ? self.location.protocol + '//' + self.location.host : '';
const URL = self.URL;

class URLWithLegacySupport {
  constructor(url = '', base = defaultBase) {
    this.super = new URL(url, base);
    this.path = this.pathname + this.search;
    this.auth = this.username && this.password ? this.username + ':' + this.password : null;
    this.query = this.search && this.search.startsWith('?') ? this.search.slice(1) : null;
  }

  get hash() {
    return this.super.hash;
  }

  get host() {
    return this.super.host;
  }

  get hostname() {
    return this.super.hostname;
  }

  get href() {
    return this.super.href;
  }

  get origin() {
    return this.super.origin;
  }

  get password() {
    return this.super.password;
  }

  get pathname() {
    return this.super.pathname;
  }

  get port() {
    return this.super.port;
  }

  get protocol() {
    return this.super.protocol;
  }

  get search() {
    return this.super.search;
  }

  get searchParams() {
    return this.super.searchParams;
  }

  get username() {
    return this.super.username;
  }

  set hash(hash) {
    this.super.hash = hash;
  }

  set host(host) {
    this.super.host = host;
  }

  set hostname(hostname) {
    this.super.hostname = hostname;
  }

  set href(href) {
    this.super.href = href;
  }

  set origin(origin) {
    this.super.origin = origin;
  }

  set password(password) {
    this.super.password = password;
  }

  set pathname(pathname) {
    this.super.pathname = pathname;
  }

  set port(port) {
    this.super.port = port;
  }

  set protocol(protocol) {
    this.super.protocol = protocol;
  }

  set search(search) {
    this.super.search = search;
  }

  set searchParams(searchParams) {
    this.super.searchParams = searchParams;
  }

  set username(username) {
    this.super.username = username;
  }

  createObjectURL(o) {
    return this.super.createObjectURL(o);
  }

  revokeObjectURL(o) {
    this.super.revokeObjectURL(o);
  }

  toJSON() {
    return this.super.toJSON();
  }

  toString() {
    return this.super.toString();
  }

  format() {
    return this.toString();
  }

}

function format(obj) {
  if (typeof obj === 'string') {
    const url = new URL(obj);
    return url.toString();
  }

  if (!(obj instanceof URL)) {
    const userPass = obj.username && obj.password ? `${obj.username}:${obj.password}@` : '';
    const auth = obj.auth ? obj.auth + '@' : '';
    const port = obj.port ? ':' + obj.port : '';
    const protocol = obj.protocol ? obj.protocol + '//' : '';
    const host = obj.host || '';
    const hostname = obj.hostname || '';
    const search = obj.search || (obj.query ? '?' + obj.query : '');
    const hash = obj.hash || '';
    const pathname = obj.pathname || '';
    const path = obj.path || pathname + search;
    return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;
  }
}

module.exports = {
  URLWithLegacySupport,
  URLSearchParams: self.URLSearchParams,
  defaultBase,
  format
};

/***/ }),

/***/ "./node_modules/joi/dist/joi-browser.min.js":
/*!**************************************************!*\
  !*** ./node_modules/joi/dist/joi-browser.min.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function (e, t) {
   true ? module.exports = t() : undefined;
}(self, function () {
  return e = {
    1238: e => {
      "use strict";

      e.exports = {
        version: "17.6.0"
      };
    },
    7629: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(9474),
            o = r(1687),
            i = r(8652),
            l = r(8160),
            c = r(3292),
            u = r(6354),
            f = r(8901),
            m = r(9708),
            h = r(6914),
            d = r(2294),
            p = r(6133),
            g = r(1152),
            y = r(8863),
            b = r(2036),
            v = {
        Base: class {
          constructor(e) {
            this.type = e, this.$_root = null, this._definition = {}, this._reset();
          }

          _reset() {
            this._ids = new d.Ids(), this._preferences = null, this._refs = new p.Manager(), this._cache = null, this._valids = null, this._invalids = null, this._flags = {}, this._rules = [], this._singleRules = new Map(), this.$_terms = {}, this.$_temp = {
              ruleset: null,
              whens: {}
            };
          }

          describe() {
            return s("function" == typeof m.describe, "Manifest functionality disabled"), m.describe(this);
          }

          allow(...e) {
            return l.verifyFlat(e, "allow"), this._values(e, "_valids");
          }

          alter(e) {
            s(e && "object" == typeof e && !Array.isArray(e), "Invalid targets argument"), s(!this._inRuleset(), "Cannot set alterations inside a ruleset");
            const t = this.clone();
            t.$_terms.alterations = t.$_terms.alterations || [];

            for (const r in e) {
              const n = e[r];
              s("function" == typeof n, "Alteration adjuster for", r, "must be a function"), t.$_terms.alterations.push({
                target: r,
                adjuster: n
              });
            }

            return t.$_temp.ruleset = !1, t;
          }

          artifact(e) {
            return s(void 0 !== e, "Artifact cannot be undefined"), s(!this._cache, "Cannot set an artifact with a rule cache"), this.$_setFlag("artifact", e);
          }

          cast(e) {
            return s(!1 === e || "string" == typeof e, "Invalid to value"), s(!1 === e || this._definition.cast[e], "Type", this.type, "does not support casting to", e), this.$_setFlag("cast", !1 === e ? void 0 : e);
          }

          default(e, t) {
            return this._default("default", e, t);
          }

          description(e) {
            return s(e && "string" == typeof e, "Description must be a non-empty string"), this.$_setFlag("description", e);
          }

          empty(e) {
            const t = this.clone();
            return void 0 !== e && (e = t.$_compile(e, {
              override: !1
            })), t.$_setFlag("empty", e, {
              clone: !1
            });
          }

          error(e) {
            return s(e, "Missing error"), s(e instanceof Error || "function" == typeof e, "Must provide a valid Error object or a function"), this.$_setFlag("error", e);
          }

          example(e, t = {}) {
            return s(void 0 !== e, "Missing example"), l.assertOptions(t, ["override"]), this._inner("examples", e, {
              single: !0,
              override: t.override
            });
          }

          external(e, t) {
            return "object" == typeof e && (s(!t, "Cannot combine options with description"), t = e.description, e = e.method), s("function" == typeof e, "Method must be a function"), s(void 0 === t || t && "string" == typeof t, "Description must be a non-empty string"), this._inner("externals", {
              method: e,
              description: t
            }, {
              single: !0
            });
          }

          failover(e, t) {
            return this._default("failover", e, t);
          }

          forbidden() {
            return this.presence("forbidden");
          }

          id(e) {
            return e ? (s("string" == typeof e, "id must be a non-empty string"), s(/^[^\.]+$/.test(e), "id cannot contain period character"), this.$_setFlag("id", e)) : this.$_setFlag("id", void 0);
          }

          invalid(...e) {
            return this._values(e, "_invalids");
          }

          label(e) {
            return s(e && "string" == typeof e, "Label name must be a non-empty string"), this.$_setFlag("label", e);
          }

          meta(e) {
            return s(void 0 !== e, "Meta cannot be undefined"), this._inner("metas", e, {
              single: !0
            });
          }

          note(...e) {
            s(e.length, "Missing notes");

            for (const t of e) s(t && "string" == typeof t, "Notes must be non-empty strings");

            return this._inner("notes", e);
          }

          only(e = !0) {
            return s("boolean" == typeof e, "Invalid mode:", e), this.$_setFlag("only", e);
          }

          optional() {
            return this.presence("optional");
          }

          prefs(e) {
            s(e, "Missing preferences"), s(void 0 === e.context, "Cannot override context"), s(void 0 === e.externals, "Cannot override externals"), s(void 0 === e.warnings, "Cannot override warnings"), s(void 0 === e.debug, "Cannot override debug"), l.checkPreferences(e);
            const t = this.clone();
            return t._preferences = l.preferences(t._preferences, e), t;
          }

          presence(e) {
            return s(["optional", "required", "forbidden"].includes(e), "Unknown presence mode", e), this.$_setFlag("presence", e);
          }

          raw(e = !0) {
            return this.$_setFlag("result", e ? "raw" : void 0);
          }

          result(e) {
            return s(["raw", "strip"].includes(e), "Unknown result mode", e), this.$_setFlag("result", e);
          }

          required() {
            return this.presence("required");
          }

          strict(e) {
            const t = this.clone(),
                  r = void 0 !== e && !e;
            return t._preferences = l.preferences(t._preferences, {
              convert: r
            }), t;
          }

          strip(e = !0) {
            return this.$_setFlag("result", e ? "strip" : void 0);
          }

          tag(...e) {
            s(e.length, "Missing tags");

            for (const t of e) s(t && "string" == typeof t, "Tags must be non-empty strings");

            return this._inner("tags", e);
          }

          unit(e) {
            return s(e && "string" == typeof e, "Unit name must be a non-empty string"), this.$_setFlag("unit", e);
          }

          valid(...e) {
            l.verifyFlat(e, "valid");
            const t = this.allow(...e);
            return t.$_setFlag("only", !!t._valids, {
              clone: !1
            }), t;
          }

          when(e, t) {
            const r = this.clone();
            r.$_terms.whens || (r.$_terms.whens = []);
            const n = c.when(r, e, t);

            if (!["any", "link"].includes(r.type)) {
              const e = n.is ? [n] : n.switch;

              for (const t of e) s(!t.then || "any" === t.then.type || t.then.type === r.type, "Cannot combine", r.type, "with", t.then && t.then.type), s(!t.otherwise || "any" === t.otherwise.type || t.otherwise.type === r.type, "Cannot combine", r.type, "with", t.otherwise && t.otherwise.type);
            }

            return r.$_terms.whens.push(n), r.$_mutateRebuild();
          }

          cache(e) {
            s(!this._inRuleset(), "Cannot set caching inside a ruleset"), s(!this._cache, "Cannot override schema cache"), s(void 0 === this._flags.artifact, "Cannot cache a rule with an artifact");
            const t = this.clone();
            return t._cache = e || i.provider.provision(), t.$_temp.ruleset = !1, t;
          }

          clone() {
            const e = Object.create(Object.getPrototypeOf(this));
            return this._assign(e);
          }

          concat(e) {
            s(l.isSchema(e), "Invalid schema object"), s("any" === this.type || "any" === e.type || e.type === this.type, "Cannot merge type", this.type, "with another type:", e.type), s(!this._inRuleset(), "Cannot concatenate onto a schema with open ruleset"), s(!e._inRuleset(), "Cannot concatenate a schema with open ruleset");
            let t = this.clone();

            if ("any" === this.type && "any" !== e.type) {
              const r = e.clone();

              for (const e of Object.keys(t)) "type" !== e && (r[e] = t[e]);

              t = r;
            }

            t._ids.concat(e._ids), t._refs.register(e, p.toSibling), t._preferences = t._preferences ? l.preferences(t._preferences, e._preferences) : e._preferences, t._valids = b.merge(t._valids, e._valids, e._invalids), t._invalids = b.merge(t._invalids, e._invalids, e._valids);

            for (const r of e._singleRules.keys()) t._singleRules.has(r) && (t._rules = t._rules.filter(e => e.keep || e.name !== r), t._singleRules.delete(r));

            for (const r of e._rules) e._definition.rules[r.method].multi || t._singleRules.set(r.name, r), t._rules.push(r);

            if (t._flags.empty && e._flags.empty) {
              t._flags.empty = t._flags.empty.concat(e._flags.empty);
              const r = Object.assign({}, e._flags);
              delete r.empty, o(t._flags, r);
            } else if (e._flags.empty) {
              t._flags.empty = e._flags.empty;
              const r = Object.assign({}, e._flags);
              delete r.empty, o(t._flags, r);
            } else o(t._flags, e._flags);

            for (const r in e.$_terms) {
              const s = e.$_terms[r];
              s ? t.$_terms[r] ? t.$_terms[r] = t.$_terms[r].concat(s) : t.$_terms[r] = s.slice() : t.$_terms[r] || (t.$_terms[r] = s);
            }

            return this.$_root._tracer && this.$_root._tracer._combine(t, [this, e]), t.$_mutateRebuild();
          }

          extend(e) {
            return s(!e.base, "Cannot extend type with another base"), f.type(this, e);
          }

          extract(e) {
            return e = Array.isArray(e) ? e : e.split("."), this._ids.reach(e);
          }

          fork(e, t) {
            s(!this._inRuleset(), "Cannot fork inside a ruleset");
            let r = this;

            for (let s of [].concat(e)) s = Array.isArray(s) ? s : s.split("."), r = r._ids.fork(s, t, r);

            return r.$_temp.ruleset = !1, r;
          }

          rule(e) {
            const t = this._definition;
            l.assertOptions(e, Object.keys(t.modifiers)), s(!1 !== this.$_temp.ruleset, "Cannot apply rules to empty ruleset or the last rule added does not support rule properties");
            const r = null === this.$_temp.ruleset ? this._rules.length - 1 : this.$_temp.ruleset;
            s(r >= 0 && r < this._rules.length, "Cannot apply rules to empty ruleset");
            const a = this.clone();

            for (let o = r; o < a._rules.length; ++o) {
              const r = a._rules[o],
                    i = n(r);

              for (const n in e) t.modifiers[n](i, e[n]), s(i.name === r.name, "Cannot change rule name");

              a._rules[o] = i, a._singleRules.get(i.name) === r && a._singleRules.set(i.name, i);
            }

            return a.$_temp.ruleset = !1, a.$_mutateRebuild();
          }

          get ruleset() {
            s(!this._inRuleset(), "Cannot start a new ruleset without closing the previous one");
            const e = this.clone();
            return e.$_temp.ruleset = e._rules.length, e;
          }

          get $() {
            return this.ruleset;
          }

          tailor(e) {
            e = [].concat(e), s(!this._inRuleset(), "Cannot tailor inside a ruleset");
            let t = this;
            if (this.$_terms.alterations) for (const {
              target: r,
              adjuster: n
            } of this.$_terms.alterations) e.includes(r) && (t = n(t), s(l.isSchema(t), "Alteration adjuster for", r, "failed to return a schema object"));
            return t = t.$_modify({
              each: t => t.tailor(e),
              ref: !1
            }), t.$_temp.ruleset = !1, t.$_mutateRebuild();
          }

          tracer() {
            return g.location ? g.location(this) : this;
          }

          validate(e, t) {
            return y.entry(e, this, t);
          }

          validateAsync(e, t) {
            return y.entryAsync(e, this, t);
          }

          $_addRule(e) {
            "string" == typeof e && (e = {
              name: e
            }), s(e && "object" == typeof e, "Invalid options"), s(e.name && "string" == typeof e.name, "Invalid rule name");

            for (const t in e) s("_" !== t[0], "Cannot set private rule properties");

            const t = Object.assign({}, e);
            t._resolve = [], t.method = t.method || t.name;
            const r = this._definition.rules[t.method],
                  n = t.args;
            s(r, "Unknown rule", t.method);
            const a = this.clone();

            if (n) {
              s(1 === Object.keys(n).length || Object.keys(n).length === this._definition.rules[t.name].args.length, "Invalid rule definition for", this.type, t.name);

              for (const e in n) {
                let o = n[e];

                if (void 0 !== o) {
                  if (r.argsByName) {
                    const i = r.argsByName.get(e);
                    if (i.ref && l.isResolvable(o)) t._resolve.push(e), a.$_mutateRegister(o);else if (i.normalize && (o = i.normalize(o), n[e] = o), i.assert) {
                      const t = l.validateArg(o, e, i);
                      s(!t, t, "or reference");
                    }
                  }

                  n[e] = o;
                } else delete n[e];
              }
            }

            return r.multi || (a._ruleRemove(t.name, {
              clone: !1
            }), a._singleRules.set(t.name, t)), !1 === a.$_temp.ruleset && (a.$_temp.ruleset = null), r.priority ? a._rules.unshift(t) : a._rules.push(t), a;
          }

          $_compile(e, t) {
            return c.schema(this.$_root, e, t);
          }

          $_createError(e, t, r, s, n, a = {}) {
            const o = !1 !== a.flags ? this._flags : {},
                  i = a.messages ? h.merge(this._definition.messages, a.messages) : this._definition.messages;
            return new u.Report(e, t, r, o, i, s, n);
          }

          $_getFlag(e) {
            return this._flags[e];
          }

          $_getRule(e) {
            return this._singleRules.get(e);
          }

          $_mapLabels(e) {
            return e = Array.isArray(e) ? e : e.split("."), this._ids.labels(e);
          }

          $_match(e, t, r, s) {
            (r = Object.assign({}, r)).abortEarly = !0, r._externals = !1, t.snapshot();
            const n = !y.validate(e, this, t, r, s).errors;
            return t.restore(), n;
          }

          $_modify(e) {
            return l.assertOptions(e, ["each", "once", "ref", "schema"]), d.schema(this, e) || this;
          }

          $_mutateRebuild() {
            return s(!this._inRuleset(), "Cannot add this rule inside a ruleset"), this._refs.reset(), this._ids.reset(), this.$_modify({
              each: (e, {
                source: t,
                name: r,
                path: s,
                key: n
              }) => {
                const a = this._definition[t][r] && this._definition[t][r].register;
                !1 !== a && this.$_mutateRegister(e, {
                  family: a,
                  key: n
                });
              }
            }), this._definition.rebuild && this._definition.rebuild(this), this.$_temp.ruleset = !1, this;
          }

          $_mutateRegister(e, {
            family: t,
            key: r
          } = {}) {
            this._refs.register(e, t), this._ids.register(e, {
              key: r
            });
          }

          $_property(e) {
            return this._definition.properties[e];
          }

          $_reach(e) {
            return this._ids.reach(e);
          }

          $_rootReferences() {
            return this._refs.roots();
          }

          $_setFlag(e, t, r = {}) {
            s("_" === e[0] || !this._inRuleset(), "Cannot set flag inside a ruleset");
            const n = this._definition.flags[e] || {};
            if (a(t, n.default) && (t = void 0), a(t, this._flags[e])) return this;
            const o = !1 !== r.clone ? this.clone() : this;
            return void 0 !== t ? (o._flags[e] = t, o.$_mutateRegister(t)) : delete o._flags[e], "_" !== e[0] && (o.$_temp.ruleset = !1), o;
          }

          $_parent(e, ...t) {
            return this[e][l.symbols.parent].call(this, ...t);
          }

          $_validate(e, t, r) {
            return y.validate(e, this, t, r);
          }

          _assign(e) {
            e.type = this.type, e.$_root = this.$_root, e.$_temp = Object.assign({}, this.$_temp), e.$_temp.whens = {}, e._ids = this._ids.clone(), e._preferences = this._preferences, e._valids = this._valids && this._valids.clone(), e._invalids = this._invalids && this._invalids.clone(), e._rules = this._rules.slice(), e._singleRules = n(this._singleRules, {
              shallow: !0
            }), e._refs = this._refs.clone(), e._flags = Object.assign({}, this._flags), e._cache = null, e.$_terms = {};

            for (const t in this.$_terms) e.$_terms[t] = this.$_terms[t] ? this.$_terms[t].slice() : null;

            e.$_super = {};

            for (const t in this.$_super) e.$_super[t] = this._super[t].bind(e);

            return e;
          }

          _bare() {
            const e = this.clone();

            e._reset();

            const t = e._definition.terms;

            for (const r in t) {
              const s = t[r];
              e.$_terms[r] = s.init;
            }

            return e.$_mutateRebuild();
          }

          _default(e, t, r = {}) {
            return l.assertOptions(r, "literal"), s(void 0 !== t, "Missing", e, "value"), s("function" == typeof t || !r.literal, "Only function value supports literal option"), "function" == typeof t && r.literal && (t = {
              [l.symbols.literal]: !0,
              literal: t
            }), this.$_setFlag(e, t);
          }

          _generate(e, t, r) {
            if (!this.$_terms.whens) return {
              schema: this
            };
            const s = [],
                  n = [];

            for (let a = 0; a < this.$_terms.whens.length; ++a) {
              const o = this.$_terms.whens[a];

              if (o.concat) {
                s.push(o.concat), n.push("".concat(a, ".concat"));
                continue;
              }

              const i = o.ref ? o.ref.resolve(e, t, r) : e,
                    l = o.is ? [o] : o.switch,
                    c = n.length;

              for (let c = 0; c < l.length; ++c) {
                const {
                  is: u,
                  then: f,
                  otherwise: m
                } = l[c],
                      h = "".concat(a).concat(o.switch ? "." + c : "");

                if (u.$_match(i, t.nest(u, "".concat(h, ".is")), r)) {
                  if (f) {
                    const a = t.localize([...t.path, "".concat(h, ".then")], t.ancestors, t.schemas),
                          {
                      schema: o,
                      id: i
                    } = f._generate(e, a, r);

                    s.push(o), n.push("".concat(h, ".then").concat(i ? "(".concat(i, ")") : ""));
                    break;
                  }
                } else if (m) {
                  const a = t.localize([...t.path, "".concat(h, ".otherwise")], t.ancestors, t.schemas),
                        {
                    schema: o,
                    id: i
                  } = m._generate(e, a, r);

                  s.push(o), n.push("".concat(h, ".otherwise").concat(i ? "(".concat(i, ")") : ""));
                  break;
                }
              }

              if (o.break && n.length > c) break;
            }

            const a = n.join(", ");
            if (t.mainstay.tracer.debug(t, "rule", "when", a), !a) return {
              schema: this
            };
            if (!t.mainstay.tracer.active && this.$_temp.whens[a]) return {
              schema: this.$_temp.whens[a],
              id: a
            };
            let o = this;
            this._definition.generate && (o = this._definition.generate(this, e, t, r));

            for (const e of s) o = o.concat(e);

            return this.$_root._tracer && this.$_root._tracer._combine(o, [this, ...s]), this.$_temp.whens[a] = o, {
              schema: o,
              id: a
            };
          }

          _inner(e, t, r = {}) {
            s(!this._inRuleset(), "Cannot set ".concat(e, " inside a ruleset"));
            const n = this.clone();
            return n.$_terms[e] && !r.override || (n.$_terms[e] = []), r.single ? n.$_terms[e].push(t) : n.$_terms[e].push(...t), n.$_temp.ruleset = !1, n;
          }

          _inRuleset() {
            return null !== this.$_temp.ruleset && !1 !== this.$_temp.ruleset;
          }

          _ruleRemove(e, t = {}) {
            if (!this._singleRules.has(e)) return this;
            const r = !1 !== t.clone ? this.clone() : this;

            r._singleRules.delete(e);

            const s = [];

            for (let t = 0; t < r._rules.length; ++t) {
              const n = r._rules[t];
              n.name !== e || n.keep ? s.push(n) : r._inRuleset() && t < r.$_temp.ruleset && --r.$_temp.ruleset;
            }

            return r._rules = s, r;
          }

          _values(e, t) {
            l.verifyFlat(e, t.slice(1, -1));
            const r = this.clone(),
                  n = e[0] === l.symbols.override;
            if (n && (e = e.slice(1)), !r[t] && e.length ? r[t] = new b() : n && (r[t] = e.length ? new b() : null, r.$_mutateRebuild()), !r[t]) return r;
            n && r[t].override();

            for (const n of e) {
              s(void 0 !== n, "Cannot call allow/valid/invalid with undefined"), s(n !== l.symbols.override, "Override must be the first value");
              const e = "_invalids" === t ? "_valids" : "_invalids";
              r[e] && (r[e].remove(n), r[e].length || (s("_valids" === t || !r._flags.only, "Setting invalid value", n, "leaves schema rejecting all values due to previous valid rule"), r[e] = null)), r[t].add(n, r._refs);
            }

            return r;
          }

        }
      };
      v.Base.prototype[l.symbols.any] = {
        version: l.version,
        compile: c.compile,
        root: "$_root"
      }, v.Base.prototype.isImmutable = !0, v.Base.prototype.deny = v.Base.prototype.invalid, v.Base.prototype.disallow = v.Base.prototype.invalid, v.Base.prototype.equal = v.Base.prototype.valid, v.Base.prototype.exist = v.Base.prototype.required, v.Base.prototype.not = v.Base.prototype.invalid, v.Base.prototype.options = v.Base.prototype.prefs, v.Base.prototype.preferences = v.Base.prototype.prefs, e.exports = new v.Base();
    },
    8652: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(8160),
            o = {
        max: 1e3,
        supported: new Set(["undefined", "boolean", "number", "string"])
      };
      t.provider = {
        provision: e => new o.Cache(e)
      }, o.Cache = class {
        constructor(e = {}) {
          a.assertOptions(e, ["max"]), s(void 0 === e.max || e.max && e.max > 0 && isFinite(e.max), "Invalid max cache size"), this._max = e.max || o.max, this._map = new Map(), this._list = new o.List();
        }

        get length() {
          return this._map.size;
        }

        set(e, t) {
          if (null !== e && !o.supported.has(typeof e)) return;

          let r = this._map.get(e);

          if (r) return r.value = t, void this._list.first(r);
          r = this._list.unshift({
            key: e,
            value: t
          }), this._map.set(e, r), this._compact();
        }

        get(e) {
          const t = this._map.get(e);

          if (t) return this._list.first(t), n(t.value);
        }

        _compact() {
          if (this._map.size > this._max) {
            const e = this._list.pop();

            this._map.delete(e.key);
          }
        }

      }, o.List = class {
        constructor() {
          this.tail = null, this.head = null;
        }

        unshift(e) {
          return e.next = null, e.prev = this.head, this.head && (this.head.next = e), this.head = e, this.tail || (this.tail = e), e;
        }

        first(e) {
          e !== this.head && (this._remove(e), this.unshift(e));
        }

        pop() {
          return this._remove(this.tail);
        }

        _remove(e) {
          const {
            next: t,
            prev: r
          } = e;
          return t.prev = r, r && (r.next = t), e === this.tail && (this.tail = t), e.prev = null, e.next = null, e;
        }

      };
    },
    8160: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(7916),
            a = r(1238);
      let o, i;
      const l = {
        isoDate: /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/
      };
      t.version = a.version, t.defaults = {
        abortEarly: !0,
        allowUnknown: !1,
        artifacts: !1,
        cache: !0,
        context: null,
        convert: !0,
        dateFormat: "iso",
        errors: {
          escapeHtml: !1,
          label: "path",
          language: null,
          render: !0,
          stack: !1,
          wrap: {
            label: '"',
            array: "[]"
          }
        },
        externals: !0,
        messages: {},
        nonEnumerables: !1,
        noDefaults: !1,
        presence: "optional",
        skipFunctions: !1,
        stripUnknown: !1,
        warnings: !1
      }, t.symbols = {
        any: Symbol.for("@hapi/joi/schema"),
        arraySingle: Symbol("arraySingle"),
        deepDefault: Symbol("deepDefault"),
        errors: Symbol("errors"),
        literal: Symbol("literal"),
        override: Symbol("override"),
        parent: Symbol("parent"),
        prefs: Symbol("prefs"),
        ref: Symbol("ref"),
        template: Symbol("template"),
        values: Symbol("values")
      }, t.assertOptions = function (e, t, r = "Options") {
        s(e && "object" == typeof e && !Array.isArray(e), "Options must be of type object");
        const n = Object.keys(e).filter(e => !t.includes(e));
        s(0 === n.length, "".concat(r, " contain unknown keys: ").concat(n));
      }, t.checkPreferences = function (e) {
        i = i || r(3378);
        const t = i.preferences.validate(e);
        if (t.error) throw new n([t.error.details[0].message]);
      }, t.compare = function (e, t, r) {
        switch (r) {
          case "=":
            return e === t;

          case ">":
            return e > t;

          case "<":
            return e < t;

          case ">=":
            return e >= t;

          case "<=":
            return e <= t;
        }
      }, t.default = function (e, t) {
        return void 0 === e ? t : e;
      }, t.isIsoDate = function (e) {
        return l.isoDate.test(e);
      }, t.isNumber = function (e) {
        return "number" == typeof e && !isNaN(e);
      }, t.isResolvable = function (e) {
        return !!e && (e[t.symbols.ref] || e[t.symbols.template]);
      }, t.isSchema = function (e, r = {}) {
        const n = e && e[t.symbols.any];
        return !!n && (s(r.legacy || n.version === t.version, "Cannot mix different versions of joi schemas"), !0);
      }, t.isValues = function (e) {
        return e[t.symbols.values];
      }, t.limit = function (e) {
        return Number.isSafeInteger(e) && e >= 0;
      }, t.preferences = function (e, s) {
        o = o || r(6914), e = e || {}, s = s || {};
        const n = Object.assign({}, e, s);
        return s.errors && e.errors && (n.errors = Object.assign({}, e.errors, s.errors), n.errors.wrap = Object.assign({}, e.errors.wrap, s.errors.wrap)), s.messages && (n.messages = o.compile(s.messages, e.messages)), delete n[t.symbols.prefs], n;
      }, t.tryWithPath = function (e, t, r = {}) {
        try {
          return e();
        } catch (e) {
          throw void 0 !== e.path ? e.path = t + "." + e.path : e.path = t, r.append && (e.message = "".concat(e.message, " (").concat(e.path, ")")), e;
        }
      }, t.validateArg = function (e, r, {
        assert: s,
        message: n
      }) {
        if (t.isSchema(s)) {
          const t = s.validate(e);
          if (!t.error) return;
          return t.error.message;
        }

        if (!s(e)) return r ? "".concat(r, " ").concat(n) : n;
      }, t.verifyFlat = function (e, t) {
        for (const r of e) s(!Array.isArray(r), "Method no longer accepts array arguments:", t);
      };
    },
    3292: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8160),
            a = r(6133),
            o = {};
      t.schema = function (e, t, r = {}) {
        n.assertOptions(r, ["appendPath", "override"]);

        try {
          return o.schema(e, t, r);
        } catch (e) {
          throw r.appendPath && void 0 !== e.path && (e.message = "".concat(e.message, " (").concat(e.path, ")")), e;
        }
      }, o.schema = function (e, t, r) {
        s(void 0 !== t, "Invalid undefined schema"), Array.isArray(t) && (s(t.length, "Invalid empty array schema"), 1 === t.length && (t = t[0]));

        const a = (t, ...s) => !1 !== r.override ? t.valid(e.override, ...s) : t.valid(...s);

        if (o.simple(t)) return a(e, t);
        if ("function" == typeof t) return e.custom(t);
        if (s("object" == typeof t, "Invalid schema content:", typeof t), n.isResolvable(t)) return a(e, t);
        if (n.isSchema(t)) return t;

        if (Array.isArray(t)) {
          for (const r of t) if (!o.simple(r)) return e.alternatives().try(...t);

          return a(e, ...t);
        }

        return t instanceof RegExp ? e.string().regex(t) : t instanceof Date ? a(e.date(), t) : (s(Object.getPrototypeOf(t) === Object.getPrototypeOf({}), "Schema can only contain plain objects"), e.object().keys(t));
      }, t.ref = function (e, t) {
        return a.isRef(e) ? e : a.create(e, t);
      }, t.compile = function (e, r, a = {}) {
        n.assertOptions(a, ["legacy"]);
        const i = r && r[n.symbols.any];
        if (i) return s(a.legacy || i.version === n.version, "Cannot mix different versions of joi schemas:", i.version, n.version), r;
        if ("object" != typeof r || !a.legacy) return t.schema(e, r, {
          appendPath: !0
        });
        const l = o.walk(r);
        return l ? l.compile(l.root, r) : t.schema(e, r, {
          appendPath: !0
        });
      }, o.walk = function (e) {
        if ("object" != typeof e) return null;

        if (Array.isArray(e)) {
          for (const t of e) {
            const e = o.walk(t);
            if (e) return e;
          }

          return null;
        }

        const t = e[n.symbols.any];
        if (t) return {
          root: e[t.root],
          compile: t.compile
        };
        s(Object.getPrototypeOf(e) === Object.getPrototypeOf({}), "Schema can only contain plain objects");

        for (const t in e) {
          const r = o.walk(e[t]);
          if (r) return r;
        }

        return null;
      }, o.simple = function (e) {
        return null === e || ["boolean", "string", "number"].includes(typeof e);
      }, t.when = function (e, r, i) {
        if (void 0 === i && (s(r && "object" == typeof r, "Missing options"), i = r, r = a.create(".")), Array.isArray(i) && (i = {
          switch: i
        }), n.assertOptions(i, ["is", "not", "then", "otherwise", "switch", "break"]), n.isSchema(r)) return s(void 0 === i.is, '"is" can not be used with a schema condition'), s(void 0 === i.not, '"not" can not be used with a schema condition'), s(void 0 === i.switch, '"switch" can not be used with a schema condition'), o.condition(e, {
          is: r,
          then: i.then,
          otherwise: i.otherwise,
          break: i.break
        });

        if (s(a.isRef(r) || "string" == typeof r, "Invalid condition:", r), s(void 0 === i.not || void 0 === i.is, 'Cannot combine "is" with "not"'), void 0 === i.switch) {
          let l = i;
          void 0 !== i.not && (l = {
            is: i.not,
            then: i.otherwise,
            otherwise: i.then,
            break: i.break
          });
          let c = void 0 !== l.is ? e.$_compile(l.is) : e.$_root.invalid(null, !1, 0, "").required();
          return s(void 0 !== l.then || void 0 !== l.otherwise, 'options must have at least one of "then", "otherwise", or "switch"'), s(void 0 === l.break || void 0 === l.then || void 0 === l.otherwise, "Cannot specify then, otherwise, and break all together"), void 0 === i.is || a.isRef(i.is) || n.isSchema(i.is) || (c = c.required()), o.condition(e, {
            ref: t.ref(r),
            is: c,
            then: l.then,
            otherwise: l.otherwise,
            break: l.break
          });
        }

        s(Array.isArray(i.switch), '"switch" must be an array'), s(void 0 === i.is, 'Cannot combine "switch" with "is"'), s(void 0 === i.not, 'Cannot combine "switch" with "not"'), s(void 0 === i.then, 'Cannot combine "switch" with "then"');
        const l = {
          ref: t.ref(r),
          switch: [],
          break: i.break
        };

        for (let t = 0; t < i.switch.length; ++t) {
          const r = i.switch[t],
                o = t === i.switch.length - 1;
          n.assertOptions(r, o ? ["is", "then", "otherwise"] : ["is", "then"]), s(void 0 !== r.is, 'Switch statement missing "is"'), s(void 0 !== r.then, 'Switch statement missing "then"');
          const c = {
            is: e.$_compile(r.is),
            then: e.$_compile(r.then)
          };

          if (a.isRef(r.is) || n.isSchema(r.is) || (c.is = c.is.required()), o) {
            s(void 0 === i.otherwise || void 0 === r.otherwise, 'Cannot specify "otherwise" inside and outside a "switch"');
            const t = void 0 !== i.otherwise ? i.otherwise : r.otherwise;
            void 0 !== t && (s(void 0 === l.break, "Cannot specify both otherwise and break"), c.otherwise = e.$_compile(t));
          }

          l.switch.push(c);
        }

        return l;
      }, o.condition = function (e, t) {
        for (const r of ["then", "otherwise"]) void 0 === t[r] ? delete t[r] : t[r] = e.$_compile(t[r]);

        return t;
      };
    },
    6354: (e, t, r) => {
      "use strict";

      const s = r(5688),
            n = r(8160),
            a = r(3328);
      t.Report = class {
        constructor(e, r, s, n, a, o, i) {
          if (this.code = e, this.flags = n, this.messages = a, this.path = o.path, this.prefs = i, this.state = o, this.value = r, this.message = null, this.template = null, this.local = s || {}, this.local.label = t.label(this.flags, this.state, this.prefs, this.messages), void 0 === this.value || this.local.hasOwnProperty("value") || (this.local.value = this.value), this.path.length) {
            const e = this.path[this.path.length - 1];
            "object" != typeof e && (this.local.key = e);
          }
        }

        _setTemplate(e) {
          if (this.template = e, !this.flags.label && 0 === this.path.length) {
            const e = this._template(this.template, "root");

            e && (this.local.label = e);
          }
        }

        toString() {
          if (this.message) return this.message;
          const e = this.code;
          if (!this.prefs.errors.render) return this.code;

          const t = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);

          return void 0 === t ? 'Error code "'.concat(e, '" is not defined, your custom type is missing the correct messages definition') : (this.message = t.render(this.value, this.state, this.prefs, this.local, {
            errors: this.prefs.errors,
            messages: [this.prefs.messages, this.messages]
          }), this.prefs.errors.label || (this.message = this.message.replace(/^"" /, "").trim()), this.message);
        }

        _template(e, r) {
          return t.template(this.value, e, r || this.code, this.state, this.prefs);
        }

      }, t.path = function (e) {
        let t = "";

        for (const r of e) "object" != typeof r && ("string" == typeof r ? (t && (t += "."), t += r) : t += "[".concat(r, "]"));

        return t;
      }, t.template = function (e, t, r, s, o) {
        if (!t) return;
        if (a.isTemplate(t)) return "root" !== r ? t : null;
        let i = o.errors.language;

        if (n.isResolvable(i) && (i = i.resolve(e, s, o)), i && t[i]) {
          if (void 0 !== t[i][r]) return t[i][r];
          if (void 0 !== t[i]["*"]) return t[i]["*"];
        }

        return t[r] ? t[r] : t["*"];
      }, t.label = function (e, r, s, n) {
        if (e.label) return e.label;
        if (!s.errors.label) return "";
        let a = r.path;
        "key" === s.errors.label && r.path.length > 1 && (a = r.path.slice(-1));
        return t.path(a) || t.template(null, s.messages, "root", r, s) || n && t.template(null, n, "root", r, s) || "value";
      }, t.process = function (e, r, s) {
        if (!e) return null;
        const {
          override: n,
          message: a,
          details: o
        } = t.details(e);
        if (n) return n;
        if (s.errors.stack) return new t.ValidationError(a, o, r);
        const i = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        const l = new t.ValidationError(a, o, r);
        return Error.stackTraceLimit = i, l;
      }, t.details = function (e, t = {}) {
        let r = [];
        const s = [];

        for (const n of e) {
          if (n instanceof Error) {
            if (!1 !== t.override) return {
              override: n
            };
            const e = n.toString();
            r.push(e), s.push({
              message: e,
              type: "override",
              context: {
                error: n
              }
            });
            continue;
          }

          const e = n.toString();
          r.push(e), s.push({
            message: e,
            path: n.path.filter(e => "object" != typeof e),
            type: n.code,
            context: n.local
          });
        }

        return r.length > 1 && (r = [...new Set(r)]), {
          message: r.join(". "),
          details: s
        };
      }, t.ValidationError = class extends Error {
        constructor(e, t, r) {
          super(e), this._original = r, this.details = t;
        }

        static isError(e) {
          return e instanceof t.ValidationError;
        }

      }, t.ValidationError.prototype.isJoi = !0, t.ValidationError.prototype.name = "ValidationError", t.ValidationError.prototype.annotate = s.error;
    },
    8901: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(8160),
            o = r(6914),
            i = {};
      t.type = function (e, t) {
        const r = Object.getPrototypeOf(e),
              l = n(r),
              c = e._assign(Object.create(l)),
              u = Object.assign({}, t);

        delete u.base, l._definition = u;
        const f = r._definition || {};
        u.messages = o.merge(f.messages, u.messages), u.properties = Object.assign({}, f.properties, u.properties), c.type = u.type, u.flags = Object.assign({}, f.flags, u.flags);
        const m = Object.assign({}, f.terms);
        if (u.terms) for (const e in u.terms) {
          const t = u.terms[e];
          s(void 0 === c.$_terms[e], "Invalid term override for", u.type, e), c.$_terms[e] = t.init, m[e] = t;
        }
        u.terms = m, u.args || (u.args = f.args), u.prepare = i.prepare(u.prepare, f.prepare), u.coerce && ("function" == typeof u.coerce && (u.coerce = {
          method: u.coerce
        }), u.coerce.from && !Array.isArray(u.coerce.from) && (u.coerce = {
          method: u.coerce.method,
          from: [].concat(u.coerce.from)
        })), u.coerce = i.coerce(u.coerce, f.coerce), u.validate = i.validate(u.validate, f.validate);
        const h = Object.assign({}, f.rules);
        if (u.rules) for (const e in u.rules) {
          const t = u.rules[e];
          s("object" == typeof t, "Invalid rule definition for", u.type, e);
          let r = t.method;

          if (void 0 === r && (r = function () {
            return this.$_addRule(e);
          }), r && (s(!l[e], "Rule conflict in", u.type, e), l[e] = r), s(!h[e], "Rule conflict in", u.type, e), h[e] = t, t.alias) {
            const e = [].concat(t.alias);

            for (const r of e) l[r] = t.method;
          }

          t.args && (t.argsByName = new Map(), t.args = t.args.map(e => ("string" == typeof e && (e = {
            name: e
          }), s(!t.argsByName.has(e.name), "Duplicated argument name", e.name), a.isSchema(e.assert) && (e.assert = e.assert.strict().label(e.name)), t.argsByName.set(e.name, e), e)));
        }
        u.rules = h;
        const d = Object.assign({}, f.modifiers);
        if (u.modifiers) for (const e in u.modifiers) {
          s(!l[e], "Rule conflict in", u.type, e);
          const t = u.modifiers[e];
          s("function" == typeof t, "Invalid modifier definition for", u.type, e);

          const r = function (t) {
            return this.rule({
              [e]: t
            });
          };

          l[e] = r, d[e] = t;
        }

        if (u.modifiers = d, u.overrides) {
          l._super = r, c.$_super = {};

          for (const e in u.overrides) s(r[e], "Cannot override missing", e), u.overrides[e][a.symbols.parent] = r[e], c.$_super[e] = r[e].bind(c);

          Object.assign(l, u.overrides);
        }

        u.cast = Object.assign({}, f.cast, u.cast);
        const p = Object.assign({}, f.manifest, u.manifest);
        return p.build = i.build(u.manifest && u.manifest.build, f.manifest && f.manifest.build), u.manifest = p, u.rebuild = i.rebuild(u.rebuild, f.rebuild), c;
      }, i.build = function (e, t) {
        return e && t ? function (r, s) {
          return t(e(r, s), s);
        } : e || t;
      }, i.coerce = function (e, t) {
        return e && t ? {
          from: e.from && t.from ? [...new Set([...e.from, ...t.from])] : null,

          method(r, s) {
            let n;

            if ((!t.from || t.from.includes(typeof r)) && (n = t.method(r, s), n)) {
              if (n.errors || void 0 === n.value) return n;
              r = n.value;
            }

            if (!e.from || e.from.includes(typeof r)) {
              const t = e.method(r, s);
              if (t) return t;
            }

            return n;
          }

        } : e || t;
      }, i.prepare = function (e, t) {
        return e && t ? function (r, s) {
          const n = e(r, s);

          if (n) {
            if (n.errors || void 0 === n.value) return n;
            r = n.value;
          }

          return t(r, s) || n;
        } : e || t;
      }, i.rebuild = function (e, t) {
        return e && t ? function (r) {
          t(r), e(r);
        } : e || t;
      }, i.validate = function (e, t) {
        return e && t ? function (r, s) {
          const n = t(r, s);

          if (n) {
            if (n.errors && (!Array.isArray(n.errors) || n.errors.length)) return n;
            r = n.value;
          }

          return e(r, s) || n;
        } : e || t;
      };
    },
    5107: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(8652),
            o = r(8160),
            i = r(3292),
            l = r(6354),
            c = r(8901),
            u = r(9708),
            f = r(6133),
            m = r(3328),
            h = r(1152);
      let d;
      const p = {
        types: {
          alternatives: r(4946),
          any: r(8068),
          array: r(546),
          boolean: r(4937),
          date: r(7500),
          function: r(390),
          link: r(8785),
          number: r(3832),
          object: r(8966),
          string: r(7417),
          symbol: r(8826)
        },
        aliases: {
          alt: "alternatives",
          bool: "boolean",
          func: "function"
        },
        root: function () {
          const e = {
            _types: new Set(Object.keys(p.types))
          };

          for (const t of e._types) e[t] = function (...e) {
            return s(!e.length || ["alternatives", "link", "object"].includes(t), "The", t, "type does not allow arguments"), p.generate(this, p.types[t], e);
          };

          for (const t of ["allow", "custom", "disallow", "equal", "exist", "forbidden", "invalid", "not", "only", "optional", "options", "prefs", "preferences", "required", "strip", "valid", "when"]) e[t] = function (...e) {
            return this.any()[t](...e);
          };

          Object.assign(e, p.methods);

          for (const t in p.aliases) {
            const r = p.aliases[t];
            e[t] = e[r];
          }

          return e.x = e.expression, h.setup && h.setup(e), e;
        }
      };
      p.methods = {
        ValidationError: l.ValidationError,
        version: o.version,
        cache: a.provider,

        assert(e, t, ...r) {
          p.assert(e, t, !0, r);
        },

        attempt: (e, t, ...r) => p.assert(e, t, !1, r),

        build(e) {
          return s("function" == typeof u.build, "Manifest functionality disabled"), u.build(this, e);
        },

        checkPreferences(e) {
          o.checkPreferences(e);
        },

        compile(e, t) {
          return i.compile(this, e, t);
        },

        defaults(e) {
          s("function" == typeof e, "modifier must be a function");
          const t = Object.assign({}, this);

          for (const r of t._types) {
            const n = e(t[r]());
            s(o.isSchema(n), "modifier must return a valid schema object"), t[r] = function (...e) {
              return p.generate(this, n, e);
            };
          }

          return t;
        },

        expression: (...e) => new m(...e),

        extend(...e) {
          o.verifyFlat(e, "extend"), d = d || r(3378), s(e.length, "You need to provide at least one extension"), this.assert(e, d.extensions);
          const t = Object.assign({}, this);
          t._types = new Set(t._types);

          for (let r of e) {
            "function" == typeof r && (r = r(t)), this.assert(r, d.extension);
            const e = p.expandExtension(r, t);

            for (const r of e) {
              s(void 0 === t[r.type] || t._types.has(r.type), "Cannot override name", r.type);
              const e = r.base || this.any(),
                    n = c.type(e, r);
              t._types.add(r.type), t[r.type] = function (...e) {
                return p.generate(this, n, e);
              };
            }
          }

          return t;
        },

        isError: l.ValidationError.isError,
        isExpression: m.isTemplate,
        isRef: f.isRef,
        isSchema: o.isSchema,
        in: (...e) => f.in(...e),
        override: o.symbols.override,
        ref: (...e) => f.create(...e),

        types() {
          const e = {};

          for (const t of this._types) e[t] = this[t]();

          for (const t in p.aliases) e[t] = this[t]();

          return e;
        }

      }, p.assert = function (e, t, r, s) {
        const a = s[0] instanceof Error || "string" == typeof s[0] ? s[0] : null,
              i = a ? s[1] : s[0],
              c = t.validate(e, o.preferences({
          errors: {
            stack: !0
          }
        }, i || {}));
        let u = c.error;
        if (!u) return c.value;
        if (a instanceof Error) throw a;
        const f = r && "function" == typeof u.annotate ? u.annotate() : u.message;
        throw u instanceof l.ValidationError == 0 && (u = n(u)), u.message = a ? "".concat(a, " ").concat(f) : f, u;
      }, p.generate = function (e, t, r) {
        return s(e, "Must be invoked on a Joi instance."), t.$_root = e, t._definition.args && r.length ? t._definition.args(t, ...r) : t;
      }, p.expandExtension = function (e, t) {
        if ("string" == typeof e.type) return [e];
        const r = [];

        for (const s of t._types) if (e.type.test(s)) {
          const n = Object.assign({}, e);
          n.type = s, n.base = t[s](), r.push(n);
        }

        return r;
      }, e.exports = p.root();
    },
    6914: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(3328);
      t.compile = function (e, t) {
        if ("string" == typeof e) return s(!t, "Cannot set single message string"), new a(e);
        if (a.isTemplate(e)) return s(!t, "Cannot set single message template"), e;
        s("object" == typeof e && !Array.isArray(e), "Invalid message options"), t = t ? n(t) : {};

        for (let r in e) {
          const n = e[r];

          if ("root" === r || a.isTemplate(n)) {
            t[r] = n;
            continue;
          }

          if ("string" == typeof n) {
            t[r] = new a(n);
            continue;
          }

          s("object" == typeof n && !Array.isArray(n), "Invalid message for", r);
          const o = r;

          for (r in t[o] = t[o] || {}, n) {
            const e = n[r];
            "root" === r || a.isTemplate(e) ? t[o][r] = e : (s("string" == typeof e, "Invalid message for", r, "in", o), t[o][r] = new a(e));
          }
        }

        return t;
      }, t.decompile = function (e) {
        const t = {};

        for (let r in e) {
          const s = e[r];

          if ("root" === r) {
            t.root = s;
            continue;
          }

          if (a.isTemplate(s)) {
            t[r] = s.describe({
              compact: !0
            });
            continue;
          }

          const n = r;

          for (r in t[n] = {}, s) {
            const e = s[r];
            "root" !== r ? t[n][r] = e.describe({
              compact: !0
            }) : t[n].root = e;
          }
        }

        return t;
      }, t.merge = function (e, r) {
        if (!e) return t.compile(r);
        if (!r) return e;
        if ("string" == typeof r) return new a(r);
        if (a.isTemplate(r)) return r;
        const o = n(e);

        for (let e in r) {
          const t = r[e];

          if ("root" === e || a.isTemplate(t)) {
            o[e] = t;
            continue;
          }

          if ("string" == typeof t) {
            o[e] = new a(t);
            continue;
          }

          s("object" == typeof t && !Array.isArray(t), "Invalid message for", e);
          const n = e;

          for (e in o[n] = o[n] || {}, t) {
            const r = t[e];
            "root" === e || a.isTemplate(r) ? o[n][e] = r : (s("string" == typeof r, "Invalid message for", e, "in", n), o[n][e] = new a(r));
          }
        }

        return o;
      };
    },
    2294: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(8160),
            l = r(6133),
            c = {};
      t.Ids = c.Ids = class {
        constructor() {
          this._byId = new Map(), this._byKey = new Map(), this._schemaChain = !1;
        }

        clone() {
          const e = new c.Ids();
          return e._byId = new Map(this._byId), e._byKey = new Map(this._byKey), e._schemaChain = this._schemaChain, e;
        }

        concat(e) {
          e._schemaChain && (this._schemaChain = !0);

          for (const [t, r] of e._byId.entries()) o(!this._byKey.has(t), "Schema id conflicts with existing key:", t), this._byId.set(t, r);

          for (const [t, r] of e._byKey.entries()) o(!this._byId.has(t), "Schema key conflicts with existing id:", t), this._byKey.set(t, r);
        }

        fork(e, t, r) {
          const s = this._collect(e);

          s.push({
            schema: r
          });
          const n = s.shift();
          let a = {
            id: n.id,
            schema: t(n.schema)
          };
          o(i.isSchema(a.schema), "adjuster function failed to return a joi schema type");

          for (const e of s) a = {
            id: e.id,
            schema: c.fork(e.schema, a.id, a.schema)
          };

          return a.schema;
        }

        labels(e, t = []) {
          const r = e[0],
                s = this._get(r);

          if (!s) return [...t, ...e].join(".");
          const n = e.slice(1);
          return t = [...t, s.schema._flags.label || r], n.length ? s.schema._ids.labels(n, t) : t.join(".");
        }

        reach(e, t = []) {
          const r = e[0],
                s = this._get(r);

          o(s, "Schema does not contain path", [...t, ...e].join("."));
          const n = e.slice(1);
          return n.length ? s.schema._ids.reach(n, [...t, r]) : s.schema;
        }

        register(e, {
          key: t
        } = {}) {
          if (!e || !i.isSchema(e)) return;
          (e.$_property("schemaChain") || e._ids._schemaChain) && (this._schemaChain = !0);
          const r = e._flags.id;

          if (r) {
            const t = this._byId.get(r);

            o(!t || t.schema === e, "Cannot add different schemas with the same id:", r), o(!this._byKey.has(r), "Schema id conflicts with existing key:", r), this._byId.set(r, {
              schema: e,
              id: r
            });
          }

          t && (o(!this._byKey.has(t), "Schema already contains key:", t), o(!this._byId.has(t), "Schema key conflicts with existing id:", t), this._byKey.set(t, {
            schema: e,
            id: t
          }));
        }

        reset() {
          this._byId = new Map(), this._byKey = new Map(), this._schemaChain = !1;
        }

        _collect(e, t = [], r = []) {
          const s = e[0],
                n = this._get(s);

          o(n, "Schema does not contain path", [...t, ...e].join(".")), r = [n, ...r];
          const a = e.slice(1);
          return a.length ? n.schema._ids._collect(a, [...t, s], r) : r;
        }

        _get(e) {
          return this._byId.get(e) || this._byKey.get(e);
        }

      }, c.fork = function (e, r, s) {
        const n = t.schema(e, {
          each: (e, {
            key: t
          }) => {
            if (r === (e._flags.id || t)) return s;
          },
          ref: !1
        });
        return n ? n.$_mutateRebuild() : e;
      }, t.schema = function (e, t) {
        let r;

        for (const s in e._flags) {
          if ("_" === s[0]) continue;
          const n = c.scan(e._flags[s], {
            source: "flags",
            name: s
          }, t);
          void 0 !== n && (r = r || e.clone(), r._flags[s] = n);
        }

        for (let s = 0; s < e._rules.length; ++s) {
          const n = e._rules[s],
                a = c.scan(n.args, {
            source: "rules",
            name: n.name
          }, t);

          if (void 0 !== a) {
            r = r || e.clone();
            const t = Object.assign({}, n);
            t.args = a, r._rules[s] = t, r._singleRules.get(n.name) === n && r._singleRules.set(n.name, t);
          }
        }

        for (const s in e.$_terms) {
          if ("_" === s[0]) continue;
          const n = c.scan(e.$_terms[s], {
            source: "terms",
            name: s
          }, t);
          void 0 !== n && (r = r || e.clone(), r.$_terms[s] = n);
        }

        return r;
      }, c.scan = function (e, t, r, s, a) {
        const o = s || [];
        if (null === e || "object" != typeof e) return;
        let u;

        if (Array.isArray(e)) {
          for (let s = 0; s < e.length; ++s) {
            const n = "terms" === t.source && "keys" === t.name && e[s].key,
                  a = c.scan(e[s], t, r, [s, ...o], n);
            void 0 !== a && (u = u || e.slice(), u[s] = a);
          }

          return u;
        }

        if (!1 !== r.schema && i.isSchema(e) || !1 !== r.ref && l.isRef(e)) {
          const s = r.each(e, n(n({}, t), {}, {
            path: o,
            key: a
          }));
          if (s === e) return;
          return s;
        }

        for (const s in e) {
          if ("_" === s[0]) continue;
          const n = c.scan(e[s], t, r, [s, ...o], a);
          void 0 !== n && (u = u || Object.assign({}, e), u[s] = n);
        }

        return u;
      };
    },
    6133: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(8571),
            l = r(9621),
            c = r(8160);
      let u;
      const f = {
        symbol: Symbol("ref"),
        defaults: {
          adjust: null,
          in: !1,
          iterables: null,
          map: null,
          separator: ".",
          type: "value"
        }
      };
      t.create = function (e, t = {}) {
        o("string" == typeof e, "Invalid reference key:", e), c.assertOptions(t, ["adjust", "ancestor", "in", "iterables", "map", "prefix", "render", "separator"]), o(!t.prefix || "object" == typeof t.prefix, "options.prefix must be of type object");
        const r = Object.assign({}, f.defaults, t);
        delete r.prefix;
        const s = r.separator,
              n = f.context(e, s, t.prefix);
        if (r.type = n.type, e = n.key, "value" === r.type) if (n.root && (o(!s || e[0] !== s, "Cannot specify relative path with root prefix"), r.ancestor = "root", e || (e = null)), s && s === e) e = null, r.ancestor = 0;else if (void 0 !== r.ancestor) o(!s || !e || e[0] !== s, "Cannot combine prefix with ancestor option");else {
          const [t, n] = f.ancestor(e, s);
          n && "" === (e = e.slice(n)) && (e = null), r.ancestor = t;
        }
        return r.path = s ? null === e ? [] : e.split(s) : [e], new f.Ref(r);
      }, t.in = function (e, r = {}) {
        return t.create(e, n(n({}, r), {}, {
          in: !0
        }));
      }, t.isRef = function (e) {
        return !!e && !!e[c.symbols.ref];
      }, f.Ref = class {
        constructor(e) {
          o("object" == typeof e, "Invalid reference construction"), c.assertOptions(e, ["adjust", "ancestor", "in", "iterables", "map", "path", "render", "separator", "type", "depth", "key", "root", "display"]), o([!1, void 0].includes(e.separator) || "string" == typeof e.separator && 1 === e.separator.length, "Invalid separator"), o(!e.adjust || "function" == typeof e.adjust, "options.adjust must be a function"), o(!e.map || Array.isArray(e.map), "options.map must be an array"), o(!e.map || !e.adjust, "Cannot set both map and adjust options"), Object.assign(this, f.defaults, e), o("value" === this.type || void 0 === this.ancestor, "Non-value references cannot reference ancestors"), Array.isArray(this.map) && (this.map = new Map(this.map)), this.depth = this.path.length, this.key = this.path.length ? this.path.join(this.separator) : null, this.root = this.path[0], this.updateDisplay();
        }

        resolve(e, t, r, s, n = {}) {
          return o(!this.in || n.in, "Invalid in() reference usage"), "global" === this.type ? this._resolve(r.context, t, n) : "local" === this.type ? this._resolve(s, t, n) : this.ancestor ? "root" === this.ancestor ? this._resolve(t.ancestors[t.ancestors.length - 1], t, n) : (o(this.ancestor <= t.ancestors.length, "Invalid reference exceeds the schema root:", this.display), this._resolve(t.ancestors[this.ancestor - 1], t, n)) : this._resolve(e, t, n);
        }

        _resolve(e, t, r) {
          let s;

          if ("value" === this.type && t.mainstay.shadow && !1 !== r.shadow && (s = t.mainstay.shadow.get(this.absolute(t))), void 0 === s && (s = l(e, this.path, {
            iterables: this.iterables,
            functions: !0
          })), this.adjust && (s = this.adjust(s)), this.map) {
            const e = this.map.get(s);
            void 0 !== e && (s = e);
          }

          return t.mainstay && t.mainstay.tracer.resolve(t, this, s), s;
        }

        toString() {
          return this.display;
        }

        absolute(e) {
          return [...e.path.slice(0, -this.ancestor), ...this.path];
        }

        clone() {
          return new f.Ref(this);
        }

        describe() {
          const e = {
            path: this.path
          };
          "value" !== this.type && (e.type = this.type), "." !== this.separator && (e.separator = this.separator), "value" === this.type && 1 !== this.ancestor && (e.ancestor = this.ancestor), this.map && (e.map = [...this.map]);

          for (const t of ["adjust", "iterables", "render"]) null !== this[t] && void 0 !== this[t] && (e[t] = this[t]);

          return !1 !== this.in && (e.in = !0), {
            ref: e
          };
        }

        updateDisplay() {
          const e = null !== this.key ? this.key : "";
          if ("value" !== this.type) return void (this.display = "ref:".concat(this.type, ":").concat(e));
          if (!this.separator) return void (this.display = "ref:".concat(e));
          if (!this.ancestor) return void (this.display = "ref:".concat(this.separator).concat(e));
          if ("root" === this.ancestor) return void (this.display = "ref:root:".concat(e));
          if (1 === this.ancestor) return void (this.display = "ref:".concat(e || ".."));
          const t = new Array(this.ancestor + 1).fill(this.separator).join("");
          this.display = "ref:".concat(t).concat(e || "");
        }

      }, f.Ref.prototype[c.symbols.ref] = !0, t.build = function (e) {
        return "value" === (e = Object.assign({}, f.defaults, e)).type && void 0 === e.ancestor && (e.ancestor = 1), new f.Ref(e);
      }, f.context = function (e, t, r = {}) {
        if (e = e.trim(), r) {
          const s = void 0 === r.global ? "$" : r.global;
          if (s !== t && e.startsWith(s)) return {
            key: e.slice(s.length),
            type: "global"
          };
          const n = void 0 === r.local ? "#" : r.local;
          if (n !== t && e.startsWith(n)) return {
            key: e.slice(n.length),
            type: "local"
          };
          const a = void 0 === r.root ? "/" : r.root;
          if (a !== t && e.startsWith(a)) return {
            key: e.slice(a.length),
            type: "value",
            root: !0
          };
        }

        return {
          key: e,
          type: "value"
        };
      }, f.ancestor = function (e, t) {
        if (!t) return [1, 0];
        if (e[0] !== t) return [1, 0];
        if (e[1] !== t) return [0, 1];
        let r = 2;

        for (; e[r] === t;) ++r;

        return [r - 1, r];
      }, t.toSibling = 0, t.toParent = 1, t.Manager = class {
        constructor() {
          this.refs = [];
        }

        register(e, s) {
          if (e) if (s = void 0 === s ? t.toParent : s, Array.isArray(e)) for (const t of e) this.register(t, s);else if (c.isSchema(e)) for (const t of e._refs.refs) t.ancestor - s >= 0 && this.refs.push({
            ancestor: t.ancestor - s,
            root: t.root
          });else t.isRef(e) && "value" === e.type && e.ancestor - s >= 0 && this.refs.push({
            ancestor: e.ancestor - s,
            root: e.root
          }), u = u || r(3328), u.isTemplate(e) && this.register(e.refs(), s);
        }

        get length() {
          return this.refs.length;
        }

        clone() {
          const e = new t.Manager();
          return e.refs = i(this.refs), e;
        }

        reset() {
          this.refs = [];
        }

        roots() {
          return this.refs.filter(e => !e.ancestor).map(e => e.root);
        }

      };
    },
    3378: (e, t, r) => {
      "use strict";

      const s = r(5107),
            n = {};
      n.wrap = s.string().min(1).max(2).allow(!1), t.preferences = s.object({
        allowUnknown: s.boolean(),
        abortEarly: s.boolean(),
        artifacts: s.boolean(),
        cache: s.boolean(),
        context: s.object(),
        convert: s.boolean(),
        dateFormat: s.valid("date", "iso", "string", "time", "utc"),
        debug: s.boolean(),
        errors: {
          escapeHtml: s.boolean(),
          label: s.valid("path", "key", !1),
          language: [s.string(), s.object().ref()],
          render: s.boolean(),
          stack: s.boolean(),
          wrap: {
            label: n.wrap,
            array: n.wrap,
            string: n.wrap
          }
        },
        externals: s.boolean(),
        messages: s.object(),
        noDefaults: s.boolean(),
        nonEnumerables: s.boolean(),
        presence: s.valid("required", "optional", "forbidden"),
        skipFunctions: s.boolean(),
        stripUnknown: s.object({
          arrays: s.boolean(),
          objects: s.boolean()
        }).or("arrays", "objects").allow(!0, !1),
        warnings: s.boolean()
      }).strict(), n.nameRx = /^[a-zA-Z0-9]\w*$/, n.rule = s.object({
        alias: s.array().items(s.string().pattern(n.nameRx)).single(),
        args: s.array().items(s.string(), s.object({
          name: s.string().pattern(n.nameRx).required(),
          ref: s.boolean(),
          assert: s.alternatives([s.function(), s.object().schema()]).conditional("ref", {
            is: !0,
            then: s.required()
          }),
          normalize: s.function(),
          message: s.string().when("assert", {
            is: s.function(),
            then: s.required()
          })
        })),
        convert: s.boolean(),
        manifest: s.boolean(),
        method: s.function().allow(!1),
        multi: s.boolean(),
        validate: s.function()
      }), t.extension = s.object({
        type: s.alternatives([s.string(), s.object().regex()]).required(),
        args: s.function(),
        cast: s.object().pattern(n.nameRx, s.object({
          from: s.function().maxArity(1).required(),
          to: s.function().minArity(1).maxArity(2).required()
        })),
        base: s.object().schema().when("type", {
          is: s.object().regex(),
          then: s.forbidden()
        }),
        coerce: [s.function().maxArity(3), s.object({
          method: s.function().maxArity(3).required(),
          from: s.array().items(s.string()).single()
        })],
        flags: s.object().pattern(n.nameRx, s.object({
          setter: s.string(),
          default: s.any()
        })),
        manifest: {
          build: s.function().arity(2)
        },
        messages: [s.object(), s.string()],
        modifiers: s.object().pattern(n.nameRx, s.function().minArity(1).maxArity(2)),
        overrides: s.object().pattern(n.nameRx, s.function()),
        prepare: s.function().maxArity(3),
        rebuild: s.function().arity(1),
        rules: s.object().pattern(n.nameRx, n.rule),
        terms: s.object().pattern(n.nameRx, s.object({
          init: s.array().allow(null).required(),
          manifest: s.object().pattern(/.+/, [s.valid("schema", "single"), s.object({
            mapped: s.object({
              from: s.string().required(),
              to: s.string().required()
            }).required()
          })])
        })),
        validate: s.function().maxArity(3)
      }).strict(), t.extensions = s.array().items(s.object(), s.function().arity(1)).strict(), n.desc = {
        buffer: s.object({
          buffer: s.string()
        }),
        func: s.object({
          function: s.function().required(),
          options: {
            literal: !0
          }
        }),
        override: s.object({
          override: !0
        }),
        ref: s.object({
          ref: s.object({
            type: s.valid("value", "global", "local"),
            path: s.array().required(),
            separator: s.string().length(1).allow(!1),
            ancestor: s.number().min(0).integer().allow("root"),
            map: s.array().items(s.array().length(2)).min(1),
            adjust: s.function(),
            iterables: s.boolean(),
            in: s.boolean(),
            render: s.boolean()
          }).required()
        }),
        regex: s.object({
          regex: s.string().min(3)
        }),
        special: s.object({
          special: s.valid("deep").required()
        }),
        template: s.object({
          template: s.string().required(),
          options: s.object()
        }),
        value: s.object({
          value: s.alternatives([s.object(), s.array()]).required()
        })
      }, n.desc.entity = s.alternatives([s.array().items(s.link("...")), s.boolean(), s.function(), s.number(), s.string(), n.desc.buffer, n.desc.func, n.desc.ref, n.desc.regex, n.desc.special, n.desc.template, n.desc.value, s.link("/")]), n.desc.values = s.array().items(null, s.boolean(), s.function(), s.number().allow(1 / 0, -1 / 0), s.string().allow(""), s.symbol(), n.desc.buffer, n.desc.func, n.desc.override, n.desc.ref, n.desc.regex, n.desc.template, n.desc.value), n.desc.messages = s.object().pattern(/.+/, [s.string(), n.desc.template, s.object().pattern(/.+/, [s.string(), n.desc.template])]), t.description = s.object({
        type: s.string().required(),
        flags: s.object({
          cast: s.string(),
          default: s.any(),
          description: s.string(),
          empty: s.link("/"),
          failover: n.desc.entity,
          id: s.string(),
          label: s.string(),
          only: !0,
          presence: ["optional", "required", "forbidden"],
          result: ["raw", "strip"],
          strip: s.boolean(),
          unit: s.string()
        }).unknown(),
        preferences: {
          allowUnknown: s.boolean(),
          abortEarly: s.boolean(),
          artifacts: s.boolean(),
          cache: s.boolean(),
          convert: s.boolean(),
          dateFormat: ["date", "iso", "string", "time", "utc"],
          errors: {
            escapeHtml: s.boolean(),
            label: ["path", "key"],
            language: [s.string(), n.desc.ref],
            wrap: {
              label: n.wrap,
              array: n.wrap
            }
          },
          externals: s.boolean(),
          messages: n.desc.messages,
          noDefaults: s.boolean(),
          nonEnumerables: s.boolean(),
          presence: ["required", "optional", "forbidden"],
          skipFunctions: s.boolean(),
          stripUnknown: s.object({
            arrays: s.boolean(),
            objects: s.boolean()
          }).or("arrays", "objects").allow(!0, !1),
          warnings: s.boolean()
        },
        allow: n.desc.values,
        invalid: n.desc.values,
        rules: s.array().min(1).items({
          name: s.string().required(),
          args: s.object().min(1),
          keep: s.boolean(),
          message: [s.string(), n.desc.messages],
          warn: s.boolean()
        }),
        keys: s.object().pattern(/.*/, s.link("/")),
        link: n.desc.ref
      }).pattern(/^[a-z]\w*$/, s.any());
    },
    493: (e, t, r) => {
      "use strict";

      const s = r(8571),
            n = r(9621),
            a = r(8160),
            o = {
        value: Symbol("value")
      };
      e.exports = o.State = class {
        constructor(e, t, r) {
          this.path = e, this.ancestors = t, this.mainstay = r.mainstay, this.schemas = r.schemas, this.debug = null;
        }

        localize(e, t = null, r = null) {
          const s = new o.State(e, t, this);
          return r && s.schemas && (s.schemas = [o.schemas(r), ...s.schemas]), s;
        }

        nest(e, t) {
          const r = new o.State(this.path, this.ancestors, this);
          return r.schemas = r.schemas && [o.schemas(e), ...r.schemas], r.debug = t, r;
        }

        shadow(e, t) {
          this.mainstay.shadow = this.mainstay.shadow || new o.Shadow(), this.mainstay.shadow.set(this.path, e, t);
        }

        snapshot() {
          this.mainstay.shadow && (this._snapshot = s(this.mainstay.shadow.node(this.path)));
        }

        restore() {
          this.mainstay.shadow && (this.mainstay.shadow.override(this.path, this._snapshot), this._snapshot = void 0);
        }

      }, o.schemas = function (e) {
        return a.isSchema(e) ? {
          schema: e
        } : e;
      }, o.Shadow = class {
        constructor() {
          this._values = null;
        }

        set(e, t, r) {
          if (!e.length) return;
          if ("strip" === r && "number" == typeof e[e.length - 1]) return;
          this._values = this._values || new Map();
          let s = this._values;

          for (let t = 0; t < e.length; ++t) {
            const r = e[t];
            let n = s.get(r);
            n || (n = new Map(), s.set(r, n)), s = n;
          }

          s[o.value] = t;
        }

        get(e) {
          const t = this.node(e);
          if (t) return t[o.value];
        }

        node(e) {
          if (this._values) return n(this._values, e, {
            iterables: !0
          });
        }

        override(e, t) {
          if (!this._values) return;
          const r = e.slice(0, -1),
                s = e[e.length - 1],
                a = n(this._values, r, {
            iterables: !0
          });
          t ? a.set(s, t) : a && a.delete(s);
        }

      };
    },
    3328: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(8571),
            l = r(5277),
            c = r(1447),
            u = r(8160),
            f = r(6354),
            m = r(6133),
            h = {
        symbol: Symbol("template"),
        opens: new Array(1e3).join("\0"),
        closes: new Array(1e3).join(""),
        dateFormat: {
          date: Date.prototype.toDateString,
          iso: Date.prototype.toISOString,
          string: Date.prototype.toString,
          time: Date.prototype.toTimeString,
          utc: Date.prototype.toUTCString
        }
      };
      e.exports = h.Template = class {
        constructor(e, t) {
          o("string" == typeof e, "Template source must be a string"), o(!e.includes("\0") && !e.includes(""), "Template source cannot contain reserved control characters"), this.source = e, this.rendered = e, this._template = null, this._settings = i(t), this._parse();
        }

        _parse() {
          if (!this.source.includes("{")) return;
          const e = h.encode(this.source),
                t = h.split(e);
          let r = !1;
          const s = [],
                n = t.shift();
          n && s.push(n);

          for (const e of t) {
            const t = "{" !== e[0],
                  n = t ? "}" : "}}",
                  a = e.indexOf(n);

            if (-1 === a || "{" === e[1]) {
              s.push("{".concat(h.decode(e)));
              continue;
            }

            let o = e.slice(t ? 0 : 1, a);
            const i = ":" === o[0];
            i && (o = o.slice(1));

            const l = this._ref(h.decode(o), {
              raw: t,
              wrapped: i
            });

            s.push(l), "string" != typeof l && (r = !0);
            const c = e.slice(a + n.length);
            c && s.push(h.decode(c));
          }

          r ? this._template = s : this.rendered = s.join("");
        }

        static date(e, t) {
          return h.dateFormat[t.dateFormat].call(e);
        }

        describe(e = {}) {
          if (!this._settings && e.compact) return this.source;
          const t = {
            template: this.source
          };
          return this._settings && (t.options = this._settings), t;
        }

        static build(e) {
          return new h.Template(e.template, e.options);
        }

        isDynamic() {
          return !!this._template;
        }

        static isTemplate(e) {
          return !!e && !!e[u.symbols.template];
        }

        refs() {
          if (!this._template) return;
          const e = [];

          for (const t of this._template) "string" != typeof t && e.push(...t.refs);

          return e;
        }

        resolve(e, t, r, s) {
          return this._template && 1 === this._template.length ? this._part(this._template[0], e, t, r, s, {}) : this.render(e, t, r, s);
        }

        _part(e, ...t) {
          return e.ref ? e.ref.resolve(...t) : e.formula.evaluate(t);
        }

        render(e, t, r, s, n = {}) {
          if (!this.isDynamic()) return this.rendered;
          const a = [];

          for (const o of this._template) if ("string" == typeof o) a.push(o);else {
            const i = this._part(o, e, t, r, s, n),
                  c = h.stringify(i, e, t, r, s, n);

            if (void 0 !== c) {
              const e = o.raw || !1 === (n.errors && n.errors.escapeHtml) ? c : l(c);
              a.push(h.wrap(e, o.wrapped && r.errors.wrap.label));
            }
          }

          return a.join("");
        }

        _ref(e, {
          raw: t,
          wrapped: r
        }) {
          const s = [],
                n = e => {
            const t = m.create(e, this._settings);
            return s.push(t), e => t.resolve(...e);
          };

          try {
            var a = new c.Parser(e, {
              reference: n,
              functions: h.functions,
              constants: h.constants
            });
          } catch (t) {
            throw t.message = 'Invalid template variable "'.concat(e, '" fails due to: ').concat(t.message), t;
          }

          if (a.single) {
            if ("reference" === a.single.type) {
              const e = s[0];
              return {
                ref: e,
                raw: t,
                refs: s,
                wrapped: r || "local" === e.type && "label" === e.key
              };
            }

            return h.stringify(a.single.value);
          }

          return {
            formula: a,
            raw: t,
            refs: s
          };
        }

        toString() {
          return this.source;
        }

      }, h.Template.prototype[u.symbols.template] = !0, h.Template.prototype.isImmutable = !0, h.encode = function (e) {
        return e.replace(/\\(\{+)/g, (e, t) => h.opens.slice(0, t.length)).replace(/\\(\}+)/g, (e, t) => h.closes.slice(0, t.length));
      }, h.decode = function (e) {
        return e.replace(/\u0000/g, "{").replace(/\u0001/g, "}");
      }, h.split = function (e) {
        const t = [];
        let r = "";

        for (let s = 0; s < e.length; ++s) {
          const n = e[s];

          if ("{" === n) {
            let n = "";

            for (; s + 1 < e.length && "{" === e[s + 1];) n += "{", ++s;

            t.push(r), r = n;
          } else r += n;
        }

        return t.push(r), t;
      }, h.wrap = function (e, t) {
        return t ? 1 === t.length ? "".concat(t).concat(e).concat(t) : "".concat(t[0]).concat(e).concat(t[1]) : e;
      }, h.stringify = function (e, t, r, s, a, o = {}) {
        const i = typeof e,
              l = s && s.errors && s.errors.wrap || {};
        let c = !1;
        if (m.isRef(e) && e.render && (c = e.in, e = e.resolve(t, r, s, a, n({
          in: e.in
        }, o))), null === e) return "null";
        if ("string" === i) return h.wrap(e, o.arrayItems && l.string);
        if ("number" === i || "function" === i || "symbol" === i) return e.toString();
        if ("object" !== i) return JSON.stringify(e);
        if (e instanceof Date) return h.Template.date(e, s);

        if (e instanceof Map) {
          const t = [];

          for (const [r, s] of e.entries()) t.push("".concat(r.toString(), " -> ").concat(s.toString()));

          e = t;
        }

        if (!Array.isArray(e)) return e.toString();
        const u = [];

        for (const i of e) u.push(h.stringify(i, t, r, s, a, n({
          arrayItems: !0
        }, o)));

        return h.wrap(u.join(", "), !c && l.array);
      }, h.constants = {
        true: !0,
        false: !1,
        null: null,
        second: 1e3,
        minute: 6e4,
        hour: 36e5,
        day: 864e5
      }, h.functions = {
        if: (e, t, r) => e ? t : r,
        length: e => "string" == typeof e ? e.length : e && "object" == typeof e ? Array.isArray(e) ? e.length : Object.keys(e).length : null,

        msg(e) {
          const [t, r, s, n, a] = this,
                o = a.messages;
          if (!o) return "";
          const i = f.template(t, o[0], e, r, s) || f.template(t, o[1], e, r, s);
          return i ? i.render(t, r, s, n, a) : "";
        },

        number: e => "number" == typeof e ? e : "string" == typeof e ? parseFloat(e) : "boolean" == typeof e ? e ? 1 : 0 : e instanceof Date ? e.getTime() : null
      };
    },
    4946: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(1687),
            a = r(8068),
            o = r(8160),
            i = r(3292),
            l = r(6354),
            c = r(6133),
            u = {};
      e.exports = a.extend({
        type: "alternatives",
        flags: {
          match: {
            default: "any"
          }
        },
        terms: {
          matches: {
            init: [],
            register: c.toSibling
          }
        },
        args: (e, ...t) => 1 === t.length && Array.isArray(t[0]) ? e.try(...t[0]) : e.try(...t),

        validate(e, t) {
          const {
            schema: r,
            error: s,
            state: a,
            prefs: o
          } = t;

          if (r._flags.match) {
            const t = [],
                  i = [];

            for (let s = 0; s < r.$_terms.matches.length; ++s) {
              const n = r.$_terms.matches[s],
                    l = a.nest(n.schema, "match.".concat(s));
              l.snapshot();
              const c = n.schema.$_validate(e, l, o);
              c.errors ? (i.push(c.errors), l.restore()) : t.push(c.value);
            }

            if (0 === t.length) return {
              errors: s("alternatives.any", {
                details: i.map(e => l.details(e, {
                  override: !1
                }))
              })
            };
            if ("one" === r._flags.match) return 1 === t.length ? {
              value: t[0]
            } : {
              errors: s("alternatives.one")
            };
            if (t.length !== r.$_terms.matches.length) return {
              errors: s("alternatives.all", {
                details: i.map(e => l.details(e, {
                  override: !1
                }))
              })
            };

            const c = e => e.$_terms.matches.some(e => "object" === e.schema.type || "alternatives" === e.schema.type && c(e.schema));

            return c(r) ? {
              value: t.reduce((e, t) => n(e, t, {
                mergeArrays: !1
              }))
            } : {
              value: t[t.length - 1]
            };
          }

          const i = [];

          for (let t = 0; t < r.$_terms.matches.length; ++t) {
            const s = r.$_terms.matches[t];

            if (s.schema) {
              const r = a.nest(s.schema, "match.".concat(t));
              r.snapshot();
              const n = s.schema.$_validate(e, r, o);
              if (!n.errors) return n;
              r.restore(), i.push({
                schema: s.schema,
                reports: n.errors
              });
              continue;
            }

            const n = s.ref ? s.ref.resolve(e, a, o) : e,
                  l = s.is ? [s] : s.switch;

            for (let r = 0; r < l.length; ++r) {
              const i = l[r],
                    {
                is: c,
                then: u,
                otherwise: f
              } = i,
                    m = "match.".concat(t).concat(s.switch ? "." + r : "");

              if (c.$_match(n, a.nest(c, "".concat(m, ".is")), o)) {
                if (u) return u.$_validate(e, a.nest(u, "".concat(m, ".then")), o);
              } else if (f) return f.$_validate(e, a.nest(f, "".concat(m, ".otherwise")), o);
            }
          }

          return u.errors(i, t);
        },

        rules: {
          conditional: {
            method(e, t) {
              s(!this._flags._endedSwitch, "Unreachable condition"), s(!this._flags.match, "Cannot combine match mode", this._flags.match, "with conditional rule"), s(void 0 === t.break, "Cannot use break option with alternatives conditional");
              const r = this.clone(),
                    n = i.when(r, e, t),
                    a = n.is ? [n] : n.switch;

              for (const e of a) if (e.then && e.otherwise) {
                r.$_setFlag("_endedSwitch", !0, {
                  clone: !1
                });
                break;
              }

              return r.$_terms.matches.push(n), r.$_mutateRebuild();
            }

          },
          match: {
            method(e) {
              if (s(["any", "one", "all"].includes(e), "Invalid alternatives match mode", e), "any" !== e) for (const t of this.$_terms.matches) s(t.schema, "Cannot combine match mode", e, "with conditional rules");
              return this.$_setFlag("match", e);
            }

          },
          try: {
            method(...e) {
              s(e.length, "Missing alternative schemas"), o.verifyFlat(e, "try"), s(!this._flags._endedSwitch, "Unreachable condition");
              const t = this.clone();

              for (const r of e) t.$_terms.matches.push({
                schema: t.$_compile(r)
              });

              return t.$_mutateRebuild();
            }

          }
        },
        overrides: {
          label(e) {
            return this.$_parent("label", e).$_modify({
              each: (t, r) => "is" !== r.path[0] ? t.label(e) : void 0,
              ref: !1
            });
          }

        },

        rebuild(e) {
          e.$_modify({
            each: t => {
              o.isSchema(t) && "array" === t.type && e.$_setFlag("_arrayItems", !0, {
                clone: !1
              });
            }
          });
        },

        manifest: {
          build(e, t) {
            if (t.matches) for (const r of t.matches) {
              const {
                schema: t,
                ref: s,
                is: n,
                not: a,
                then: o,
                otherwise: i
              } = r;
              e = t ? e.try(t) : s ? e.conditional(s, {
                is: n,
                then: o,
                not: a,
                otherwise: i,
                switch: r.switch
              }) : e.conditional(n, {
                then: o,
                otherwise: i
              });
            }
            return e;
          }

        },
        messages: {
          "alternatives.all": "{{#label}} does not match all of the required types",
          "alternatives.any": "{{#label}} does not match any of the allowed types",
          "alternatives.match": "{{#label}} does not match any of the allowed types",
          "alternatives.one": "{{#label}} matches more than one allowed type",
          "alternatives.types": "{{#label}} must be one of {{#types}}"
        }
      }), u.errors = function (e, {
        error: t,
        state: r
      }) {
        if (!e.length) return {
          errors: t("alternatives.any")
        };
        if (1 === e.length) return {
          errors: e[0].reports
        };
        const s = new Set(),
              n = [];

        for (const {
          reports: a,
          schema: o
        } of e) {
          if (a.length > 1) return u.unmatched(e, t);
          const i = a[0];
          if (i instanceof l.Report == 0) return u.unmatched(e, t);

          if (i.state.path.length !== r.path.length) {
            n.push({
              type: o.type,
              report: i
            });
            continue;
          }

          if ("any.only" === i.code) {
            for (const e of i.local.valids) s.add(e);

            continue;
          }

          const [c, f] = i.code.split(".");
          "base" === f ? s.add(c) : n.push({
            type: o.type,
            report: i
          });
        }

        return n.length ? 1 === n.length ? {
          errors: n[0].report
        } : u.unmatched(e, t) : {
          errors: t("alternatives.types", {
            types: [...s]
          })
        };
      }, u.unmatched = function (e, t) {
        const r = [];

        for (const t of e) r.push(...t.reports);

        return {
          errors: t("alternatives.match", l.details(r, {
            override: !1
          }))
        };
      };
    },
    8068: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(7629),
            a = r(8160),
            o = r(6914);
      e.exports = n.extend({
        type: "any",
        flags: {
          only: {
            default: !1
          }
        },
        terms: {
          alterations: {
            init: null
          },
          examples: {
            init: null
          },
          externals: {
            init: null
          },
          metas: {
            init: []
          },
          notes: {
            init: []
          },
          shared: {
            init: null
          },
          tags: {
            init: []
          },
          whens: {
            init: null
          }
        },
        rules: {
          custom: {
            method(e, t) {
              return s("function" == typeof e, "Method must be a function"), s(void 0 === t || t && "string" == typeof t, "Description must be a non-empty string"), this.$_addRule({
                name: "custom",
                args: {
                  method: e,
                  description: t
                }
              });
            },

            validate(e, t, {
              method: r
            }) {
              try {
                return r(e, t);
              } catch (e) {
                return t.error("any.custom", {
                  error: e
                });
              }
            },

            args: ["method", "description"],
            multi: !0
          },
          messages: {
            method(e) {
              return this.prefs({
                messages: e
              });
            }

          },
          shared: {
            method(e) {
              s(a.isSchema(e) && e._flags.id, "Schema must be a schema with an id");
              const t = this.clone();
              return t.$_terms.shared = t.$_terms.shared || [], t.$_terms.shared.push(e), t.$_mutateRegister(e), t;
            }

          },
          warning: {
            method(e, t) {
              return s(e && "string" == typeof e, "Invalid warning code"), this.$_addRule({
                name: "warning",
                args: {
                  code: e,
                  local: t
                },
                warn: !0
              });
            },

            validate: (e, t, {
              code: r,
              local: s
            }) => t.error(r, s),
            args: ["code", "local"],
            multi: !0
          }
        },
        modifiers: {
          keep(e, t = !0) {
            e.keep = t;
          },

          message(e, t) {
            e.message = o.compile(t);
          },

          warn(e, t = !0) {
            e.warn = t;
          }

        },
        manifest: {
          build(e, t) {
            for (const r in t) {
              const s = t[r];
              if (["examples", "externals", "metas", "notes", "tags"].includes(r)) for (const t of s) e = e[r.slice(0, -1)](t);else if ("alterations" !== r) {
                if ("whens" !== r) {
                  if ("shared" === r) for (const t of s) e = e.shared(t);
                } else for (const t of s) {
                  const {
                    ref: r,
                    is: s,
                    not: n,
                    then: a,
                    otherwise: o,
                    concat: i
                  } = t;
                  e = i ? e.concat(i) : r ? e.when(r, {
                    is: s,
                    not: n,
                    then: a,
                    otherwise: o,
                    switch: t.switch,
                    break: t.break
                  }) : e.when(s, {
                    then: a,
                    otherwise: o,
                    break: t.break
                  });
                }
              } else {
                const t = {};

                for (const {
                  target: e,
                  adjuster: r
                } of s) t[e] = r;

                e = e.alter(t);
              }
            }

            return e;
          }

        },
        messages: {
          "any.custom": "{{#label}} failed custom validation because {{#error.message}}",
          "any.default": "{{#label}} threw an error when running default method",
          "any.failover": "{{#label}} threw an error when running failover method",
          "any.invalid": "{{#label}} contains an invalid value",
          "any.only": '{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',
          "any.ref": "{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}",
          "any.required": "{{#label}} is required",
          "any.unknown": "{{#label}} is not allowed"
        }
      });
    },
    546: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(9474),
            a = r(9621),
            o = r(8068),
            i = r(8160),
            l = r(3292),
            c = {};
      e.exports = o.extend({
        type: "array",
        flags: {
          single: {
            default: !1
          },
          sparse: {
            default: !1
          }
        },
        terms: {
          items: {
            init: [],
            manifest: "schema"
          },
          ordered: {
            init: [],
            manifest: "schema"
          },
          _exclusions: {
            init: []
          },
          _inclusions: {
            init: []
          },
          _requireds: {
            init: []
          }
        },
        coerce: {
          from: "object",

          method(e, {
            schema: t,
            state: r,
            prefs: s
          }) {
            if (!Array.isArray(e)) return;
            const n = t.$_getRule("sort");
            return n ? c.sort(t, e, n.args.options, r, s) : void 0;
          }

        },

        validate(e, {
          schema: t,
          error: r
        }) {
          if (!Array.isArray(e)) {
            if (t._flags.single) {
              const t = [e];
              return t[i.symbols.arraySingle] = !0, {
                value: t
              };
            }

            return {
              errors: r("array.base")
            };
          }

          if (t.$_getRule("items") || t.$_terms.externals) return {
            value: e.slice()
          };
        },

        rules: {
          has: {
            method(e) {
              e = this.$_compile(e, {
                appendPath: !0
              });
              const t = this.$_addRule({
                name: "has",
                args: {
                  schema: e
                }
              });
              return t.$_mutateRegister(e), t;
            },

            validate(e, {
              state: t,
              prefs: r,
              error: s
            }, {
              schema: n
            }) {
              const a = [e, ...t.ancestors];

              for (let s = 0; s < e.length; ++s) {
                const o = t.localize([...t.path, s], a, n);
                if (n.$_match(e[s], o, r)) return e;
              }

              const o = n._flags.label;
              return o ? s("array.hasKnown", {
                patternLabel: o
              }) : s("array.hasUnknown", null);
            },

            multi: !0
          },
          items: {
            method(...e) {
              i.verifyFlat(e, "items");
              const t = this.$_addRule("items");

              for (let r = 0; r < e.length; ++r) {
                const s = i.tryWithPath(() => this.$_compile(e[r]), r, {
                  append: !0
                });
                t.$_terms.items.push(s);
              }

              return t.$_mutateRebuild();
            },

            validate(e, {
              schema: t,
              error: r,
              state: s,
              prefs: n,
              errorsArray: a
            }) {
              const o = t.$_terms._requireds.slice(),
                    l = t.$_terms.ordered.slice(),
                    u = [...t.$_terms._inclusions, ...o],
                    f = !e[i.symbols.arraySingle];

              delete e[i.symbols.arraySingle];
              const m = a();
              let h = e.length;

              for (let a = 0; a < h; ++a) {
                const i = e[a];
                let d = !1,
                    p = !1;
                const g = f ? a : new Number(a),
                      y = [...s.path, g];

                if (!t._flags.sparse && void 0 === i) {
                  if (m.push(r("array.sparse", {
                    key: g,
                    path: y,
                    pos: a,
                    value: void 0
                  }, s.localize(y))), n.abortEarly) return m;
                  l.shift();
                  continue;
                }

                const b = [e, ...s.ancestors];

                for (const e of t.$_terms._exclusions) if (e.$_match(i, s.localize(y, b, e), n, {
                  presence: "ignore"
                })) {
                  if (m.push(r("array.excludes", {
                    pos: a,
                    value: i
                  }, s.localize(y))), n.abortEarly) return m;
                  d = !0, l.shift();
                  break;
                }

                if (d) continue;

                if (t.$_terms.ordered.length) {
                  if (l.length) {
                    const o = l.shift(),
                          u = o.$_validate(i, s.localize(y, b, o), n);

                    if (u.errors) {
                      if (m.push(...u.errors), n.abortEarly) return m;
                    } else if ("strip" === o._flags.result) c.fastSplice(e, a), --a, --h;else {
                      if (!t._flags.sparse && void 0 === u.value) {
                        if (m.push(r("array.sparse", {
                          key: g,
                          path: y,
                          pos: a,
                          value: void 0
                        }, s.localize(y))), n.abortEarly) return m;
                        continue;
                      }

                      e[a] = u.value;
                    }

                    continue;
                  }

                  if (!t.$_terms.items.length) {
                    if (m.push(r("array.orderedLength", {
                      pos: a,
                      limit: t.$_terms.ordered.length
                    })), n.abortEarly) return m;
                    break;
                  }
                }

                const v = [];
                let _ = o.length;

                for (let l = 0; l < _; ++l) {
                  const u = s.localize(y, b, o[l]);
                  u.snapshot();
                  const f = o[l].$_validate(i, u, n);

                  if (v[l] = f, !f.errors) {
                    if (e[a] = f.value, p = !0, c.fastSplice(o, l), --l, --_, !t._flags.sparse && void 0 === f.value && (m.push(r("array.sparse", {
                      key: g,
                      path: y,
                      pos: a,
                      value: void 0
                    }, s.localize(y))), n.abortEarly)) return m;
                    break;
                  }

                  u.restore();
                }

                if (p) continue;
                const w = n.stripUnknown && !!n.stripUnknown.arrays || !1;
                _ = u.length;

                for (const l of u) {
                  let u;
                  const f = o.indexOf(l);
                  if (-1 !== f) u = v[f];else {
                    const o = s.localize(y, b, l);

                    if (o.snapshot(), u = l.$_validate(i, o, n), !u.errors) {
                      "strip" === l._flags.result ? (c.fastSplice(e, a), --a, --h) : t._flags.sparse || void 0 !== u.value ? e[a] = u.value : (m.push(r("array.sparse", {
                        key: g,
                        path: y,
                        pos: a,
                        value: void 0
                      }, s.localize(y))), d = !0), p = !0;
                      break;
                    }

                    o.restore();
                  }

                  if (1 === _) {
                    if (w) {
                      c.fastSplice(e, a), --a, --h, p = !0;
                      break;
                    }

                    if (m.push(...u.errors), n.abortEarly) return m;
                    d = !0;
                    break;
                  }
                }

                if (!d && (t.$_terms._inclusions.length || t.$_terms._requireds.length) && !p) {
                  if (w) {
                    c.fastSplice(e, a), --a, --h;
                    continue;
                  }

                  if (m.push(r("array.includes", {
                    pos: a,
                    value: i
                  }, s.localize(y))), n.abortEarly) return m;
                }
              }

              return o.length && c.fillMissedErrors(t, m, o, e, s, n), l.length && (c.fillOrderedErrors(t, m, l, e, s, n), m.length || c.fillDefault(l, e, s, n)), m.length ? m : e;
            },

            priority: !0,
            manifest: !1
          },
          length: {
            method(e) {
              return this.$_addRule({
                name: "length",
                args: {
                  limit: e
                },
                operator: "="
              });
            },

            validate: (e, t, {
              limit: r
            }, {
              name: s,
              operator: n,
              args: a
            }) => i.compare(e.length, r, n) ? e : t.error("array." + s, {
              limit: a.limit,
              value: e
            }),
            args: [{
              name: "limit",
              ref: !0,
              assert: i.limit,
              message: "must be a positive integer"
            }]
          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "length",
                args: {
                  limit: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "length",
                args: {
                  limit: e
                },
                operator: ">="
              });
            }

          },
          ordered: {
            method(...e) {
              i.verifyFlat(e, "ordered");
              const t = this.$_addRule("items");

              for (let r = 0; r < e.length; ++r) {
                const s = i.tryWithPath(() => this.$_compile(e[r]), r, {
                  append: !0
                });
                c.validateSingle(s, t), t.$_mutateRegister(s), t.$_terms.ordered.push(s);
              }

              return t.$_mutateRebuild();
            }

          },
          single: {
            method(e) {
              const t = void 0 === e || !!e;
              return s(!t || !this._flags._arrayItems, "Cannot specify single rule when array has array items"), this.$_setFlag("single", t);
            }

          },
          sort: {
            method(e = {}) {
              i.assertOptions(e, ["by", "order"]);
              const t = {
                order: e.order || "ascending"
              };
              return e.by && (t.by = l.ref(e.by, {
                ancestor: 0
              }), s(!t.by.ancestor, "Cannot sort by ancestor")), this.$_addRule({
                name: "sort",
                args: {
                  options: t
                }
              });
            },

            validate(e, {
              error: t,
              state: r,
              prefs: s,
              schema: n
            }, {
              options: a
            }) {
              const {
                value: o,
                errors: i
              } = c.sort(n, e, a, r, s);
              if (i) return i;

              for (let r = 0; r < e.length; ++r) if (e[r] !== o[r]) return t("array.sort", {
                order: a.order,
                by: a.by ? a.by.key : "value"
              });

              return e;
            },

            convert: !0
          },
          sparse: {
            method(e) {
              const t = void 0 === e || !!e;
              return this._flags.sparse === t ? this : (t ? this.clone() : this.$_addRule("items")).$_setFlag("sparse", t, {
                clone: !1
              });
            }

          },
          unique: {
            method(e, t = {}) {
              s(!e || "function" == typeof e || "string" == typeof e, "comparator must be a function or a string"), i.assertOptions(t, ["ignoreUndefined", "separator"]);
              const r = {
                name: "unique",
                args: {
                  options: t,
                  comparator: e
                }
              };
              if (e) if ("string" == typeof e) {
                const s = i.default(t.separator, ".");
                r.path = s ? e.split(s) : [e];
              } else r.comparator = e;
              return this.$_addRule(r);
            },

            validate(e, {
              state: t,
              error: r,
              schema: o
            }, {
              comparator: i,
              options: l
            }, {
              comparator: c,
              path: u
            }) {
              const f = {
                string: Object.create(null),
                number: Object.create(null),
                undefined: Object.create(null),
                boolean: Object.create(null),
                object: new Map(),
                function: new Map(),
                custom: new Map()
              },
                    m = c || n,
                    h = l.ignoreUndefined;

              for (let n = 0; n < e.length; ++n) {
                const o = u ? a(e[n], u) : e[n],
                      l = c ? f.custom : f[typeof o];

                if (s(l, "Failed to find unique map container for type", typeof o), l instanceof Map) {
                  const s = l.entries();
                  let a;

                  for (; !(a = s.next()).done;) if (m(a.value[0], o)) {
                    const s = t.localize([...t.path, n], [e, ...t.ancestors]),
                          o = {
                      pos: n,
                      value: e[n],
                      dupePos: a.value[1],
                      dupeValue: e[a.value[1]]
                    };
                    return u && (o.path = i), r("array.unique", o, s);
                  }

                  l.set(o, n);
                } else {
                  if ((!h || void 0 !== o) && void 0 !== l[o]) {
                    const s = {
                      pos: n,
                      value: e[n],
                      dupePos: l[o],
                      dupeValue: e[l[o]]
                    };
                    return u && (s.path = i), r("array.unique", s, t.localize([...t.path, n], [e, ...t.ancestors]));
                  }

                  l[o] = n;
                }
              }

              return e;
            },

            args: ["comparator", "options"],
            multi: !0
          }
        },
        cast: {
          set: {
            from: Array.isArray,
            to: (e, t) => new Set(e)
          }
        },

        rebuild(e) {
          e.$_terms._inclusions = [], e.$_terms._exclusions = [], e.$_terms._requireds = [];

          for (const t of e.$_terms.items) c.validateSingle(t, e), "required" === t._flags.presence ? e.$_terms._requireds.push(t) : "forbidden" === t._flags.presence ? e.$_terms._exclusions.push(t) : e.$_terms._inclusions.push(t);

          for (const t of e.$_terms.ordered) c.validateSingle(t, e);
        },

        manifest: {
          build: (e, t) => (t.items && (e = e.items(...t.items)), t.ordered && (e = e.ordered(...t.ordered)), e)
        },
        messages: {
          "array.base": "{{#label}} must be an array",
          "array.excludes": "{{#label}} contains an excluded value",
          "array.hasKnown": "{{#label}} does not contain at least one required match for type {:#patternLabel}",
          "array.hasUnknown": "{{#label}} does not contain at least one required match",
          "array.includes": "{{#label}} does not match any of the allowed types",
          "array.includesRequiredBoth": "{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)",
          "array.includesRequiredKnowns": "{{#label}} does not contain {{#knownMisses}}",
          "array.includesRequiredUnknowns": "{{#label}} does not contain {{#unknownMisses}} required value(s)",
          "array.length": "{{#label}} must contain {{#limit}} items",
          "array.max": "{{#label}} must contain less than or equal to {{#limit}} items",
          "array.min": "{{#label}} must contain at least {{#limit}} items",
          "array.orderedLength": "{{#label}} must contain at most {{#limit}} items",
          "array.sort": "{{#label}} must be sorted in {#order} order by {{#by}}",
          "array.sort.mismatching": "{{#label}} cannot be sorted due to mismatching types",
          "array.sort.unsupported": "{{#label}} cannot be sorted due to unsupported type {#type}",
          "array.sparse": "{{#label}} must not be a sparse array item",
          "array.unique": "{{#label}} contains a duplicate value"
        }
      }), c.fillMissedErrors = function (e, t, r, s, n, a) {
        const o = [];
        let i = 0;

        for (const e of r) {
          const t = e._flags.label;
          t ? o.push(t) : ++i;
        }

        o.length ? i ? t.push(e.$_createError("array.includesRequiredBoth", s, {
          knownMisses: o,
          unknownMisses: i
        }, n, a)) : t.push(e.$_createError("array.includesRequiredKnowns", s, {
          knownMisses: o
        }, n, a)) : t.push(e.$_createError("array.includesRequiredUnknowns", s, {
          unknownMisses: i
        }, n, a));
      }, c.fillOrderedErrors = function (e, t, r, s, n, a) {
        const o = [];

        for (const e of r) "required" === e._flags.presence && o.push(e);

        o.length && c.fillMissedErrors(e, t, o, s, n, a);
      }, c.fillDefault = function (e, t, r, s) {
        const n = [];
        let a = !0;

        for (let o = e.length - 1; o >= 0; --o) {
          const i = e[o],
                l = [t, ...r.ancestors],
                c = i.$_validate(void 0, r.localize(r.path, l, i), s).value;

          if (a) {
            if (void 0 === c) continue;
            a = !1;
          }

          n.unshift(c);
        }

        n.length && t.push(...n);
      }, c.fastSplice = function (e, t) {
        let r = t;

        for (; r < e.length;) e[r++] = e[r];

        --e.length;
      }, c.validateSingle = function (e, t) {
        ("array" === e.type || e._flags._arrayItems) && (s(!t._flags.single, "Cannot specify array item with single rule enabled"), t.$_setFlag("_arrayItems", !0, {
          clone: !1
        }));
      }, c.sort = function (e, t, r, s, n) {
        const a = "ascending" === r.order ? 1 : -1,
              o = -1 * a,
              i = a,
              l = (l, u) => {
          let f = c.compare(l, u, o, i);
          if (null !== f) return f;
          if (r.by && (l = r.by.resolve(l, s, n), u = r.by.resolve(u, s, n)), f = c.compare(l, u, o, i), null !== f) return f;
          const m = typeof l;
          if (m !== typeof u) throw e.$_createError("array.sort.mismatching", t, null, s, n);
          if ("number" !== m && "string" !== m) throw e.$_createError("array.sort.unsupported", t, {
            type: m
          }, s, n);
          return "number" === m ? (l - u) * a : l < u ? o : i;
        };

        try {
          return {
            value: t.slice().sort(l)
          };
        } catch (e) {
          return {
            errors: e
          };
        }
      }, c.compare = function (e, t, r, s) {
        return e === t ? 0 : void 0 === e ? 1 : void 0 === t ? -1 : null === e ? s : null === t ? r : null;
      };
    },
    4937: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = r(2036),
            i = {
        isBool: function (e) {
          return "boolean" == typeof e;
        }
      };
      e.exports = n.extend({
        type: "boolean",
        flags: {
          sensitive: {
            default: !1
          }
        },
        terms: {
          falsy: {
            init: null,
            manifest: "values"
          },
          truthy: {
            init: null,
            manifest: "values"
          }
        },

        coerce(e, {
          schema: t
        }) {
          if ("boolean" != typeof e) {
            if ("string" == typeof e) {
              const r = t._flags.sensitive ? e : e.toLowerCase();
              e = "true" === r || "false" !== r && e;
            }

            return "boolean" != typeof e && (e = t.$_terms.truthy && t.$_terms.truthy.has(e, null, null, !t._flags.sensitive) || (!t.$_terms.falsy || !t.$_terms.falsy.has(e, null, null, !t._flags.sensitive)) && e), {
              value: e
            };
          }
        },

        validate(e, {
          error: t
        }) {
          if ("boolean" != typeof e) return {
            value: e,
            errors: t("boolean.base")
          };
        },

        rules: {
          truthy: {
            method(...e) {
              a.verifyFlat(e, "truthy");
              const t = this.clone();
              t.$_terms.truthy = t.$_terms.truthy || new o();

              for (let r = 0; r < e.length; ++r) {
                const n = e[r];
                s(void 0 !== n, "Cannot call truthy with undefined"), t.$_terms.truthy.add(n);
              }

              return t;
            }

          },
          falsy: {
            method(...e) {
              a.verifyFlat(e, "falsy");
              const t = this.clone();
              t.$_terms.falsy = t.$_terms.falsy || new o();

              for (let r = 0; r < e.length; ++r) {
                const n = e[r];
                s(void 0 !== n, "Cannot call falsy with undefined"), t.$_terms.falsy.add(n);
              }

              return t;
            }

          },
          sensitive: {
            method(e = !0) {
              return this.$_setFlag("sensitive", e);
            }

          }
        },
        cast: {
          number: {
            from: i.isBool,
            to: (e, t) => e ? 1 : 0
          },
          string: {
            from: i.isBool,
            to: (e, t) => e ? "true" : "false"
          }
        },
        manifest: {
          build: (e, t) => (t.truthy && (e = e.truthy(...t.truthy)), t.falsy && (e = e.falsy(...t.falsy)), e)
        },
        messages: {
          "boolean.base": "{{#label}} must be a boolean"
        }
      });
    },
    7500: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = r(3328),
            i = {
        isDate: function (e) {
          return e instanceof Date;
        }
      };
      e.exports = n.extend({
        type: "date",
        coerce: {
          from: ["number", "string"],
          method: (e, {
            schema: t
          }) => ({
            value: i.parse(e, t._flags.format) || e
          })
        },

        validate(e, {
          schema: t,
          error: r,
          prefs: s
        }) {
          if (e instanceof Date && !isNaN(e.getTime())) return;
          const n = t._flags.format;
          return s.convert && n && "string" == typeof e ? {
            value: e,
            errors: r("date.format", {
              format: n
            })
          } : {
            value: e,
            errors: r("date.base")
          };
        },

        rules: {
          compare: {
            method: !1,

            validate(e, t, {
              date: r
            }, {
              name: s,
              operator: n,
              args: o
            }) {
              const i = "now" === r ? Date.now() : r.getTime();
              return a.compare(e.getTime(), i, n) ? e : t.error("date." + s, {
                limit: o.date,
                value: e
              });
            },

            args: [{
              name: "date",
              ref: !0,
              normalize: e => "now" === e ? e : i.parse(e),
              assert: e => null !== e,
              message: "must have a valid date format"
            }]
          },
          format: {
            method(e) {
              return s(["iso", "javascript", "unix"].includes(e), "Unknown date format", e), this.$_setFlag("format", e);
            }

          },
          greater: {
            method(e) {
              return this.$_addRule({
                name: "greater",
                method: "compare",
                args: {
                  date: e
                },
                operator: ">"
              });
            }

          },
          iso: {
            method() {
              return this.format("iso");
            }

          },
          less: {
            method(e) {
              return this.$_addRule({
                name: "less",
                method: "compare",
                args: {
                  date: e
                },
                operator: "<"
              });
            }

          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "compare",
                args: {
                  date: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "compare",
                args: {
                  date: e
                },
                operator: ">="
              });
            }

          },
          timestamp: {
            method(e = "javascript") {
              return s(["javascript", "unix"].includes(e), '"type" must be one of "javascript, unix"'), this.format(e);
            }

          }
        },
        cast: {
          number: {
            from: i.isDate,
            to: (e, t) => e.getTime()
          },
          string: {
            from: i.isDate,
            to: (e, {
              prefs: t
            }) => o.date(e, t)
          }
        },
        messages: {
          "date.base": "{{#label}} must be a valid date",
          "date.format": '{{#label}} must be in {msg("date.format." + #format) || #format} format',
          "date.greater": "{{#label}} must be greater than {{:#limit}}",
          "date.less": "{{#label}} must be less than {{:#limit}}",
          "date.max": "{{#label}} must be less than or equal to {{:#limit}}",
          "date.min": "{{#label}} must be greater than or equal to {{:#limit}}",
          "date.format.iso": "ISO 8601 date",
          "date.format.javascript": "timestamp or number of milliseconds",
          "date.format.unix": "timestamp or number of seconds"
        }
      }), i.parse = function (e, t) {
        if (e instanceof Date) return e;
        if ("string" != typeof e && (isNaN(e) || !isFinite(e))) return null;
        if (/^\s*$/.test(e)) return null;
        if ("iso" === t) return a.isIsoDate(e) ? i.date(e.toString()) : null;
        const r = e;

        if ("string" == typeof e && /^[+-]?\d+(\.\d+)?$/.test(e) && (e = parseFloat(e)), t) {
          if ("javascript" === t) return i.date(1 * e);
          if ("unix" === t) return i.date(1e3 * e);
          if ("string" == typeof r) return null;
        }

        return i.date(e);
      }, i.date = function (e) {
        const t = new Date(e);
        return isNaN(t.getTime()) ? null : t;
      };
    },
    390: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(7824);
      e.exports = n.extend({
        type: "function",
        properties: {
          typeof: "function"
        },
        rules: {
          arity: {
            method(e) {
              return s(Number.isSafeInteger(e) && e >= 0, "n must be a positive integer"), this.$_addRule({
                name: "arity",
                args: {
                  n: e
                }
              });
            },

            validate: (e, t, {
              n: r
            }) => e.length === r ? e : t.error("function.arity", {
              n: r
            })
          },
          class: {
            method() {
              return this.$_addRule("class");
            },

            validate: (e, t) => /^\s*class\s/.test(e.toString()) ? e : t.error("function.class", {
              value: e
            })
          },
          minArity: {
            method(e) {
              return s(Number.isSafeInteger(e) && e > 0, "n must be a strict positive integer"), this.$_addRule({
                name: "minArity",
                args: {
                  n: e
                }
              });
            },

            validate: (e, t, {
              n: r
            }) => e.length >= r ? e : t.error("function.minArity", {
              n: r
            })
          },
          maxArity: {
            method(e) {
              return s(Number.isSafeInteger(e) && e >= 0, "n must be a positive integer"), this.$_addRule({
                name: "maxArity",
                args: {
                  n: e
                }
              });
            },

            validate: (e, t, {
              n: r
            }) => e.length <= r ? e : t.error("function.maxArity", {
              n: r
            })
          }
        },
        messages: {
          "function.arity": "{{#label}} must have an arity of {{#n}}",
          "function.class": "{{#label}} must be a class",
          "function.maxArity": "{{#label}} must have an arity lesser or equal to {{#n}}",
          "function.minArity": "{{#label}} must have an arity greater or equal to {{#n}}"
        }
      });
    },
    7824: (e, t, r) => {
      "use strict";

      const s = r(978),
            n = r(375),
            a = r(8571),
            o = r(3652),
            i = r(8068),
            l = r(8160),
            c = r(3292),
            u = r(6354),
            f = r(6133),
            m = r(3328),
            h = {
        renameDefaults: {
          alias: !1,
          multiple: !1,
          override: !1
        }
      };
      e.exports = i.extend({
        type: "_keys",
        properties: {
          typeof: "object"
        },
        flags: {
          unknown: {
            default: !1
          }
        },
        terms: {
          dependencies: {
            init: null
          },
          keys: {
            init: null,
            manifest: {
              mapped: {
                from: "schema",
                to: "key"
              }
            }
          },
          patterns: {
            init: null
          },
          renames: {
            init: null
          }
        },
        args: (e, t) => e.keys(t),

        validate(e, {
          schema: t,
          error: r,
          state: s,
          prefs: n
        }) {
          if (!e || typeof e !== t.$_property("typeof") || Array.isArray(e)) return {
            value: e,
            errors: r("object.base", {
              type: t.$_property("typeof")
            })
          };
          if (!(t.$_terms.renames || t.$_terms.dependencies || t.$_terms.keys || t.$_terms.patterns || t.$_terms.externals)) return;
          e = h.clone(e, n);
          const a = [];
          if (t.$_terms.renames && !h.rename(t, e, s, n, a)) return {
            value: e,
            errors: a
          };
          if (!t.$_terms.keys && !t.$_terms.patterns && !t.$_terms.dependencies) return {
            value: e,
            errors: a
          };
          const o = new Set(Object.keys(e));

          if (t.$_terms.keys) {
            const r = [e, ...s.ancestors];

            for (const i of t.$_terms.keys) {
              const t = i.key,
                    l = e[t];
              o.delete(t);
              const c = s.localize([...s.path, t], r, i),
                    u = i.schema.$_validate(l, c, n);

              if (u.errors) {
                if (n.abortEarly) return {
                  value: e,
                  errors: u.errors
                };
                void 0 !== u.value && (e[t] = u.value), a.push(...u.errors);
              } else "strip" === i.schema._flags.result || void 0 === u.value && void 0 !== l ? delete e[t] : void 0 !== u.value && (e[t] = u.value);
            }
          }

          if (o.size || t._flags._hasPatternMatch) {
            const r = h.unknown(t, e, o, a, s, n);
            if (r) return r;
          }

          if (t.$_terms.dependencies) for (const r of t.$_terms.dependencies) {
            if (r.key && void 0 === r.key.resolve(e, s, n, null, {
              shadow: !1
            })) continue;
            const o = h.dependencies[r.rel](t, r, e, s, n);

            if (o) {
              const r = t.$_createError(o.code, e, o.context, s, n);
              if (n.abortEarly) return {
                value: e,
                errors: r
              };
              a.push(r);
            }
          }
          return {
            value: e,
            errors: a
          };
        },

        rules: {
          and: {
            method(...e) {
              return l.verifyFlat(e, "and"), h.dependency(this, "and", null, e);
            }

          },
          append: {
            method(e) {
              return null == e || 0 === Object.keys(e).length ? this : this.keys(e);
            }

          },
          assert: {
            method(e, t, r) {
              m.isTemplate(e) || (e = c.ref(e)), n(void 0 === r || "string" == typeof r, "Message must be a string"), t = this.$_compile(t, {
                appendPath: !0
              });
              const s = this.$_addRule({
                name: "assert",
                args: {
                  subject: e,
                  schema: t,
                  message: r
                }
              });
              return s.$_mutateRegister(e), s.$_mutateRegister(t), s;
            },

            validate(e, {
              error: t,
              prefs: r,
              state: s
            }, {
              subject: n,
              schema: a,
              message: o
            }) {
              const i = n.resolve(e, s, r),
                    l = f.isRef(n) ? n.absolute(s) : [];
              return a.$_match(i, s.localize(l, [e, ...s.ancestors], a), r) ? e : t("object.assert", {
                subject: n,
                message: o
              });
            },

            args: ["subject", "schema", "message"],
            multi: !0
          },
          instance: {
            method(e, t) {
              return n("function" == typeof e, "constructor must be a function"), t = t || e.name, this.$_addRule({
                name: "instance",
                args: {
                  constructor: e,
                  name: t
                }
              });
            },

            validate: (e, t, {
              constructor: r,
              name: s
            }) => e instanceof r ? e : t.error("object.instance", {
              type: s,
              value: e
            }),
            args: ["constructor", "name"]
          },
          keys: {
            method(e) {
              n(void 0 === e || "object" == typeof e, "Object schema must be a valid object"), n(!l.isSchema(e), "Object schema cannot be a joi schema");
              const t = this.clone();
              if (e) {
                if (Object.keys(e).length) {
                  t.$_terms.keys = t.$_terms.keys ? t.$_terms.keys.filter(t => !e.hasOwnProperty(t.key)) : new h.Keys();

                  for (const r in e) l.tryWithPath(() => t.$_terms.keys.push({
                    key: r,
                    schema: this.$_compile(e[r])
                  }), r);
                } else t.$_terms.keys = new h.Keys();
              } else t.$_terms.keys = null;
              return t.$_mutateRebuild();
            }

          },
          length: {
            method(e) {
              return this.$_addRule({
                name: "length",
                args: {
                  limit: e
                },
                operator: "="
              });
            },

            validate: (e, t, {
              limit: r
            }, {
              name: s,
              operator: n,
              args: a
            }) => l.compare(Object.keys(e).length, r, n) ? e : t.error("object." + s, {
              limit: a.limit,
              value: e
            }),
            args: [{
              name: "limit",
              ref: !0,
              assert: l.limit,
              message: "must be a positive integer"
            }]
          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "length",
                args: {
                  limit: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "length",
                args: {
                  limit: e
                },
                operator: ">="
              });
            }

          },
          nand: {
            method(...e) {
              return l.verifyFlat(e, "nand"), h.dependency(this, "nand", null, e);
            }

          },
          or: {
            method(...e) {
              return l.verifyFlat(e, "or"), h.dependency(this, "or", null, e);
            }

          },
          oxor: {
            method(...e) {
              return h.dependency(this, "oxor", null, e);
            }

          },
          pattern: {
            method(e, t, r = {}) {
              const s = e instanceof RegExp;
              s || (e = this.$_compile(e, {
                appendPath: !0
              })), n(void 0 !== t, "Invalid rule"), l.assertOptions(r, ["fallthrough", "matches"]), s && n(!e.flags.includes("g") && !e.flags.includes("y"), "pattern should not use global or sticky mode"), t = this.$_compile(t, {
                appendPath: !0
              });
              const a = this.clone();
              a.$_terms.patterns = a.$_terms.patterns || [];
              const o = {
                [s ? "regex" : "schema"]: e,
                rule: t
              };
              return r.matches && (o.matches = this.$_compile(r.matches), "array" !== o.matches.type && (o.matches = o.matches.$_root.array().items(o.matches)), a.$_mutateRegister(o.matches), a.$_setFlag("_hasPatternMatch", !0, {
                clone: !1
              })), r.fallthrough && (o.fallthrough = !0), a.$_terms.patterns.push(o), a.$_mutateRegister(t), a;
            }

          },
          ref: {
            method() {
              return this.$_addRule("ref");
            },

            validate: (e, t) => f.isRef(e) ? e : t.error("object.refType", {
              value: e
            })
          },
          regex: {
            method() {
              return this.$_addRule("regex");
            },

            validate: (e, t) => e instanceof RegExp ? e : t.error("object.regex", {
              value: e
            })
          },
          rename: {
            method(e, t, r = {}) {
              n("string" == typeof e || e instanceof RegExp, "Rename missing the from argument"), n("string" == typeof t || t instanceof m, "Invalid rename to argument"), n(t !== e, "Cannot rename key to same name:", e), l.assertOptions(r, ["alias", "ignoreUndefined", "override", "multiple"]);
              const a = this.clone();
              a.$_terms.renames = a.$_terms.renames || [];

              for (const t of a.$_terms.renames) n(t.from !== e, "Cannot rename the same key multiple times");

              return t instanceof m && a.$_mutateRegister(t), a.$_terms.renames.push({
                from: e,
                to: t,
                options: s(h.renameDefaults, r)
              }), a;
            }

          },
          schema: {
            method(e = "any") {
              return this.$_addRule({
                name: "schema",
                args: {
                  type: e
                }
              });
            },

            validate: (e, t, {
              type: r
            }) => !l.isSchema(e) || "any" !== r && e.type !== r ? t.error("object.schema", {
              type: r
            }) : e
          },
          unknown: {
            method(e) {
              return this.$_setFlag("unknown", !1 !== e);
            }

          },
          with: {
            method(e, t, r = {}) {
              return h.dependency(this, "with", e, t, r);
            }

          },
          without: {
            method(e, t, r = {}) {
              return h.dependency(this, "without", e, t, r);
            }

          },
          xor: {
            method(...e) {
              return l.verifyFlat(e, "xor"), h.dependency(this, "xor", null, e);
            }

          }
        },
        overrides: {
          default(e, t) {
            return void 0 === e && (e = l.symbols.deepDefault), this.$_parent("default", e, t);
          }

        },

        rebuild(e) {
          if (e.$_terms.keys) {
            const t = new o.Sorter();

            for (const r of e.$_terms.keys) l.tryWithPath(() => t.add(r, {
              after: r.schema.$_rootReferences(),
              group: r.key
            }), r.key);

            e.$_terms.keys = new h.Keys(...t.nodes);
          }
        },

        manifest: {
          build(e, t) {
            if (t.keys && (e = e.keys(t.keys)), t.dependencies) for (const {
              rel: r,
              key: s = null,
              peers: n,
              options: a
            } of t.dependencies) e = h.dependency(e, r, s, n, a);
            if (t.patterns) for (const {
              regex: r,
              schema: s,
              rule: n,
              fallthrough: a,
              matches: o
            } of t.patterns) e = e.pattern(r || s, n, {
              fallthrough: a,
              matches: o
            });
            if (t.renames) for (const {
              from: r,
              to: s,
              options: n
            } of t.renames) e = e.rename(r, s, n);
            return e;
          }

        },
        messages: {
          "object.and": "{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}",
          "object.assert": '{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',
          "object.base": "{{#label}} must be of type {{#type}}",
          "object.instance": "{{#label}} must be an instance of {{:#type}}",
          "object.length": '{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}',
          "object.max": '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',
          "object.min": '{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}',
          "object.missing": "{{#label}} must contain at least one of {{#peersWithLabels}}",
          "object.nand": "{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}",
          "object.oxor": "{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}",
          "object.pattern.match": "{{#label}} keys failed to match pattern requirements",
          "object.refType": "{{#label}} must be a Joi reference",
          "object.regex": "{{#label}} must be a RegExp object",
          "object.rename.multiple": "{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}",
          "object.rename.override": "{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists",
          "object.schema": "{{#label}} must be a Joi schema of {{#type}} type",
          "object.unknown": "{{#label}} is not allowed",
          "object.with": "{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}",
          "object.without": "{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}",
          "object.xor": "{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}"
        }
      }), h.clone = function (e, t) {
        if ("object" == typeof e) {
          if (t.nonEnumerables) return a(e, {
            shallow: !0
          });
          const r = Object.create(Object.getPrototypeOf(e));
          return Object.assign(r, e), r;
        }

        const r = function (...t) {
          return e.apply(this, t);
        };

        return r.prototype = a(e.prototype), Object.defineProperty(r, "name", {
          value: e.name,
          writable: !1
        }), Object.defineProperty(r, "length", {
          value: e.length,
          writable: !1
        }), Object.assign(r, e), r;
      }, h.dependency = function (e, t, r, s, a) {
        n(null === r || "string" == typeof r, t, "key must be a strings"), a || (a = s.length > 1 && "object" == typeof s[s.length - 1] ? s.pop() : {}), l.assertOptions(a, ["separator"]), s = [].concat(s);
        const o = l.default(a.separator, "."),
              i = [];

        for (const e of s) n("string" == typeof e, t, "peers must be strings"), i.push(c.ref(e, {
          separator: o,
          ancestor: 0,
          prefix: !1
        }));

        null !== r && (r = c.ref(r, {
          separator: o,
          ancestor: 0,
          prefix: !1
        }));
        const u = e.clone();
        return u.$_terms.dependencies = u.$_terms.dependencies || [], u.$_terms.dependencies.push(new h.Dependency(t, r, i, s)), u;
      }, h.dependencies = {
        and(e, t, r, s, n) {
          const a = [],
                o = [],
                i = t.peers.length;

          for (const e of t.peers) void 0 === e.resolve(r, s, n, null, {
            shadow: !1
          }) ? a.push(e.key) : o.push(e.key);

          if (a.length !== i && o.length !== i) return {
            code: "object.and",
            context: {
              present: o,
              presentWithLabels: h.keysToLabels(e, o),
              missing: a,
              missingWithLabels: h.keysToLabels(e, a)
            }
          };
        },

        nand(e, t, r, s, n) {
          const a = [];

          for (const e of t.peers) void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          }) && a.push(e.key);

          if (a.length !== t.peers.length) return;
          const o = t.paths[0],
                i = t.paths.slice(1);
          return {
            code: "object.nand",
            context: {
              main: o,
              mainWithLabel: h.keysToLabels(e, o),
              peers: i,
              peersWithLabels: h.keysToLabels(e, i)
            }
          };
        },

        or(e, t, r, s, n) {
          for (const e of t.peers) if (void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          })) return;

          return {
            code: "object.missing",
            context: {
              peers: t.paths,
              peersWithLabels: h.keysToLabels(e, t.paths)
            }
          };
        },

        oxor(e, t, r, s, n) {
          const a = [];

          for (const e of t.peers) void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          }) && a.push(e.key);

          if (!a.length || 1 === a.length) return;
          const o = {
            peers: t.paths,
            peersWithLabels: h.keysToLabels(e, t.paths)
          };
          return o.present = a, o.presentWithLabels = h.keysToLabels(e, a), {
            code: "object.oxor",
            context: o
          };
        },

        with(e, t, r, s, n) {
          for (const a of t.peers) if (void 0 === a.resolve(r, s, n, null, {
            shadow: !1
          })) return {
            code: "object.with",
            context: {
              main: t.key.key,
              mainWithLabel: h.keysToLabels(e, t.key.key),
              peer: a.key,
              peerWithLabel: h.keysToLabels(e, a.key)
            }
          };
        },

        without(e, t, r, s, n) {
          for (const a of t.peers) if (void 0 !== a.resolve(r, s, n, null, {
            shadow: !1
          })) return {
            code: "object.without",
            context: {
              main: t.key.key,
              mainWithLabel: h.keysToLabels(e, t.key.key),
              peer: a.key,
              peerWithLabel: h.keysToLabels(e, a.key)
            }
          };
        },

        xor(e, t, r, s, n) {
          const a = [];

          for (const e of t.peers) void 0 !== e.resolve(r, s, n, null, {
            shadow: !1
          }) && a.push(e.key);

          if (1 === a.length) return;
          const o = {
            peers: t.paths,
            peersWithLabels: h.keysToLabels(e, t.paths)
          };
          return 0 === a.length ? {
            code: "object.missing",
            context: o
          } : (o.present = a, o.presentWithLabels = h.keysToLabels(e, a), {
            code: "object.xor",
            context: o
          });
        }

      }, h.keysToLabels = function (e, t) {
        return Array.isArray(t) ? t.map(t => e.$_mapLabels(t)) : e.$_mapLabels(t);
      }, h.rename = function (e, t, r, s, n) {
        const a = {};

        for (const o of e.$_terms.renames) {
          const i = [],
                l = "string" != typeof o.from;
          if (l) for (const e in t) {
            if (void 0 === t[e] && o.options.ignoreUndefined) continue;
            if (e === o.to) continue;
            const r = o.from.exec(e);
            r && i.push({
              from: e,
              to: o.to,
              match: r
            });
          } else !Object.prototype.hasOwnProperty.call(t, o.from) || void 0 === t[o.from] && o.options.ignoreUndefined || i.push(o);

          for (const c of i) {
            const i = c.from;
            let u = c.to;

            if (u instanceof m && (u = u.render(t, r, s, c.match)), i !== u) {
              if (!o.options.multiple && a[u] && (n.push(e.$_createError("object.rename.multiple", t, {
                from: i,
                to: u,
                pattern: l
              }, r, s)), s.abortEarly)) return !1;
              if (Object.prototype.hasOwnProperty.call(t, u) && !o.options.override && !a[u] && (n.push(e.$_createError("object.rename.override", t, {
                from: i,
                to: u,
                pattern: l
              }, r, s)), s.abortEarly)) return !1;
              void 0 === t[i] ? delete t[u] : t[u] = t[i], a[u] = !0, o.options.alias || delete t[i];
            }
          }
        }

        return !0;
      }, h.unknown = function (e, t, r, s, n, a) {
        if (e.$_terms.patterns) {
          let o = !1;
          const i = e.$_terms.patterns.map(e => {
            if (e.matches) return o = !0, [];
          }),
                l = [t, ...n.ancestors];

          for (const o of r) {
            const c = t[o],
                  u = [...n.path, o];

            for (let f = 0; f < e.$_terms.patterns.length; ++f) {
              const m = e.$_terms.patterns[f];

              if (m.regex) {
                const e = m.regex.test(o);
                if (n.mainstay.tracer.debug(n, "rule", "pattern.".concat(f), e ? "pass" : "error"), !e) continue;
              } else if (!m.schema.$_match(o, n.nest(m.schema, "pattern.".concat(f)), a)) continue;

              r.delete(o);
              const h = n.localize(u, l, {
                schema: m.rule,
                key: o
              }),
                    d = m.rule.$_validate(c, h, a);

              if (d.errors) {
                if (a.abortEarly) return {
                  value: t,
                  errors: d.errors
                };
                s.push(...d.errors);
              }

              if (m.matches && i[f].push(o), t[o] = d.value, !m.fallthrough) break;
            }
          }

          if (o) for (let r = 0; r < i.length; ++r) {
            const o = i[r];
            if (!o) continue;
            const c = e.$_terms.patterns[r].matches,
                  f = n.localize(n.path, l, c),
                  m = c.$_validate(o, f, a);

            if (m.errors) {
              const r = u.details(m.errors, {
                override: !1
              });
              r.matches = o;
              const i = e.$_createError("object.pattern.match", t, r, n, a);
              if (a.abortEarly) return {
                value: t,
                errors: i
              };
              s.push(i);
            }
          }
        }

        if (r.size && (e.$_terms.keys || e.$_terms.patterns)) {
          if (a.stripUnknown && !e._flags.unknown || a.skipFunctions) {
            const e = !(!a.stripUnknown || !0 !== a.stripUnknown && !a.stripUnknown.objects);

            for (const s of r) e ? (delete t[s], r.delete(s)) : "function" == typeof t[s] && r.delete(s);
          }

          if (!l.default(e._flags.unknown, a.allowUnknown)) for (const o of r) {
            const r = n.localize([...n.path, o], []),
                  i = e.$_createError("object.unknown", t[o], {
              child: o
            }, r, a, {
              flags: !1
            });
            if (a.abortEarly) return {
              value: t,
              errors: i
            };
            s.push(i);
          }
        }
      }, h.Dependency = class {
        constructor(e, t, r, s) {
          this.rel = e, this.key = t, this.peers = r, this.paths = s;
        }

        describe() {
          const e = {
            rel: this.rel,
            peers: this.paths
          };
          return null !== this.key && (e.key = this.key.key), "." !== this.peers[0].separator && (e.options = {
            separator: this.peers[0].separator
          }), e;
        }

      }, h.Keys = class extends Array {
        concat(e) {
          const t = this.slice(),
                r = new Map();

          for (let e = 0; e < t.length; ++e) r.set(t[e].key, e);

          for (const s of e) {
            const e = s.key,
                  n = r.get(e);
            void 0 !== n ? t[n] = {
              key: e,
              schema: t[n].schema.concat(s.schema)
            } : t.push(s);
          }

          return t;
        }

      };
    },
    8785: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = r(3292),
            i = r(6354),
            l = {};
      e.exports = n.extend({
        type: "link",
        properties: {
          schemaChain: !0
        },
        terms: {
          link: {
            init: null,
            manifest: "single",
            register: !1
          }
        },
        args: (e, t) => e.ref(t),

        validate(e, {
          schema: t,
          state: r,
          prefs: n
        }) {
          s(t.$_terms.link, "Uninitialized link schema");
          const a = l.generate(t, e, r, n),
                o = t.$_terms.link[0].ref;
          return a.$_validate(e, r.nest(a, "link:".concat(o.display, ":").concat(a.type)), n);
        },

        generate: (e, t, r, s) => l.generate(e, t, r, s),
        rules: {
          ref: {
            method(e) {
              s(!this.$_terms.link, "Cannot reinitialize schema"), e = o.ref(e), s("value" === e.type || "local" === e.type, "Invalid reference type:", e.type), s("local" === e.type || "root" === e.ancestor || e.ancestor > 0, "Link cannot reference itself");
              const t = this.clone();
              return t.$_terms.link = [{
                ref: e
              }], t;
            }

          },
          relative: {
            method(e = !0) {
              return this.$_setFlag("relative", e);
            }

          }
        },
        overrides: {
          concat(e) {
            s(this.$_terms.link, "Uninitialized link schema"), s(a.isSchema(e), "Invalid schema object"), s("link" !== e.type, "Cannot merge type link with another link");
            const t = this.clone();
            return t.$_terms.whens || (t.$_terms.whens = []), t.$_terms.whens.push({
              concat: e
            }), t.$_mutateRebuild();
          }

        },
        manifest: {
          build: (e, t) => (s(t.link, "Invalid link description missing link"), e.ref(t.link))
        }
      }), l.generate = function (e, t, r, s) {
        let n = r.mainstay.links.get(e);
        if (n) return n._generate(t, r, s).schema;
        const a = e.$_terms.link[0].ref,
              {
          perspective: o,
          path: i
        } = l.perspective(a, r);
        l.assert(o, "which is outside of schema boundaries", a, e, r, s);

        try {
          n = i.length ? o.$_reach(i) : o;
        } catch (t) {
          l.assert(!1, "to non-existing schema", a, e, r, s);
        }

        return l.assert("link" !== n.type, "which is another link", a, e, r, s), e._flags.relative || r.mainstay.links.set(e, n), n._generate(t, r, s).schema;
      }, l.perspective = function (e, t) {
        if ("local" === e.type) {
          for (const {
            schema: r,
            key: s
          } of t.schemas) {
            if ((r._flags.id || s) === e.path[0]) return {
              perspective: r,
              path: e.path.slice(1)
            };
            if (r.$_terms.shared) for (const t of r.$_terms.shared) if (t._flags.id === e.path[0]) return {
              perspective: t,
              path: e.path.slice(1)
            };
          }

          return {
            perspective: null,
            path: null
          };
        }

        return "root" === e.ancestor ? {
          perspective: t.schemas[t.schemas.length - 1].schema,
          path: e.path
        } : {
          perspective: t.schemas[e.ancestor] && t.schemas[e.ancestor].schema,
          path: e.path
        };
      }, l.assert = function (e, t, r, n, a, o) {
        e || s(!1, '"'.concat(i.label(n._flags, a, o), '" contains link reference "').concat(r.display, '" ').concat(t));
      };
    },
    3832: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = r(8160),
            o = {
        numberRx: /^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,
        precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
      };
      e.exports = n.extend({
        type: "number",
        flags: {
          unsafe: {
            default: !1
          }
        },
        coerce: {
          from: "string",

          method(e, {
            schema: t,
            error: r
          }) {
            const s = e.match(o.numberRx);
            if (!s) return;
            e = e.trim();
            const n = {
              value: parseFloat(e)
            };
            if (0 === n.value && (n.value = 0), !t._flags.unsafe) if (e.match(/e/i)) {
              if (o.normalizeExponent("".concat(n.value / Math.pow(10, s[1]), "e").concat(s[1])) !== o.normalizeExponent(e)) return n.errors = r("number.unsafe"), n;
            } else {
              const t = n.value.toString();
              if (t.match(/e/i)) return n;
              if (t !== o.normalizeDecimal(e)) return n.errors = r("number.unsafe"), n;
            }
            return n;
          }

        },

        validate(e, {
          schema: t,
          error: r,
          prefs: s
        }) {
          if (e === 1 / 0 || e === -1 / 0) return {
            value: e,
            errors: r("number.infinity")
          };
          if (!a.isNumber(e)) return {
            value: e,
            errors: r("number.base")
          };
          const n = {
            value: e
          };

          if (s.convert) {
            const e = t.$_getRule("precision");

            if (e) {
              const t = Math.pow(10, e.args.limit);
              n.value = Math.round(n.value * t) / t;
            }
          }

          return 0 === n.value && (n.value = 0), !t._flags.unsafe && (e > Number.MAX_SAFE_INTEGER || e < Number.MIN_SAFE_INTEGER) && (n.errors = r("number.unsafe")), n;
        },

        rules: {
          compare: {
            method: !1,
            validate: (e, t, {
              limit: r
            }, {
              name: s,
              operator: n,
              args: o
            }) => a.compare(e, r, n) ? e : t.error("number." + s, {
              limit: o.limit,
              value: e
            }),
            args: [{
              name: "limit",
              ref: !0,
              assert: a.isNumber,
              message: "must be a number"
            }]
          },
          greater: {
            method(e) {
              return this.$_addRule({
                name: "greater",
                method: "compare",
                args: {
                  limit: e
                },
                operator: ">"
              });
            }

          },
          integer: {
            method() {
              return this.$_addRule("integer");
            },

            validate: (e, t) => Math.trunc(e) - e == 0 ? e : t.error("number.integer")
          },
          less: {
            method(e) {
              return this.$_addRule({
                name: "less",
                method: "compare",
                args: {
                  limit: e
                },
                operator: "<"
              });
            }

          },
          max: {
            method(e) {
              return this.$_addRule({
                name: "max",
                method: "compare",
                args: {
                  limit: e
                },
                operator: "<="
              });
            }

          },
          min: {
            method(e) {
              return this.$_addRule({
                name: "min",
                method: "compare",
                args: {
                  limit: e
                },
                operator: ">="
              });
            }

          },
          multiple: {
            method(e) {
              return this.$_addRule({
                name: "multiple",
                args: {
                  base: e
                }
              });
            },

            validate: (e, t, {
              base: r
            }, s) => e * (1 / r) % 1 == 0 ? e : t.error("number.multiple", {
              multiple: s.args.base,
              value: e
            }),
            args: [{
              name: "base",
              ref: !0,
              assert: e => "number" == typeof e && isFinite(e) && e > 0,
              message: "must be a positive number"
            }],
            multi: !0
          },
          negative: {
            method() {
              return this.sign("negative");
            }

          },
          port: {
            method() {
              return this.$_addRule("port");
            },

            validate: (e, t) => Number.isSafeInteger(e) && e >= 0 && e <= 65535 ? e : t.error("number.port")
          },
          positive: {
            method() {
              return this.sign("positive");
            }

          },
          precision: {
            method(e) {
              return s(Number.isSafeInteger(e), "limit must be an integer"), this.$_addRule({
                name: "precision",
                args: {
                  limit: e
                }
              });
            },

            validate(e, t, {
              limit: r
            }) {
              const s = e.toString().match(o.precisionRx);
              return Math.max((s[1] ? s[1].length : 0) - (s[2] ? parseInt(s[2], 10) : 0), 0) <= r ? e : t.error("number.precision", {
                limit: r,
                value: e
              });
            },

            convert: !0
          },
          sign: {
            method(e) {
              return s(["negative", "positive"].includes(e), "Invalid sign", e), this.$_addRule({
                name: "sign",
                args: {
                  sign: e
                }
              });
            },

            validate: (e, t, {
              sign: r
            }) => "negative" === r && e < 0 || "positive" === r && e > 0 ? e : t.error("number.".concat(r))
          },
          unsafe: {
            method(e = !0) {
              return s("boolean" == typeof e, "enabled must be a boolean"), this.$_setFlag("unsafe", e);
            }

          }
        },
        cast: {
          string: {
            from: e => "number" == typeof e,
            to: (e, t) => e.toString()
          }
        },
        messages: {
          "number.base": "{{#label}} must be a number",
          "number.greater": "{{#label}} must be greater than {{#limit}}",
          "number.infinity": "{{#label}} cannot be infinity",
          "number.integer": "{{#label}} must be an integer",
          "number.less": "{{#label}} must be less than {{#limit}}",
          "number.max": "{{#label}} must be less than or equal to {{#limit}}",
          "number.min": "{{#label}} must be greater than or equal to {{#limit}}",
          "number.multiple": "{{#label}} must be a multiple of {{#multiple}}",
          "number.negative": "{{#label}} must be a negative number",
          "number.port": "{{#label}} must be a valid port",
          "number.positive": "{{#label}} must be a positive number",
          "number.precision": "{{#label}} must have no more than {{#limit}} decimal places",
          "number.unsafe": "{{#label}} must be a safe number"
        }
      }), o.normalizeExponent = function (e) {
        return e.replace(/E/, "e").replace(/\.(\d*[1-9])?0+e/, ".$1e").replace(/\.e/, "e").replace(/e\+/, "e").replace(/^\+/, "").replace(/^(-?)0+([1-9])/, "$1$2");
      }, o.normalizeDecimal = function (e) {
        return (e = e.replace(/^\+/, "").replace(/\.0*$/, "").replace(/^(-?)\.([^\.]*)$/, "$10.$2").replace(/^(-?)0+([0-9])/, "$1$2")).includes(".") && e.endsWith("0") && (e = e.replace(/0+$/, "")), "-0" === e ? "0" : e;
      };
    },
    8966: (e, t, r) => {
      "use strict";

      const s = r(7824);
      e.exports = s.extend({
        type: "object",
        cast: {
          map: {
            from: e => e && "object" == typeof e,
            to: (e, t) => new Map(Object.entries(e))
          }
        }
      });
    },
    7417: (e, t, r) => {
      "use strict";

      function s(e, t) {
        var r = Object.keys(e);

        if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(e);
          t && (s = s.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })), r.push.apply(r, s);
        }

        return r;
      }

      function n(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = null != arguments[t] ? arguments[t] : {};
          t % 2 ? s(Object(r), !0).forEach(function (t) {
            a(e, t, r[t]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : s(Object(r)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
          });
        }

        return e;
      }

      function a(e, t, r) {
        return t in e ? Object.defineProperty(e, t, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[t] = r, e;
      }

      const o = r(375),
            i = r(5380),
            l = r(1745),
            c = r(9959),
            u = r(6064),
            f = r(9926),
            m = r(5752),
            h = r(8068),
            d = r(8160),
            p = {
        tlds: f instanceof Set && {
          tlds: {
            allow: f,
            deny: null
          }
        },
        base64Regex: {
          true: {
            true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,
            false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
          },
          false: {
            true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,
            false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/
          }
        },
        dataUriRegex: /^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,
        hexRegex: /^[a-f0-9]+$/i,
        ipRegex: c.regex({
          cidr: "forbidden"
        }).regex,
        isoDurationRegex: /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,
        guidBrackets: {
          "{": "}",
          "[": "]",
          "(": ")",
          "": ""
        },
        guidVersions: {
          uuidv1: "1",
          uuidv2: "2",
          uuidv3: "3",
          uuidv4: "4",
          uuidv5: "5"
        },
        guidSeparators: new Set([void 0, !0, !1, "-", ":"]),
        normalizationForms: ["NFC", "NFD", "NFKC", "NFKD"]
      };
      e.exports = h.extend({
        type: "string",
        flags: {
          insensitive: {
            default: !1
          },
          truncate: {
            default: !1
          }
        },
        terms: {
          replacements: {
            init: null
          }
        },
        coerce: {
          from: "string",

          method(e, {
            schema: t,
            state: r,
            prefs: s
          }) {
            const n = t.$_getRule("normalize");
            n && (e = e.normalize(n.args.form));
            const a = t.$_getRule("case");
            a && (e = "upper" === a.args.direction ? e.toLocaleUpperCase() : e.toLocaleLowerCase());
            const o = t.$_getRule("trim");
            if (o && o.args.enabled && (e = e.trim()), t.$_terms.replacements) for (const r of t.$_terms.replacements) e = e.replace(r.pattern, r.replacement);
            const i = t.$_getRule("hex");

            if (i && i.args.options.byteAligned && e.length % 2 != 0 && (e = "0".concat(e)), t.$_getRule("isoDate")) {
              const t = p.isoDate(e);
              t && (e = t);
            }

            if (t._flags.truncate) {
              const n = t.$_getRule("max");

              if (n) {
                let a = n.args.limit;
                if (d.isResolvable(a) && (a = a.resolve(e, r, s), !d.limit(a))) return {
                  value: e,
                  errors: t.$_createError("any.ref", a, {
                    ref: n.args.limit,
                    arg: "limit",
                    reason: "must be a positive integer"
                  }, r, s)
                };
                e = e.slice(0, a);
              }
            }

            return {
              value: e
            };
          }

        },

        validate(e, {
          schema: t,
          error: r
        }) {
          if ("string" != typeof e) return {
            value: e,
            errors: r("string.base")
          };

          if ("" === e) {
            const s = t.$_getRule("min");
            if (s && 0 === s.args.limit) return;
            return {
              value: e,
              errors: r("string.empty")
            };
          }
        },

        rules: {
          alphanum: {
            method() {
              return this.$_addRule("alphanum");
            },

            validate: (e, t) => /^[a-zA-Z0-9]+$/.test(e) ? e : t.error("string.alphanum")
          },
          base64: {
            method(e = {}) {
              return d.assertOptions(e, ["paddingRequired", "urlSafe"]), e = n({
                urlSafe: !1,
                paddingRequired: !0
              }, e), o("boolean" == typeof e.paddingRequired, "paddingRequired must be boolean"), o("boolean" == typeof e.urlSafe, "urlSafe must be boolean"), this.$_addRule({
                name: "base64",
                args: {
                  options: e
                }
              });
            },

            validate: (e, t, {
              options: r
            }) => p.base64Regex[r.paddingRequired][r.urlSafe].test(e) ? e : t.error("string.base64")
          },
          case: {
            method(e) {
              return o(["lower", "upper"].includes(e), "Invalid case:", e), this.$_addRule({
                name: "case",
                args: {
                  direction: e
                }
              });
            },

            validate: (e, t, {
              direction: r
            }) => "lower" === r && e === e.toLocaleLowerCase() || "upper" === r && e === e.toLocaleUpperCase() ? e : t.error("string.".concat(r, "case")),
            convert: !0
          },
          creditCard: {
            method() {
              return this.$_addRule("creditCard");
            },

            validate(e, t) {
              let r = e.length,
                  s = 0,
                  n = 1;

              for (; r--;) {
                const t = e.charAt(r) * n;
                s += t - 9 * (t > 9), n ^= 3;
              }

              return s > 0 && s % 10 == 0 ? e : t.error("string.creditCard");
            }

          },
          dataUri: {
            method(e = {}) {
              return d.assertOptions(e, ["paddingRequired"]), e = n({
                paddingRequired: !0
              }, e), o("boolean" == typeof e.paddingRequired, "paddingRequired must be boolean"), this.$_addRule({
                name: "dataUri",
                args: {
                  options: e
                }
              });
            },

            validate(e, t, {
              options: r
            }) {
              const s = e.match(p.dataUriRegex);

              if (s) {
                if (!s[2]) return e;
                if ("base64" !== s[2]) return e;
                if (p.base64Regex[r.paddingRequired].false.test(s[3])) return e;
              }

              return t.error("string.dataUri");
            }

          },
          domain: {
            method(e) {
              e && d.assertOptions(e, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
              const t = p.addressOptions(e);
              return this.$_addRule({
                name: "domain",
                args: {
                  options: e
                },
                address: t
              });
            },

            validate: (e, t, r, {
              address: s
            }) => i.isValid(e, s) ? e : t.error("string.domain")
          },
          email: {
            method(e = {}) {
              d.assertOptions(e, ["allowFullyQualified", "allowUnicode", "ignoreLength", "maxDomainSegments", "minDomainSegments", "multiple", "separator", "tlds"]), o(void 0 === e.multiple || "boolean" == typeof e.multiple, "multiple option must be an boolean");
              const t = p.addressOptions(e),
                    r = new RegExp("\\s*[".concat(e.separator ? u(e.separator) : ",", "]\\s*"));
              return this.$_addRule({
                name: "email",
                args: {
                  options: e
                },
                regex: r,
                address: t
              });
            },

            validate(e, t, {
              options: r
            }, {
              regex: s,
              address: n
            }) {
              const a = r.multiple ? e.split(s) : [e],
                    o = [];

              for (const e of a) l.isValid(e, n) || o.push(e);

              return o.length ? t.error("string.email", {
                value: e,
                invalids: o
              }) : e;
            }

          },
          guid: {
            alias: "uuid",

            method(e = {}) {
              d.assertOptions(e, ["version", "separator"]);
              let t = "";

              if (e.version) {
                const r = [].concat(e.version);
                o(r.length >= 1, "version must have at least 1 valid version specified");
                const s = new Set();

                for (let e = 0; e < r.length; ++e) {
                  const n = r[e];
                  o("string" == typeof n, "version at position " + e + " must be a string");
                  const a = p.guidVersions[n.toLowerCase()];
                  o(a, "version at position " + e + " must be one of " + Object.keys(p.guidVersions).join(", ")), o(!s.has(a), "version at position " + e + " must not be a duplicate"), t += a, s.add(a);
                }
              }

              o(p.guidSeparators.has(e.separator), 'separator must be one of true, false, "-", or ":"');
              const r = void 0 === e.separator ? "[:-]?" : !0 === e.separator ? "[:-]" : !1 === e.separator ? "[]?" : "\\".concat(e.separator),
                    s = new RegExp("^([\\[{\\(]?)[0-9A-F]{8}(".concat(r, ")[0-9A-F]{4}\\2?[").concat(t || "0-9A-F", "][0-9A-F]{3}\\2?[").concat(t ? "89AB" : "0-9A-F", "][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"), "i");
              return this.$_addRule({
                name: "guid",
                args: {
                  options: e
                },
                regex: s
              });
            },

            validate(e, t, r, {
              regex: s
            }) {
              const n = s.exec(e);
              return n ? p.guidBrackets[n[1]] !== n[n.length - 1] ? t.error("string.guid") : e : t.error("string.guid");
            }

          },
          hex: {
            method(e = {}) {
              return d.assertOptions(e, ["byteAligned"]), e = n({
                byteAligned: !1
              }, e), o("boolean" == typeof e.byteAligned, "byteAligned must be boolean"), this.$_addRule({
                name: "hex",
                args: {
                  options: e
                }
              });
            },

            validate: (e, t, {
              options: r
            }) => p.hexRegex.test(e) ? r.byteAligned && e.length % 2 != 0 ? t.error("string.hexAlign") : e : t.error("string.hex")
          },
          hostname: {
            method() {
              return this.$_addRule("hostname");
            },

            validate: (e, t) => i.isValid(e, {
              minDomainSegments: 1
            }) || p.ipRegex.test(e) ? e : t.error("string.hostname")
          },
          insensitive: {
            method() {
              return this.$_setFlag("insensitive", !0);
            }

          },
          ip: {
            method(e = {}) {
              d.assertOptions(e, ["cidr", "version"]);
              const {
                cidr: t,
                versions: r,
                regex: s
              } = c.regex(e),
                    n = e.version ? r : void 0;
              return this.$_addRule({
                name: "ip",
                args: {
                  options: {
                    cidr: t,
                    version: n
                  }
                },
                regex: s
              });
            },

            validate: (e, t, {
              options: r
            }, {
              regex: s
            }) => s.test(e) ? e : r.version ? t.error("string.ipVersion", {
              value: e,
              cidr: r.cidr,
              version: r.version
            }) : t.error("string.ip", {
              value: e,
              cidr: r.cidr
            })
          },
          isoDate: {
            method() {
              return this.$_addRule("isoDate");
            },

            validate: (e, {
              error: t
            }) => p.isoDate(e) ? e : t("string.isoDate")
          },
          isoDuration: {
            method() {
              return this.$_addRule("isoDuration");
            },

            validate: (e, t) => p.isoDurationRegex.test(e) ? e : t.error("string.isoDuration")
          },
          length: {
            method(e, t) {
              return p.length(this, "length", e, "=", t);
            },

            validate(e, t, {
              limit: r,
              encoding: s
            }, {
              name: n,
              operator: a,
              args: o
            }) {
              const i = !s && e.length;
              return d.compare(i, r, a) ? e : t.error("string." + n, {
                limit: o.limit,
                value: e,
                encoding: s
              });
            },

            args: [{
              name: "limit",
              ref: !0,
              assert: d.limit,
              message: "must be a positive integer"
            }, "encoding"]
          },
          lowercase: {
            method() {
              return this.case("lower");
            }

          },
          max: {
            method(e, t) {
              return p.length(this, "max", e, "<=", t);
            },

            args: ["limit", "encoding"]
          },
          min: {
            method(e, t) {
              return p.length(this, "min", e, ">=", t);
            },

            args: ["limit", "encoding"]
          },
          normalize: {
            method(e = "NFC") {
              return o(p.normalizationForms.includes(e), "normalization form must be one of " + p.normalizationForms.join(", ")), this.$_addRule({
                name: "normalize",
                args: {
                  form: e
                }
              });
            },

            validate: (e, {
              error: t
            }, {
              form: r
            }) => e === e.normalize(r) ? e : t("string.normalize", {
              value: e,
              form: r
            }),
            convert: !0
          },
          pattern: {
            alias: "regex",

            method(e, t = {}) {
              o(e instanceof RegExp, "regex must be a RegExp"), o(!e.flags.includes("g") && !e.flags.includes("y"), "regex should not use global or sticky mode"), "string" == typeof t && (t = {
                name: t
              }), d.assertOptions(t, ["invert", "name"]);
              const r = ["string.pattern", t.invert ? ".invert" : "", t.name ? ".name" : ".base"].join("");
              return this.$_addRule({
                name: "pattern",
                args: {
                  regex: e,
                  options: t
                },
                errorCode: r
              });
            },

            validate: (e, t, {
              regex: r,
              options: s
            }, {
              errorCode: n
            }) => r.test(e) ^ s.invert ? e : t.error(n, {
              name: s.name,
              regex: r,
              value: e
            }),
            args: ["regex", "options"],
            multi: !0
          },
          replace: {
            method(e, t) {
              "string" == typeof e && (e = new RegExp(u(e), "g")), o(e instanceof RegExp, "pattern must be a RegExp"), o("string" == typeof t, "replacement must be a String");
              const r = this.clone();
              return r.$_terms.replacements || (r.$_terms.replacements = []), r.$_terms.replacements.push({
                pattern: e,
                replacement: t
              }), r;
            }

          },
          token: {
            method() {
              return this.$_addRule("token");
            },

            validate: (e, t) => /^\w+$/.test(e) ? e : t.error("string.token")
          },
          trim: {
            method(e = !0) {
              return o("boolean" == typeof e, "enabled must be a boolean"), this.$_addRule({
                name: "trim",
                args: {
                  enabled: e
                }
              });
            },

            validate: (e, t, {
              enabled: r
            }) => r && e !== e.trim() ? t.error("string.trim") : e,
            convert: !0
          },
          truncate: {
            method(e = !0) {
              return o("boolean" == typeof e, "enabled must be a boolean"), this.$_setFlag("truncate", e);
            }

          },
          uppercase: {
            method() {
              return this.case("upper");
            }

          },
          uri: {
            method(e = {}) {
              d.assertOptions(e, ["allowRelative", "allowQuerySquareBrackets", "domain", "relativeOnly", "scheme"]), e.domain && d.assertOptions(e.domain, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
              const {
                regex: t,
                scheme: r
              } = m.regex(e),
                    s = e.domain ? p.addressOptions(e.domain) : null;
              return this.$_addRule({
                name: "uri",
                args: {
                  options: e
                },
                regex: t,
                domain: s,
                scheme: r
              });
            },

            validate(e, t, {
              options: r
            }, {
              regex: s,
              domain: n,
              scheme: a
            }) {
              if (["http:/", "https:/"].includes(e)) return t.error("string.uri");
              const o = s.exec(e);

              if (o) {
                const s = o[1] || o[2];
                return !n || r.allowRelative && !s || i.isValid(s, n) ? e : t.error("string.domain", {
                  value: s
                });
              }

              return r.relativeOnly ? t.error("string.uriRelativeOnly") : r.scheme ? t.error("string.uriCustomScheme", {
                scheme: a,
                value: e
              }) : t.error("string.uri");
            }

          }
        },
        manifest: {
          build(e, t) {
            if (t.replacements) for (const {
              pattern: r,
              replacement: s
            } of t.replacements) e = e.replace(r, s);
            return e;
          }

        },
        messages: {
          "string.alphanum": "{{#label}} must only contain alpha-numeric characters",
          "string.base": "{{#label}} must be a string",
          "string.base64": "{{#label}} must be a valid base64 string",
          "string.creditCard": "{{#label}} must be a credit card",
          "string.dataUri": "{{#label}} must be a valid dataUri string",
          "string.domain": "{{#label}} must contain a valid domain name",
          "string.email": "{{#label}} must be a valid email",
          "string.empty": "{{#label}} is not allowed to be empty",
          "string.guid": "{{#label}} must be a valid GUID",
          "string.hex": "{{#label}} must only contain hexadecimal characters",
          "string.hexAlign": "{{#label}} hex decoded representation must be byte aligned",
          "string.hostname": "{{#label}} must be a valid hostname",
          "string.ip": "{{#label}} must be a valid ip address with a {{#cidr}} CIDR",
          "string.ipVersion": "{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR",
          "string.isoDate": "{{#label}} must be in iso format",
          "string.isoDuration": "{{#label}} must be a valid ISO 8601 duration",
          "string.length": "{{#label}} length must be {{#limit}} characters long",
          "string.lowercase": "{{#label}} must only contain lowercase characters",
          "string.max": "{{#label}} length must be less than or equal to {{#limit}} characters long",
          "string.min": "{{#label}} length must be at least {{#limit}} characters long",
          "string.normalize": "{{#label}} must be unicode normalized in the {{#form}} form",
          "string.token": "{{#label}} must only contain alpha-numeric and underscore characters",
          "string.pattern.base": "{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}",
          "string.pattern.name": "{{#label}} with value {:[.]} fails to match the {{#name}} pattern",
          "string.pattern.invert.base": "{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}",
          "string.pattern.invert.name": "{{#label}} with value {:[.]} matches the inverted {{#name}} pattern",
          "string.trim": "{{#label}} must not have leading or trailing whitespace",
          "string.uri": "{{#label}} must be a valid uri",
          "string.uriCustomScheme": "{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern",
          "string.uriRelativeOnly": "{{#label}} must be a valid relative uri",
          "string.uppercase": "{{#label}} must only contain uppercase characters"
        }
      }), p.addressOptions = function (e) {
        if (!e) return e;
        if (o(void 0 === e.minDomainSegments || Number.isSafeInteger(e.minDomainSegments) && e.minDomainSegments > 0, "minDomainSegments must be a positive integer"), o(void 0 === e.maxDomainSegments || Number.isSafeInteger(e.maxDomainSegments) && e.maxDomainSegments > 0, "maxDomainSegments must be a positive integer"), !1 === e.tlds) return e;
        if (!0 === e.tlds || void 0 === e.tlds) return o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e, p.tlds);
        o("object" == typeof e.tlds, "tlds must be true, false, or an object");
        const t = e.tlds.deny;
        if (t) return Array.isArray(t) && (e = Object.assign({}, e, {
          tlds: {
            deny: new Set(t)
          }
        })), o(e.tlds.deny instanceof Set, "tlds.deny must be an array, Set, or boolean"), o(!e.tlds.allow, "Cannot specify both tlds.allow and tlds.deny lists"), p.validateTlds(e.tlds.deny, "tlds.deny"), e;
        const r = e.tlds.allow;
        return r ? !0 === r ? (o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e, p.tlds)) : (Array.isArray(r) && (e = Object.assign({}, e, {
          tlds: {
            allow: new Set(r)
          }
        })), o(e.tlds.allow instanceof Set, "tlds.allow must be an array, Set, or boolean"), p.validateTlds(e.tlds.allow, "tlds.allow"), e) : e;
      }, p.validateTlds = function (e, t) {
        for (const r of e) o(i.isValid(r, {
          minDomainSegments: 1,
          maxDomainSegments: 1
        }), "".concat(t, " must contain valid top level domain names"));
      }, p.isoDate = function (e) {
        if (!d.isIsoDate(e)) return null;
        /.*T.*[+-]\d\d$/.test(e) && (e += "00");
        const t = new Date(e);
        return isNaN(t.getTime()) ? null : t.toISOString();
      }, p.length = function (e, t, r, s, n) {
        return o(!n || !1, "Invalid encoding:", n), e.$_addRule({
          name: t,
          method: "length",
          args: {
            limit: r,
            encoding: n
          },
          operator: s
        });
      };
    },
    8826: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8068),
            a = {};
      a.Map = class extends Map {
        slice() {
          return new a.Map(this);
        }

      }, e.exports = n.extend({
        type: "symbol",
        terms: {
          map: {
            init: new a.Map()
          }
        },
        coerce: {
          method(e, {
            schema: t,
            error: r
          }) {
            const s = t.$_terms.map.get(e);
            return s && (e = s), t._flags.only && "symbol" != typeof e ? {
              value: e,
              errors: r("symbol.map", {
                map: t.$_terms.map
              })
            } : {
              value: e
            };
          }

        },

        validate(e, {
          error: t
        }) {
          if ("symbol" != typeof e) return {
            value: e,
            errors: t("symbol.base")
          };
        },

        rules: {
          map: {
            method(e) {
              e && !e[Symbol.iterator] && "object" == typeof e && (e = Object.entries(e)), s(e && e[Symbol.iterator], "Iterable must be an iterable or object");
              const t = this.clone(),
                    r = [];

              for (const n of e) {
                s(n && n[Symbol.iterator], "Entry must be an iterable");
                const [e, a] = n;
                s("object" != typeof e && "function" != typeof e && "symbol" != typeof e, "Key must not be of type object, function, or Symbol"), s("symbol" == typeof a, "Value must be a Symbol"), t.$_terms.map.set(e, a), r.push(a);
              }

              return t.valid(...r);
            }

          }
        },
        manifest: {
          build: (e, t) => (t.map && (e = e.map(t.map)), e)
        },
        messages: {
          "symbol.base": "{{#label}} must be a symbol",
          "symbol.map": "{{#label}} must be one of {{#map}}"
        }
      });
    },
    8863: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(738),
            o = r(9621),
            i = r(8160),
            l = r(6354),
            c = r(493),
            u = {
        result: Symbol("result")
      };
      t.entry = function (e, t, r) {
        let n = i.defaults;
        r && (s(void 0 === r.warnings, "Cannot override warnings preference in synchronous validation"), s(void 0 === r.artifacts, "Cannot override artifacts preference in synchronous validation"), n = i.preferences(i.defaults, r));
        const a = u.entry(e, t, n);
        s(!a.mainstay.externals.length, "Schema with external rules must use validateAsync()");
        const o = {
          value: a.value
        };
        return a.error && (o.error = a.error), a.mainstay.warnings.length && (o.warning = l.details(a.mainstay.warnings)), a.mainstay.debug && (o.debug = a.mainstay.debug), a.mainstay.artifacts && (o.artifacts = a.mainstay.artifacts), o;
      }, t.entryAsync = async function (e, t, r) {
        let s = i.defaults;
        r && (s = i.preferences(i.defaults, r));
        const n = u.entry(e, t, s),
              a = n.mainstay;
        if (n.error) throw a.debug && (n.error.debug = a.debug), n.error;

        if (a.externals.length) {
          let e = n.value;

          for (const {
            method: t,
            path: n,
            label: i
          } of a.externals) {
            let a,
                l,
                c = e;
            n.length && (a = n[n.length - 1], l = o(e, n.slice(0, -1)), c = l[a]);

            try {
              const s = await t(c, {
                prefs: r
              });
              if (void 0 === s || s === c) continue;
              l ? l[a] = s : e = s;
            } catch (e) {
              throw s.errors.label && (e.message += " (".concat(i, ")")), e;
            }
          }

          n.value = e;
        }

        if (!s.warnings && !s.debug && !s.artifacts) return n.value;
        const c = {
          value: n.value
        };
        return a.warnings.length && (c.warning = l.details(a.warnings)), a.debug && (c.debug = a.debug), a.artifacts && (c.artifacts = a.artifacts), c;
      }, u.entry = function (e, r, s) {
        const {
          tracer: n,
          cleanup: a
        } = u.tracer(r, s),
              o = {
          externals: [],
          warnings: [],
          tracer: n,
          debug: s.debug ? [] : null,
          links: r._ids._schemaChain ? new Map() : null
        },
              i = r._ids._schemaChain ? [{
          schema: r
        }] : null,
              f = new c([], [], {
          mainstay: o,
          schemas: i
        }),
              m = t.validate(e, r, f, s);
        a && r.$_root.untrace();
        const h = l.process(m.errors, e, s);
        return {
          value: m.value,
          error: h,
          mainstay: o
        };
      }, u.tracer = function (e, t) {
        return e.$_root._tracer ? {
          tracer: e.$_root._tracer._register(e)
        } : t.debug ? (s(e.$_root.trace, "Debug mode not supported"), {
          tracer: e.$_root.trace()._register(e),
          cleanup: !0
        }) : {
          tracer: u.ignore
        };
      }, t.validate = function (e, t, r, s, n = {}) {
        if (t.$_terms.whens && (t = t._generate(e, r, s).schema), t._preferences && (s = u.prefs(t, s)), t._cache && s.cache) {
          const s = t._cache.get(e);

          if (r.mainstay.tracer.debug(r, "validate", "cached", !!s), s) return s;
        }

        const a = (n, a, o) => t.$_createError(n, e, a, o || r, s),
              o = {
          original: e,
          prefs: s,
          schema: t,
          state: r,
          error: a,
          errorsArray: u.errorsArray,
          warn: (e, t, s) => r.mainstay.warnings.push(a(e, t, s)),
          message: (n, a) => t.$_createError("custom", e, a, r, s, {
            messages: n
          })
        };

        r.mainstay.tracer.entry(t, r);
        const l = t._definition;

        if (l.prepare && void 0 !== e && s.convert) {
          const t = l.prepare(e, o);

          if (t) {
            if (r.mainstay.tracer.value(r, "prepare", e, t.value), t.errors) return u.finalize(t.value, [].concat(t.errors), o);
            e = t.value;
          }
        }

        if (l.coerce && void 0 !== e && s.convert && (!l.coerce.from || l.coerce.from.includes(typeof e))) {
          const t = l.coerce.method(e, o);

          if (t) {
            if (r.mainstay.tracer.value(r, "coerced", e, t.value), t.errors) return u.finalize(t.value, [].concat(t.errors), o);
            e = t.value;
          }
        }

        const c = t._flags.empty;
        c && c.$_match(u.trim(e, t), r.nest(c), i.defaults) && (r.mainstay.tracer.value(r, "empty", e, void 0), e = void 0);
        const f = n.presence || t._flags.presence || (t._flags._endedSwitch ? null : s.presence);

        if (void 0 === e) {
          if ("forbidden" === f) return u.finalize(e, null, o);
          if ("required" === f) return u.finalize(e, [t.$_createError("any.required", e, null, r, s)], o);

          if ("optional" === f) {
            if (t._flags.default !== i.symbols.deepDefault) return u.finalize(e, null, o);
            r.mainstay.tracer.value(r, "default", e, {}), e = {};
          }
        } else if ("forbidden" === f) return u.finalize(e, [t.$_createError("any.unknown", e, null, r, s)], o);

        const m = [];

        if (t._valids) {
          const n = t._valids.get(e, r, s, t._flags.insensitive);

          if (n) return s.convert && (r.mainstay.tracer.value(r, "valids", e, n.value), e = n.value), r.mainstay.tracer.filter(t, r, "valid", n), u.finalize(e, null, o);

          if (t._flags.only) {
            const n = t.$_createError("any.only", e, {
              valids: t._valids.values({
                display: !0
              })
            }, r, s);
            if (s.abortEarly) return u.finalize(e, [n], o);
            m.push(n);
          }
        }

        if (t._invalids) {
          const n = t._invalids.get(e, r, s, t._flags.insensitive);

          if (n) {
            r.mainstay.tracer.filter(t, r, "invalid", n);
            const a = t.$_createError("any.invalid", e, {
              invalids: t._invalids.values({
                display: !0
              })
            }, r, s);
            if (s.abortEarly) return u.finalize(e, [a], o);
            m.push(a);
          }
        }

        if (l.validate) {
          const t = l.validate(e, o);

          if (t && (r.mainstay.tracer.value(r, "base", e, t.value), e = t.value, t.errors)) {
            if (!Array.isArray(t.errors)) return m.push(t.errors), u.finalize(e, m, o);
            if (t.errors.length) return m.push(...t.errors), u.finalize(e, m, o);
          }
        }

        return t._rules.length ? u.rules(e, m, o) : u.finalize(e, m, o);
      }, u.rules = function (e, t, r) {
        const {
          schema: s,
          state: n,
          prefs: a
        } = r;

        for (const o of s._rules) {
          const l = s._definition.rules[o.method];

          if (l.convert && a.convert) {
            n.mainstay.tracer.log(s, n, "rule", o.name, "full");
            continue;
          }

          let c,
              f = o.args;

          if (o._resolve.length) {
            f = Object.assign({}, f);

            for (const t of o._resolve) {
              const r = l.argsByName.get(t),
                    o = f[t].resolve(e, n, a),
                    u = r.normalize ? r.normalize(o) : o,
                    m = i.validateArg(u, null, r);

              if (m) {
                c = s.$_createError("any.ref", o, {
                  arg: t,
                  ref: f[t],
                  reason: m
                }, n, a);
                break;
              }

              f[t] = u;
            }
          }

          c = c || l.validate(e, r, f, o);
          const m = u.rule(c, o);

          if (m.errors) {
            if (n.mainstay.tracer.log(s, n, "rule", o.name, "error"), o.warn) {
              n.mainstay.warnings.push(...m.errors);
              continue;
            }

            if (a.abortEarly) return u.finalize(e, m.errors, r);
            t.push(...m.errors);
          } else n.mainstay.tracer.log(s, n, "rule", o.name, "pass"), n.mainstay.tracer.value(n, "rule", e, m.value, o.name), e = m.value;
        }

        return u.finalize(e, t, r);
      }, u.rule = function (e, t) {
        return e instanceof l.Report ? (u.error(e, t), {
          errors: [e],
          value: null
        }) : Array.isArray(e) && e[i.symbols.errors] ? (e.forEach(e => u.error(e, t)), {
          errors: e,
          value: null
        }) : {
          errors: null,
          value: e
        };
      }, u.error = function (e, t) {
        return t.message && e._setTemplate(t.message), e;
      }, u.finalize = function (e, t, r) {
        t = t || [];
        const {
          schema: n,
          state: a,
          prefs: o
        } = r;

        if (t.length) {
          const s = u.default("failover", void 0, t, r);
          void 0 !== s && (a.mainstay.tracer.value(a, "failover", e, s), e = s, t = []);
        }

        if (t.length && n._flags.error) if ("function" == typeof n._flags.error) {
          t = n._flags.error(t), Array.isArray(t) || (t = [t]);

          for (const e of t) s(e instanceof Error || e instanceof l.Report, "error() must return an Error object");
        } else t = [n._flags.error];

        if (void 0 === e) {
          const s = u.default("default", e, t, r);
          a.mainstay.tracer.value(a, "default", e, s), e = s;
        }

        if (n._flags.cast && void 0 !== e) {
          const t = n._definition.cast[n._flags.cast];

          if (t.from(e)) {
            const s = t.to(e, r);
            a.mainstay.tracer.value(a, "cast", e, s, n._flags.cast), e = s;
          }
        }

        if (n.$_terms.externals && o.externals && !1 !== o._externals) for (const {
          method: e
        } of n.$_terms.externals) a.mainstay.externals.push({
          method: e,
          path: a.path,
          label: l.label(n._flags, a, o)
        });
        const i = {
          value: e,
          errors: t.length ? t : null
        };
        return n._flags.result && (i.value = "strip" === n._flags.result ? void 0 : r.original, a.mainstay.tracer.value(a, n._flags.result, e, i.value), a.shadow(e, n._flags.result)), n._cache && !1 !== o.cache && !n._refs.length && n._cache.set(r.original, i), void 0 === e || i.errors || void 0 === n._flags.artifact || (a.mainstay.artifacts = a.mainstay.artifacts || new Map(), a.mainstay.artifacts.has(n._flags.artifact) || a.mainstay.artifacts.set(n._flags.artifact, []), a.mainstay.artifacts.get(n._flags.artifact).push(a.path)), i;
      }, u.prefs = function (e, t) {
        const r = t === i.defaults;
        return r && e._preferences[i.symbols.prefs] ? e._preferences[i.symbols.prefs] : (t = i.preferences(t, e._preferences), r && (e._preferences[i.symbols.prefs] = t), t);
      }, u.default = function (e, t, r, s) {
        const {
          schema: a,
          state: o,
          prefs: l
        } = s,
              c = a._flags[e];
        if (l.noDefaults || void 0 === c) return t;
        if (o.mainstay.tracer.log(a, o, "rule", e, "full"), !c) return c;

        if ("function" == typeof c) {
          const t = c.length ? [n(o.ancestors[0]), s] : [];

          try {
            return c(...t);
          } catch (t) {
            return void r.push(a.$_createError("any.".concat(e), null, {
              error: t
            }, o, l));
          }
        }

        return "object" != typeof c ? c : c[i.symbols.literal] ? c.literal : i.isResolvable(c) ? c.resolve(t, o, l) : n(c);
      }, u.trim = function (e, t) {
        if ("string" != typeof e) return e;
        const r = t.$_getRule("trim");
        return r && r.args.enabled ? e.trim() : e;
      }, u.ignore = {
        active: !1,
        debug: a,
        entry: a,
        filter: a,
        log: a,
        resolve: a,
        value: a
      }, u.errorsArray = function () {
        const e = [];
        return e[i.symbols.errors] = !0, e;
      };
    },
    2036: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(9474),
            a = r(8160),
            o = {};
      e.exports = o.Values = class {
        constructor(e, t) {
          this._values = new Set(e), this._refs = new Set(t), this._lowercase = o.lowercases(e), this._override = !1;
        }

        get length() {
          return this._values.size + this._refs.size;
        }

        add(e, t) {
          a.isResolvable(e) ? this._refs.has(e) || (this._refs.add(e), t && t.register(e)) : this.has(e, null, null, !1) || (this._values.add(e), "string" == typeof e && this._lowercase.set(e.toLowerCase(), e));
        }

        static merge(e, t, r) {
          if (e = e || new o.Values(), t) {
            if (t._override) return t.clone();

            for (const r of [...t._values, ...t._refs]) e.add(r);
          }

          if (r) for (const t of [...r._values, ...r._refs]) e.remove(t);
          return e.length ? e : null;
        }

        remove(e) {
          a.isResolvable(e) ? this._refs.delete(e) : (this._values.delete(e), "string" == typeof e && this._lowercase.delete(e.toLowerCase()));
        }

        has(e, t, r, s) {
          return !!this.get(e, t, r, s);
        }

        get(e, t, r, s) {
          if (!this.length) return !1;
          if (this._values.has(e)) return {
            value: e
          };

          if ("string" == typeof e && e && s) {
            const t = this._lowercase.get(e.toLowerCase());

            if (t) return {
              value: t
            };
          }

          if (!this._refs.size && "object" != typeof e) return !1;
          if ("object" == typeof e) for (const t of this._values) if (n(t, e)) return {
            value: t
          };
          if (t) for (const a of this._refs) {
            const o = a.resolve(e, t, r, null, {
              in: !0
            });
            if (void 0 === o) continue;
            const i = a.in && "object" == typeof o ? Array.isArray(o) ? o : Object.keys(o) : [o];

            for (const t of i) if (typeof t == typeof e) if (s && e && "string" == typeof e) {
              if (t.toLowerCase() === e.toLowerCase()) return {
                value: t,
                ref: a
              };
            } else if (n(t, e)) return {
              value: t,
              ref: a
            };
          }
          return !1;
        }

        override() {
          this._override = !0;
        }

        values(e) {
          if (e && e.display) {
            const e = [];

            for (const t of [...this._values, ...this._refs]) void 0 !== t && e.push(t);

            return e;
          }

          return Array.from([...this._values, ...this._refs]);
        }

        clone() {
          const e = new o.Values(this._values, this._refs);
          return e._override = this._override, e;
        }

        concat(e) {
          s(!e._override, "Cannot concat override set of values");
          const t = new o.Values([...this._values, ...e._values], [...this._refs, ...e._refs]);
          return t._override = this._override, t;
        }

        describe() {
          const e = [];
          this._override && e.push({
            override: !0
          });

          for (const t of this._values.values()) e.push(t && "object" == typeof t ? {
            value: t
          } : t);

          for (const t of this._refs.values()) e.push(t.describe());

          return e;
        }

      }, o.Values.prototype[a.symbols.values] = !0, o.Values.prototype.slice = o.Values.prototype.clone, o.lowercases = function (e) {
        const t = new Map();
        if (e) for (const r of e) "string" == typeof r && t.set(r.toLowerCase(), r);
        return t;
      };
    },
    978: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(1687),
            o = r(9621),
            i = {};
      e.exports = function (e, t, r = {}) {
        if (s(e && "object" == typeof e, "Invalid defaults value: must be an object"), s(!t || !0 === t || "object" == typeof t, "Invalid source value: must be true, falsy or an object"), s("object" == typeof r, "Invalid options: must be an object"), !t) return null;
        if (r.shallow) return i.applyToDefaultsWithShallow(e, t, r);
        const o = n(e);
        if (!0 === t) return o;
        const l = void 0 !== r.nullOverride && r.nullOverride;
        return a(o, t, {
          nullOverride: l,
          mergeArrays: !1
        });
      }, i.applyToDefaultsWithShallow = function (e, t, r) {
        const l = r.shallow;
        s(Array.isArray(l), "Invalid keys");
        const c = new Map(),
              u = !0 === t ? null : new Set();

        for (let r of l) {
          r = Array.isArray(r) ? r : r.split(".");
          const s = o(e, r);
          s && "object" == typeof s ? c.set(s, u && o(t, r) || s) : u && u.add(r);
        }

        const f = n(e, {}, c);
        if (!u) return f;

        for (const e of u) i.reachCopy(f, t, e);

        const m = void 0 !== r.nullOverride && r.nullOverride;
        return a(f, t, {
          nullOverride: m,
          mergeArrays: !1
        });
      }, i.reachCopy = function (e, t, r) {
        for (const e of r) {
          if (!(e in t)) return;
          const r = t[e];
          if ("object" != typeof r || null === r) return;
          t = r;
        }

        const s = t;
        let n = e;

        for (let e = 0; e < r.length - 1; ++e) {
          const t = r[e];
          "object" != typeof n[t] && (n[t] = {}), n = n[t];
        }

        n[r[r.length - 1]] = s;
      };
    },
    375: (e, t, r) => {
      "use strict";

      const s = r(7916);

      e.exports = function (e, ...t) {
        if (!e) {
          if (1 === t.length && t[0] instanceof Error) throw t[0];
          throw new s(t);
        }
      };
    },
    8571: (e, t, r) => {
      "use strict";

      const s = r(9621),
            n = r(4277),
            a = r(7043),
            o = {
        needsProtoHack: new Set([n.set, n.map, n.weakSet, n.weakMap])
      };
      e.exports = o.clone = function (e, t = {}, r = null) {
        if ("object" != typeof e || null === e) return e;
        let s = o.clone,
            i = r;

        if (t.shallow) {
          if (!0 !== t.shallow) return o.cloneWithShallow(e, t);

          s = e => e;
        } else if (i) {
          const t = i.get(e);
          if (t) return t;
        } else i = new Map();

        const l = n.getInternalProto(e);
        if (l === n.buffer) return !1;
        if (l === n.date) return new Date(e.getTime());
        if (l === n.regex) return new RegExp(e);
        const c = o.base(e, l, t);
        if (c === e) return e;
        if (i && i.set(e, c), l === n.set) for (const r of e) c.add(s(r, t, i));else if (l === n.map) for (const [r, n] of e) c.set(r, s(n, t, i));
        const u = a.keys(e, t);

        for (const r of u) {
          if ("__proto__" === r) continue;

          if (l === n.array && "length" === r) {
            c.length = e.length;
            continue;
          }

          const a = Object.getOwnPropertyDescriptor(e, r);
          a ? a.get || a.set ? Object.defineProperty(c, r, a) : a.enumerable ? c[r] = s(e[r], t, i) : Object.defineProperty(c, r, {
            enumerable: !1,
            writable: !0,
            configurable: !0,
            value: s(e[r], t, i)
          }) : Object.defineProperty(c, r, {
            enumerable: !0,
            writable: !0,
            configurable: !0,
            value: s(e[r], t, i)
          });
        }

        return c;
      }, o.cloneWithShallow = function (e, t) {
        const r = t.shallow;
        (t = Object.assign({}, t)).shallow = !1;
        const n = new Map();

        for (const t of r) {
          const r = s(e, t);
          "object" != typeof r && "function" != typeof r || n.set(r, r);
        }

        return o.clone(e, t, n);
      }, o.base = function (e, t, r) {
        if (!1 === r.prototype) return o.needsProtoHack.has(t) ? new t.constructor() : t === n.array ? [] : {};
        const s = Object.getPrototypeOf(e);
        if (s && s.isImmutable) return e;

        if (t === n.array) {
          const e = [];
          return s !== t && Object.setPrototypeOf(e, s), e;
        }

        if (o.needsProtoHack.has(t)) {
          const e = new s.constructor();
          return s !== t && Object.setPrototypeOf(e, s), e;
        }

        return Object.create(s);
      };
    },
    9474: (e, t, r) => {
      "use strict";

      const s = r(4277),
            n = {
        mismatched: null
      };
      e.exports = function (e, t, r) {
        return r = Object.assign({
          prototype: !0
        }, r), !!n.isDeepEqual(e, t, r, []);
      }, n.isDeepEqual = function (e, t, r, a) {
        if (e === t) return 0 !== e || 1 / e == 1 / t;
        const o = typeof e;
        if (o !== typeof t) return !1;
        if (null === e || null === t) return !1;

        if ("function" === o) {
          if (!r.deepFunction || e.toString() !== t.toString()) return !1;
        } else if ("object" !== o) return e != e && t != t;

        const i = n.getSharedType(e, t, !!r.prototype);

        switch (i) {
          case s.buffer:
            return !1;

          case s.promise:
            return e === t;

          case s.regex:
            return e.toString() === t.toString();

          case n.mismatched:
            return !1;
        }

        for (let r = a.length - 1; r >= 0; --r) if (a[r].isSame(e, t)) return !0;

        a.push(new n.SeenEntry(e, t));

        try {
          return !!n.isDeepEqualObj(i, e, t, r, a);
        } finally {
          a.pop();
        }
      }, n.getSharedType = function (e, t, r) {
        if (r) return Object.getPrototypeOf(e) !== Object.getPrototypeOf(t) ? n.mismatched : s.getInternalProto(e);
        const a = s.getInternalProto(e);
        return a !== s.getInternalProto(t) ? n.mismatched : a;
      }, n.valueOf = function (e) {
        const t = e.valueOf;
        if (void 0 === t) return e;

        try {
          return t.call(e);
        } catch (e) {
          return e;
        }
      }, n.hasOwnEnumerableProperty = function (e, t) {
        return Object.prototype.propertyIsEnumerable.call(e, t);
      }, n.isSetSimpleEqual = function (e, t) {
        for (const r of Set.prototype.values.call(e)) if (!Set.prototype.has.call(t, r)) return !1;

        return !0;
      }, n.isDeepEqualObj = function (e, t, r, a, o) {
        const {
          isDeepEqual: i,
          valueOf: l,
          hasOwnEnumerableProperty: c
        } = n,
              {
          keys: u,
          getOwnPropertySymbols: f
        } = Object;

        if (e === s.array) {
          if (!a.part) {
            if (t.length !== r.length) return !1;

            for (let e = 0; e < t.length; ++e) if (!i(t[e], r[e], a, o)) return !1;

            return !0;
          }

          for (const e of t) for (const t of r) if (i(e, t, a, o)) return !0;
        } else if (e === s.set) {
          if (t.size !== r.size) return !1;

          if (!n.isSetSimpleEqual(t, r)) {
            const e = new Set(Set.prototype.values.call(r));

            for (const r of Set.prototype.values.call(t)) {
              if (e.delete(r)) continue;
              let t = !1;

              for (const s of e) if (i(r, s, a, o)) {
                e.delete(s), t = !0;
                break;
              }

              if (!t) return !1;
            }
          }
        } else if (e === s.map) {
          if (t.size !== r.size) return !1;

          for (const [e, s] of Map.prototype.entries.call(t)) {
            if (void 0 === s && !Map.prototype.has.call(r, e)) return !1;
            if (!i(s, Map.prototype.get.call(r, e), a, o)) return !1;
          }
        } else if (e === s.error && (t.name !== r.name || t.message !== r.message)) return !1;

        const m = l(t),
              h = l(r);
        if ((t !== m || r !== h) && !i(m, h, a, o)) return !1;
        const d = u(t);
        if (!a.part && d.length !== u(r).length && !a.skip) return !1;
        let p = 0;

        for (const e of d) if (a.skip && a.skip.includes(e)) void 0 === r[e] && ++p;else {
          if (!c(r, e)) return !1;
          if (!i(t[e], r[e], a, o)) return !1;
        }

        if (!a.part && d.length - p !== u(r).length) return !1;

        if (!1 !== a.symbols) {
          const e = f(t),
                s = new Set(f(r));

          for (const n of e) {
            if (!a.skip || !a.skip.includes(n)) if (c(t, n)) {
              if (!c(r, n)) return !1;
              if (!i(t[n], r[n], a, o)) return !1;
            } else if (c(r, n)) return !1;
            s.delete(n);
          }

          for (const e of s) if (c(r, e)) return !1;
        }

        return !0;
      }, n.SeenEntry = class {
        constructor(e, t) {
          this.obj = e, this.ref = t;
        }

        isSame(e, t) {
          return this.obj === e && this.ref === t;
        }

      };
    },
    7916: (e, t, r) => {
      "use strict";

      const s = r(8761);
      e.exports = class extends Error {
        constructor(e) {
          super(e.filter(e => "" !== e).map(e => "string" == typeof e ? e : e instanceof Error ? e.message : s(e)).join(" ") || "Unknown error"), "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, t.assert);
        }

      };
    },
    5277: e => {
      "use strict";

      const t = {};
      e.exports = function (e) {
        if (!e) return "";
        let r = "";

        for (let s = 0; s < e.length; ++s) {
          const n = e.charCodeAt(s);
          t.isSafe(n) ? r += e[s] : r += t.escapeHtmlChar(n);
        }

        return r;
      }, t.escapeHtmlChar = function (e) {
        const r = t.namedHtml[e];
        if (void 0 !== r) return r;
        if (e >= 256) return "&#" + e + ";";
        const s = e.toString(16).padStart(2, "0");
        return "&#x".concat(s, ";");
      }, t.isSafe = function (e) {
        return void 0 !== t.safeCharCodes[e];
      }, t.namedHtml = {
        38: "&amp;",
        60: "&lt;",
        62: "&gt;",
        34: "&quot;",
        160: "&nbsp;",
        162: "&cent;",
        163: "&pound;",
        164: "&curren;",
        169: "&copy;",
        174: "&reg;"
      }, t.safeCharCodes = function () {
        const e = {};

        for (let t = 32; t < 123; ++t) (t >= 97 || t >= 65 && t <= 90 || t >= 48 && t <= 57 || 32 === t || 46 === t || 44 === t || 45 === t || 58 === t || 95 === t) && (e[t] = null);

        return e;
      }();
    },
    6064: e => {
      "use strict";

      e.exports = function (e) {
        return e.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
      };
    },
    738: e => {
      "use strict";

      e.exports = function () {};
    },
    1687: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(8571),
            a = r(7043),
            o = {};

      e.exports = o.merge = function (e, t, r) {
        if (s(e && "object" == typeof e, "Invalid target value: must be an object"), s(null == t || "object" == typeof t, "Invalid source value: must be null, undefined, or an object"), !t) return e;

        if (r = Object.assign({
          nullOverride: !0,
          mergeArrays: !0
        }, r), Array.isArray(t)) {
          s(Array.isArray(e), "Cannot merge array onto an object"), r.mergeArrays || (e.length = 0);

          for (let s = 0; s < t.length; ++s) e.push(n(t[s], {
            symbols: r.symbols
          }));

          return e;
        }

        const i = a.keys(t, r);

        for (let s = 0; s < i.length; ++s) {
          const a = i[s];
          if ("__proto__" === a || !Object.prototype.propertyIsEnumerable.call(t, a)) continue;
          const l = t[a];

          if (l && "object" == typeof l) {
            if (e[a] === l) continue;
            !e[a] || "object" != typeof e[a] || Array.isArray(e[a]) !== Array.isArray(l) || l instanceof Date || l instanceof RegExp ? e[a] = n(l, {
              symbols: r.symbols
            }) : o.merge(e[a], l, r);
          } else (null != l || r.nullOverride) && (e[a] = l);
        }

        return e;
      };
    },
    9621: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = {};
      e.exports = function (e, t, r) {
        if (!1 === t || null == t) return e;
        "string" == typeof (r = r || {}) && (r = {
          separator: r
        });
        const a = Array.isArray(t);
        s(!a || !r.separator, "Separator option no valid for array-based chain");
        const o = a ? t : t.split(r.separator || ".");
        let i = e;

        for (let e = 0; e < o.length; ++e) {
          let a = o[e];
          const l = r.iterables && n.iterables(i);

          if (Array.isArray(i) || "set" === l) {
            const e = Number(a);
            Number.isInteger(e) && (a = e < 0 ? i.length + e : e);
          }

          if (!i || "function" == typeof i && !1 === r.functions || !l && void 0 === i[a]) {
            s(!r.strict || e + 1 === o.length, "Missing segment", a, "in reach path ", t), s("object" == typeof i || !0 === r.functions || "function" != typeof i, "Invalid segment", a, "in reach path ", t), i = r.default;
            break;
          }

          i = l ? "set" === l ? [...i][a] : i.get(a) : i[a];
        }

        return i;
      }, n.iterables = function (e) {
        return e instanceof Set ? "set" : e instanceof Map ? "map" : void 0;
      };
    },
    8761: e => {
      "use strict";

      e.exports = function (...e) {
        try {
          return JSON.stringify.apply(null, e);
        } catch (e) {
          return "[Cannot display object: " + e.message + "]";
        }
      };
    },
    4277: (e, t) => {
      "use strict";

      const r = {};
      t = e.exports = {
        array: Array.prototype,
        buffer: !1,
        date: Date.prototype,
        error: Error.prototype,
        generic: Object.prototype,
        map: Map.prototype,
        promise: Promise.prototype,
        regex: RegExp.prototype,
        set: Set.prototype,
        weakMap: WeakMap.prototype,
        weakSet: WeakSet.prototype
      }, r.typeMap = new Map([["[object Error]", t.error], ["[object Map]", t.map], ["[object Promise]", t.promise], ["[object Set]", t.set], ["[object WeakMap]", t.weakMap], ["[object WeakSet]", t.weakSet]]), t.getInternalProto = function (e) {
        if (Array.isArray(e)) return t.array;
        if (e instanceof Date) return t.date;
        if (e instanceof RegExp) return t.regex;
        if (e instanceof Error) return t.error;
        const s = Object.prototype.toString.call(e);
        return r.typeMap.get(s) || t.generic;
      };
    },
    7043: (e, t) => {
      "use strict";

      t.keys = function (e, t = {}) {
        return !1 !== t.symbols ? Reflect.ownKeys(e) : Object.getOwnPropertyNames(e);
      };
    },
    3652: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = {};
      t.Sorter = class {
        constructor() {
          this._items = [], this.nodes = [];
        }

        add(e, t) {
          const r = [].concat((t = t || {}).before || []),
                n = [].concat(t.after || []),
                a = t.group || "?",
                o = t.sort || 0;
          s(!r.includes(a), "Item cannot come before itself: ".concat(a)), s(!r.includes("?"), "Item cannot come before unassociated items"), s(!n.includes(a), "Item cannot come after itself: ".concat(a)), s(!n.includes("?"), "Item cannot come after unassociated items"), Array.isArray(e) || (e = [e]);

          for (const t of e) {
            const e = {
              seq: this._items.length,
              sort: o,
              before: r,
              after: n,
              group: a,
              node: t
            };

            this._items.push(e);
          }

          if (!t.manual) {
            const e = this._sort();

            s(e, "item", "?" !== a ? "added into group ".concat(a) : "", "created a dependencies error");
          }

          return this.nodes;
        }

        merge(e) {
          Array.isArray(e) || (e = [e]);

          for (const t of e) if (t) for (const e of t._items) this._items.push(Object.assign({}, e));

          this._items.sort(n.mergeSort);

          for (let e = 0; e < this._items.length; ++e) this._items[e].seq = e;

          const t = this._sort();

          return s(t, "merge created a dependencies error"), this.nodes;
        }

        sort() {
          const e = this._sort();

          return s(e, "sort created a dependencies error"), this.nodes;
        }

        _sort() {
          const e = {},
                t = Object.create(null),
                r = Object.create(null);

          for (const s of this._items) {
            const n = s.seq,
                  a = s.group;
            r[a] = r[a] || [], r[a].push(n), e[n] = s.before;

            for (const e of s.after) t[e] = t[e] || [], t[e].push(n);
          }

          for (const t in e) {
            const s = [];

            for (const n in e[t]) {
              const a = e[t][n];
              r[a] = r[a] || [], s.push(...r[a]);
            }

            e[t] = s;
          }

          for (const s in t) if (r[s]) for (const n of r[s]) e[n].push(...t[s]);

          const s = {};

          for (const t in e) {
            const r = e[t];

            for (const e of r) s[e] = s[e] || [], s[e].push(t);
          }

          const n = {},
                a = [];

          for (let e = 0; e < this._items.length; ++e) {
            let t = e;

            if (s[e]) {
              t = null;

              for (let e = 0; e < this._items.length; ++e) {
                if (!0 === n[e]) continue;
                s[e] || (s[e] = []);
                const r = s[e].length;
                let a = 0;

                for (let t = 0; t < r; ++t) n[s[e][t]] && ++a;

                if (a === r) {
                  t = e;
                  break;
                }
              }
            }

            null !== t && (n[t] = !0, a.push(t));
          }

          if (a.length !== this._items.length) return !1;
          const o = {};

          for (const e of this._items) o[e.seq] = e;

          this._items = [], this.nodes = [];

          for (const e of a) {
            const t = o[e];
            this.nodes.push(t.node), this._items.push(t);
          }

          return !0;
        }

      }, n.mergeSort = (e, t) => e.sort === t.sort ? 0 : e.sort < t.sort ? -1 : 1;
    },
    5380: (e, t, r) => {
      "use strict";

      const s = r(443),
            n = r(2178),
            a = {
        minDomainSegments: 2,
        nonAsciiRx: /[^\x00-\x7f]/,
        domainControlRx: /[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/,
        tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
        domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
        URL: s.URL || URL
      };
      t.analyze = function (e, t = {}) {
        if (!e) return n.code("DOMAIN_NON_EMPTY_STRING");
        if ("string" != typeof e) throw new Error("Invalid input: domain must be a string");
        if (e.length > 256) return n.code("DOMAIN_TOO_LONG");

        if (a.nonAsciiRx.test(e)) {
          if (!1 === t.allowUnicode) return n.code("DOMAIN_INVALID_UNICODE_CHARS");
          e = e.normalize("NFC");
        }

        if (a.domainControlRx.test(e)) return n.code("DOMAIN_INVALID_CHARS");
        e = a.punycode(e), t.allowFullyQualified && "." === e[e.length - 1] && (e = e.slice(0, -1));
        const r = t.minDomainSegments || a.minDomainSegments,
              s = e.split(".");
        if (s.length < r) return n.code("DOMAIN_SEGMENTS_COUNT");
        if (t.maxDomainSegments && s.length > t.maxDomainSegments) return n.code("DOMAIN_SEGMENTS_COUNT_MAX");
        const o = t.tlds;

        if (o) {
          const e = s[s.length - 1].toLowerCase();
          if (o.deny && o.deny.has(e) || o.allow && !o.allow.has(e)) return n.code("DOMAIN_FORBIDDEN_TLDS");
        }

        for (let e = 0; e < s.length; ++e) {
          const t = s[e];
          if (!t.length) return n.code("DOMAIN_EMPTY_SEGMENT");
          if (t.length > 63) return n.code("DOMAIN_LONG_SEGMENT");

          if (e < s.length - 1) {
            if (!a.domainSegmentRx.test(t)) return n.code("DOMAIN_INVALID_CHARS");
          } else if (!a.tldSegmentRx.test(t)) return n.code("DOMAIN_INVALID_TLDS_CHARS");
        }

        return null;
      }, t.isValid = function (e, r) {
        return !t.analyze(e, r);
      }, a.punycode = function (e) {
        e.includes("%") && (e = e.replace(/%/g, "%25"));

        try {
          return new a.URL("http://".concat(e)).host;
        } catch (t) {
          return e;
        }
      };
    },
    1745: (e, t, r) => {
      "use strict";

      const s = r(9848),
            n = r(5380),
            a = r(2178),
            o = {
        nonAsciiRx: /[^\x00-\x7f]/,
        encoder: new (s.TextEncoder || TextEncoder)()
      };
      t.analyze = function (e, t) {
        return o.email(e, t);
      }, t.isValid = function (e, t) {
        return !o.email(e, t);
      }, o.email = function (e, t = {}) {
        if ("string" != typeof e) throw new Error("Invalid input: email must be a string");
        if (!e) return a.code("EMPTY_STRING");
        const r = !o.nonAsciiRx.test(e);

        if (!r) {
          if (!1 === t.allowUnicode) return a.code("FORBIDDEN_UNICODE");
          e = e.normalize("NFC");
        }

        const s = e.split("@");
        if (2 !== s.length) return s.length > 2 ? a.code("MULTIPLE_AT_CHAR") : a.code("MISSING_AT_CHAR");
        const [i, l] = s;
        if (!i) return a.code("EMPTY_LOCAL");

        if (!t.ignoreLength) {
          if (e.length > 254) return a.code("ADDRESS_TOO_LONG");
          if (o.encoder.encode(i).length > 64) return a.code("LOCAL_TOO_LONG");
        }

        return o.local(i, r) || n.analyze(l, t);
      }, o.local = function (e, t) {
        const r = e.split(".");

        for (const e of r) {
          if (!e.length) return a.code("EMPTY_LOCAL_SEGMENT");

          if (t) {
            if (!o.atextRx.test(e)) return a.code("INVALID_LOCAL_CHARS");
          } else for (const t of e) {
            if (o.atextRx.test(t)) continue;
            const e = o.binary(t);
            if (!o.atomRx.test(e)) return a.code("INVALID_LOCAL_CHARS");
          }
        }
      }, o.binary = function (e) {
        return Array.from(o.encoder.encode(e)).map(e => String.fromCharCode(e)).join("");
      }, o.atextRx = /^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/, o.atomRx = new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])", "(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})", "(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"));
    },
    2178: (e, t) => {
      "use strict";

      t.codes = {
        EMPTY_STRING: "Address must be a non-empty string",
        FORBIDDEN_UNICODE: "Address contains forbidden Unicode characters",
        MULTIPLE_AT_CHAR: "Address cannot contain more than one @ character",
        MISSING_AT_CHAR: "Address must contain one @ character",
        EMPTY_LOCAL: "Address local part cannot be empty",
        ADDRESS_TOO_LONG: "Address too long",
        LOCAL_TOO_LONG: "Address local part too long",
        EMPTY_LOCAL_SEGMENT: "Address local part contains empty dot-separated segment",
        INVALID_LOCAL_CHARS: "Address local part contains invalid character",
        DOMAIN_NON_EMPTY_STRING: "Domain must be a non-empty string",
        DOMAIN_TOO_LONG: "Domain too long",
        DOMAIN_INVALID_UNICODE_CHARS: "Domain contains forbidden Unicode characters",
        DOMAIN_INVALID_CHARS: "Domain contains invalid character",
        DOMAIN_INVALID_TLDS_CHARS: "Domain contains invalid tld character",
        DOMAIN_SEGMENTS_COUNT: "Domain lacks the minimum required number of segments",
        DOMAIN_SEGMENTS_COUNT_MAX: "Domain contains too many segments",
        DOMAIN_FORBIDDEN_TLDS: "Domain uses forbidden TLD",
        DOMAIN_EMPTY_SEGMENT: "Domain contains empty dot-separated segment",
        DOMAIN_LONG_SEGMENT: "Domain contains dot-separated segment that is too long"
      }, t.code = function (e) {
        return {
          code: e,
          error: t.codes[e]
        };
      };
    },
    9959: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(5752);

      t.regex = function (e = {}) {
        s(void 0 === e.cidr || "string" == typeof e.cidr, "options.cidr must be a string");
        const t = e.cidr ? e.cidr.toLowerCase() : "optional";
        s(["required", "optional", "forbidden"].includes(t), "options.cidr must be one of required, optional, forbidden"), s(void 0 === e.version || "string" == typeof e.version || Array.isArray(e.version), "options.version must be a string or an array of string");
        let r = e.version || ["ipv4", "ipv6", "ipvfuture"];
        Array.isArray(r) || (r = [r]), s(r.length >= 1, "options.version must have at least 1 version specified");

        for (let e = 0; e < r.length; ++e) s("string" == typeof r[e], "options.version must only contain strings"), r[e] = r[e].toLowerCase(), s(["ipv4", "ipv6", "ipvfuture"].includes(r[e]), "options.version contains unknown version " + r[e] + " - must be one of ipv4, ipv6, ipvfuture");

        r = Array.from(new Set(r));
        const a = r.map(e => {
          if ("forbidden" === t) return n.ip[e];
          const r = "\\/".concat("ipv4" === e ? n.ip.v4Cidr : n.ip.v6Cidr);
          return "required" === t ? "".concat(n.ip[e]).concat(r) : "".concat(n.ip[e], "(?:").concat(r, ")?");
        }),
              o = "(?:".concat(a.join("|"), ")"),
              i = new RegExp("^".concat(o, "$"));
        return {
          cidr: t,
          versions: r,
          regex: i,
          raw: o
        };
      };
    },
    5752: (e, t, r) => {
      "use strict";

      const s = r(375),
            n = r(6064),
            a = {
        generate: function () {
          const e = {},
                t = "!\\$&'\\(\\)\\*\\+,;=",
                r = "\\w-\\.~%\\dA-Fa-f" + t + ":@",
                s = "[" + r + "]",
                n = "(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";
          e.ipv4address = "(?:" + n + "\\.){3}" + n;
          const a = "[\\dA-Fa-f]{1,4}",
                o = "(?:" + a + ":" + a + "|" + e.ipv4address + ")",
                i = "(?:" + a + ":){6}" + o,
                l = "::(?:" + a + ":){5}" + o,
                c = "(?:" + a + ")?::(?:" + a + ":){4}" + o,
                u = "(?:(?:" + a + ":){0,1}" + a + ")?::(?:" + a + ":){3}" + o,
                f = "(?:(?:" + a + ":){0,2}" + a + ")?::(?:" + a + ":){2}" + o,
                m = "(?:(?:" + a + ":){0,3}" + a + ")?::" + a + ":" + o,
                h = "(?:(?:" + a + ":){0,4}" + a + ")?::" + o;
          e.ipv4Cidr = "(?:\\d|[1-2]\\d|3[0-2])", e.ipv6Cidr = "(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])", e.ipv6address = "(?:" + i + "|" + l + "|" + c + "|" + u + "|" + f + "|" + m + "|" + h + "|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)", e.ipvFuture = "v[\\dA-Fa-f]+\\.[\\w-\\.~" + t + ":]+", e.scheme = "[a-zA-Z][a-zA-Z\\d+-\\.]*", e.schemeRegex = new RegExp(e.scheme);

          const d = "[\\w-\\.~%\\dA-Fa-f" + t + ":]*",
                p = "(?:\\[(?:" + e.ipv6address + "|" + e.ipvFuture + ")\\]|" + e.ipv4address + "|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})",
                g = "(?:" + d + "@)?" + p + "(?::\\d*)?",
                y = "(?:" + d + "@)?(" + p + ")(?::\\d*)?",
                b = s + "+",
                v = "(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*",
                _ = "\\/(?:" + b + v + ")?",
                w = b + v,
                $ = "[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+" + v;

          return e.hierPart = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + w + "|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))", e.hierPartCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + w + ")", e.relativeRef = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + $ + "|)", e.relativeRefCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + $ + "|)", e.query = "[" + r + "\\/\\?]*(?=#|$)", e.queryWithSquareBrackets = "[" + r + "\\[\\]\\/\\?]*(?=#|$)", e.fragment = "[" + r + "\\/\\?]*", e;
        }
      };
      a.rfc3986 = a.generate(), t.ip = {
        v4Cidr: a.rfc3986.ipv4Cidr,
        v6Cidr: a.rfc3986.ipv6Cidr,
        ipv4: a.rfc3986.ipv4address,
        ipv6: a.rfc3986.ipv6address,
        ipvfuture: a.rfc3986.ipvFuture
      }, a.createRegex = function (e) {
        const t = a.rfc3986,
              r = "(?:\\?" + (e.allowQuerySquareBrackets ? t.queryWithSquareBrackets : t.query) + ")?(?:#" + t.fragment + ")?",
              o = e.domain ? t.relativeRefCapture : t.relativeRef;
        if (e.relativeOnly) return a.wrap(o + r);
        let i = "";

        if (e.scheme) {
          s(e.scheme instanceof RegExp || "string" == typeof e.scheme || Array.isArray(e.scheme), "scheme must be a RegExp, String, or Array");
          const r = [].concat(e.scheme);
          s(r.length >= 1, "scheme must have at least 1 scheme specified");
          const a = [];

          for (let e = 0; e < r.length; ++e) {
            const o = r[e];
            s(o instanceof RegExp || "string" == typeof o, "scheme at position " + e + " must be a RegExp or String"), o instanceof RegExp ? a.push(o.source.toString()) : (s(t.schemeRegex.test(o), "scheme at position " + e + " must be a valid scheme"), a.push(n(o)));
          }

          i = a.join("|");
        }

        const l = "(?:" + (i ? "(?:" + i + ")" : t.scheme) + ":" + (e.domain ? t.hierPartCapture : t.hierPart) + ")",
              c = e.allowRelative ? "(?:" + l + "|" + o + ")" : l;
        return a.wrap(c + r, i);
      }, a.wrap = function (e, t) {
        return {
          raw: e = "(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])".concat(e),
          regex: new RegExp("^".concat(e, "$")),
          scheme: t
        };
      }, a.uriRegex = a.createRegex({}), t.regex = function (e = {}) {
        return e.scheme || e.allowRelative || e.relativeOnly || e.allowQuerySquareBrackets || e.domain ? a.createRegex(e) : a.uriRegex;
      };
    },
    1447: (e, t) => {
      "use strict";

      const r = {
        operators: ["!", "^", "*", "/", "%", "+", "-", "<", "<=", ">", ">=", "==", "!=", "&&", "||", "??"],
        operatorCharacters: ["!", "^", "*", "/", "%", "+", "-", "<", "=", ">", "&", "|", "?"],
        operatorsOrder: [["^"], ["*", "/", "%"], ["+", "-"], ["<", "<=", ">", ">="], ["==", "!="], ["&&"], ["||", "??"]],
        operatorsPrefix: ["!", "n"],
        literals: {
          '"': '"',
          "`": "`",
          "'": "'",
          "[": "]"
        },
        numberRx: /^(?:[0-9]*\.?[0-9]*){1}$/,
        tokenRx: /^[\w\$\#\.\@\:\{\}]+$/,
        symbol: Symbol("formula"),
        settings: Symbol("settings")
      };
      t.Parser = class {
        constructor(e, t = {}) {
          if (!t[r.settings] && t.constants) for (const e in t.constants) {
            const r = t.constants[e];
            if (null !== r && !["boolean", "number", "string"].includes(typeof r)) throw new Error("Formula constant ".concat(e, " contains invalid ").concat(typeof r, " value type"));
          }
          this.settings = t[r.settings] ? t : Object.assign({
            [r.settings]: !0,
            constants: {},
            functions: {}
          }, t), this.single = null, this._parts = null, this._parse(e);
        }

        _parse(e) {
          let s = [],
              n = "",
              a = 0,
              o = !1;

          const i = e => {
            if (a) throw new Error("Formula missing closing parenthesis");
            const i = s.length ? s[s.length - 1] : null;

            if (o || n || e) {
              if (i && "reference" === i.type && ")" === e) return i.type = "function", i.value = this._subFormula(n, i.value), void (n = "");

              if (")" === e) {
                const e = new t.Parser(n, this.settings);
                s.push({
                  type: "segment",
                  value: e
                });
              } else if (o) {
                if ("]" === o) return s.push({
                  type: "reference",
                  value: n
                }), void (n = "");
                s.push({
                  type: "literal",
                  value: n
                });
              } else if (r.operatorCharacters.includes(n)) i && "operator" === i.type && r.operators.includes(i.value + n) ? i.value += n : s.push({
                type: "operator",
                value: n
              });else if (n.match(r.numberRx)) s.push({
                type: "constant",
                value: parseFloat(n)
              });else if (void 0 !== this.settings.constants[n]) s.push({
                type: "constant",
                value: this.settings.constants[n]
              });else {
                if (!n.match(r.tokenRx)) throw new Error("Formula contains invalid token: ".concat(n));
                s.push({
                  type: "reference",
                  value: n
                });
              }

              n = "";
            }
          };

          for (const t of e) o ? t === o ? (i(), o = !1) : n += t : a ? "(" === t ? (n += t, ++a) : ")" === t ? (--a, a ? n += t : i(t)) : n += t : t in r.literals ? o = r.literals[t] : "(" === t ? (i(), ++a) : r.operatorCharacters.includes(t) ? (i(), n = t, i()) : " " !== t ? n += t : i();

          i(), s = s.map((e, t) => "operator" !== e.type || "-" !== e.value || t && "operator" !== s[t - 1].type ? e : {
            type: "operator",
            value: "n"
          });
          let l = !1;

          for (const e of s) {
            if ("operator" === e.type) {
              if (r.operatorsPrefix.includes(e.value)) continue;
              if (!l) throw new Error("Formula contains an operator in invalid position");
              if (!r.operators.includes(e.value)) throw new Error("Formula contains an unknown operator ".concat(e.value));
            } else if (l) throw new Error("Formula missing expected operator");

            l = !l;
          }

          if (!l) throw new Error("Formula contains invalid trailing operator");
          1 === s.length && ["reference", "literal", "constant"].includes(s[0].type) && (this.single = {
            type: "reference" === s[0].type ? "reference" : "value",
            value: s[0].value
          }), this._parts = s.map(e => {
            if ("operator" === e.type) return r.operatorsPrefix.includes(e.value) ? e : e.value;
            if ("reference" !== e.type) return e.value;
            if (this.settings.tokenRx && !this.settings.tokenRx.test(e.value)) throw new Error("Formula contains invalid reference ".concat(e.value));
            return this.settings.reference ? this.settings.reference(e.value) : r.reference(e.value);
          });
        }

        _subFormula(e, s) {
          const n = this.settings.functions[s];
          if ("function" != typeof n) throw new Error("Formula contains unknown function ".concat(s));
          let a = [];

          if (e) {
            let t = "",
                n = 0,
                o = !1;

            const i = () => {
              if (!t) throw new Error("Formula contains function ".concat(s, " with invalid arguments ").concat(e));
              a.push(t), t = "";
            };

            for (let s = 0; s < e.length; ++s) {
              const a = e[s];
              o ? (t += a, a === o && (o = !1)) : a in r.literals && !n ? (t += a, o = r.literals[a]) : "," !== a || n ? (t += a, "(" === a ? ++n : ")" === a && --n) : i();
            }

            i();
          }

          return a = a.map(e => new t.Parser(e, this.settings)), function (e) {
            const t = [];

            for (const r of a) t.push(r.evaluate(e));

            return n.call(e, ...t);
          };
        }

        evaluate(e) {
          const t = this._parts.slice();

          for (let s = t.length - 2; s >= 0; --s) {
            const n = t[s];

            if (n && "operator" === n.type) {
              const a = t[s + 1];
              t.splice(s + 1, 1);
              const o = r.evaluate(a, e);
              t[s] = r.single(n.value, o);
            }
          }

          return r.operatorsOrder.forEach(s => {
            for (let n = 1; n < t.length - 1;) if (s.includes(t[n])) {
              const s = t[n],
                    a = r.evaluate(t[n - 1], e),
                    o = r.evaluate(t[n + 1], e);
              t.splice(n, 2);
              const i = r.calculate(s, a, o);
              t[n - 1] = 0 === i ? 0 : i;
            } else n += 2;
          }), r.evaluate(t[0], e);
        }

      }, t.Parser.prototype[r.symbol] = !0, r.reference = function (e) {
        return function (t) {
          return t && void 0 !== t[e] ? t[e] : null;
        };
      }, r.evaluate = function (e, t) {
        return null === e ? null : "function" == typeof e ? e(t) : e[r.symbol] ? e.evaluate(t) : e;
      }, r.single = function (e, t) {
        if ("!" === e) return !t;
        const r = -t;
        return 0 === r ? 0 : r;
      }, r.calculate = function (e, t, s) {
        if ("??" === e) return r.exists(t) ? t : s;

        if ("string" == typeof t || "string" == typeof s) {
          if ("+" === e) return (t = r.exists(t) ? t : "") + (r.exists(s) ? s : "");
        } else switch (e) {
          case "^":
            return Math.pow(t, s);

          case "*":
            return t * s;

          case "/":
            return t / s;

          case "%":
            return t % s;

          case "+":
            return t + s;

          case "-":
            return t - s;
        }

        switch (e) {
          case "<":
            return t < s;

          case "<=":
            return t <= s;

          case ">":
            return t > s;

          case ">=":
            return t >= s;

          case "==":
            return t === s;

          case "!=":
            return t !== s;

          case "&&":
            return t && s;

          case "||":
            return t || s;
        }

        return null;
      }, r.exists = function (e) {
        return null != e;
      };
    },
    9926: () => {},
    5688: () => {},
    9708: () => {},
    1152: () => {},
    443: () => {},
    9848: () => {}
  }, t = {}, function r(s) {
    var n = t[s];
    if (void 0 !== n) return n.exports;
    var a = t[s] = {
      exports: {}
    };
    return e[s](a, a.exports, r), a.exports;
  }(5107);
  var e, t;
});

/***/ }),

/***/ "./node_modules/js-sha256/src/sha256.js":
/*!**********************************************!*\
  !*** ./node_modules/js-sha256/src/sha256.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */

/*jslint bitwise: true */
(function () {
  'use strict';

  var ERROR = 'input is invalid type';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};

  if (root.JS_SHA256_NO_WINDOW) {
    WINDOW = false;
  }

  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;

  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }

  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js");
  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];
  var blocks = [];

  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (outputType, is224) {
    return function (message) {
      return new Sha256(is224, true).update(message)[outputType]();
    };
  };

  var createMethod = function (is224) {
    var method = createOutputMethod('hex', is224);

    if (NODE_JS) {
      method = nodeWrap(method, is224);
    }

    method.create = function () {
      return new Sha256(is224);
    };

    method.update = function (message) {
      return method.create().update(message);
    };

    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type, is224);
    }

    return method;
  };

  var nodeWrap = function (method, is224) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var algorithm = is224 ? 'sha224' : 'sha256';

    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
      } else {
        if (message === null || message === undefined) {
          throw new Error(ERROR);
        } else if (message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
      }

      if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {
        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
      } else {
        return method(message);
      }
    };

    return nodeMethod;
  };

  var createHmacOutputMethod = function (outputType, is224) {
    return function (key, message) {
      return new HmacSha256(key, is224, true).update(message)[outputType]();
    };
  };

  var createHmacMethod = function (is224) {
    var method = createHmacOutputMethod('hex', is224);

    method.create = function (key) {
      return new HmacSha256(key, is224);
    };

    method.update = function (key, message) {
      return method.create(key).update(message);
    };

    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createHmacOutputMethod(type, is224);
    }

    return method;
  };

  function Sha256(is224, sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    if (is224) {
      this.h0 = 0xc1059ed8;
      this.h1 = 0x367cd507;
      this.h2 = 0x3070dd17;
      this.h3 = 0xf70e5939;
      this.h4 = 0xffc00b31;
      this.h5 = 0x68581511;
      this.h6 = 0x64f98fa7;
      this.h7 = 0xbefa4fa4;
    } else {
      // 256
      this.h0 = 0x6a09e667;
      this.h1 = 0xbb67ae85;
      this.h2 = 0x3c6ef372;
      this.h3 = 0xa54ff53a;
      this.h4 = 0x510e527f;
      this.h5 = 0x9b05688c;
      this.h6 = 0x1f83d9ab;
      this.h7 = 0x5be0cd19;
    }

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
    this.is224 = is224;
  }

  Sha256.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }

    var notString,
        type = typeof message;

    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }

      notString = true;
    }

    var code,
        index = 0,
        i,
        length = message.length,
        blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);

          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;

      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }

    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }

    return this;
  };

  Sha256.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }

    this.finalized = true;
    var blocks = this.blocks,
        i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];

    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }

      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }

    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha256.prototype.hash = function () {
    var a = this.h0,
        b = this.h1,
        c = this.h2,
        d = this.h3,
        e = this.h4,
        f = this.h5,
        g = this.h6,
        h = this.h7,
        blocks = this.blocks,
        j,
        s0,
        s1,
        maj,
        t1,
        t2,
        ch,
        ab,
        da,
        cd,
        bc;

    for (j = 16; j < 64; ++j) {
      // rightrotate
      t1 = blocks[j - 15];
      s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;
      t1 = blocks[j - 2];
      s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
    }

    bc = b & c;

    for (j = 0; j < 64; j += 4) {
      if (this.first) {
        if (this.is224) {
          ab = 300032;
          t1 = blocks[0] - 1413257819;
          h = t1 - 150054599 << 0;
          d = t1 + 24177077 << 0;
        } else {
          ab = 704751109;
          t1 = blocks[0] - 210244248;
          h = t1 - 1521486534 << 0;
          d = t1 + 143694565 << 0;
        }

        this.first = false;
      } else {
        s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);
        s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
        ab = a & b;
        maj = ab ^ a & c ^ bc;
        ch = e & f ^ ~e & g;
        t1 = h + s1 + ch + K[j] + blocks[j];
        t2 = s0 + maj;
        h = d + t1 << 0;
        d = t1 + t2 << 0;
      }

      s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);
      s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);
      da = d & a;
      maj = da ^ d & b ^ ab;
      ch = h & e ^ ~h & f;
      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
      t2 = s0 + maj;
      g = c + t1 << 0;
      c = t1 + t2 << 0;
      s0 = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10);
      s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);
      cd = c & d;
      maj = cd ^ c & a ^ da;
      ch = g & h ^ ~g & e;
      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
      t2 = s0 + maj;
      f = b + t1 << 0;
      b = t1 + t2 << 0;
      s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);
      s1 = (f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7);
      bc = b & c;
      maj = bc ^ b & d ^ cd;
      ch = f & g ^ ~f & h;
      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
      t2 = s0 + maj;
      e = a + t1 << 0;
      a = t1 + t2 << 0;
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
    this.h5 = this.h5 + f << 0;
    this.h6 = this.h6 + g << 0;
    this.h7 = this.h7 + h << 0;
  };

  Sha256.prototype.hex = function () {
    this.finalize();
    var h0 = this.h0,
        h1 = this.h1,
        h2 = this.h2,
        h3 = this.h3,
        h4 = this.h4,
        h5 = this.h5,
        h6 = this.h6,
        h7 = this.h7;
    var hex = HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h4 >> 28 & 0x0F] + HEX_CHARS[h4 >> 24 & 0x0F] + HEX_CHARS[h4 >> 20 & 0x0F] + HEX_CHARS[h4 >> 16 & 0x0F] + HEX_CHARS[h4 >> 12 & 0x0F] + HEX_CHARS[h4 >> 8 & 0x0F] + HEX_CHARS[h4 >> 4 & 0x0F] + HEX_CHARS[h4 & 0x0F] + HEX_CHARS[h5 >> 28 & 0x0F] + HEX_CHARS[h5 >> 24 & 0x0F] + HEX_CHARS[h5 >> 20 & 0x0F] + HEX_CHARS[h5 >> 16 & 0x0F] + HEX_CHARS[h5 >> 12 & 0x0F] + HEX_CHARS[h5 >> 8 & 0x0F] + HEX_CHARS[h5 >> 4 & 0x0F] + HEX_CHARS[h5 & 0x0F] + HEX_CHARS[h6 >> 28 & 0x0F] + HEX_CHARS[h6 >> 24 & 0x0F] + HEX_CHARS[h6 >> 20 & 0x0F] + HEX_CHARS[h6 >> 16 & 0x0F] + HEX_CHARS[h6 >> 12 & 0x0F] + HEX_CHARS[h6 >> 8 & 0x0F] + HEX_CHARS[h6 >> 4 & 0x0F] + HEX_CHARS[h6 & 0x0F];

    if (!this.is224) {
      hex += HEX_CHARS[h7 >> 28 & 0x0F] + HEX_CHARS[h7 >> 24 & 0x0F] + HEX_CHARS[h7 >> 20 & 0x0F] + HEX_CHARS[h7 >> 16 & 0x0F] + HEX_CHARS[h7 >> 12 & 0x0F] + HEX_CHARS[h7 >> 8 & 0x0F] + HEX_CHARS[h7 >> 4 & 0x0F] + HEX_CHARS[h7 & 0x0F];
    }

    return hex;
  };

  Sha256.prototype.toString = Sha256.prototype.hex;

  Sha256.prototype.digest = function () {
    this.finalize();
    var h0 = this.h0,
        h1 = this.h1,
        h2 = this.h2,
        h3 = this.h3,
        h4 = this.h4,
        h5 = this.h5,
        h6 = this.h6,
        h7 = this.h7;
    var arr = [h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF];

    if (!this.is224) {
      arr.push(h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF);
    }

    return arr;
  };

  Sha256.prototype.array = Sha256.prototype.digest;

  Sha256.prototype.arrayBuffer = function () {
    this.finalize();
    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    dataView.setUint32(20, this.h5);
    dataView.setUint32(24, this.h6);

    if (!this.is224) {
      dataView.setUint32(28, this.h7);
    }

    return buffer;
  };

  function HmacSha256(key, is224, sharedMemory) {
    var i,
        type = typeof key;

    if (type === 'string') {
      var bytes = [],
          length = key.length,
          index = 0,
          code;

      for (i = 0; i < length; ++i) {
        code = key.charCodeAt(i);

        if (code < 0x80) {
          bytes[index++] = code;
        } else if (code < 0x800) {
          bytes[index++] = 0xc0 | code >> 6;
          bytes[index++] = 0x80 | code & 0x3f;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes[index++] = 0xe0 | code >> 12;
          bytes[index++] = 0x80 | code >> 6 & 0x3f;
          bytes[index++] = 0x80 | code & 0x3f;
        } else {
          code = 0x10000 + ((code & 0x3ff) << 10 | key.charCodeAt(++i) & 0x3ff);
          bytes[index++] = 0xf0 | code >> 18;
          bytes[index++] = 0x80 | code >> 12 & 0x3f;
          bytes[index++] = 0x80 | code >> 6 & 0x3f;
          bytes[index++] = 0x80 | code & 0x3f;
        }
      }

      key = bytes;
    } else {
      if (type === 'object') {
        if (key === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
          key = new Uint8Array(key);
        } else if (!Array.isArray(key)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
    }

    if (key.length > 64) {
      key = new Sha256(is224, true).update(key).array();
    }

    var oKeyPad = [],
        iKeyPad = [];

    for (i = 0; i < 64; ++i) {
      var b = key[i] || 0;
      oKeyPad[i] = 0x5c ^ b;
      iKeyPad[i] = 0x36 ^ b;
    }

    Sha256.call(this, is224, sharedMemory);
    this.update(iKeyPad);
    this.oKeyPad = oKeyPad;
    this.inner = true;
    this.sharedMemory = sharedMemory;
  }

  HmacSha256.prototype = new Sha256();

  HmacSha256.prototype.finalize = function () {
    Sha256.prototype.finalize.call(this);

    if (this.inner) {
      this.inner = false;
      var innerHash = this.array();
      Sha256.call(this, this.is224, this.sharedMemory);
      this.update(this.oKeyPad);
      this.update(innerHash);
      Sha256.prototype.finalize.call(this);
    }
  };

  var exports = createMethod();
  exports.sha256 = exports;
  exports.sha224 = createMethod(true);
  exports.sha256.hmac = createHmacMethod();
  exports.sha224.hmac = createHmacMethod(true);

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha256 = exports.sha256;
    root.sha224 = exports.sha224;

    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/buffer/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/buffer/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function () {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/node-libs-browser/node_modules/buffer/index.js");

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ "./node_modules/simple-cbor/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/simple-cbor/src/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

__export(__webpack_require__(/*! ./serializer */ "./node_modules/simple-cbor/src/serializer.js"));

const value = __importStar(__webpack_require__(/*! ./value */ "./node_modules/simple-cbor/src/value.js"));

exports.value = value;

/***/ }),

/***/ "./node_modules/simple-cbor/src/serializer.js":
/*!****************************************************!*\
  !*** ./node_modules/simple-cbor/src/serializer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const cbor = __importStar(__webpack_require__(/*! ./value */ "./node_modules/simple-cbor/src/value.js"));

const BufferClasses = [ArrayBuffer, Uint8Array, Uint16Array, Uint32Array, Int8Array, Int16Array, Int32Array, Float32Array, Float64Array];

class JsonDefaultCborEncoder {
  // @param _serializer The CBOR Serializer to use.
  // @param _stable Whether or not keys from objects should be sorted (stable). This is
  //     particularly useful when testing encodings between JSON objects.
  constructor(_serializer, _stable = false) {
    this._serializer = _serializer;
    this._stable = _stable;
    this.name = "jsonDefault";
    this.priority = -100;
  }

  match(value) {
    return ["undefined", "boolean", "number", "string", "object"].indexOf(typeof value) != -1;
  }

  encode(value) {
    switch (typeof value) {
      case "undefined":
        return cbor.undefined_();

      case "boolean":
        return cbor.bool(value);

      case "number":
        if (Math.floor(value) === value) {
          return cbor.number(value);
        } else {
          return cbor.doubleFloat(value);
        }

      case "string":
        return cbor.string(value);

      case "object":
        if (value === null) {
          return cbor.null_();
        } else if (Array.isArray(value)) {
          return cbor.array(value.map(x => this._serializer.serializeValue(x)));
        } else if (BufferClasses.find(x => value instanceof x)) {
          return cbor.bytes(value.buffer);
        } else if (Object.getOwnPropertyNames(value).indexOf("toJSON") !== -1) {
          return this.encode(value.toJSON());
        } else if (value instanceof Map) {
          const m = new Map();

          for (const [key, item] of value.entries()) {
            m.set(key, this._serializer.serializeValue(item));
          }

          return cbor.map(m, this._stable);
        } else {
          const m = new Map();

          for (const [key, item] of Object.entries(value)) {
            m.set(key, this._serializer.serializeValue(item));
          }

          return cbor.map(m, this._stable);
        }

      default:
        throw new Error("Invalid value.");
    }
  }

}

exports.JsonDefaultCborEncoder = JsonDefaultCborEncoder;

class ToCborEncoder {
  constructor() {
    this.name = "cborEncoder";
    this.priority = -90;
  }

  match(value) {
    return typeof value == "object" && typeof value["toCBOR"] == "function";
  }

  encode(value) {
    return value.toCBOR();
  }

}

exports.ToCborEncoder = ToCborEncoder;

class CborSerializer {
  constructor() {
    this._encoders = new Set();
  }

  static withDefaultEncoders(stable = false) {
    const s = new this();
    s.addEncoder(new JsonDefaultCborEncoder(s, stable));
    s.addEncoder(new ToCborEncoder());
    return s;
  }

  removeEncoder(name) {
    // Has to make an extra call to values() to ensure it doesn't break on iteration.
    for (const encoder of this._encoders.values()) {
      if (encoder.name == name) {
        this._encoders.delete(encoder);
      }
    }
  }

  addEncoder(encoder) {
    this._encoders.add(encoder);
  }

  getEncoderFor(value) {
    let chosenEncoder = null;

    for (const encoder of this._encoders) {
      if (!chosenEncoder || encoder.priority > chosenEncoder.priority) {
        if (encoder.match(value)) {
          chosenEncoder = encoder;
        }
      }
    }

    if (chosenEncoder === null) {
      throw new Error("Could not find an encoder for value.");
    }

    return chosenEncoder;
  }

  serializeValue(value) {
    return this.getEncoderFor(value).encode(value);
  }

  serialize(value) {
    return this.serializeValue(value);
  }

}

exports.CborSerializer = CborSerializer;

class SelfDescribeCborSerializer extends CborSerializer {
  serialize(value) {
    return cbor.raw(new Uint8Array([// Self describe CBOR.
    ...new Uint8Array([0xd9, 0xd9, 0xf7]), ...new Uint8Array(super.serializeValue(value))]));
  }

}

exports.SelfDescribeCborSerializer = SelfDescribeCborSerializer;

/***/ }),

/***/ "./node_modules/simple-cbor/src/value.js":
/*!***********************************************!*\
  !*** ./node_modules/simple-cbor/src/value.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
const MAX_U64_NUMBER = 0x20000000000000;

function _concat(a, ...args) {
  const newBuffer = new Uint8Array(a.byteLength + args.reduce((acc, b) => acc + b.byteLength, 0));
  newBuffer.set(new Uint8Array(a), 0);
  let i = a.byteLength;

  for (const b of args) {
    newBuffer.set(new Uint8Array(b), i);
    i += b.byteLength;
  }

  return newBuffer.buffer;
}

function _serializeValue(major, minor, value) {
  // Remove everything that's not an hexadecimal character. These are not
  // considered errors since the value was already validated and they might
  // be number decimals or sign.
  value = value.replace(/[^0-9a-fA-F]/g, ""); // Create the buffer from the value with left padding with 0.

  const length = 2 ** (minor - 24
  /* Int8 */
  );
  value = value.slice(-length * 2).padStart(length * 2, "0");
  const bytes = [(major << 5) + minor].concat(value.match(/../g).map(byte => parseInt(byte, 16)));
  return new Uint8Array(bytes).buffer;
}

function _serializeNumber(major, value) {
  if (value < 24) {
    return new Uint8Array([(major << 5) + value]).buffer;
  } else {
    const minor = value <= 0xff ? 24
    /* Int8 */
    : value <= 0xffff ? 25
    /* Int16 */
    : value <= 0xffffffff ? 26
    /* Int32 */
    : 27
    /* Int64 */
    ;
    return _serializeValue(major, minor, value.toString(16));
  }
}

function _serializeString(str) {
  const utf8 = [];

  for (let i = 0; i < str.length; i++) {
    let charcode = str.charCodeAt(i);

    if (charcode < 0x80) {
      utf8.push(charcode);
    } else if (charcode < 0x800) {
      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);
    } else if (charcode < 0xd800 || charcode >= 0xe000) {
      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
    } else {
      // Surrogate pair
      i++;
      charcode = (charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff;
      utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
    }
  }

  return _concat(new Uint8Array(_serializeNumber(3
  /* TextString */
  , str.length)), new Uint8Array(utf8));
}
/**
 * Tag a value.
 */


function tagged(tag, value) {
  if (tag == 0xd9d9f7) {
    return _concat(new Uint8Array([0xd9, 0xd9, 0xf7]), value);
  }

  if (tag < 24) {
    return _concat(new Uint8Array([(6
    /* Tag */
    << 5) + tag]), value);
  } else {
    const minor = tag <= 0xff ? 24
    /* Int8 */
    : tag <= 0xffff ? 25
    /* Int16 */
    : tag <= 0xffffffff ? 26
    /* Int32 */
    : 27
    /* Int64 */
    ;
    const length = 2 ** (minor - 24
    /* Int8 */
    );
    const value = tag.toString(16).slice(-length * 2).padStart(length * 2, "0");
    const bytes = [(6
    /* Tag */
    << 5) + minor].concat(value.match(/../g).map(byte => parseInt(byte, 16)));
    return new Uint8Array(bytes).buffer;
  }
}

exports.tagged = tagged;
/**
 * Set the raw bytes contained by this value. This should only be used with another
 * CborValue, or if you are implementing extensions to CBOR.
 * @param bytes A buffer containing the value.
 */

function raw(bytes) {
  return new Uint8Array(bytes).buffer;
}

exports.raw = raw;
/**
 * Encode a number that is between [0, 23].
 * @param n
 */

function uSmall(n) {
  if (isNaN(n)) {
    throw new RangeError("Invalid number.");
  }

  n = Math.min(Math.max(0, n), 23); // Clamp it.

  const bytes = [(0
  /* UnsignedInteger */
  << 5) + n];
  return new Uint8Array(bytes).buffer;
}

exports.uSmall = uSmall;

function u8(u8, radix) {
  // Force u8 into a number, and validate it.
  u8 = parseInt("" + u8, radix);

  if (isNaN(u8)) {
    throw new RangeError("Invalid number.");
  }

  u8 = Math.min(Math.max(0, u8), 0xff); // Clamp it.

  u8 = u8.toString(16);
  return _serializeValue(0
  /* UnsignedInteger */
  , 24
  /* Int8 */
  , u8);
}

exports.u8 = u8;

function u16(u16, radix) {
  // Force u16 into a number, and validate it.
  u16 = parseInt("" + u16, radix);

  if (isNaN(u16)) {
    throw new RangeError("Invalid number.");
  }

  u16 = Math.min(Math.max(0, u16), 0xffff); // Clamp it.

  u16 = u16.toString(16);
  return _serializeValue(0
  /* UnsignedInteger */
  , 25
  /* Int16 */
  , u16);
}

exports.u16 = u16;

function u32(u32, radix) {
  // Force u32 into a number, and validate it.
  u32 = parseInt("" + u32, radix);

  if (isNaN(u32)) {
    throw new RangeError("Invalid number.");
  }

  u32 = Math.min(Math.max(0, u32), 0xffffffff); // Clamp it.

  u32 = u32.toString(16);
  return _serializeValue(0
  /* UnsignedInteger */
  , 26
  /* Int32 */
  , u32);
}

exports.u32 = u32;

function u64(u64, radix) {
  // Special consideration for numbers that might be larger than expected.
  if (typeof u64 == "string" && radix == 16) {
    // This is the only case where we guarantee we'll encode the number directly.
    // Validate it's all hexadecimal first.
    if (u64.match(/[^0-9a-fA-F]/)) {
      throw new RangeError("Invalid number.");
    }

    return _serializeValue(0
    /* UnsignedInteger */
    , 27
    /* Int64 */
    , u64);
  } // Force u64 into a number, and validate it.


  u64 = parseInt("" + u64, radix);

  if (isNaN(u64)) {
    throw new RangeError("Invalid number.");
  }

  u64 = Math.min(Math.max(0, u64), MAX_U64_NUMBER); // Clamp it to actual limit.

  u64 = u64.toString(16);
  return _serializeValue(0
  /* UnsignedInteger */
  , 27
  /* Int64 */
  , u64);
}

exports.u64 = u64;
/**
 * Encode a negative number that is between [-24, -1].
 */

function iSmall(n) {
  if (isNaN(n)) {
    throw new RangeError("Invalid number.");
  }

  if (n === 0) {
    return uSmall(0);
  } // Negative n, clamped to [1, 24], minus 1 (there's no negative 0).


  n = Math.min(Math.max(0, -n), 24) - 1;
  const bytes = [(1
  /* SignedInteger */
  << 5) + n];
  return new Uint8Array(bytes).buffer;
}

exports.iSmall = iSmall;

function i8(i8, radix) {
  // Force i8 into a number, and validate it.
  i8 = parseInt("" + i8, radix);

  if (isNaN(i8)) {
    throw new RangeError("Invalid number.");
  } // Negative n, clamped, minus 1 (there's no negative 0).


  i8 = Math.min(Math.max(0, -i8 - 1), 0xff);
  i8 = i8.toString(16);
  return _serializeValue(1
  /* SignedInteger */
  , 24
  /* Int8 */
  , i8);
}

exports.i8 = i8;

function i16(i16, radix) {
  // Force i16 into a number, and validate it.
  i16 = parseInt("" + i16, radix);

  if (isNaN(i16)) {
    throw new RangeError("Invalid number.");
  } // Negative n, clamped, minus 1 (there's no negative 0).


  i16 = Math.min(Math.max(0, -i16 - 1), 0xffff);
  i16 = i16.toString(16);
  return _serializeValue(1
  /* SignedInteger */
  , 25
  /* Int16 */
  , i16);
}

exports.i16 = i16;

function i32(i32, radix) {
  // Force i32 into a number, and validate it.
  i32 = parseInt("" + i32, radix);

  if (isNaN(i32)) {
    throw new RangeError("Invalid number.");
  } // Negative n, clamped, minus 1 (there's no negative 0).


  i32 = Math.min(Math.max(0, -i32 - 1), 0xffffffff);
  i32 = i32.toString(16);
  return _serializeValue(1
  /* SignedInteger */
  , 26
  /* Int32 */
  , i32);
}

exports.i32 = i32;

function i64(i64, radix) {
  // Special consideration for numbers that might be larger than expected.
  if (typeof i64 == "string" && radix == 16) {
    if (i64.startsWith("-")) {
      i64 = i64.slice(1);
    } else {
      // Clamp it.
      i64 = "0";
    } // This is the only case where we guarantee we'll encode the number directly.
    // Validate it's all hexadecimal first.


    if (i64.match(/[^0-9a-fA-F]/) || i64.length > 16) {
      throw new RangeError("Invalid number.");
    } // We need to do -1 to the number.


    let done = false;
    let newI64 = i64.split("").reduceRight((acc, x) => {
      if (done) {
        return x + acc;
      }

      let n = parseInt(x, 16) - 1;

      if (n >= 0) {
        done = true;
        return n.toString(16) + acc;
      } else {
        return "f" + acc;
      }
    }, "");

    if (!done) {
      // This number was 0.
      return u64(0);
    }

    return _serializeValue(1
    /* SignedInteger */
    , 27
    /* Int64 */
    , newI64);
  } // Force i64 into a number, and validate it.


  i64 = parseInt("" + i64, radix);

  if (isNaN(i64)) {
    throw new RangeError("Invalid number.");
  }

  i64 = Math.min(Math.max(0, -i64 - 1), 0x20000000000000); // Clamp it to actual.

  i64 = i64.toString(16);
  return _serializeValue(1
  /* SignedInteger */
  , 27
  /* Int64 */
  , i64);
}

exports.i64 = i64;
/**
 * Encode a number using the smallest amount of bytes, by calling the methods
 * above. e.g. If the number fits in a u8, it will use that.
 */

function number(n) {
  if (n >= 0) {
    if (n < 24) {
      return uSmall(n);
    } else if (n <= 0xff) {
      return u8(n);
    } else if (n <= 0xffff) {
      return u16(n);
    } else if (n <= 0xffffffff) {
      return u32(n);
    } else {
      return u64(n);
    }
  } else {
    if (n >= -24) {
      return iSmall(n);
    } else if (n >= -0xff) {
      return i8(n);
    } else if (n >= -0xffff) {
      return i16(n);
    } else if (n >= -0xffffffff) {
      return i32(n);
    } else {
      return i64(n);
    }
  }
}

exports.number = number;
/**
 * Encode a byte array. This is different than the `raw()` method.
 */

function bytes(bytes) {
  return _concat(_serializeNumber(2
  /* ByteString */
  , bytes.byteLength), bytes);
}

exports.bytes = bytes;
/**
 * Encode a JavaScript string.
 */

function string(str) {
  return _serializeString(str);
}

exports.string = string;
/**
 * Encode an array of cbor values.
 */

function array(items) {
  return _concat(_serializeNumber(4
  /* Array */
  , items.length), ...items);
}

exports.array = array;
/**
 * Encode a map of key-value pairs. The keys are string, and the values are CBOR
 * encoded.
 */

function map(items, stable = false) {
  if (!(items instanceof Map)) {
    items = new Map(Object.entries(items));
  }

  let entries = Array.from(items.entries());

  if (stable) {
    entries = entries.sort(([keyA], [keyB]) => keyA.localeCompare(keyB));
  }

  return _concat(_serializeNumber(5
  /* Map */
  , items.size), ...entries.map(([k, v]) => _concat(_serializeString(k), v)));
}

exports.map = map;
/**
 * Encode a single (32 bits) precision floating point number.
 */

function singleFloat(f) {
  const single = new Float32Array([f]);
  return _concat(new Uint8Array([(7
  /* SimpleValue */
  << 5) + 26]), new Uint8Array(single.buffer));
}

exports.singleFloat = singleFloat;
/**
 * Encode a double (64 bits) precision floating point number.
 */

function doubleFloat(f) {
  const single = new Float64Array([f]);
  return _concat(new Uint8Array([(7
  /* SimpleValue */
  << 5) + 27]), new Uint8Array(single.buffer));
}

exports.doubleFloat = doubleFloat;

function bool(v) {
  return v ? true_() : false_();
}

exports.bool = bool;
/**
 * Encode the boolean true.
 */

function true_() {
  return raw(new Uint8Array([(7
  /* SimpleValue */
  << 5) + 21]));
}

exports.true_ = true_;
/**
 * Encode the boolean false.
 */

function false_() {
  return raw(new Uint8Array([(7
  /* SimpleValue */
  << 5) + 20]));
}

exports.false_ = false_;
/**
 * Encode the constant null.
 */

function null_() {
  return raw(new Uint8Array([(7
  /* SimpleValue */
  << 5) + 22]));
}

exports.null_ = null_;
/**
 * Encode the constant undefined.
 */

function undefined_() {
  return raw(new Uint8Array([(7
  /* SimpleValue */
  << 5) + 23]));
}

exports.undefined_ = undefined_;

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/*! exports provided: v1, v3, v4, v5, NIL, version, validate, stringify, parse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/esm-browser/v1.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v1", function() { return _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/esm-browser/v3.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v3", function() { return _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v4", function() { return _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/esm-browser/v5.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v5", function() { return _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/esm-browser/nil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NIL", function() { return _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version", function() { return _version_js__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]; });











/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ __webpack_exports__["default"] = (md5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ __webpack_exports__["default"] = (parse);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rng; });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ __webpack_exports__["default"] = (sha1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ __webpack_exports__["default"] = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ __webpack_exports__["default"] = (v1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/esm-browser/md5.js");


var v3 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v3);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/*! exports provided: DNS, URL, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DNS", function() { return DNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URL", function() { return URL; });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ __webpack_exports__["default"] = (function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = Object(_parse_js__WEBPACK_IMPORTED_MODULE_1__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_0__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ __webpack_exports__["default"] = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ __webpack_exports__["default"] = (validate);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ __webpack_exports__["default"] = (version);

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./source/scripts/Inpage/index.js":
/*!****************************************!*\
  !*** ./source/scripts/Inpage/index.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _psychedelic_browser_rpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @psychedelic/browser-rpc */ "./node_modules/@psychedelic/browser-rpc/dist/esm/index.js");
/* harmony import */ var _psychedelic_plug_inpage_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @psychedelic/plug-inpage-provider */ "./node_modules/@psychedelic/plug-inpage-provider/dist/esm/src/index.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const clientRPC = new _psychedelic_browser_rpc__WEBPACK_IMPORTED_MODULE_0__["BrowserRPC"](window, {
  name: 'plug-inpage-provider',
  target: 'plug-content-script',
  timeout: 20000
});
clientRPC.start();
const plugProvider = new _psychedelic_plug_inpage_provider__WEBPACK_IMPORTED_MODULE_1__["Provider"](clientRPC, window);
const ic = window.ic || {};
plugProvider.init();
/* eslint-disable no-console */

window.ic = _objectSpread(_objectSpread({}, ic), {}, {
  plug: plugProvider
});
/* harmony default export */ __webpack_exports__["default"] = (plugProvider);

/***/ }),

/***/ 0:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,